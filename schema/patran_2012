---------------
ui_button_create(parent,callback,x,y,width,height,label,[unused],highlight)
##########
Description:
Create a button widget.
Input:
widget parent Parent widget of newly created widget. Must be a form.
STRING callback Name of PCL function called for an event in this widget. The function must be in the class in which the widget is created. Use ““ if events for this widget are not of interest.
NUMERIC x X location of widget in inches relative to the parent.
NUMERIC y Y location of widget in inches relative to the parent.
NUMERIC width Width of widget in inches. If zero,the button will be sized automatically to fit the text.
NUMERIC height Height of widget in inches. If zero,the button will be sized automatically to fit the text.
STRING label Text that will be displayed in button.
LOGICAL [unused] Use TRUE.
LOGICAL highlight TRUE if button is highlighted as the default button. Only one button per form may be highlighted as the default.
Output:
widget <Return Value> Button widget ID. NULL if button not created.
Error Conditions:
None.
---------------
ui_buttonicon_create(parent,callback,x,y,icon)
##########
Description:
Create a button icon widget.
Input:
widget parent Parent widget of newly created widget. Must be a form.
STRING callback Name of PCL function called for an event in this widget. The function must be in the class in which the widget is created. Use ““ if events for this widget are not of interest. The first space character in the name/callback signifies that the rest of the string value is the pop-up help for the icon,and delimits the preceding string without the space as the name/callback of the widget.
NUMERIC x X location of widget in inches relative to the parent.
NUMERIC y Y location of widget in inches relative to the parent.
STRING icon Name of the file containing the icon data. Use a !!PATH in your p3midilog.pcl file if this file does not appear along the standard path.
Output:
widget <Return Value> Button widget ID. NULL if button not created.
Error Conditions:
None.
---------------
ui_cascadeitem_create(parent,name,label)
##########
Description:
Creates an item widget to be used to bring up a cascading menu.
Input:
widget parent ID of the parent widget. Must be a menu or popup menu.
STRING name Name of PCL function called for an event in this widget. The function must be in the class in which the widget is created. Use ““ if events for this widget are not of interest.
STRING label Label to be displayed indicating the widgets action. Unlike for ui_item_create(),specifying the label as ““ will not create a separator,but will create a menu item whose label is ““.
Output:
widget <Return Value> Item widget ID. NULL_WIDGET if item not created.
Error Conditions:
None.
---------------
ui_colormenu_create(parent,callback,x,y,width,height,label,label_position,label_x,label_y,color,user_data)
##########
Description:
Create a colormenu.
Input:
widget parent Parent widget ID. Parent widget must be a form,modal form or a frame.
STRING callback Name of the PCL function called when a color from the popup menu,posted from this widget,is selected.
NUMERIC x x location of the widget.
NUMERIC y y location of the widget.
NUMERIC width Wwidth of the widget.
NUMERIC height Height of the widget.
STRING label Widget label.
STRING label_position String specifying the position of the label. The label_position string must be from among the following. “Top”: Place the label at the top of the menu button. “Left”: Place the label at the left of the menu button. “Right”: Place the label at the right of the menu button. “None”: Place the label at the position specified by the label_x and label_y parameters.
NUMERIC label_x x location of the widget label. Used only if label_position is “None”.
NUMERIC label_y y location of the widget label. Used only if label_position is “None”.
INTEGER color Background color of the button. If 1< color < 16 the widget will be assigned the appropriate color from the Patran colors. Otherwise,the widget will show multiple colors to indicate ambiguity or nonuniqueness.
INTEGER user_data Data specific to this widget. This will be passed to the callback function (see below.)
Output:
widget <Return Value> Colormenu widget id. NULL if the widget is not created.
Error Conditions:
None.
---------------
ui_colorbar_create(parent,callback,x,y,width,height,label,ncolors,user_data)
##########
Description:
Create a colormenu.
Input:
widget parent Parent widget ID. Parent widget must be a form,modal form or a frame.
STRING callback Name of the PCL function called when a color button from this widget is selected.
NUMERIC x x location of the widget.
NUMERIC y y location of the widget.
NUMERIC width Width of the widget.
NUMERIC height Height of the widget.
STRING label Widget label.
INTEGER ncolors Numbers of color buttons in the widget. Must be between 1 and 16.
INTEGER user_data Data specific to this widget. This will be passed to the callback function (see below.)
Output:
widget <Return Value> Colorbar widget ID. NULL if the widget is not created.
---------------
ui_cursor_set(mode,cursor)
##########
Description:
Set the window cursor for the assigned windows.
Input:
STRING mode “ALL”,	any window “GRAPHICS”,	Graphics window ”NONGRAPHICS”	,Any non-graphics window ”NONMODAL”,	Non-modal window ”MODAL”,	 Modal window
STRING cursor “dotbox” - Square with dot in it. “cross” - Cross hair “left_ptr” - Hand pointing
Output:
None.
Error Conditions:
None.
---------------
ui_databox_create(parent,callback,x,y,label_length,box_length,label,value,label_above,datatype,num_vals)
##########
Description:
Creates a databox widget
Input:
widget parent Parent widget ID. May be a form or a scroll frame.
STRING callback Name of PCL function called for an event in this widget. The function must be in the class in which the widget is created. Use ““ if events for this widget are not of interest.
NUMERIC x X location of the databox in inches relative to the parent.
NUMERIC y Y location of the databox in inches relative to the parent.
NUMERIC label_length Used only if label_above is FALSE. Distance between the beginning of the label and the beginning of the box,in inches. If zero,the length of the label string will be used. Specifying the label_length is useful when lining up several databoxes.
NUMERIC box_length Length of the box in inches.
STRING label Displayed text describing the value associated with the databox. To have no label initially but plan on using ui_wid_set()to change the label,assign label to be “ “. If not assigning a label,use ““ and set label_above to FALSE.
DYNAMIC value Value displayed inside the databox. This value is of the datatype specified. If the databox is to be empty upon startup,specify ““as the initial value for all datatypes.
LOGICAL label_above TRUE is the label is to be displayed above of the databox,FALSE if the label is to be displayed to the left of the databox.
STRING datatype Type of data to accept. “INTEGER,” “REAL,” or “STRING.” All values must be of the same datatype.
INTEGER num_vals Upper limit of the number of values of type datatype to accept. If “STRING” is the assigned datatype,this value is ignored.
Output:
widget <Return Value> Widget ID. NULL if the widget could not be created.
Error Conditions:
None.
---------------
ui_databox_get_current()
##########
Description:
Get the current databox which has focus.
Input:
None.
Output:
widget <Return Value>
Error Conditions:
None.
---------------
ui_exec_function(classname,functionname)
##########
Description:
Invokes a class's function. This function should be used to properly register a class containing a ui_form_create()call by calling ui_exec_function(classname,“DISPLAY”). If the INIT function is called improperly using a classname.init()call,problems will occur when attempting to display the form. By using ui_exec_function()to initialize and display forms,problems will be avoided.
Input:
STRING classname Name of the class containing the function to be executed.
STRING functionname Name of the function to be executed.
Output:
None.
Error Conditions:
None.
---------------
ui_file_create(parent_id,callback_func,x_location,y_location,width,number_rows,filter_label,filter_mask,directory_label,files_label,selection_label,file_name,ok_label,filterbutton_label,cancel_label)
##########
Description:
This function will create a file selection form.
Input:
widget parent_id This value specifies a widget identifier for the parent widget of this form.
STRING callback_func[] This value specifies the name of the PCL function that will be called for an event representing a form event. This call back function must be a member of the class in which this widget is created.
REAL x_location This value specifies the x axis location of the file widget in pixels relative to the upper left corner of the parent widget.
REAL y_location This value specifies the y axis location of the file widget in pixels relative to the upper left corner of the parent widget.
REAL width This value specifies the width of the widget in pixels,excluding the border.
INTEGER number_rows This value specifies the number of rows that will be displayed in files and directory list boxes of the form.
STRING filter_label[] This value specifies the title used on the form to describe the filter databox.
STRING filter_mask[] This value specifies the path and filter mask that determines which files will be displayed in the file list box.
STRING directory_label[] This value specifies the text used on the form to describe the directory databox.
STRING files_label[] This value specifies the text used on the form to describe the files databox.
STRING selection_label[] This value specifies the text used on the form to describe the selection databox.
STRING file_name[] This value specifies a file name to be displayed in the selection databox. If the file name specified is listed in the file list box the file list box entry will be highlighted.
STRING ok_label[] This value specifies the text used to label the “OK” button.
STRING filterbutton_label[] This value specifies the text used to label the “Filter” button.
STRING cancel_label[] This value specifies the text used to label the “Cancel” button.
Output:
widget <Return Value> This function returns avalid form widget identifier when executed successfully and a value on WIDGET_NULL to indicate a change an error.
Error Conditions:
None.
---------------
ui_form_create(callback,x,y,position,width,height,label,options)
##########
Description:
Create a form widget.
Input:
STRING callback Name of PCL function called for an event in this widget. Use ““ since forms do not register events.
NUMERIC x X location of the form in inches relative to the screen.
NUMERIC y Y location of the form in inches relative to the screen.
STRING position Indicates which corners of the screen and form to use when measuring the x and y locations. Options: “UL,” “UR,” “LL” and “LR” for upper-left,upper-right,lower-left,and lower-right,respectively.
NUMERIC width Width of the form in inches.
NUMERIC height Height of the form in inches.
STRING label Label to appear in title bar.
INTEGER options This is an optional argument and it sets the style of form widget based on the integer value provided. The integer values with their corresponding bits and associated styles are listed below: •	 Value = 0 to3 - for various gravity options to set different shell screen alignment:
---------------
ui_form_delete(classname)
##########
Description:
Delete a form widget.
Input:
STRING classname Name of the class containing the definition of the form to be deleted.
Output:
None.
Error Conditions:
None.
---------------
ui_form_display(classname)
##########
Description:
Displays a form defined in class classname and all of its visible children.
Input:
STRING classname Name of the class containing the definition of the form to be displayed.
Output:
None.
Error Conditions:
None.
---------------
ui_form_hide(classname)
##########
Description:
Hides a form defined in class classname and all of its children.
Input:
STRING classname Name of the class containing the definition of the form to be hidden.
Output:
None.
Error Conditions:
None.
---------------
ui_form_to_file(classname,level)
##########
Description:
Given the string classname as the name of a class which has a form currently displayed,this function will create a file classname.fd.version file which contains the form and widget descriptions.
Input:
STRING classname Classname which contains form of interest.
INTEGER level Optional and defaults to 0.
Output:
<Return Value>
Error Conditions:
None.
---------------
ui_form_to_frame(classname,scale)
##########
Description:
Given the string classname as the name of a class which has a form currently displayed,this function will create a framemaker file classname.mif file which contains the form at a scale factor of scale.
Input:
STRING classname Name of the PCL class containing the form to be used.
INTEGER scale Scale factor for translation. Optional and defaults to 1.0.
Output:
None.
Error Conditions:
None.
---------------
ui_framemaker(option[,scale])
##########
Description:
Set automatic framemaker generation. If option is 1,whenever ui_form_display()is called,the classname is echoed to the history window. This gives you the classname in order to type a ui_form_to_frame()command. If option is 2,then whenever ui_form_display()is called,the name of the class is echoed,and a call is automatically made to ui_form_to_frame()with the specified scale factor. If option is 0,then ui_form_display()reverts back to normal operation.
Input:
INTEGER option Specifies how the function works. See Description above.
REAL scale Scale factor for translation. Optional and defaults to 1.0.
Output:
None.
Error Conditions:
None.
---------------
ui_frame_create(parent,callback,x,y,width,height,label,options)
##########
Description:
Creates a frame widget.*
Input:
widget parent ID of the parent widget. Must be a form,modalform,or window
STRING callback Name of the PCL function called for an event in this widget. Use ““ since frames are not registering events.
NUMERIC x X location of the frame in inches relative to its parent.
NUMERIC y Y location of the frame in inches relative to its parent.
NUMERIC width Width of the frame in inches.
NUMERIC height Height of the frame in inches.
STRING label Label to appear describing the contents of the frame.
INTEGER options Optional argument defaults to 0. FRAME_CANRESIZE(1)- Allow resizable frames.
Output:
widget <Return Value> Item widget ID. NULL if frame not created.
Error Conditions:
None.
---------------
ui_item_create(parent,name,label,toggleable,options)
##########
Description:
Creates an item widget to be used as a child of a menu,menubar,option menu,or switch widget. To create items in a listbox see ui_listbox_items_create,353.
Input:
widget parent ID of the parent widget. Must be a menu,popup menu,menubar,option menu,listbox,or a switch.
STRING name Name of the widget. This name is frequently used as an argument for the callback function for the item's parent.
STRING label Label to be displayed indicating the widget’s action. If label is “ ”
LOGICAL toggleable Value used only for menu items; ignored if the item is not a menu item. If TRUE,the item will display a toggle box next to the item. If FALSE,the item will have only one value.
INTEGER options Optional argument with default value of 0 can be the sum of a combination of the following values and are ignored if the parent is the wrong type: 	MNUITEM_HAS_UNIQUE_CB(1)- Menu item has unique callback specified in the name argument above. MNUITEM_SYMBL_1OFN(4)- The toggle item has a 1-of-many(diamond)symbol. This specification is required only for menu toggle items where by default they will have the N-of-many(square)symbol. To imitate switch-like behavior you are required to implement it the menu’s PCL callback function. MNUITEM_ISLABL(8)- Menu item is a label.
Output:
widget <Return Value> Item widget ID. NULL if item not created.
Error Conditions:
None.
---------------
ui_item_delete(listbox_id,item_id)
##########
Description:
Deletes a listbox item from it’s parent listbox.
Input:
widget listbox_id Item's parent listbox.
widget item_id Item's ID.
Output:
None.
Error Conditions:
None.
---------------
ui_item_deleteall(parent)
##########
Description:
Deletes all items from it’s parent. The parent must be a listbox or an option menu.
Input:
widget listbox_id Item's parent. Must be a listbox or an option menu.
Output:
None.
Error Conditions:
None.
---------------
ui_item_deleteselected(listbox_id)
##########
Description:
Deletes selected items from a listbox.
Input:
widget listbox_id Listbox from which selected items are to be deleted.
Output:
None.
Error Conditions:
None.
---------------
ui_item_display(item)
##########
Description:
Displays a menu item,a switch item,or an option menu item after a call to ui_item_hide().
Input:
widget item Item widget ID to be displayed.
Output:
None.
Error Conditions:
None.
---------------
ui_item_hide(item)
##########
Description:
Hides a menu item,a switch item,or an option menu item.
Input:
widget item Item widget ID to be hidden.
Output:
None.
Error Conditions:
None.
---------------
ui_item_idfromlabel(parent,label)
##########
Description;
Returns the item's ID given it's parent and it's label.
Input:
widget parent Item's parent.
STRING label Item's label.
Output:
widget <Return Value> Item's ID.
Error Conditions:
None.
---------------
ui_item_labelfromname(parent,name,label)
##########
Description:
Outputs the item's label givens it’s parent and it’s name.
Input:
widget parent Item's parent.
STRING name Item's name.
Output:
STRING label Item's label.
Error Conditions:
None.
---------------
ui_item_namefromlabel(parent,label,name)
##########
Description:
Outputs the item's name givens it’s parent and it’s label.
Input:
widget parent Item's parent.
STRING label Item's label.
Output:
STRING name Item's name.
Error Conditions:
None.
---------------
ui_item_relabel(listbox_id,old_label,new_label)
##########
Description:
Replaces an old string for a listbox item with a new string.
Input:
widget listbox_id Listbox containing the string to be replaced.
STRING old_label String to be replaced.
STRING new_label New label.
Output:
None.
Error Conditions:
None.
---------------
ui_itemicon_create(parent,name,iconname,toggleable,options)
##########
Description:
Creates an icon item widget to be used as a child of a menu,or switch widget.
Input:
widget parent ID of the parent widget. Must be a menu,menubar,or a switch.
STRING name Name of the widget. This name is frequently used as an argument for the callback function for the item's parent. The first space character in the name/callback signifies that the rest of the string value is the pop-up help for the icon,and delimits the preceding string without the space as the name/callback of the widget.
STRING iconname Name of the file containing the hex information that is used to describe the icon.
LOGICAL toggleable Value used only for menu items; ignored if the item is not a menu item. If TRUE,the item will display a toggle box next to the item. If FALSE,the item will behave as a (push)button if it is not used as the parent for a (cascading)menu.
INTEGER options Optional argument with default value of 0 can be the sum of a combination of the following values and are ignored if the parent is the wrong type: MNUITEM_HAS_UNIQUE_CB(1)- Menu item has unique callback specified in the name argument above. MNUITEM_ISTOGL(2)- The item is a toggle. If specified overrides the value of the toggleable argument.)MNUITEM_SYMBL_1OFN(4)- The toggle item has a 1-of-many(diamond)symbol. This specification is required only for menu toggle items where by default they will have the N-of-many(square)symbol. To imitate switch-like behavior you are required to implement it the menu’s PCL callback function. MNUITEM_ISLABL(8)- Menu item is a (title)label.
Output:
widget <Return Value> Item widget ID. NULL if item not created.
Error Conditions:
None.
---------------
ui_label_create(parent,callback,x,y,label)
##########
Description:
Create a label widget
Input:
widget parent Parent widget of newly created widget. Must be a frame,a form,or a modal form.
STRING callback Not used. However,on Windows after the creation of the label widget,ui_wid_set(wid_idfunction can be called to set a callback that will make a label function like a button. wid_idfunction
NUMERIC x X location of the widget in inches relative to the parent.
NUMERIC y Y location of the widget in inches relative to the parent.
STRING label Text to be displayed.
Output:
widget <Return Value> Label widget ID. NULL if label not created.
Error Conditions:
None.
---------------
ui_labelicon_create(parent,callback,x,y,iconname)
##########
Description:
Create a label icon widget
Input:
widget parent Parent widget of newly created widget. Must be a frame,a form,or a modal form.
STRING callback Not used.
NUMERIC x X location of the widget in inches relative to the parent.
NUMERIC y Y location of the widget in inches relative to the parent.
STRING iconname Name of the file containing the hex information describing the icon. The file must be in the path described by the !!PATH directive assigned during session initialization.
Output:
widget <Return Value> Label widget ID. NULL if label not created.
Error Conditions:
None.
---------------
ui_listbox_create(parent,callback,x,y,width,num_rows,label,selection_type,sort)
##########
Description:
Create a listbox widget
Input:
widget parent Parent widget of newly created widget. Must be a frame,a form,or a modal form.
STRING callback Name of the PCL function called for an event in this widget. The function must be in the class in which the widget is created. Use ““ if events in this widget are not of interest.
NUMERIC x X location of the widget in inches relative to the parent.
NUMERIC y Y location of the widget in inches relative to the parent.
NUMERIC width Width of the listbox in inches.
INTEGER num_rows Number of rows of items displayed in the listbox.
STRING label Label displayed to describe the listbox.
STRING selection_type “BROWSE”,“EXTEND”,“MULTIPLE”,or “SINGLE”. See selection_type Modes,352.
LOGICAL sort TRUE if the items should be sorted alphabetically,FALSE if not.
Output:
widget <Return Value> Widget ID of listbox widget. NULL if not created.
Error Conditions:
None.
---------------
ui_listbox_items_create(listbox,names,labels,num_items,wid_array)
##########
Description:
Create items in a listbox. This routine differs from ui_item_create by creating items in a listbox from an array of labels. The result is that items are created much faster with this routine than by creating them one at a time. This call ignores the DUPLICATEITEM resource setting of the listbox. The caller of this function is responsible for eliminating duplicate items when necessary.
Input:
widget listbox Listbox ID returned from the ui_listbox_create()call containing the items to be selected.
STRING[]()names Names of the widgets to be created in the listbox. These are frequently used as arguments for the callback function for the item’s parent.
STRING[]()labels Labels to be displayed indicating the widgets action.
INTEGER num_items Number of items in listbox.
Output:
WIDGET()wid_array Array that will contain the uims widgets created for each label. If uims widgets are not needed,pass the global WIDGET_NULL instead of wid_array
INTEGER <Return Value> Status. 0 if no error occurred,1 otherwise.
Error Conditions:
None.
---------------
ui_listbox_items_delete(listbox)
##########
Description:
Delete all items contained in the listbox.
Input:
widget listbox Listbox ID returned from the ui_listbox_create()call containing the items to be deleted.
Output:
None.
Error Conditions:
None.
---------------
ui_listbox_select_items(listbox,start,num_items)
##########
Description:
Select all items contained in the listbox.
Input:
widget listbox Listbox ID returned from the ui_listbox_create()call containing the items to be selected.
INTEGER start Starting position of items to select.
INTEGER num_items Number of items in listbox to select.
Output:
None.
Error Conditions:
None.
---------------
ui_list_select_nitems(listbox,item_labels,start,num_items)
##########
Description:
Select items specified in the listbox.
Input:
widget listbox Listbox ID returned from the ui_listbox_create()call containing the items to be deleted.
STRING ARRAY item_labels Array of item labels.
INTEGER start Starting position of item labels to select.
INTEGER num_items Number of item labels from start
Output:
None.
Error Conditions:
None.
---------------
ui_listbox_unselectall(listbox)
##########
Description:
Unselect all items contained in the listbox.
Input:
widget listbox Listbox ID returned from the ui_listbox_create()call containing the items to be deleted.
Output:
None.
Error Conditions:
None.
---------------
ui_menu_create(parent,callback,label,options)
##########
Description:
Create a menu widget.
Input:
widget parent Parent widget of a newly created widget. The parent must be a cascade_item or a menubar. The Patran menubar ID can be determined by calling menubar = uil_primary.get_menubar_id().
STRING callback Name of PCL function called for an event in this widget. The function must be in the class in which the widget is created. Use ““ if events in this widget are not of interest.
STRING label Label that will be displayed in menubar.
INTEGER options Optional argument defaults to 0. It can have a sum of the following values: MENU_IS_SWITCH(4)- Menu behaves like a switch. MENU_HAS_NO_CB(8)- Each menu item has its own callback. The optional argument values are defined in ui_options.p
Output:
widget <Return Value> Menu widget ID. NULL if menu not created.
Error Conditions:
None.
---------------
ui_modalform_create(name,x,y,position,width,height,[unused],options)
##########
Description:
Create a modal form widget.
Input:
STRING name Name of the modal form.
NUMERIC x X location of the form in inches relative to the screen.
NUMERIC y Y location of the form in inches relative to the screen.
STRING position Indicates which corners of the screen and modal form to use when measuring the x and y locations. Options include “UL”,“UR”,“LL”,and “LR”.
NUMERIC width Width of the modal form in inches.
NUMERIC height Height of the modal form in inches.
STRING [unused] Unused. Specify ““.
INTEGER options Optional argument defaults to 0. MODAL_LOC_ISFIXED(8)- Uses the location specified to position the modal dialog form. Without this option the form is placed centered at the mouse pointer location.
Output:
widget <Return Value> Modal form widget ID. NULL if modal form not created.
Error Conditions:
None.
---------------
ui_optionmenu_create(parent,callback,x,y,label_length,label,label_above)
##########
Description:
Create a option menu widget.
Input:
widget parent Parent ID. Must be a frame,a window,a form or a modal form.
STRING callback Name of PCL function called for an event in this widget. The function must be in the class in which the widget is created. Use ““ if events in this widget are not of interest.
NUMERIC x X location in inches relative to the parent.
NUMERIC y Y location in inches relative to the parent.
NUMERIC label_length Length of the space between the beginning of the label and the option menu button. Used only if label_above is FALSE. If 0.,the actual length of the label will be used.
STRING label Label to appear describing the option menu.
LOGICAL label_above TRUE if the label is to appear above the menu. FALSE if the label is to appear to the left of the menu.
Output:
widget <Return Value> Option menu widget ID. NULL if the option menu was not created.
Error Conditions:
None.
---------------
pcntcomplete_close()
##########
Description:
Remove the percent complete form from the screen.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
pcntcomplete_init(message)
##########
Description:
Display the percent complete form and assign the message to be displayed.
Input:
STRING[256] message Message to be displayed describing the operation that is being performed.
Output:
None.
Error Conditions:
None.
---------------
pcntcomplete_update(new_pcnt)
##########
Description:
Update the value indicated in the slidebar in the percent complete form.
Input:
REAL new_pcnt The new value to be displayed. This value should be between 0. and 100.,inclusive. If new_pcnt is less than 0.,the UIMS will reassign the value to 0. If new_pcnt is greater than 100.,the UIMS will reassign the value to 100. Although there is nothing stopping the PCL developer from counting from 100 to 0,it would be more intuitive to count up.
Output:
None.
Error Conditions:
None.
---------------
ui_ring_bell(new_pcnt)
##########
Description:
Rings bell.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
ui_c_popupmenu(parent,callback,options)
##########
Description:
Create a menu widget.
Input:
widget parent Should be a NULL widget if popup menu is created. Should be a widget of type created using UI_CASCADEITEM_CREATE if submenu is created.
STRING callback Name of PCL function called for an event in this widget. The function must be in the class in which the widget is created. Use ““ if events in this widget are not of interest.
INTEGER options Optional argument defaults to 0. It can have a sum of the following values: MENU_IS_SWITCH(4)- Menu behaves like a switch. MENU_HAS_NO_CB(8)- Each menu item has its own callback. The optional argument values are defined in ui_options.p
Output:
widget <Return Value> Menu widget ID. NULL if menu not created.
Error Conditions:
None.
---------------
ui_post_popupmenu(wid)
##########
Description:
Create a menu widget.
Input:
widget wid The variable of type WIDGET created using UI_C_POPUPMENU().
Output:
widget <Return Value> None.
Error Conditions:
None.
---------------
ui_scrollframe_create(parent,callback,x,y,width,height,label,working_width,working_height,needstaticscrolls)
##########
Description:
Create a frame widget that scrolls.
Input:
widget parent Parent widget ID of newly created widget. Must be form,modalform,or window.
STRING callback Name of PCL function called for an event in this widget. The function must be in the class in which the widget is created. Use ““ since frames are not registering events.
NUMERIC x X location of the scrollframe in inches relative to parent
NUMERIC y Y location of the scrollframe in inches relative to parent.
NUMERIC width Width of the scrollframe in inches.
NUMERIC height Height of the scrollframe in inches.
STRING label Label to appear describing the contents of the frame.
NUMERIC working_width Width of the scrollable area inside of the scrollframe on which widgets are placed,in inches.
NUMERIC working_height Height of the scrollable area inside of the scrollframe on which widgets are placed,in inches.
LOGICAL needstaticscrolls Optional argument defaults to TRUE. Set to FALSE,whenever scrolls are to be displayed only when required.
Output:
widget <Return Value> ID of the created scrollframe widget. NULL if the scrollframe is not created properly.
Error Conditions:
None.
---------------
ui_scrollitem_setvisible(parent,item,lrMargin,tbMargin)
##########
Description:
Make an invisible or partially visible scrollframe item visible.
Input:
widget parent Parent widget ID. Must be a scroll frame.
widget item Item widget ID. Must be a descendent of scroll frame parent
INTEGER lrMargin Margin to use between left or right edge of the itemparent
INTEGER tbMargin Margin to use between top or bottom edge of the itemparent
Output:
None.
Error Conditions:
None.
---------------
ui_selectdatabox_create(parent,name,x,y,label_width,box_width,label,cvalue,label_above,datatype,prompt,pick_callback)
##########
Description:
Creates a select databox widget.
Input:
WIDGET parent Parent WIDGET ID. Must be a select frame.
STRING name Name of the data box. See Widget Function Descriptions,265 for more information.
NUMERIC x X location of the databox in inches relative to parent
NUMERIC y Y location of the databox in inches relative to parent.
NUMERIC label_width Used only if label_above is FALSE. Distance between the beginning of the label and the beginning of the box,in inches. If zero,the length of the label string will be used. Specifying the label_width is useful when lining up several databoxes.
NUMERIC box_width Width of the box in inches.
STRING label Displayed text describing the value associated with the databox. To have no label initially but plan on using ui_wid_set()to change the label,assign label to be “ “. If not assigning a label,use ““ and set label_above to FALSE.
STRING cvalue Value displayed inside the databox. This value is of the datatype specified.
LOGICAL label_above TRUE is the label is to be displayed above of the databox,FALSE if the label is to be displayed to the left of the databox.
STRING datatype Type of data to accept. For specific types,see Comments section.
STRING prompt The prompt that will appear in the text widget in the select menu when the select databox is expecting selecting to occur.
STRING pick_callback This argument is optional. Name of PCL function called for an event in this widget. The function must be in the class in which the widget is created. Use ““ if events for this widget are not of interest.
Output:
widget <Return Value> Widget ID. NULL if the widget could not be created.
Error Conditions:
None.
---------------
ui_selectframe_create(parent,callback,x,y,width,height,label,recycle)
##########
Description:
Create a select frame widget. This widget is used to visually and functionally group select databoxes.
Input:
widget parent Parent widget ID of newly created widget. Must be form.
STRING callback The callback function assigned will only be called when: (1)the toggle is set to ON,and (2)the last select databox in this select frame has just been filled with a list created using the select mechanism. Typically,this callback will be the function called for the action button for a form.
NUMERIC x X location of the frame in inches relative to parent
NUMERIC y Y location of the frame in inches relative to parent.
NUMERIC width Width of the frame in inches.
NUMERIC height Height of the frame in inches.
STRING label Label of toggle describing the automatic traversal functionality. This toggle will indicate whether the select databoxes are to be automatically traversed. If the label is ““,the toggle will not be visible.
LOGICAL recycle TRUE if the first databox in the frame is to regain input focus after the last databox in the frame loses input focus otherwise focus remains in the last databox.
Output:
widget <Return Value> ID of the created frame widget. NULL if the frame is not created properly.
Error Conditions:
None.
---------------
ui_separator_create(parent,name,x,y,length,horizontal)
##########
Description:
Create a separator widget.
Input:
widget parent Parent widget ID of newly created widget. Must be a frame,a form,or a modal form.
STRING name Name of the separator.
NUMERIC x X location of the widget in inches relative to parent
NUMERIC y Y location of the widget in inches relative to parent.
NUMERIC length Length of the widget in inches.
LOGICAL horizontal TRUE if separator is horizontally oriented,FALSE if separator is vertically oriented.
Output:
widget <Return Value> Separator widget ID. NULL if widget is not created
Error Conditions:
None.
---------------
ui_set_fixedfont(wid)
##########
Description:
Set the global fixed font for a widget.
Input:
widget wid Widget ID.
Output:
INTEGER <Return Value> 1 if successful,0 if font is not set.
Error Conditions:
None.
---------------
ui_set_focus(wid)
##########
Description:
Set the input focus for a widget
Input:
widget wid Widget ID to set focus ON.
Output:
None.
Error Conditions:
None.
---------------
ui_slidebar_create(parent,callback,x,y,length,label,value,num_digits,horizontal,minlabel,maxlabel,show_value,minvalue,maxvalue)
##########
Description:
Create a slide bar widget.
Input:
widget parent Parent widget ID of newly created widget. Must be a frame,a form,or a modal form.
STRING callback Name of PCL function called for an event in this widget. The function must be in the class in which the widget is created. Use ““ if events for this widget are not of interest.
NUMERIC x X location of the widget in inches relative to parent
NUMERIC y Y location of the widget in inches relative to parent.
NUMERIC length Length of the widget in inches.
STRING label Label to appear describing the slidebar.
NUMERIC value Current value of the slidebar.
INTEGER num_digits Number of digits beyond the decimal to display.
LOGICAL horizontal TRUE if separator is horizontally oriented,FALSE if separator is vertically oriented.
STRING minlabel Label to appear at the minimum end of the slidebar.
STRING maxlabel Label to appear at the maximum end of the slidebar.
LOGICAL show_value TRUE if slidebar value is to be displayed adjacent to the slidebar value indicator.
NUMERIC minvalue Minimum value the slidebar will allow.
NUMERIC maxvalue Maximum value the slidebar will allow.
Output:
widget <Return Value> Slidebar widget ID. NULL if widget is not created.
Error Conditions:
None.
---------------
ui_spread_cell_delete(wid,col,row,lay)
##########
Description:
Delete a spreadsheet cell
Input:
widget wid Spreadsheet widget ID.
INTEGER col Column number
INTEGER row Row number
INTEGER lay Layer number
Output:
widget <Return Value> Separator widget ID. NULL if widget is not created
Error Conditions:
None.
---------------
ui_spread_cells_delete(wid,fr_col,fr_row,to_col,to_row,lay)
##########
Description:
Delete a block of spreadsheet cells
Input:
widget wid Spreadsheet widget ID.
INTEGER fr_col Starting column
INTEGER fr_row Starting row
INTEGER to_col Ending column
INTEGER to_row Ending row
INTEGER lay Layer
Output:
None.
Error Conditions:
None.
---------------
ui_spread_create(parent,callback,x,y,width,height,label_width,num_vis_cols,num_cols,num_rows,num_layers,col_labels,row_labels,label,layer_label,layer_value_label,selection_type)
##########
Description:
Creates a spreadsheet widget.
Input:
widget parent Parent widget ID of newly created widget. Must be a frame,a form,or a modal form.
INTEGER callback Name of PCL function called for an event in this widget. The function must be in the class in which the widget is created. Use ““ if events for this widget are not of interest. See comments below.
NUMERIC x X location of spreadsheet in inches relative to the parent.
NUMERIC y Y location of spreadsheet in inches relative to the parent.
NUMERIC width Width of the spreadsheet in inches.
NUMERIC height Height of the spreadsheet in inches.
NUMERIC label_width Width of the row labels in inches.
INTEGER num_vis_cols Number of visible columns.
INTEGER num_cols Total number of columns.
INTEGER num_rows Total number of rows.
INTEGER num_layers Total number of layers.
STRINGARRAY col_labels 2D array of column labels,(columns,layers).
STRINGARRAY row_labels 2D array of row labels,(rows,layers).
STRING label Spreadsheet label.
STRING layer_label Layer databox label (for 3D).
STRING layer_value_label Layer value databox label (for 3D).
STRING selection_type “SINGLE”,“ROWSELECT”,“EXTEND”,“READONLY”. See comments below.
Output:
widget <Return Value> Widget ID of spreadsheet widget. NULL if not created.
Error Conditions:
None.
---------------
ui_spread_get_cell(widget_id,col,row,layer,value)
##########
Description:
Get a spreadsheet cell.
Input:
widget widget_id Must be a spreadsheet.
INTEGER col Column to retrieve.
INTEGER row Row to retrieve.
INTEGER layer Layer to retrieve.
Output:
STRING value Value in cell.
Error Conditions:
None.
---------------
ui_spread_get_cell_info(widget_id,col,row,layer,value)
##########
Description:
Gets a spreadsheet cell information dot.
Input:
widget widget_id Must be a spreadsheet.
INTEGER col Column to access.
INTEGER row Row to access.
INTEGER layer Layer to access.
Output:
LOGICAL value TRUE or FALSE if dot is set or not.
Error Conditions:
None.
---------------
ui_spread_get_cell_length(widget_id,col,row,layer,length)
##########
Description:
Gets the number of visible characters in a spreadsheet cell.
Input:
widget widget_id Must be a spreadsheet.
INTEGER col Column to retrieve.
INTEGER row Row to retrieve.
INTEGER layer Layer to retrieve.
Output:
INTEGER length Number of visible characters in cell.
Error Conditions:
None.
---------------
ui_spread_get_layer_value(widget_id,layer,value)
##########
Description:
Gets a layer value from a 3D spreadsheet.
Input:
widget widget_id Must be a spreadsheet.
INTEGER layer Layer to requested.
Output:
STRING value Value of the given layer as displayed in the layer value databox.
Error Conditions:
None.
---------------
ui_spread_get_num_vis_rows(wid,num_vis_rows)
##########
Description:
Get a spreadsheet number of visible rows.
Input:
widget wid Spreadsheet widget ID.
Output:
INTEGER num_vis_rows Number of visible rows.
Error Conditions:
None.
---------------
ui_spread_get_selected(widget_id,from_col,from_row,to_col,to_row,layer)
##########
Description:
Retrieves the starting and ending column and row positions and layer for the currently selected (highlighted)cells of a given spreadsheet.
Input:
widget widget_id Must be a spreadsheet.
Output:
INTEGER from_col Starting column.
INTEGER from_row Starting row.
INTEGER to_col Ending column.
INTEGER to_row Ending row.
INTEGER layer Layer.
Error Conditions:
None.
---------------
ui_spread_get_top_row(widget_id,top_row)
##########
Description:
Gets the top visible row number of a spreadsheet.
Input:
widget widget_id Must be a spreadsheet.
Output:
INTEGER top_row Row to get.
Error Conditions:
None.
---------------
ui_spread_row_create(widget_id,label)
##########
Description:
Add a spreadsheet row.
Input:
widget widget_id Must be a spreadsheet.
STRING label Row label.
Output:
None.
Error Conditions:
None.
---------------
ui_spread_row_delete(widget_id,row_num)
##########
Description:
Delete a spreadsheet row.
Input:
widget widget_id Must be a spreadsheet.
INTEGER row_num Row number to be deleted.
Output:
None.
Error Conditions:
None.
---------------
ui_spread_set_cell(widget_id,col,row,layer,value)
##########
Description:
Sets a spreadsheet cell.
Input:
widget widget_id Must be a spreadsheet.
INTEGER col Column to access.
INTEGER row Row to access.
INTEGER layer Layer to access.
STRING value Value to be set.
Output:
None.
Error Conditions:
None.
---------------
ui_spread_set_cells(wid,fr_col,fr_row,to_col,to_row,lay,values)
##########
Description:
Set multiple spreadsheet cell contents.
Input:
widget widget_id Spreadsheet widget ID.
INTEGER fr_col Start column.
INTEGER fr_row Start row.
INTEGER to_col End column.
STRING to_row End row.
INTEGER lay Layer.
STRINGARRAY values Data to display in cells.
Output:
None.
Error Conditions:
None.
---------------
ui_spread_set_cell_info(widget_id,col,row,layer,value)
##########
Description:
Sets a spreadsheet cell information dot.
Input:
widget widget_id Must be a spreadsheet.
INTEGER col Column to access.
INTEGER row Row to access.
INTEGER layer Layer to access.
STRING value TRUE or FALSE to display or hide the dot.
Output:
None.
Error Conditions:
None.
---------------
ui_spread_set_display(parent,state)
##########
Description:
Modify the display state of the spreadsheet.
Input:
widget parent Spreadsheet widget ID.
STRING state Determines the display characteristics of a spreadsheet: “COL_ROW_LINE” - Draw heavy lines after the first row and column. ”COL_LINE” - Heavy line after first column. “ROW_LINE”- Heavy line after first row. ““- Default (No heavy lines).
Output:
None.
Error Conditions:
None.
---------------
ui_spread_set_label(widget_id,col_row,index,layer,label)
##########
Description:
Sets a spreadsheet column or row label.
Input:
widget widget_id Must be a spreadsheet.
INTEGER col_row 1 for col,2 for row.
INTEGER index Column or row number.
INTEGER layer Layer to set.
STRING label Label to set.
Output:
None.
Error Conditions:
None.
---------------
ui_spread_set_layer_value(widget_id,layer,value)
##########
Description:
Sets a layer value of a 3D spreadsheet.
Input:
widget widget_id Must be a spreadsheet.
INTEGER layer Layer to set.
STRING value Value to be set.
Output:
None.
Error Conditions:
None.
---------------
ui_spread_set_selected(widget_id,from_col,from_row,to_col,to_row)
##########
Description:
Selects(highlights)the starting and ending column and row positions for the currently visible layer of a given spreadsheet.
Input:
widget widget_id Must be a spreadsheet.
INTEGER from_col Starting column.
INTEGER from_row Starting row.
INTEGER to_col Ending column.
INTEGER to_row Ending row.
Output:
None.
Error Conditions:
None.
---------------
ui_spread_set_top_row(widget_id,top_row)
##########
Description:
Sets the top visible row number of a spreadsheet.
Input:
widget widget_id Must be a spreadsheet.
INTEGER top_row Row to set.
Output:
None.
Error Conditions:
None.
---------------
ui_spread_set_value_label(widget_id,label)
##########
Description:
In a 3D spreadsheet,sets a spreadsheet layer label.
Input:
widget widget_id Must be a spreadsheet.
STRING label Label to set.
Output:
None.
Error Conditions:
None.
---------------
ui_switch_create(parent,callback,x,y,num_cols,label,always_one)
##########
Description:
Creates a switch widget.
Input:
widget parent Parent widget ID. Must be a frame or a form.
STRING callback Name of PCL function called for an event in this widget. The function must be in the class in which the widget is created. Use ““ if events for this widget are not of interest.
NUMERIC x X location of switch in inches relative to parent
NUMERIC y Y location of switch in inches relative to parent.
INTEGER num_cols Number of columns of items the switch is to have (see Comments section below).
STRING label Displayed text to describe switch.
LOGICAL always_one TRUE if one item in switch must always be ON. FALSE if it is allowable to have no items selected.
Output:
widget <Return Value> Widget ID of switch widget. NULL if not created.
Error Conditions:
None.
---------------
ui_text_create(parent,callback,x,y,width,num_rows,label,text,editable,needHScroll)
##########
Description:
Create a text widget.
Input:
widget parent Parent of the text widget. Must be a frame,a form,a modalform,or a window.
STRING callback Name of PCL function called for an event in this widget. The function must be in the class in which the widget is created. Use ““ since text widgets do not register events.
NUMERIC x X location of widget in inches relative to parent
NUMERIC y Y location of widget in inches relative to parent.
NUMERIC width Width of the widget,in inches.
INTEGER num_rows Number of rows that will contain the text.
STRING label Label to appear with the text widget.
STRING text Text string to initially appear in the widget. Include “\n” in the string to indicate a newline.
LOGICAL editable TRUE if the user is allowed to edit the text.
LOGICAL needHScroll TRUE if horizontal scrollbar is required. Optional and defaults to FALSE.
Output:
widget <Return Value> Text widget ID. NULL if text not created.
Error Conditions:
None.
---------------
ui_toggle_create(parent,callback,x,y,label)
##########
Description:
Creates a toggle widget.
Input:
widget parent Parent widget ID. Must be a frame,a form,or a modalform.
STRING callback Name of PCL function called for an event in this widget. The function must be in the class in which the widget is created. Use ““ if events for this widget are not of interest.
NUMERIC x X location of toggle in inches relative to parent
NUMERIC y Y location of toggle in inches relative to parent.
STRING label Label describing toggle.
Output:
widget <Return Value> Toggle widget ID. NULL if toggle widget not created.
Error Conditions:
None.
---------------
ui_toggleicon_create(parent,callback,x,y,icon)
##########
Description:
Creates a toggleicon widget.
Input:
widget parent Parent widget ID. Must be a frame,a form,or a modalform.
STRING callback Name of PCL function called for an event in this widget. The function must be in the class in which the widget is created. Use ““ if events for this widget are not of interest. The first space character in the name/callback signifies that the rest of the string value is the pop-up help for the icon,and delimits the preceding string without the space as the name/callback of the widget.
NUMERIC x X location of toggle in inches relative to parent
NUMERIC y Y location of toggle in inches relative to parent.
STRING icon Name of the icon to display describing the toggle.
Output:
widget <Return Value> Toggleicon widget ID. NULL if toggleicon widget not created.
Error Conditions:
None.
---------------
ui_tree_create(parent,callback,x,y,width,height,label,selection_type,options)
##########
Description:
creates a tree view widget
Input:
widget parent Parent form or frame containing this tree widget
STRING callback Name of the PCL function called for an event in this widget.
REAL x
REAL y
REAL width
REAL height
STRING label
STRING selection_type One of SINGLE,BROWSE,MULTIPLE,EXTEND
INTEGER options Optional and defaults to 0.
Output:
INTEGER <Return Value> ID of the widget created. NULL if creation fails.
---------------
ui_tree_calldata_get_count(callData,event,itemCount)
##########
Description:
Retrieves the item count related to the callback from the tree widget
Input:
widget callData This is the callData argument passed to the callback
STRING reason one of the following EXPANDED,COLLAPSED,SELECTED or UNSELECTED
Output:
INTEGER itemCount number of items that changed their state
---------------
ui_tree_calldata_get_items(callData,event,itemCount,items)
##########
Description:
Retrieves the items related to the callback from the tree widget
Input:
widget callData This is the callData argument passed to the callback
STRING event one of the following EXPANDED,COLLAPSED,SELECTED or UNSELECTED
Output:
INTEGER itemCount size of the items array
INTEGER()items virtual array to hold the items that changed their state
INTEGER <Return Value> Number of items returned in items array. >=0 number items -1 event parameter is not valid -2 not enough memory to return the items.
---------------
ui_tree_add_item(treeWidget,parent,insertAfter,name,image,selectedImage)
##########
Description:
adds an item to the tree widget
Input:
widget treeWidget
INTEGER parent
INTEGER insertafter ID of the item after which the item will be inserted into the tree =0 item is inserted as the first item of the parent = -1 item is appended to the parent >0 ID of the sibling item after which the new item is inserted if this ID is not a child of the parent then the behavior is undefined.
String label
INTEGER image
INTEGER selectedImage
Output:
INTEGER <Return Value> ID of the item created. 0 if creation fails.
---------------
ui_tree_add_items(treeWidget,parent,insertAfter,name,image,selectedImage,nitems)
##########
Description:
adds an item to the tree widget
Input:
widget treeWidget
INTEGER nitems
INTEGER()parent
INTEGER()insertafter
String[]()label
INTEGER()image
INTEGER()selectedImage
Output:
INTEGER <Return Value> ID of the last item created. nitems items are created with this return value being the ID of the last item. Return value of 0 indicates failure.
---------------
ui_tree_delete_item(treeWidget,itemToDelete)
##########
Description:
deletes an item from the tree.
Input:
widget treeWidget
INTEGER itemToDelete
Output:
logical <Return Value> TRUE if no error.
---------------
ui_tree_delete_items(treeWidget,nitems,itemsArray)
##########
Description:
deletes an item from the tree.
Input:
widget treeWidget
INTEGER nitems
INTEGER()itemsArray
Output:
logical <Return Value> TRUE if no error.
---------------
ui_tree_select_item(treeWidget,itemToSelect,selectionFlag)
##########
Description:
selects/deselects an item in the tree.
Input:
widget treeWidget
INTEGER itemToSelect
LOGICAL selectionFlag TRUE indicates selection FALSE indicates deselection
Output:
logical <Return Value> TRUE if no error.
---------------
ui_tree_select_items(treeWidget,itemsArray,nitems,selectionFlag)
##########
Description:
selects/deselects multiple items from the tree.
Input:
widget treeWidget
INTEGER()itemsArray
INTEGER nitems
LOGICAL selectionFlag TRUE indicates selection FALSE indicates deselection
Output:
logical <Return Value> TRUE if no error.
---------------
ui_tree_select_node(treeWidget,nodeToSelect,selectionFlag)
##########
Description:
selects/deselects a node and all its children in the tree.
Input:
widget treeWidget
INTEGER nodeToSelect
LOGICAL selectionFlag TRUE indicates selection FALSE indicates deselection
Output:
logical <Return Value> TRUE if no error.
---------------
ui_tree_expand_item(treeWidget,itemId,expandOrCollapse)
##########
Description:
expands/collapse an item (that has children)in the tree.
Input:
widget treeWidget
INTEGER nodeToSelect
LOGICAL expandOrCollapse TRUE indicates expansion FALSE indicates collapse
Output:
logical <Return Value> TRUE if no error.
---------------
ui_tree_add_image(treeWidget,imageFile)
##########
Description:
add an image to a tree.
Input:
widget treeWidget
STRING imageFile Name of the file containing the icon data.
Output:
INTEGER <Return Value> ID of the created image.
---------------
ui_tree_delete_image(treeWidget,imageId)
##########
Description:
delete an image from a tree.
Input:
widget treeWidget
INTEGER imageId ID of the image obtained from ui_tree_add_image.
Output:
LOGICAL <Return Value> TRUE if image was successfully deleted.
---------------
ui_treeitem_set_image(treeWidget,itemId,imageId,selectedImageId)
##########
Description:
set images for a tree item.
Input:
widget treeWidget
INTEGER itemId ID of the item for which images are to be set.
INTEGER imageId ID of the image to display in unselected state.
INTEGER selectedImageId ID of the image to display in selected state.
Output:
LOGICAL <Return Value> TRUE if images were successfully modified.
---------------
ui_treeitem_set_label(treeWidget,itemId,label)
##########
Description:
sets the label for a tree item.
Input:
widget treeWidget
INTEGER itemId ID of the item for which images are to be set.
STRING label text to be displayed.
Output:
LOGICAL <Return Value> TRUE if the label was successfully modified.
---------------
ui_treeitem_get_image(treeWidget,itemId,imageId,selectedImageId)
##########
Description:
get images for a tree item.
Input:
widget treeWidget
INTEGER itemId ID of the item for which images are to be set.
Output:
INTEGER imageId ID of the image to display in unselected state.
INTEGER selectedImageId ID of the image to display in selected state.
LOGICAL <Return Value> TRUE if images were successfully obtained.
---------------
ui_treeitem_get_label(treeWidget,itemId,label,length)
##########
Description:
Obtains the label for a tree item.
Input:
widget treeWidget
INTEGER itemId ID of the item for which label needs to be returned.
INTEGER length size of label string
Output:
STRING label text displayed.
LOGICAL <Return Value> TRUE if the label was successfully obtained.
---------------
ui_treeitem_is_selected(treeWidget,itemId)
##########
Description:
returns whether a tree item is selected
Input:
widget treeWidget
INTEGER itemId ID of the item for which the information is desired.
Output:
LOGICAL <Return Value> TRUE if the item is selected FALSE if the item is not selected or does not exist.
##########
Description:
returns whether a tree item is expanded or collapsed.
Input:
widget treeWidget
INTEGER itemId ID of the item for which the information is desired.
Output:
LOGICAL <Return Value> TRUE if the item is expanded. FALSE if the item is collapsed or has no children or does not exist.
---------------
ui_tree_set_selection(treeWidget,itemIds,itemCount)
##########
Description:
replaces the selected items in the tree with the input list
Input:
widget treeWidget
INTEGER()itemIds
INTEGER temCount
Output:
logical <Return Value> TRUE if no error.
---------------
ui_tree_get_selection(treeWidget,itemIds,itemCount)
##########
Description:
obtains the list of currently selected items in the tree
Input:
widget treeWidget
Output:
INTEGER()itemIds virtual array to hold the items
INTEGER itemCount logical <Return Value> TRUE if no error. FALSE if failed to allocate memory.
---------------
ui_tree_clear_selection(treeWidget)
##########
Description:
clears selection. All items in the tree are unselected after this call
Input:
widget treeWidget
Output:
None.
---------------
ui_treeitem_get_parent(treeWidget,itemId)
##########
Description:
gets the ID of the parent of the item
widget treeWidget
INTEGER itemId ID of the item for which parent needs to be returned.
Output:
INTEGER <Return Value> ID of the parent item. –1 if itemId is invalid.
---------------
ui_treeitem_get_child_count(treeWidget,itemId)
##########
Description:
gets the number of children of the item
widget treeWidget
INTEGER itemId ID of the item for which parent needs to be returned.
Output:
INTEGER <Return Value> number of immediate children of the item. –1 if itemId is invalid.
---------------
ui_treeitem_get_children(treeWidget,itemId,childIds,childCount)
##########
Description:
gets the ids of the child items of the given parent item
widget treeWidget
INTEGER itemId ID of the item for which parent needs to be returned.
Output:
INTEGER()childIds virtual array to hold the child items
INTEGER childCount
LOGICAL <Return Value> TRUE if no error. FALSE if failed to allocate memory.
---------------
ui_verify_name(name)
##########
Description:
Verify whether the given name has the syntax for a valid name.
Input:
STRING name Name to verify.
Output:
INTEGER <Return Value> = 0 if name is valid. = 1 if name is too long. = 2 if name contains white space. = 3 if name contains a illegal char. = 4 if name is NULL or ““.
Error Conditions:
None.
---------------
ui_wid_delete(wid)
##########
Description:
Delete and destroy the widget.
Input:
widget wid Widget to delete and destroy.
Output:
None.
Error Conditions:
None.
---------------
ui_wid_exists(widget)
##########
Description:
Determine whether the given widget exists.
Input:
widget widget Widget whose existence is to be queried.
Output:
LOGICAL <Return Value> TRUE if widget exists,FALSE if not.
Error Conditions:
None.
---------------
ui_wid_get(widget,parm,value)
##########
Description:
Get the value of a widget parameter.
Input:
widget widget Widget whose value is to be queried.
STRING parm Name of parameter. Upper or lower case is permitted.
Output:
SEE BELOW value Value of parameter.
LOGICAL <Return Value> TRUE,if no error.
Error Conditions:
None.
---------------
ui_wid_get_vstring(widget,parm,vstr)
##########
Description:
Get the value of a widget's string parameter and return the value in a virtual string.
Input:
widget widget Widget whose value is to be queried.
STRING parm Name of parameter. Upper or lower case is permitted
Output:
STRING [VIRTUAL] vstr Value of string parameter.
Error Conditions:
None.
---------------
ui_wid_refresh()
##########
Description:
Calls the refresh function for all classes with forms currently visible.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
ui_wid_restore(class_name)
##########
Description:
Restores the values of all of the widgets in the class class_name to the values assigned due to the last call to ui_wid_save (class_name).
Input:
STRING class_name Name of the form’s class.
Output:
LOGICAL <Return Value> TRUE if no error.
Error Conditions:
None.
---------------
ui_wid_save(class_name)
##########
Description:
Saves the values of all of the widgets in the class class_name.
Input:
STRING class_name Name of the form’s class.
Output:
LOGICAL <Return Value> TRUE if no error.
Error Conditions:
None.
---------------
ui_wid_set(widget_id,parameter_name,parameter_value)
##########
Description:
This function will set a widget parameter value.
Input:
widget widget_id This value specifies the identifier of the widget that will be modified.
STRING parameter_name[] This value specifies the name of the parameter to be modified. See below for more information.
DYNAMIC_ILRS parameter_value This value specifies the array of flags used to identify the specific entity types to be exported. See the remarks below for more information.
Output:
LOGICAL <Return Value> This function returns a value of TRUE when executed successfully and a non TRUE value to indicate a change in status or an error.
Error Conditions:
This function may return a nonzero value if an error occurs.
---------------
db_create_element_list(get,numelm,loc)
##########
Description:
Create a List of Existing Element ID’s in Virtual Memory. If element indexing is on,generate or release a sorted list of existing element ID’s in virtual memory. If element indexing is off,just return the maximum element ID.
Input:
LOGICAL get If true,create list; if false,release list.
Output:
INTEGER numelm Number of elements processed (if indexing is off,this is maximum element ID).
INTEGER loc Index relative to IVAL(1)in common XMEM where node ID list begins (set to zero if node indexing is off).
Error Conditions:
None.
---------------
db_create_node_list(get,numnod,loc)
##########
Description:
Create a List of Existing Node ID’s in Virtual Memory.
Input:
LOGICAL get If true,create list; if false,release list.
Output:
INTEGER numnod Number of nodes processed (if indexing is off,this is maximum node ID).
INTEGER loc Index relative to IVAL(1)in common XMEM where node ID list begins (set to zero if node indexing is off).
Error Conditions:
None.
---------------
db_element(elno,shape,nodes,conf,pid,ceid,data,node,adata,noasoc,nodbem,status)
##########
Description:
Get Data Associated with an Element.
Input:
INTEGER elno Element number for which data is requested.
Output:
INTEGER shape 2 = bar3 = triangle4 = quadrangle5 = tetrahedron7 = wedge8 = hexagon
INTEGER nodes Number of nodes.
INTEGER conf Element configuration.
INTEGER pid Property ID or material ID (if.lt. 0). In Patran,the region ID.
INTEGER ceid Congruent element ID.
REAL(3)data Material orientation angles. For bars,these are the coordinates of the bar ends if offset.
INTEGER(64)node ID of the node defining the XY-plane
REAL(6)adata Associated data. For bars,these are the coordinates of the bar ends if offset.
INTEGER noasoc Number of associated data values.
INTEGER nodbem ID of the node defining the XY-plane.
INTEGER status Return status: 0 = normal1 = non-existent element
Error Conditions:
None.
---------------
db_entity_counts(size1,size2,ncount,gcount,names,ndfeg,dftabl,mpc,status)
##########
Description:
Count Database Entities. Return the number of nodes,elements,materials and element properties in “ncount”,maximum ID’s of Phase I entities in “size1”. Maximum of Phase II entities in “size2”,total number of GFEG records in “gcount” and the total number of named components in “names”.
Input:
None.
Output:
INTEGER(12)size1 Maximum of Phase I entities.size1 [0] = Max point ID’ssize1 [1] = Max curve ID’ssize1 [2] = Max surface ID’ssize1 [3] = Max solid ID’ssize1 [4] = Max Coord ID’ssize1 [5] = Max Dline ID’s ->0size1 [6] = Max Dpat ID’s UNDEFINEDsize1 [7] = Max Dhpat ID’s UNDEFINEDsize1 [8] = Max Pmat ID’ssize1 [9] = Max List ID’s UNDEFINEDsize1 [10] = Max Data ID’s UNDEFINEDsize1 [11] = Max Field ID’s
INTEGER(30)size2 Maximum of Phase II entities.size2 [0] = Max Node ID’ssize2 [1] = Max Beam ID’ssize2 [2] = Max Triangle ID’ssize2 [3] = Max Quadrangle ID’ssize2 [4] = Max Tetrahedron ID’ssize2 [5] = Max Pyramid ID’ssize2 [6] = Max Wedge ID’ssize2 [7] = Max Hexagon ID’ssize2 [8] = Max MaxEl ID’ssize2 [9] = Max MaxPid ID’ssize2 [10] = Max DofList1 ID’ssize2 [11] = Max DofList2 ID’s UNDEFINEDsize2 [12] = Max DofList3 ID’s UNDEFINEDsize2 [13] = Max DofList4 ID’s UNDEFINEDsize2 [14] = Max DofList5 ID’s UNDEFINEDsize2 [15] = Max DofList6 ID’s UNDEFINEDsize2 [16] = Max DofList7 ID’s UNDEFINEDsize2 [17] = Max DofList8 ID’s UNDEFINEDsize2 [18] = Max DofList9 ID’s UNDEFINEDsize2 [19] = Max DofList10 ID’s UNDEFINEDsize2 [20] = Max Mass ID’ssize2 [21] = Max Spring ID’ssize2 [22] = Max Weld ID’s UNDEFINEDsize2 [23] = Max Part ID’s UNDEFINEDsize2 [24] = Max Joint ID’s UNDEFINEDsize2 [25] = Max Marker ID’s UNDEFINEDsize2 [26] = RESERVED ID’s UNDEFINEDsize2 [27] = Max Force ID’s UNDEFINEDsize2 [28] = Max Output ID’s UNDEFINEDsize2 [29] = Max MCP ID’s UNDEFINED
INTEGER(5)ncount Node,element,material,property and coordinate frame counts.ncount [0] = Node countncount [1] = Element countncount [2] = Material countncount [3] = Property countncount [4] = Coordinate Frame count
INTEGER gcount Number of GFEG records.
INTEGER names Number of named components. (groups).
INTEGER(15)ndfeg Number of DFEG records for each of packet 6 through 11 and 15 through 18.
INTEGER(3000)dftabl The set ID and the number of records in each set for each DFEG packet.
INTEGER(2)mpc Total MCP equations and maximum number of MPC equations.mpc [0] = Total MPC equationsmpc [1] = Maxim MPC equations
INTEGER status = 0.
Error Conditions:
None.
---------------
db_get_maximum_id(database_type,error_value)
##########
Description:
This function will return the entity identifier with the highest numerical value used for a specific database entity type.
Input:
STRING database_type This value is used to identify the entity type. It should always be an uppercase value. See the table below for the entity types allowed.
Output:
INTEGER error_value This value is used to return an error or status value. This value will be set to 0 if the function succeeded and will be set to 1 if the input value database_type is set incorrectly. This value will be set to a non-zero value if a database error occurs.
INTEGER <Return Value> This function can return any value and the value returned has no meaning.
---------------
db_get_next_id(listed,i,loc)
##########
Description:
If indexing is on,get ID(i)from ID-list; otherwise return i.
Input:
LOGICAL listed If true,return NEXTID = ID-list (i). If false,		return NEXTID = i.
INTEGER i Index.
INTEGER loc ist of ID’s.
Output:
None.
Error Conditions:
None.
---------------
db_grid(grid,rdata,status)
##########
Description:
Get X-Y-Z Coordinates of a Grid.
Input:
INTEGER grid Grid number for which coordinates are requested.
Output:
REAL(3)rdata Coordinates of “grid.”
INTEGER status Return status: 0 = normal1 = non-existent grid2 = no data
Error Conditions:
None.
---------------
db_hyperpatch(hpat,coef,grids,status)
##########
Description:
Get Geometric Data for Hyperpatch “label.”
Input:
INTEGER hpat Hyperpatch label for which data is requested.
Output:
REAL coef (192)64x3 matrix of geometric hyperpatch coefficients.
INTEGER grids (8)Corner points grid ID’s.
INTEGER status Return status:0 = normal1 = non-existent hyperpatch2 = no data
Error Conditions:
None.
---------------
db_import_database(dbname,types,elist,offset,prefix,merge_flags,nsig,node_equiv,point_equiv,method,tolerance)
##########
Description:
Main driver for the database import operation.
Input:
STRING[ ] dbname The name of the database whose data is to be imported.
STRING[20]()types A list of types of entities to be imported.
STRING[256]()elist Array of entity lists for each entity type ("All","None",or a list of labels or names).
INTEGER()offset Array of ID offsets for each numbered entity conflict resolution (one offset per entity type).
STRING[31]()prefix Array of prefixes for named entity conflict resolution (one prefix per entity type).
LOGICAL()merge_flags The values of the merge toggles for materials,element properties,lbcs,load cases,fields,and groups respectively.
INTEGER nsig The number of significant digits for real number comparisons.
LOGICAL node_equiv Node equivalencing flag.
LOGICAL point_equiv Point equivalencing flag.
STRING[ ] method Equivalence method ("cube" or "sphere").
REAL tolerance Equivalence tolerance. <Return Value> = 0 Function was successful.
Output:
None.
Side Effects:
Messages A summary spreadsheet will be displayed.
Database The requested data will be imported to the primary database.
Graphics The requested data will be posted to the current or specified group.
Error Conditions:
To be determined.
---------------
db_import_database_V2(dbname,types,elist,offset,prefix,merge_flags,nsig,node_equiv,point_equiv,method,tolerance,dfem_combine,lbc_equivopt)
##########
Description:
Version 2 of the main driver for the database import operation with the addition of LBC equivalencing.
Input:
STRING[ ] dbname The name of the database whose data is to be imported.
STRING[20]()types A list of types of entities to be imported.
STRING[256]()elist Array of entity lists for each entity type ("All","None",or a list of labels or names).
INTEGER()offset Array of ID offsets for each numbered entity conflict resolution (one offset per entity type).
STRING[31]()prefix Array of prefixes for named entity conflict resolution (one prefix per entity type).
LOGICAL()merge_flags The values of the merge toggles for materials,element properties,lbcs,load cases,fields,and groups respectively.
INTEGER nsig The number of significant digits for real number comparisons.
LOGICAL node_equiv Node equivalencing flag.
LOGICAL point_equiv Point equivalencing flag.
STRING[ ] method Equivalence method ("cube" or "sphere").
REAL tolerance Equivalence tolerance.
LOGICAL dfem_combine Discrete FEM field combining flag.
STRING[8]()lbc_equivopt Array of equivalence options for BCs,Vector Loads,and Scalar Loads (“useprim”,”add” or “average”).
<Return Value> = 0 Function was successfu
Output:
None.
Side Effects:
Messages A summary spreadsheet will be displayed.
Database The requested data will be imported to the primary database.
Graphics The requested data will be posted to the current or specified group.
Error Conditions:
To be determined.
---------------
db_import_database_V3(dbname,types,elist,offset,prefix,merge_opts,nsig,node_equiv,point_equiv,method,tolerance,dfem_combine,lbc_equivopt)
##########
Description:
Version 3 of the main driver for the database import operation with the addition of Material and Property merging with non-duplicate names. The only difference from db_import_database_V2,is the merge_opts argument.
Input:
STRING[ ] dbname The name of the database whose data is to be imported.
STRING[20]()types A list of types of entities to be imported.
STRING[256]()elist Array of entity lists for each entity type ("All","None",or a list of labels or names).
INTEGER()offset Array of ID offsets for each numbered entity conflict resolution (one offset per entity type).
STRING[31]()prefix Array of prefixes for named entity conflict resolution (one prefix per entity type).
STRING[ ]()merge_opts The values of the merge options for materials,element properties,lbcs,load cases,fields,groups,and DOF lists respectively. Valid options for materials and element properties are: “NONE”=Do not merge“DATA_ONLY”=Ignore name on merge,only data must match. Merges to the first alphanumeric found with duplicate data.“DATA_CHECK_NAME”=Check for duplicate name first. If found,and data is duplicate,merge. If not found,or found and data is not duplicate,behave same as “DATA_ONLY”.“DATA_AND_NAME”=Name and data must be duplicate to merge. Valid options for lbcs,load cases,fields,groups,and DOF lists are: “NONE”=Do not merge“DATA_AND_NAME”=Name and/or name and data must be duplicate to merge.
INTEGER nsig The number of significant digits for real number comparisons.
LOGICAL node_equiv Node equivalencing flag.
LOGICAL point_equiv Point equivalencing flag.
STRING[ ] method Equivalence method ("cube" or "sphere").
REAL tolerance Equivalence tolerance.
LOGICAL dfem_combine Discrete FEM field combining flag.
STRING[8]()lbc_equivopt Array of equivalence options for BCs,Vector Loads,and Scalar Loads (“useprim”,”add” or “average”).
<Return Value> = 0 Function was successful.
Output:
None.
Side Effects:
Messages A summary spreadsheet will be displayed.
Database The requested data will be imported to the primary database.
Graphics The requested data will be posted to the current or specified group.
Error Conditions:
To be determined.
---------------
db_line(line,coef,grids,status)
##########
Description:
Get Geometric Data for Line “line.”
Input:
INTEGER line Line label for which data is requested.
Output:
REAL(12)coef 4x3 matrix of geometric line coefficients.
NTEGER(2)grids End point grid ID’s.
INTEGER status Return status:0 = normal1 = non-existent line2 = no data
Error Conditions:
None.
---------------
db_mpc(mpcid,nterms,nbuf,ntot,ndep,idat,constr,mpcdat,num,status)
##########
Description:
Not supported in Patran.
Input:
INTEGER mpcid Unknown.
INTEGER nterms Unknown.
INTEGER nbuf Unknown.
Output:
INTEGER nterms Unknown.
INTEGER ntot Unknown.
INTEGER ndep Unknown.
INTEGER(12)idat Unknown.
REAL constr Unknown.
INTEGER()mpcdat Unknown.
INTEGER num Unknown.
INTEGER status Unknown.
Error Conditions:
None.
---------------
db_node(node,xyz,conden,type,nodof,config,coordf,spcf,status)
##########
Description:
Get Data Associated with a Nodal Point.
Input:
INTEGER node Node number for which data is requested.
Output:
REAL(3)xyz x,y,z global coordinates.
INTEGER conden Condensation flag (0 = unreferenced).
STRING type Node type (Hollerith).
INTEGER nodof Number of degrees-of-freedom.
INTEGER config Node configuration.
INTEGER coordf Reference coordinate system number.
INTEGER(6)spcf Up to 6 single point constraint flags.
INTEGER status Return status:0 = normal1 = non-existent node
Error Conditions:
None.
---------------
db_patch(patch,coef,grids,status)
##########
Description:
Input:
INTEGER patch Patch number for which data is requested.
Output:
REAL(48)coef 16x3 matrix of geometric patch coefficients.
INTEGER(4)grids Corner point grid ID’s.
INTEGER status Return status:		0 = norma1 = non-existent patch2 = no data
Error Conditions:
None.
---------------
dbi_query_database(dbname,report_flag,report_file,ntypes,types,counts,mins,maxs,geotol)
##########
Description:
Query the contents of the specified database
Input:
STRING[ ] dbname The name of the database.
LOGICAL report_flag TRUE if a report is to be generated.
STRING[ ] report_file The name of the report file.
Output:
INTEGER ntypes The number of entity types.
INTEGER()types The entity types (e.g. DbTypPoint)
INTEGER()counts The number of entities of each type.
INTEGER()mins The minimum ID (label)for each type.
INTEGER()maxs The maximum ID (label)for each type.
REAL geotol Geometric tolerance in query database. <Return Value> = 0 Function was successful
Error Conditions:
None.
---------------
gm_segment_create(id)
##########
Description:
To create a segment of graphics primitives (lines,text,etc.).
Input:
None.
Output:
INTEGER id Created segment ID.
INTEGER <Return Value> Status of operation. 0 = Successful.
Error Conditions:
None.
---------------
gm_segment_delete(id)
##########
Description:
To delete a segment and remove all graphics primitives (lines,text,etc.)in the segment from out of the graphics windows.
Input:
INTEGER id Segment ID to delete.
Output:
INTEGER <Return Value> Status of operation. 0 = Successful.
Error Conditions:
None.
---------------
gm_segment_flush()
##########
Description:
To flush all graphics primitives to the screen. All primitives,regardless of segment,will be flushed.
Input:
None.
Output:
INTEGER <Return Value> Status of operation. 0 = Successful.
Error Conditions:
None.
---------------
gm_draw_line(segment_id,)
##########
Description:
Draw a line in segment or current viewport.
Input:
INTEGER segment_id Segment ID created from gm_segment_create.
INTEGER color_id Color of line (0-15).
REAL[3] start Starting location of line in world coord.
REAL[3] end Ending location of line in world coord.
Output:
INTEGER <Return Value> Status of operation. 0 = Successful.
Error Conditions:
None.
---------------
gm_draw_text(segment_id,color_id,location,text)
##########
Description:
Draw a string in segment or current viewport.
Input:
INTEGER segment_id Segment ID created from gm_segment_create.
INTEGER color_id Color of text (0-15).
REAL[3] location Location of line in world coord.
STRING text Text string. Currently limited to 31 characters.
Output:
INTEGER <Return Value> Status of operation. 0 = Successful.
Error Conditions:
None.
---------------
gm_draw_marker(segment_id,color_id,location,type,size)
##########
Description:
Draw a marker in a segment or current viewport.
Input:
INTEGER segment_id Segment ID created from gm_segment_create.
INTEGER color_id Color of marker (0-15).
REAL[3] location Location of marker in world coord.
INTEGER type Type of marker (1-dot,2-circle,3-X,4-+,5-filled circle,6-square,7-filled square,8-triangle,9-filled tri,10-diamond,11-filled diamond).
INTEGER size Size of marker (in pixels).
Output:
INTEGER <Return Value> Status of operation. 0 = Successful.
Error Conditions:
None.
---------------
gm_draw_result_arrow(segment_id,color_id,loc,direction,size,anchor_style,string)
##########
Description:
Draw a result arrow at the specified location in the segment or current viewport.
Input:
INTEGER segment_id Segment ID created from gm_segment_create.
INTEGER color_id Color of arrow.
REAL[3] loc Location of arrow in world coord.
REAL[3] direction Direction of arrow in world coord.    
REAL size Size of arrow (percentage of model size).
INTEGER anchor_style Anchor style (1-base,2-tip,3-middle).
STRING string Text string.
Output:
None.
Error Conditions:
None.
Note:
The various anchor styles for the “anchor_style” argument are shown below. Base: 0-----> Tip: ---->0 Middle: -----0----> where the location value is marked as "0"
---------------
gm_draw_arrow(segment_id,color_id,base,tip,head_size)
##########
Description:
Draw an arrow at the specified base and tip in the segment or current viewport.
Input:
INTEGER segment_id Segment ID created from gm_segment_create.
INTEGER color_id Color of arrow (0-15).
REAL[3] base Base location of arrow in world coord.
REAL[3] tip Tip location of arrow in world coord.
REAL head_size Arrow head size (percentage of arrow length).
Output:
INTEGER <Return Value> Status of operation. 0 = Successful.
Error Conditions:
None.
---------------
gm_conv_world_to_device(vp_id,world_pt,dev_pt)
##########
Description:
Gets the min/max x,y,z coordinate values of the bounding box that encloses the entities displayed in the current viewport. The coordinate values returned are in the global (world)coordinate system.
Input:
vp_id. integer viewport id
world_pt real (3)xyz world coordinate
Output:
dev_pt real (3)xyz device coordinate
INTEGER <Return Value> Status of operation. 0 = Successful.
Error Conditions:
15000025 Error in finding the viewport in the graphics manager display list
---------------
gm_viewports_refresh()
##########
Description:
Refresh all of the viewports.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
gm_viewport_refresh()
##########
Description:
Refresh current viewport.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
gm_viewport_center_get(center)
##########
Description:
Calculate the center of the current viewport.
Input:
None.
Output:
REAL center Center of the model.
Error Conditions:
None.
---------------
gm_viewport_world_limits_get(limits)
##########
Description:
Get the x,y and z minimum/maximum values of the model in world space.
Input:
None.
Output:
REAL(6)limits Returns 5% less than the minimum and 5% more than the maximum x,y and z coordinates of the model in world space.
Error Conditions:
None.
---------------
gm_viewport_subject_get(persp_off,center,zoom)
##########
Description:
Calculate the center of the current viewport.
Input:
None.
Output:
INTEGER persp_off If TRUE,this skips perspective. If FALSE,the perspective setting in the current viewport will be used.
REAL[2] center Center of subject space for the viewport.
REAL ZOOM Zoom factor for the subject space.
Error Conditions:
None.
---------------
mth_sind(angle)
##########
Description:
Return trigonometric sine value of the argument specified in degrees.
Input:
REAL angle The angle in degrees for which to compute the sine
Output:
REAL <Return Value> The sine value.
Error Conditions:
None.
---------------
mth_asind(value)
##########
Description:
Return angle in degrees which corresponds to the trigonometric sine contained in the argument.
Input:
REAL value The sine value for which to find the angle.
Output:
REAL <Return Value> The angle in degrees for the sine.
Error Conditions:
None.
---------------
mth_cosd(angle)
##########
Description:
Return trigonometric cosine value of the argument specified in degrees.
Input:
REAL angle The angle in degrees for which to compute the cosine.
Output:
REAL <Return Value> The cosine value.
Error Conditions:
None.
---------------
mth_acosd(value)
##########
Description:
Return angle in degrees which corresponds to the trigonometric cosine contained in the argument.
Input:
REAL value The cosine value for which to find the angle.
Output:
REAL <Return Value> The angle in degrees for the cosine.
Error Conditions:
None.
---------------
mth_tand(angle)
##########
Description:
Return trigonometric tangent value of the argument specified in degrees.
Input:
REAL angle The angle in degrees for which to compute the tangent.
Output:
REAL <Return Value> The tangent value.
Error Conditions:
None.
---------------
mth_atand(value)
##########
Description:
Return angle in degrees which corresponds to the trigonometric tangent contained in the argument.
Input:
REAL value The tangent value for which to find the angle.
Output:
REAL <Return Value> The angle in degrees for the tangent.
Error Conditions:
None.
---------------
mth_atan2d(y,x)
##########
Description:
Return angle in degrees which corresponds to the trigonometric tangent represented by the specified x and y components.
Input:
REAL y The y component of the tangent.
REAL x The x component of the tangent.
Output:
REAL <Return Value> The angle in degrees for the tangent.
Error Conditions:
None.
---------------
mth_sinr(angle)
##########
Description:
Return trigonometric sine value of the argument specified in radians.
Input:
REAL angle The angle in radians for which to compute the sine.
Output:
REAL <Return Value> The sine value.
Error Conditions:
None.
---------------
mth_asinr(value)
##########
Description:
Return angle in radians which corresponds to the trigonometric sine contained in the argument.
Input:
REAL value The sine value for which to find the angle.
Output:
REAL <Return Value> The angle in radians for the sine.
Error Conditions:
None.
---------------
mth_cosr(angle)
##########
Description:
Return trigonometric cosine value of the argument specified in radians.
Input:
REAL angle The angle in radians for which to compute the cosine.
Output:
REAL <Return Value> The cosine value.
Error Conditions:
None.
---------------
mth_acosr(value)
##########
Description:
Return angle in radians which corresponds to the trigonometric cosine contained in the argument.
Input:
REAL value The cosine value for which to find the angle.
Output:
REAL <Return Value> The angle in radians for the cosine.
Error Conditions:
None.
---------------
mth_tanr(angle)
##########
Description:
Return trigonometric tangent value of the argument specified in radians.
Input:
REAL angle The angle in radians for which to compute the tangent.
Output:
REAL <Return Value> The tangent value.
Error Conditions:
None.
---------------
mth_atanr(value)
##########
Description:
Return angle in radians which corresponds to the trigonometric tangent contained in the argument.
Input:
REAL value The tangent value for which to find the angle.
Output:
REAL <Return Value> The angle in radians for the tangent.
Error Conditions:
None.
---------------
mth_atan2r(y,x)
##########
Description:
Return angle in degrees which corresponds to the trigonometric tangent represented by the specified x and y components.
Input:
REAL y The y component of the tangent.
REAL x The x component of the tangent.
Output:
REAL <Return Value> The angle in radians for the tangent.
Error Conditions:
None.
---------------
mth_sqrt(value)
##########
Description:
Return square root of the argument.
Input:
REAL value The value for which to obtain the square root.
Output:
REAL <Return Value> The square root.
Error Conditions:
None.
---------------
mth_ln(value)
##########
Description:
Return natural logarithm of the argument.
Input:
REAL value The value for which to obtain the natural logarithm.
Output:
REAL <Return Value> The natural logarithm.
Error Conditions:
None.
---------------
mth_log(value)
##########
Description:
Return common logarithm of the argument.
Input:
REAL value The value for which to obtain the common logarithm.
Output:
REAL <Return Value> The common logarithm.
Error Conditions:
None.
---------------
mth_exp(value)
##########
Description:
Return power function of natural logarithm base,e to the x power.
Input:
REAL value The raising power
Output:
REAL <Return Value> The result of the power of the input argument.
Error Conditions:
None.
---------------
mth_abs(value)
##########
Description:
Return the absolute value of the input argument.
Input:
NUMERIC value The value to get the absolute value of,integer or real.
Output:
NUMERIC <Return Value> The absolute value of the input argument. The datatype will match that of the input argument.
Error Conditions:
None.
---------------
mth_sign(value)
##########
Description:
Return a sign,-1,0,or 1 for the input argument.
Input:
REAL value The value of which to get the sign.
Output:
INTEGER <Return Value> The sign value of the input argument,-1 for a negative argument,0 for zero,and 1 for a positive argument.
Error Conditions:
None.
---------------
mth_nint(value)
##########
Description:
Return the nearest integer value for the input argument.
Input:
REAL value The value for which to obtain the nearest integer.
Output:
INTEGER <Return Value> The nearest integer value,rounding off the input argument.
Error Conditions:
None.
---------------
mth_max(val1,val2,...)
##########
Description:
Return the largest value of a set of input values.
Input:
NUMERIC valnnn Input values to check,INTEGER or REAL. There may be one or more input values specified.
Output:
NUMERIC <Return Value> The largest value of the input arguments. If all input arguments are INTEGER,then this result is also INTEGER. Otherwise,this result is REAL.
Error Conditions:
None.
---------------
mth_min(val1,val2,...)
##########
Description:
Return the smallest value of a set of input values.
Input:
NUMERIC valnnn Input values to check,INTEGER or REAL. There may be one or more input values specified.
Output:
NUMERIC <Return Value> The smallest value of the input arguments. If all input arguments are INTEGER,then this result is also INTEGER. Otherwise,this result is REAL.
Error Conditions:
None.
---------------
mth_mod(value,divisor)
##########
Description:
Return remainder of a number after dividing by a divisor.
Input:
NUMERIC value The value to be divided by the divisor.
NUMERIC divisor The divisor value.
Output:
NUMERIC <Return Value> The remainder after dividing value by the divisor an integral number of times. If both input arguments are INTEGER,then this result is also INTEGER. Otherwise,this result is REAL.
Error Conditions:
None.
---------------
mth_round(value,ndecimals)
##########
Description:
Return a value rounded to a specified number of decimals.
Input:
REAL value The value to be rounded.
INTEGER ndecimals Number of decimals.
Output:
REAL <Return Value> The input value rounded to the specified number of decimals. Note that with round-off errors,the value may not get exactly rounded.
Error Conditions:
None.
---------------
mth_sort(array,dupflag,nleft)
##########
Description:
This function will sort an array of integers,optionally removing all duplicate values.
Input:
INTEGER()array()This value specifies the items to be sorted. This value is used as both an input and an output. The original values passed into the function will be destroyed.
LOGICAL dupflag This value specifies,when set to TRUE,that duplicate sorted values will be removed. When this value is set to FALSE,duplicate values will not be removed.
Output:
INTEGER()array()This value returns the sorted items. This value is used as both an input and an output to this function,allowing the original values to be destroyed.
INTEGER nleft Number of integers that are in the final sort. Values in the array past this point are undefined. If DUPFLAG is FALSE then this will be the same as the size of the array.
Error Conditions:
None.
---------------
mth_sort_column(matrix,column,ascend)
##########
Description:
Sort a two dimensional integer or real array by one of its columns. The mth_ prefix is required for this routine.
Input:
NUMERIC()matrix Matrix of values to sort.
INTEGER column Column number within the matrix to sort by. Note that this column number starts from 1 even if the matrix is not based at a lowest dimension of 1.
LOGICAL ascend TRUE for an ascending order sort,FALSE for a descending order sort
Output:
NUMERIC()<Return Value> Matrix is sorted in place.
Error Conditions:
None.
---------------
mth_sort_row(matrix,row,ascend)
##########
Description:
Sort a two dimensional integer or real array by one of its columns. The mth_ prefix is required for this routine.
Input:
NUMERIC()matrix Matrix of values to sort.
INTEGER row Row number within the matrix to sort by. Note that this row number starts from 1 even if the matrix is not based at a lowest dimension of 1.
LOGICAL ascend TRUE for an ascending order sort,FALSE for a descending order sort
Output:
NUMERIC()<Return Value> Matrix is sorted in place.
Error Conditions:
None.
---------------
mth_array_search(array,look4,sorted)
##########
Description:
Search an integer array for a value. The mth_ prefix is required for this routine.
Input:
INTEGER()array Integer array of values to search.
INTEGER look4 Value to find in the array.
LOGICAL sorted TRUE if input array is already in ascending sort order. If FALSE then a complete search of the array will be necessary.
Output:
INTEGER <Return Value> Position in the array from 1 to n or zero if the value was not found in the array.
Error Conditions:
None.
---------------
str_length(string)
##########
Description:
Return the current length of a PCL string.
Input:
STRING string The string for which to return the length.
Output:
INTEGER <Return Value> The current length of the string. Remember that PCL strings are variable length.
Error Conditions:
None.
---------------
str_maxlength(string)
##########
Description:
Return the maximum length of a PCL string.
Input:
STRING string The string for which to return the maximum length.
Output:
INTEGER <Return Value> The maximum length of the string. For a virtual string,this returns the current maximum length. For an unallocated virtual string,the result is currently undefined.
Error Conditions:
None.
---------------
str_to_lower(string)
##########
Description:
Return a copy of the input string with all characters converted to lower case letters.
Input:
STRING string The string to convert to lower case. The input string argument is not modified by this call.
Output:
STRING <Return Value> The input string converted to lower case.
Error Conditions:
None.
---------------
str_to_upper(string)
##########
Description:
Return a copy of the input string with all characters converted to upper case letters.
Input:
STRING string The string to convert to upper case. The input string argument is not modified by this call.
Output:
STRING <Return Value> The input string converted to upper case.
Error Conditions:
None.
---------------
str_strip_lead(string)
##########
Description:
Return a copy of the input string with leading blank characters removed.
Input:
STRING string The string to strip leading blanks from. The input string argument is not modified by this call.
Output:
STRING <Return Value> The input string without any leading blanks.
Error Conditions:
None.
---------------
str_strip_trail(string)
##########
Description:
Return a copy of the input string with trailing blank characters removed.
Input:
STRING string The string to strip trailing blanks from. The input string argument is not modified by this call.
Output:
STRING <Return Value> The input string without any trailing blanks.
Error Conditions:
None.
---------------
str_substr(string,position,length)
##########
Description:
Return a portion of the input string from the specified position for the specified length.
Input:
STRING string The string to extract the substring from. The input string argument is not modified by this call.
INTEGER position Starting position in the string where 1 is the first position.
INTEGER length Number of characters to extract. If less than or equal to zero,then an empty string is extracted. If more characters are requested than are available in the string from the specified position,only the available characters will be returned.
Output:
STRING <Return Value> The extracted substring of the input string.
Error Conditions:
None.
---------------
str_assign(mystring,position,length,substring)
##########
Description:
This function will replace a portion of a string with a another string.
Input:
STRING mystring[ ] This value specifies the original string to be modified. This value is used as both an input and output value. The original string will not be preserved.
INTEGER position This value specifies the starting place in the input value mystring where the substitution will take place. The first character in the string is at position 1.
INTEGER length This value specifies the number of characters to be replaced.
STRING substring[ ] This value specifies the string that will be substituted into the input value mystring.
Output:
STRING mystring[ ] This value returns the original input value mystring with a portion of the string being replaced with the input value substring. This value is used as both an input and an output value. The original input value mystring will be overwritten.
Error Conditions:
None.
---------------
str_index(string1,string2)
##########
Description:
Return the position where a string is found within another string.
Input:
STRING string1 The string within which to find an occurrence of the second string.
STRING string2 The string to look for within the first string.
Output:
INTEGER <Return Value> The position where string2 was found within string1 where 1 is the first position. Zero is returned if the string was not found.
Error Conditions:
None.
---------------
str_find_match(string,chars)
##########
Description:
Return the position where any of a set of characters is found within another string.
Input:
STRING string The string within which to find an occurrence of any character in the second string.
STRING chars A list of characters to search for within the first string.
Output:
INTEGER <Return Value> The position where one of the characters was found within the string where 1 is the first position. Zero is returned if the non of the characters occurred in the string.
Error Conditions:
None.
---------------
str_find_nomatch(string,chars)
##########
Description:
Return the position where any character other than those in a set of characters is found within another string.
Input:
STRING string The string within which to find an occurrence of any character not in the second string.
STRING chars A list of characters not to search for within the first string.
Output:
INTEGER <Return Value> The position where a character was found within the string which is not in the chars string,where 1 is the first position. Zero is returned if the string is only made up of characters within the chars string.
Error Conditions:
None.
---------------
str_equal(string1,string2)
##########
Description:
Check for an exact match between two strings including exact character case and trailing blanks. Normally the standard PCL == operator would be used which ignores character case and trailing blanks.
Input:
STRING string1 First string to compare.
STRING string2 Second string to compare.
Output:
LOGICAL <Return Value> TRUE if strings match exactly,FALSE otherwise.
Error Conditions:
None.
---------------
str_to_integer(string [,stat])
##########
Description:
Convert a string to an integer.
Input:
STRING string String to convert to integer value.
Output:
INTEGER stat Optional status,zero for success,or the position within the input string which contains the first invalid character.
INTEGER <Return Value> Integer value from conversion. Usually zero if the conversion fails.
Error Conditions:
None.
---------------
str_to_real(string [,stat])
##########
Description:
Convert a string to a real.
Input:
STRING string String to convert to real value.
Output:
INTEGER stat Optional status,zero for success,or the position within the input string which contains the first invalid character.
REAL <Return Value> Real value from conversion. Usually zero if the conversion fails.
Error Conditions:
None.
---------------
str_to_logical(string)
##########
Description:
Convert a string to a logical.
Input:
STRING string String to convert to logical value.
Output:
LOGICAL <Return Value> Logical value from conversion. This will be TRUE if the first non-blank character of the string is a T,Y,or 1,regardless of case. Otherwise,the value will be FALSE.
Error Conditions:
None.
---------------
str_from_integer(ival)
##########
Description:
Convert an integer to a string.
Input:
INTEGER ival Integer to convert to string representation.
Output:
STRING <Return Value> String that represents the integer value.
Error Conditions:
None.
---------------
str_from_real(rval)
##########
Description:
Convert a real to a string.
Input:
REAL rval Real to convert to string representation.
Output:
STRING <Return Value> String that represents the real value. The string may end up being in decimal or in exponential notation.
Error Conditions:
None.
---------------
str_from_logical(lval)
##########
Description:
Convert a logical to a string.
Input:
LOGICAL lval Logical to convert to string representation.
Output:
STRING <Return Value> String that represents the logical value. The string will be either “TRUE” or “FALSE”.
Error Conditions:
None.
---------------
str_datatype(string)
##########
Description:
Attempt to decipher the type of representation in a string.
Input:
STRING string String to decipher.
Output:
STRING <Return Value> String representing datatype. Either “INTEGER,” “REAL,” “LOGICAL,” or “STRING.”
Error Conditions:
None.
---------------
str_formatc(string,format,args...)
##########
Description:
Perform a limited C style format conversion into a string. This routine is obsolete but exists for special purposes. Use STRING_WRITE instead.
Input:
STRING string Input string.
STRING format C Format string with handling of \n,\r,\t,%d,%f,%e,%g,%x,%s,%c,and %%. unknown args Appropriate datatype for format specifiers. Incorrect specifications may cause a crash.
Output:
STRING <Return Value> Resultant string from processing format.
Error Conditions:
None.
---------------
str_formatf(string,format,args...)
##########
Description:
Perform a limited C style format conversion into a string. This routine is obsolete but exists for special purposes. Use STRING_WRITE instead.
Input:
STRING string Input string.
STRING format FORTRAN format string with handling of /,'string',X,I,F,E,G,and A formats. unknown args Appropriate datatype for format specifiers. Incorrect specifications may cause a crash. Array arguments are allowed.
Output:
STRING <Return Value> Resultant string from processing format.
Error Conditions:
None.
---------------
str_token(string,delim,num [,compress ])
##########
Description:
This function will extract a token or a sequence of characters marked off by a delimiting character or a set of characters from a string.
Input:
STRING string[ ] This value specifies the source string from which tokens will be extracted.
STRING delim[1] This value specifies the single character token delimiter.
INTEGER num This value specifies the ordinal of the token to return from the input value string. This value must be set to at least one. If there are five tokens in the input value string,setting this value to three will cause this function to return the third token.
LOGICAL compress This value specifies,when set to TRUE,that empty tokens will be ignored. When this value is set to FALSE,empty tokens caused by multiple delimiters will not be ignored. This value is optional and has a default value of FALSE.
Output:
STRING <Return Value> This function returns the token extracted from the input value string. Leading and trailing spaces will be deleted if the delimiter character is not a space.
Error Conditions:
None.
---------------
str_abbreviation(input,abbrev,minmatch)
##########
Description:
Check if a string is a valid abbreviation of another string.
Input:
STRING input Input string to check as a valid abbreviation.
STRING abbrev String to check input string against.
INTEGER minmatch Minimum number of characters that must match for the abbreviation to be considered valid.
Output:
LOGICAL <Return Value> TRUE if abbreviation is valid,FALSE otherwise.
Error Conditions:
None.
---------------
str_to_ascii(string [,position ])
##########
Description:
Return the ASCII integer value for a character within a string.
Input:
STRING string String which contains character for which to return ASCII value.
INTEGER position Optional position of the character. Default is one for the first character in the string.
Output:
INTEGER <Return Value> ASCII integer value or zero if string too small.
Error Conditions:
None.
---------------
str_from_ascii(ascii)
##########
Description:
Return the character represented by an ASCII value.
Input:
INTEGER ascii Integer ASCII value to convert to a character.
Output:
STRING <Return Value> Single character represented by ASCII value.
Error Conditions:
None.
---------------
str_pattern(string,pattern,options)
##########
Description:
Compare a string against a pattern and return match results.
Input:
STRING string String to compare against the pattern.
STRING pattern Pattern to check against with wildcards as defined by the options parameter.
INTEGER options 1 = Linux file type compare where “*” matches any number of characters and “?” matches a single character. 2= VMS file type compare where “*” matches any number of characters other than a period and “%” matches any single character. 0 = use 1 for Linux systems and 2 for VMS systems.
Output:
LOGICAL <Return Value> TRUE if the pattern match succeeds. FALSE otherwise.
Error Conditions:
None.
---------------
string_newline_count(string,count)
##########
Description:
This function counts the number of newline characters (\n)in a string.
Input:
STRING string[] This value specifies the string to look for newline characters.
Output:
INTEGER count The number of newline characters in the string.
Error Conditions:
None.
---------------
string_newline_position(string,position)
##########
Description:
This function returns the newline character (\n)positions in a string.
Input:
STRING string[] This value specifies the string to look for newline characters.
Output:
INTEGER position[] The newline character positions in the string.
Error Conditions:
None.
---------------
block_open(filename,options,nwpb,chan,fsize)
##########
Description:
Open a binary block oriented proprietary format file for access.
Input:
STRING filename Operating system name of file.
STRING options File open flags. Some set of R,W,N,O,P,and V. See File Utility Functions,87.
INTEGER nwpb Number of words per block to use for the file.
Output:
INTEGER chan Channel number to use for subsequent block I/O operations.
INTEGER fsize Current file size in bytes if determinable.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
block_close(chan,options)
##########
Description:
Close a file that was opened for block I/O.
Input:
INTEGER chan Channel from a previous block_open call.
STRING options Close flags. If “D” is specified,then the file will be deleted after closing.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
block_read(chan,blknum,nwords,buffer,numread)
##########
Description:
Read a block or blocks from a file opened for block oriented I/O.
Input:
INTEGER chan Channel from a previous block_open call.
INTEGER blknum Block number to read from the file where zero is the first block.
INTEGER nwords Number of words to be read. Normally this is a multiple of the number of words per block.
Output:
INTEGER()buffer Buffer area into which data is read. More than NWORDS of data may be returned if NWORDS is not a multiple of the number of words per block.
INTEGER numread Number of words actually read.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
block_write(chan,blknum,nwords,buffer)
##########
Description:
Write a block or blocks to a file opened for block oriented I/O.
Input:
INTEGER chan Channel from a previous block_open call.
INTEGER blknum Block number to write from the file where zero is the first block.
INTEGER nwords Number of words to write.
INTEGER()buffer Buffer area from which data is written.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
block_get_name(chan,fspec,lenfspec)
##########
Description:
Get the operating system filename of a file open for block oriented I/O.
Input:
INTEGER chan Channel from a previous block_open call.
Output:
STRING fspec File specification of open file.
INTEGER lenfspec Length of name returned in FSPEC.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
file_add_path(where,newpath)
##########
Description:
Add a path to the path list.
Input:
INTEGER where Position to insert path. Zero inserts at the start (after current directory),1 inserts after the first path,and so on.
STRING newpath New directory specification to add to the path list.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
file_append_version(version,nzeros,fspec)
##########
Description:
Append a version number to a file specification only if there is not already a version number in the specification. This is a utility routine which will not normally be called by the user. Use file_build_fname instead.
Input:
INTEGER version Version number or zero for no version.
INTEGER nzeros Number of leading zeros to add to version number.
STRING fspec Original file specification.
Output:
STRING fspec Modified file specification.
Error Conditions:
None.
---------------
file_build_fname(dir,base,ext,options,filespec)
##########
Description:
Create a full file specification given its component parts.
Input:
STRING dir Directory portion of file specification.
STRING base Base filename portion.
STRING ext Extension for filename.
STRING options Options of N,O,P,or V. See File Utility Functions,87.
Output:
STRING filespec Resultant file specification.
Error Conditions:
None.
---------------
file_create_directory(dirname,)
##########
Description:
Create a directory.
Input:
STRING dirname Path to directory to create. If multiple directories need to be created for the path,they will be.
INTEGER access Linux style access permissions for new directories. This value is normally an octal number which is hard to represent in PCL. The easiest way to specify a protection such as 755 is to use the expression (7*64+5*8+5). Using zero gives no access to the directory,using 7*64+7*8+7 gives full access to the directory.
Output:
INTEGER <Return Value> Zero for success. If the directory already exists,the call is considered successful.
Error Conditions:
None.
---------------
file_delete(filespec)
##########
Description:
Delete an operating system file.
Input:
STRING filespec File to delete. The path will not be searched for the file.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
file_delete_path(oldpath)
##########
Description:
Remove a path from the path list.
Input:
STRING oldpath Directory specification to remove from the path.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
file_executable(filespec)
##########
Description:
Return whether or not a specified file has execute permission.
Input:
STRING filespec File specification to check.
Output:
LOGICAL <Return Value> True for execute permission,False if no execute permission.
Error Conditions:
None.
Side Effects:
Warning. If the operating system can’t determine execute permission,this function will normally return True.
---------------
file_exists(filespec,options)
##########
Description:
Check to see if a file exists.
Input:
STRING filespec File to look up.
STRING options Option flags of P or V. See File Utility Functions,87.
Output:
LOGICAL <Return Value> TRUE if file exists. FALSE if file could not be found.
Error Conditions:
None.
---------------
file_exists_local(filespec)
##########
Description:;
Check to see if a file exists in the current directory. Normally,the “file_exists” function should be used with empty options instead of this routine.
Input:
STRING filespec File to look up.
Output:
LOGICAL <Return Value> TRUE if file exists. FALSE if file could not be found.
Error Conditions:
None.
---------------
file_exists_version(filespec,version,nzeros)
##########
Description:
Find the highest version of a file in the current directory.
Input:
STRING filespec File to look up without version specified.
Output:
INTEGER version Version number found or zero if no versions exists but the file exists without any version.
INTEGER nzeros Number of leading zeros that were found in the version number.
LOGICAL <Return Value> TRUE if file exists. FALSE if file could not be found.
Error Conditions:
None.
---------------
file_expand_home(inspec,outspec)
##########
Description:
Expand any “~” home directory syntax in the file specification.
Input:
STRING inspec Input file specification.
Output:
STRING outspec File specification with expanded home syntax.
Error Conditions:
None.
---------------
file_get_bfname(filespec,basename)
##########
Description:
Extract the base filename given a file specification (without versions).
Input:
STRING filespec Input file specification.
Output:
STRING basename Base filename.
Error Conditions:
None.
---------------
file_get_dfname(filespec,directory)
##########
Description:
Extract the directory specification given a file specification.
Input:
STRING filespec Input file specification.
Output:
STRING directory Directory specification.
Error Conditions:
None.
---------------
file_get_efname(filespec,extension)
##########
Description:
Extract the extension specification given a file specification (without versions).
Input:
STRING filespec Input file specification.
Output:
STRING extension Extension specification.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
file_get_filespec(inspec,options,outspec)
##########
Description:
Get a file specification that matches the specified input specification and options.
Input:
STRING inspec Input file specification.
STRING options Option string containing any of N,O,P,or V. See File Utility Functions,87.
Output:
STRING outspec Output file specification.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
file_get_next_path(ipath,path)
##########
Description:
Iteratively retrieve entries from the path list.
Input:
INTEGER ipath Set to zero on first call. Pass return result back in on subsequent calls.
Output:
STRING path Next entry from the path list. The current directory path is returned as an empty string.
INTEGER <Return Value> Minus one if no more paths left. Otherwise use this value for the next call to file_get_next_path.
Error Conditions:
None.
---------------
file_get_p3_home(path)
##########
Description:
Return directory path for Patran “home” directory.
Input:
None.
Output:
STRING path Path to Patran “home” directory.
INTEGER <Return Value> Status,zero for success.
Error Conditions:
None.
---------------
file_init_path(option)
##########
Description:
Initialize the path list for use.
Input:
INTEGER option Zero to initialize if not already done. One to clear all entries from the path. Two to reset the path back to the initial default path setting.
Output:
None.
Error Conditions:
None.
---------------
file_list_end(chan)
##########
Description:
Iteratively retrieve entries from the path list.
Input:
INTEGER chan Value from file_list_start.
Output:
INTEGER <Return Value> Status,zero for success,else error code.
Error Conditions:
None.
---------------
file_list_next(chan,fname)
##########
Description:
Iteratively retrieve entries from the directory using the optional filter specified in file_list_start.
Input:
INTEGER chan Value from file_list_start that indicates the directory and filter..
Output:
STRING fname The next file in the indicated directory that matches the specified filter.
INTEGER <Return Value> Status,zero for success,-1 for end of list,else error code.
Error Conditions:
None.
---------------
file_list_start(directory,filter,chan)
##########
Description:
Initialize a file directory search for files matching a pattern. This routine initializes the search,file_list_next gets each name,and file_list_end cleans up.
Input:
STRING directory Name of directory to search. A “.” will cause the current directory to be searched.
STRING filter File name qualifier. Only * and ? are guaranteed to work.
Output:
INTEGER chan Return value to use on subsequent calls to file_list_next and file_list_end.
INTEGER <Return Value> Status,zero for success,else error code.
Error Conditions:
None.
Side Effects:
Memory. Be sure to call file_list_end to match file_list_start or memory structures may not be freed.
---------------
file_readable(filespec)
##########
Description:
Check if read access is possible to a file.
Input:
STRING filespec File to check for read access.
Output:
LOGICAL <Return Value> TRUE if reading is possible,otherwise FALSE.
Error Conditions:
None.
---------------
file_writeable(filespec)
##########
Description:
Check if write access is possible to a file.
Input:
STRING filespec File to check for write access.
Output:
LOGICAL <Return Value> TRUE if writing is possible,otherwise FALSE.
Error Conditions:
None.
---------------
file_unique_name(prefix,options,outspec)
##########
Description:
Generate a unique name for a file (usually a scratch work file).
Input:
STRING prefix Prefix string for file,may be empty.
STRING options Option “S” for create in temp directory,or empty for create in current directory.
Output:
STRING outspec Output file specification.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
file_copy(source,dest)
##########
Description:
Copy an operating system file.
Input:
STRING source Name of existing source file.
STRING dest Name of new destination file which must not exist.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
file_query_remote(filename)
##########
Description:
Determine whether or not a file resides on a remote file system.
Input:
STRING filename File to check.
Output:
INTEGER <Return Value> Zero for file is remote,otherwise message code for file local or does not exist.
Error Conditions:
None.
---------------
record_open_new(filename,options,filecode,description,chan)
##########
Description:
Create and open a new record I/O file.
Input:
STRING filename Name of file to open.
STRING options Open options of R,W,P,or V. See File Utility Functions,87.
INTEGER filecode Integer value for the filetype of the new file. Ideally this should be a unique number for each kind of file that is created.
STRING description A informational text description of the file.
Output:
INTEGER chan Value to use for subsequent operations to this file.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_open_old(filename,options,chan,filecode,description)
##########
Description:
Open an existing record I/O file.
Input:
STRING filename Name of file to open.
STRING options Open options of R,W,P,or V. See File Utility Functions,87.
Output:
INTEGER chan Value to use for subsequent operations to this file.
INTEGER filecode Integer value that represents kind of file and is set by the record_open_new routine.
STRING description Description of the file.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_close(chan,options)
##########
Description:
Close a file opened for record I/O.
Input:
INTEGER chan Channel from the record I/O open routine.
STRING options Close options. Either “D” to delete the file after close or an empty string.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_get_name(chan,fspec,lenfspec)
##########
Description:
Return the file specification for an open record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
Output:
STRING fspec Filename of open record I/O file.
INTEGER lenfspec Length of the file specification.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_writerec_chars(chan,typecode,count,buffer)
##########
Description:
Write a record containing only character data to the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER typecode Typecode for the record.
INTEGER count Number of characters to write from the string.
CSTRING buffer String to write to record file.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_writerec_intchr(chan,typecode,icount,ibuffer,ccount,cbuffer)
##########
Description:
Write a record containing only integer and character data to the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER typecode Typecode for the record.
INTEGER icount Number of integers to write to the record.
INTEGER()ibuffer Integer data to write.
INTEGER ccount Number of characters to write from the string.
CSTRING cbuffer String to write to record file.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_writerec_ints(chan,typecode,count,buffer)
##########
Description:
Write a record containing only integer data to the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER typecode Typecode for the record.
INTEGER count Number of integers to write to the record.
INTEGER()buffer Integer data to write.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_writerec_reals(chan,typecode,count,buffer)
##########
Description:
Write a record containing only integer data to the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER typecode Typecode for the record.
INTEGER count Number of reals to write to the record.
REAL buffer()Real data to write.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_begin_write(chan,typecode)
##########
Description:
Start the writing of a complex record in the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER typecode Typecode for the record.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_begin_read(chan,typecode)
##########
Description:
Start the reading of a record from the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
Output:
INTEGER typecode Typecode for the record. Will be -1 for the end of the file.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_end_rw(chan)
##########
Description:
Complete the read or complex write of a record in the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_write_rechead(chan,format,count)
##########
Description:
Start the next field in writing a complex record to the Record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER format Datatype that will be written. Types defined are: 1=integer,2=real,3=char,4=double real (not from PCL),5=half integer,6=byte integer,7=4bit integer,8=1bit integer,9=logical,10=pointer.
INTEGER count Number of items of the specified format that will make up the data field.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_read_rechead(chan,format,count)
##########
Description:
Start the read of the next field from the current record of the Record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
Output:
INTEGER format Datatype that is available next. Types defined are: 1=integer,2=real,3=char,4=double real (not from PCL),5=half integer,6=byte integer,7=4bit integer,8=1bit integer,9=logical,10=pointer.
INTEGER count Number of items of the specified format that are available in the field.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_write_ints(chan,numitems,i_buffer)
##########
Description:
Start the read of the next field from the current record of the Record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items that will be written from the buffer given.
INTEGER()i_buffer Data of integers to write.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_write_reals(chan,numitems,r_buffer)
##########
Description:
Start the read of the next field from the current record of the Record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items that will be written from the buffer given.
REAL()r_buffer Data of reals to write.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_write_chars(chan,numitems,c_buffer)
##########
Description:
Start the read of the next field from the current record of the Record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items that will be written from the buffer given.
STRING c_buffer String data to write.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_write_halfints(chan,numitems,h_buffer)
##########
Description:
Start the read of the next field from the current record of the Record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items that will be written from the buffer given.
INTEGER()h_buffer Data of half integers,one per integer,to write.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_write_int8bits(chan,numitems,i8_buffer)
##########
Description:
Start the read of the next field from the current record of the Record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items that will be written from the buffer given.
INTEGER()i8_buffer Data of 8 bit integers,one per integer,to write.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_write_int4bits(chan,numitems,i4_buffer)
##########
Description:
Start the read of the next field from the current record of the Record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items that will be written from the buffer given.
INTEGER()i4_buffer Data of 4 bit integers,one per integer,to write.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_write_intbits(chan,numitems,i1_buffer)
##########
Description:
Start the read of the next field from the current record of the Record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items that will be written from the buffer given.
INTEGER()i1_buffer Data of 1 bit integers,one per integer,to write.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_write_logicals(chan,numitems,l_buffer)
##########
Description:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items that will be written from the buffer given.
Start the read of the next field from the current record of the Record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items that will be written from the buffer given.
LOGICAL()l_buffer Data of logicals to write.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_write_pointers(chan,numitems,p_buffer)
##########
Description:
Start the read of the next field from the current record of the Record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items that will be written from the buffer given.
INTEGER()p_buffer Data of pointers,one per integer,to write.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_read_ints(chan,numitems,i_buffer)
##########
Description:
Read all or part of the current field of the current record of the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items to read into the specified buffer.
Output:
INTEGER()i_buffer Integer data read in.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_read_reals(chan,numitems,r_buffer)
##########
Description:
Read all or part of the current field of the current record of the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items to read into the specified buffer.
Output:
REAL()r_buffer Real data read in.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_read_chars(chan,numitems,c_buffer)
##########
Description:
Read all or part of the current field of the current record of the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items to read into the specified buffer.
Output:
STRING c_buffer String data read in.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_read_halfints(chan,numitems,h_buffer)
##########
Description:
Read all or part of the current field of the current record of the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items to read into the specified buffer.
Output:
INTEGER()h_buffer Half integer data read in,one per integer.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_read_int8bits(chan,numitems,i8_buffer)
##########
Description:
Read all or part of the current field of the current record of the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items to read into the specified buffer.
Output:
INTEGER()i8_buffer Eight bit integer data read in,one per integer.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_read_int4bits(chan,numitems,i4_buffer)
##########
Description:
Read all or part of the current field of the current record of the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items to read into the specified buffer.
Output:
INTEGER()i4_buffer Four bit integer data read in,one per integer.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_read_intbits(chan,numitems,i1_buffer)
##########
Description:
Read all or part of the current field of the current record of the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items to read into the specified buffer.
Output:
INTEGER()i1_buffer One bit integer data read in,one per integer.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_read_logicals(chan,numitems,l_buffer)
##########
Description:
Read all or part of the current field of the current record of the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items to read into the specified buffer.
Output:
LOGICAL()l_buffer Logical data read in.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_read_pointers(chan,numitems,p_buffer)
##########
Description:
Read all or part of the current field of the current record of the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items to read into the specified buffer.
Output:
INTEGER()p_buffer Pointer data read in,one per integer.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_read_ints(chan,numitems,i_buffer)
##########
Description:
Read all or part of the current field of the current record of the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items to read into the specified buffer.
Output:
INTEGER()i_buffer Integer data read in.
Error Conditions:
None.
---------------
record_read_reals(chan,numitems,r_buffer)
##########
Description:
Read all or part of the current field of the current record of the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items to read into the specified buffer.
Output:
STRING c_buffer String data read in.
Error Conditions:
None.
---------------
record_read_halfints(chan,numitems,h_buffer)
##########
Description:
Read all or part of the current field of the current record of the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items to read into the specified buffer.
Output:
INTEGER()h_buffer Half integer data read in,one per integer.
Error Conditions:
None.
---------------
record_read_int8bits(chan,numitems,i8_buffer)
##########
Description:
Read all or part of the current field of the current record of the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items to read into the specified buffer.
Output:
INTEGER()i8_buffer Eight bit integer data read in,one per integer.
Error Conditions:
None.
---------------
record_read_int4bits(chan,numitems,i4_buffer)
##########
Description:
Read all or part of the current field of the current record of the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items to read into the specified buffer.
Output:
INTEGER()i4_buffer Four bit integer data read in,one per integer.
Error Conditions:
None.
---------------
record_read_intbits(chan,numitems,i1_buffer)
##########
Description:
Read all or part of the current field of the current record of the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items to read into the specified buffer.
Output:
INTEGER()i1_buffer One bit integer data read in,one per integer.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_read_logicals(chan,numitems,l_buffer)
##########
Description:
Read all or part of the current field of the current record of the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items to read into the specified buffer.
Output:
LOGICAL()l_buffer Logical data read in.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_read_pointers(chan,numitems,p_buffer)
##########
Description:
Read all or part of the current field of the current record of the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER numitems Number of items to read into the specified buffer.
Output:
INTEGER()p_buffer Pointer data read in,one per integer.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_get_position(chan,position)
##########
Description:
Get a pointer value for the current position in the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
Output:
INTEGER position Pointer value in internal format.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_set_position(chan,position)
##########
Description:
Set the current position in the record I/O file using either a previous pointer value or the special value of zero or minus one.
Input:
INTEGER chan Channel from the record I/O open routine.
INTEGER position Start of record pointer from previous record_get_position call or zero for start of the file or minus one for end of the file.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_get_header(chan,cdatetime,mdatetime)
##########
Description:
Get creation/modification dates for the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
Output:
STRING cdatetime Creation date of file in format: yyyymmddhhmmss.
STRING mdatetime Modify date of file in format: yyyymmddhhmmss.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
record_update(chan)
##########
Description:
Attempt to force the disk file to be up to date for the record I/O file.
Input:
INTEGER chan Channel from the record I/O open routine.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
stream_open(filename,options,chan)
##########
Description:
Create or open a new or existing stream I/O file.
Input:
STRING filename Name of file to open/create.
STRING options Open options of N,O,R,W,P,or V. See File Utility Functions,87.
Output:
INTEGER chan Channel number to use for subsequent stream I/O operations on this file.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
stream_close(chan,options)
##########
Description:
Close a file opened for stream I/O.
Input:
INTEGER chan Channel from a previous call to stream_open.
STRING options Close options. Use “D” to delete the file after closing or else use an empty string.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
stream_get_name(chan,fspec,lenfspec)
##########
Description:
Get the name of a file that is open for stream I/O.
Input:
INTEGER chan Channel from a previous call to stream_open.
Output:
STRING fspec Name of the file.
INTEGER lenfspec Length of the file specification returned.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
stream_get_header(chan,filetype,description,createdate,modifydate,recordinfo)
##########
Description:
Get header information associated with an open stream I/O file.
Input:
INTEGER chan Channel from a previous call to stream_open.
Output:
INTEGER filetype Filetype integer set from a stream_set_header call.
STRING description Description string from a stream_set_header call.
STRING createdate Creation date in format: yyyymmddhhmmss.
STRING modifydate Modify date in format: yyyymmddhhmmss.
INTEGER(5)recordinfo Application use data words.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
stream_set_header(chan,filetype,description,recordinfo)
##########
Description:
Set some header information for a stream I/O file.
Input:
INTEGER chan Channel from a previous call to stream_open.
INTEGER filetype Filetype integer,application defined.
STRING description Description string,application defined.
INTEGER(5)recordinfo Application defined data words.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
stream_get_position(chan,position)
##########
Description:
Get the current position in the stream I/O file.
Input:
INTEGER chan Channel from a previous call to stream_open.
Output:
INTEGER position Position returned in internal format.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
stream_set_position(chan,position)
##########
Description:
Set current position in the stream file to the beginning of the file or to a previously saved position.
Input:
INTEGER chan Channel from a previous call to stream_open.
INTEGER position Zero for beginning of file or a value returned from a previous call to stream_get_position.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
stream_read_int(chan,numtoread,buffer)
##########
Description:
Read integers from the stream I/O file.
Input:
INTEGER chan Channel from a previous call to stream_open.
INTEGER numtoread Number of integers to read.
Output:
INTEGER()buffer Integer data read in by the call.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
stream_read_real(chan,numtoread,buffer)
##########
Description:
Read reals from the stream I/O file.
Input:
INTEGER chan Channel from a previous call to stream_open.
INTEGER numtoread Number of reals to read.
Output:
REAL()buffer Real data read in by the call.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
stream_read_char(chan,numtoread,buffer)
##########
Description:
Read characters from the stream I/O file.
Input:
INTEGER chan Channel from a previous call to stream_open.
INTEGER numtoread Number of characters to read.
Output:
STRING buffer Character data read from stream I/O file.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
stream_write_int(chan,numtowrite,buffer)
##########
Description:
Write integers to the stream I/O file.
Input:
INTEGER chan Channel from a previous call to stream_open.
INTEGER numtowrite Number of integers to write out.
INTEGER()buffer Data to write out to the file.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
stream_write_real(chan,numtowrite,buffer)
##########
Description:
Write reals to the stream I/O file.
Input:
INTEGER chan Channel from a previous call to stream_open.
INTEGER numtowrite Number of reals to write out.
REAL()buffer Data to write out to the file.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
stream_write_char(chan,numtowrite,buffer)
##########
Description:
Write character data to the stream I/O file.
Input:
INTEGER chan Channel from a previous call to stream_open.
INTEGER numtowrite Number of characters to write out.
STRING buffer Character data to write.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
stream_skip_int(chan,numtoskip)
##########
Description:
Skip over integers in the stream I/O file.
Input:
INTEGER chan Channel from a previous call to stream_open.
INTEGER numtoskip Number of integers to skip.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
stream_skip_real(chan,numtoskip)
##########
Description:
Skip over reals in the stream I/O file.
Input:
INTEGER chan Channel from a previous call to stream_open.
INTEGER numtoskip Number of reals to skip.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
stream_skip_char(chan,numtoskip)
##########
Description:
Skip over character data in the stream I/O file.
Input:
INTEGER chan Channel from a previous call to stream_open.
INTEGER numtoskip Number of characters to skip.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
stream_update(chan)
##########
Description:
Attempt to force all output to be up to date on disk.
Input:
INTEGER chan Channel from a previous call to stream_open.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
string_read(string,fmt,ints,reals,chars)
##########
Description:
Read formatted record of mixed data from a string variable.
Input:
STRING string Character string from which the conversion takes place.
STRING fmt Format string governing how conversion is done. See Input Format Strings,130 for details.
Output:
INTEGER()ints Integer array of data filled in by the read.
REAL()reals Real array of data filled in by the read.
STRING[]()chars Character array of data filled in by the read.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
string_write(fmt,ints,reals,chars,string)
##########
Description:
Write formatted records of mixed data into a string variable.
Input:
STRING fmt Format string governing how conversion is done. See Output Format Strings,128 for details.
INTEGER()ints Integer array of data to convert.
REAL()reals Real array of data to convert.
STRING[]()chars String array of data to convert.
Output:
STRING string Character string which receives converted data.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
text_open(filespec,options,lrecl,maxrecs,chan)
##########
Description:
Open a text file for the Text I/O package.
Input:
STRING filespec Filename of file to open.
STRING options Open options of N,O,A,R,W,P,or V. See File Utility Functions,87.
INTEGER lrecl Maximum record length for the file if known. Use zero if not known.
INTEGER maxrecs Maximum number of records that the file will contain if known. Use zero if not known.
Output:
INTEGER chan Channel value to use for subsequent text I/O operations.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
text_close(chan,options)
##########
Description:
Close a text file that was previously opened with text_open.
Input:
INTEGER chan Channel from a previous call to text_open.
STRING options Close options. Use “D” to delete the file after closing or an empty string otherwise.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
text_flush(chan)
##########
Description:
Attempt to flush any output to the disk for the specified text I/O file.
Input:
INTEGER chan Channel from a previous call to text_open.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
text_get_name(chan,fspec,lenfspec)
##########
Description:
Get the filename associated with an open text I/O file.
Input:
INTEGER chan Channel from a previous call to text_open.
Output:
STRING fspec File specification associated with text I/O file.
INTEGER lenfspec Length of string returned in fspec.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
text_read_string(chan,line,lenline)
##########
Description:
Read a single record into a string from a text I/O file.
Input:
INTEGER chan Channel from a previous call to text_open or zero to read from standard input (xterm window).
Output:
STRING line Line read in from the text file.
INTEGER lenline Length of the line that was read in.
INTEGER <Return Value> Zero for success,minus one for end of file,else error message code.
Error Conditions:
None.
---------------
text_write_string(chan,line)
##########
Description:
Write a single record from a string to a text I/O file.
Input:
INTEGER chan Channel from a previous call to text_open or zero to write to standard output (xterm window).
STRING line Line to write to the text file.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
text_read(chan,fmt,ints,reals,chars)
##########
Description:
Read formatted records of mixed data from an open text I/O file.
Input:
INTEGER chan Channel from a previous call to text_open or zero to write to standard output (xterm window).
STRING fmt Format string governing how conversion is done.
Output:
INTEGER()ints Integer data converted from the read.
REAL()reals Real data converted from the read.
CSTRING[]()chars String data converted from the read.
INTEGER <Return Value> Zero for success,minus one if end of file,else error message code.
Error Conditions:
None.
---------------
text_write(chan,fmt,ints,reals,chars)
##########
Description:
Write formatted records of mixed data to a text I/O file.
Input:
INTEGER chan Channel from a previous call to text_open or zero to write to standard output (xterm window).
STRING fmt Format string governing how conversion is done.
INTEGER()ints Integer data to convert for the write.
REAL()reals Real data to convert for the write.
CSTRING[]()chars String data to convert for the write.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
text_get_position(chan,position)
##########
Description:
Get the current position in the text file for later use with text_set_position.
Input:
INTEGER chan Channel from a previous call to text_open.
Output:
INTEGER position Internal representation of the current position in the text I/O file.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
text_set_position(chan,position)
##########
Description:
Set the current position in the text file to the beginning of the file,the end of the file,or to a position previously saved with text_get_position.
Input:
INTEGER chan Channel from a previous call to text_open.
INTEGER position Zero for beginning of file,minus one for end of file,or a value previously returned by a call to text_get_position.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
text_truncate(chan)
##########
Description:
Truncate the text file at the current position thereby deleting any records that follow this position. The file must have been opened for write access.
Input:
INTEGER chan Channel from a previous call to text_open.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
text_get_file_size(chan,bytesize)
##########
Description:
Return the size of the file in bytes.
Input:
INTEGER chan Channel from a previous call to text_open.
Output:
INTEGER bytesize Size of the file in bytes.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
text_file_query(filnam,options,recnum,startc,endc,lowval,hival)
##########
Description:
Determine if a file contains character text when it is known that a portion of a record of the file contains a text representation of an integer value.
Input:
STRING filnam File to check.
STRING options Open options of P,or V. See File Utility Functions,87.
INTEGER recnum Record of the file which contains the known integer value where record 1 is the first record of the file.
INTEGER startc Starting character position in the record for the known integer value where 1 is the first position.
INTEGER endc Ending character position in the record for the known integer value.
INTEGER lowval Lowest acceptable value for the integer.
INTEGER hival Highest acceptable value for the integer.
Output:
LOGICAL <Return Value> TRUE if the file exists,can be read,and has a text representation of an integer in the specified record and columns that is within the specified bounds. Otherwise the result is returned FALSE.
Error Conditions:
None.
---------------
virtual_open_scratch(chan)
##########
Description:
Create and open a virtual scratch file.
Input:
None.
Output:
INTEGER chan Channel number to be used for subsequent operations on the virtual file.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
virtual_close(chan)
##########
Description:
Close a virtual scratch file.
Input:
INTEGER chan Channel number returned by a previous call to virtual_open_scratch.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
virtual_write_int(chan,numtowrite,buffer)
##########
Description:
Write integers to a virtual file.
Input:
INTEGER chan Channel number returned by a previous call to virtual_open_scratch.
INTEGER numtowrite Number of integers to write from the buffer.
INTEGER()buffer Buffer containing integers to write.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
virtual_write_real(chan,numtowrite,buffer)
##########
Description:
Write reals to a virtual file
Input:
INTEGER chan Channel number returned by a previous call to virtual_open_scratch.
INTEGER numtowrite Number of reals to write from the buffer.
REAL()buffer Buffer containing reals to write.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
virtual_write_char(chan,numtowrite,buffer)
##########
Description:
Write characters to a virtual file.
Input:
INTEGER chan Channel number returned by a previous call to virtual_open_scratch.
INTEGER numtowrite Number of characters to write from the buffer.
STRING buffer Buffer containing characters to write.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
virtual_read_int(chan,numtoread,buffer)
##########
Description:
Write integers from a virtual file.
Input:
INTEGER chan Channel number returned by a previous call to virtual_open_scratch.
INTEGER numtoread Number of integers to read into the buffer.
Output:
INTEGER()buffer Area to read integers into.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
virtual_read_real(chan,numtoread,buffer)
##########
Description:
Read real data from a virtual file.
Input:
INTEGER chan Channel number returned by a previous call to virtual_open_scratch.
INTEGER numtoread Number of reals to read into the buffer.
Output:
REAL()buffer Area to read reals into.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
virtual_read_char(chan,numtoread,buffer)
##########
Description:
Read character data from a virtual file.
Input:
INTEGER chan Channel number returned by a previous call to virtual_open_scratch.
INTEGER numtoread Number of characters to read into the buffer.
Output:
STRING buffer Area to read characters into.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
virtual_skip_int(chan,numtoskip)
##########
Description:
Skip over integer data in a virtual file.
Input:
INTEGER chan Channel number returned by a previous call to virtual_open_scratch.
INTEGER numtoskip Number of integers to skip over.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
virtual_skip_real(chan,numtoskip)
##########
Description:
Skip over real data in a virtual file.
Input:
INTEGER chan Channel number returned by a previous call to virtual_open_scratch.
INTEGER numtoskip Number of reals to skip over.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
virtual_skip_char(chan,numtoskip)
##########
Description:
Skip over character data in a virtual file.
Input:
INTEGER chan Channel number returned by a previous call to virtual_open_scratch.
INTEGER numtoskip Number of characters to skip over.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
virtual_get_position(chan,position)
##########
Description:
Get the current position in the virtual scratch file for later use with virtual_set_position.
Input:
INTEGER chan Channel number returned by a previous call to virtual_open_scratch.
Output:
INTEGER position Internal position to use in a later call to virtual_set_position.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
virtual_set_position(chan,position)
##########
Description:
Set the current position in the virtual scratch file to the beginning of the file or to a position previously retrieved with a call to virtual_get_position.
Input:
INTEGER chan Channel number returned by a previous call to virtual_open_scratch.
INTEGER position Zero to set position to the beginning of the file or a position previously returned by virtual_get_position.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
xf_error_start(mess)
##########
Description:
Start the reporting of an error message.
Input:
STRING mess First line of error message to report.
Output:
None.
Error Conditions:
None.
---------------
xf_error_continue(mess)
##########
Description:
Continue reporting an error message after xf_error_start has been called.
Input:
STRING mess Additional line of error message to report.
Output:
None.
Error Conditions:
None.
---------------
xf_error_end()
##########
Description:
End the reporting of an error message after xf_error_start has been called.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
xf_write_comment(mess)
##########
Description:
Write a comment to the history window/session file.
Input:
STRING mess Comment to write out.
Output:
None.
Error Conditions:
None.
---------------
xf_write_command(mess)
##########
Description:
Write a command to the history window/session file.
Input:
STRING mess Command to write out.
Output:
None.
Error Conditions:
None.
---------------
xf_write_query(mess)
##########
Description:
Write a query to the history window/session file.
Input:
STRING mess Query to write out.
Output:
None.
Error Conditions:
None.
---------------
xf_write_print(mess)
##########
Description:
Write a “print” message to the history window/session file.
Input:
STRING mess Message to write out.
Output:
None.
Error Conditions:
None.
---------------
xf_write_stdout(mess)
##########
Description:
Write a line to standard output,usually the terminal window.
Input:
STRING mess Line to write out.
Output:
None.
Error Conditions:
None.
---------------
xf_write_stderr(mess)
##########
Description:
Write a line to standard error,usually the terminal window.
Input:
STRING mess Line to write out.
Output:
None.
Error Conditions:
None.
---------------
xf_read_from_user(inmess)
##########
Description:
Read a response from the command line.
Input:
None.
Output:
STRING inmess Line entered by the user.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
None.
---------------
xf_read_stdin(inmess)
##########
Description:
Read a response from standard input (xterm window).
Input:
None.
Output:
STRING inmess Line read in from standard input.
INTEGER <Return Value> Zero for success,minus one for end of file,else error message code.
Error Conditions:
None.
---------------
write(expr,...)
##########
Description:
Write out a set of expressions,one per line,to the history window (or tty if no history window).
Input:
ANY expr General PCL expression to write out.
Output:
None.
Error Conditions:
None.
---------------
io_write(expr,...)
##########
Description:
Write out a set of expressions,one per line,to the history window (or tty if no history window).
Input:
ANY expr General PCL expression to write out.
Output:
None.
Error Conditions:
None.
---------------
ui_write(expr,...)
##########
Description:
Write out a set of expressions,one per line,to the history window (or tty if no history window).
Input:
ANY expr General PCL expression to write out.
Output:
None.
Error Conditions:
None.
---------------
ui_read_logical(prompt[,hotread])
##########
Description:
Display a form to the user requesting a yes/no response.
Input:
STRING prompt Prompt to display in the form.
LOGICAL hotread Optional and ignored.
Output:
LOGICAL <Return Value> True if YES button,False otherwise.
Error Conditions:
None.
---------------
ui_read_integer(prompt[,minval][,maxval])
##########
Description:
Display a form to the user requesting an integer response.
Input:
STRING prompt Prompt to display in the form.
INTEGER minval Optional lower bound for response.
INTEGER maxval Optional upper bound for response.
Output:
INTEGER <Return Value> Integer value that user entered or zero if aborted.
Error Conditions:
abort Value returned is zero even if outside of range specified.
---------------
ui_read_real(prompt[,minval][,maxval])
##########
Description:
Display a form to the user requesting a real response.
Input:
STRING prompt Prompt to display in the form.
REAL minval Optional lower bound for response.
REAL maxval Optional upper bound for response.
Output:
REAL <Return Value> Value entered by user or zero for abort.
Error Conditions:
abort Value returned is zero even if outside of range specified.
---------------
ui_read_string(prompt[,option])
##########
Description:
Display a form to the user requesting a string response.
Input:
STRING prompt Prompt to display in the form.
INTEGER option Optional and ignored.
Output:
STRING return Value entered by user.
Error Conditions:
None.
---------------
ui_answer_message(msgcode,)
##########
Description:
Let PCL function supply answer to a user interface message prompt. The ui_answer_message call must occur BEFORE the user interface message appears.
Input:
INTEGER msgcode Integer code of message that response belongs to. This code is most easily found by first interactively generating the message and then looking in the resultant session file to see what code was generated. If -1 is used for the message code then the answer will apply to any message.
STRING answer Answer for the message. For normal user interface prompts,the valid strings are “YES”,“NO”,YESFOR ALL”,“NOFORALL”,and “ABORT”.
Output:
STRING return Value entered by user.
Error Conditions:
None.
---------------
ui_override_message(msgcode,)
##########
Description:
Let PCL function supply permanent answer to a user interface message prompt. The ui_override_message call must occur BEFORE the user interface message appears. The override stays in effect until it is cancelled with an empty answer string.
Input:
INTEGER msgcode Integer code of message that response belongs to. This code is most easily found by first interactively generating the message and then looking in the resultant session file to see what code was generated.
STRING answer Answer for the message. For normal user interface prompts,the valid strings are “YES”,“NO”,YESFOR ALL”,“NOFORALL”,and “ABORT”. An empty string,““,is used to turn off the override.
Output:
STRING return Value entered by user.
Error Conditions:
None.
---------------
write_line(expr,...)
##########
Description:
Write out a set of expressions trying to fit as much as possible into an 80 character output line,to the history window (or tty if no history window).
Input:
ANY expr General PCL expression to write out.
Output:
None.
Error Conditions:
None.
---------------
io_write_line(expr,...)
##########
Description:
Write out a set of expressions trying to fit as much as possible into an 80 character output line,to the history window (or tty if no history window).
Input:
ANY expr General PCL expression to write out.
Output:
None.
Error Conditions:
None.
---------------
ui_write_line(expr,...)
##########
Description:
Write out a set of expressions trying to fit as much as possible into an 80 character output line,to the history window (or tty if no history window).
Input:
ANY expr General PCL expression to write out.
Output:
None.
Error Conditions:
None.
---------------
ui_writec(format,args...)
##########
Description:
Perform a limited C style format output to the history window. This routine is obsolete but exists for special purposes. Look at the TEXT_WRITE routine instead.
Input:
STRING format C Format string with handling of \n,\r,\t,%d,%f,%e,%g,%x,%s,%c,and %%. unknown args Appropriate datatype for format specifiers. Incorrect specifications may cause a crash.
Output:
None.
Error Conditions:
None.
---------------
io_writec(format,args...)
##########
Description:
Perform a limited C style format output to the history window. This routine is obsolete but exists for special purposes. Look at the TEXT_WRITE routine instead.
Input:
STRING format C Format string with handling of \n,\r,\t,%d,%f,%e,%g,%x,%s,%c,and %%. unknown args Appropriate datatype for format specifiers. Incorrect specifications may cause a crash.
Output:
None.
Error Conditions:
None.
---------------
ui_writef(format,args...)
##########
Description:
Perform a limited FORTRAN style format output to the history window. This routine is obsolete but exists for special purposes. Look at the TEXT_WRITE routine instead.
Input:
STRING format FORTRAN format string with handling of /,'string',X,I,F,E,G,and A formats. unknown args Appropriate datatype for format specifiers. Incorrect specifications may cause a crash. Array arguments are allowed.
Output:
None.
Error Conditions:
None.
---------------
ui_writef(format,args...)
##########
Description:
Perform a limited FORTRAN style format output to the history window. This routine is obsolete but exists for special purposes. Look at the TEXT_WRITE routine instead.
Input:
STRING format FORTRAN format string with handling of /,'string',X,I,F,E,G,and A formats. unknown args Appropriate datatype for format specifiers. Incorrect specifications may cause a crash. Array arguments are allowed.
Output:
None.
Error Conditions:
None.
---------------
user_message(type,appcode,appname,message)
##########
Description:
Display a user message with the Patran user interface and possibly wait for and return a reply. The “type” determines whether the message is displayed in a form or simply output to the history window. The “type” also determines what buttons are available in the form. The “appcode” is a number assigned by the programmer which can be used in conjunction with ui_answer_message and ui_override_message to supply the message response during session file playback. Use of duplicate application codes will not generally cause problems but it is better if they are unique.
Input:
STRING type[] Type of message format desired. May be:“Info” Informative message“Warn” Warning message“Error” Error/Fatal message“Ack” Acknowledgment message“Q_YN” -Yes/No Query w/o default“Q_YN_Y” -Yes/No Query Yes default“Q_YN_N” -Yes/No Query No default“Q_YNY” -Yes/No/YesAll Query w/o default“Q_YNY_N” -Yes/No/YesAll Query No default“Q_YNYN” -Yes/No/YesAll/NoAll Query w/o default“Q_YNYN_Y” -Yes/No/YesAll/NoAll Query Yes default“Q_YNYN_N” -Yes/No/YesAll/NoAll Query No default“C_YN” -Yes/No Critical w/o default“C_YN_Y” -Yes/No Critical Yes default“C_YN_N” -Yes/No Critical No default“C_YNY” -Yes/No/YesAll Critical w/o default“C_YNY_N” -Yes/No/YesAll Critical No default“C_YNYN” -Yes/No/YesAll/NoAll Critical w/o default“C_YNYN_Y” -Yes/No/YesAll/NoAll Critical Yes default“C_YNYN_N” -Yes/No/YesAll/NoAll Critical No default
INTEGER appcode Application message code,unique value.
STRING appname[] Name of the application generating the message.
INTEGER message[] Message to display.
Output:
INTEGER <Return Value> 1=Yes,2=No,3=Yes All,4=Abort,5=No All.
---------------
msg_get_string(msgcode,string)
##########
Description:
Retrieve a message string from the message file.
Input:
INTEGER msgtype Message code.
Output:
STRING string String retrieved from message file.
INTEGER <Return Value> Length of retrieved message string.
Error Conditions:
None.
---------------
msg_to_form(msgcode,msgtype,appcode,ints,reals,chars)
##########
Description:
Display a message in either a user interface form or in the history window.
Input:
INTEGER msgcode Message code to look up in message file.
INTEGER msgtype Message type value.
INTEGER appcode Application code reporting error. Use zero for general.
INTEGER()ints Integer data for message formatting.
REAL*()reals Real data for message formatting.
STRING[]()chars String data for message formatting.
Output:
INTEGER <Return Value> Message return code (MSG_STAT_YES,...).
Error Conditions:
None.
---------------
msg_to_text(msgcode,msgtype,appcode,ints,reals,chars,maxout,chan)
##########
Description:
Write a message to a text I/O file.
Input:
INTEGER msgcode Message code to look up in message file.
INTEGER msgtype Message type value.
INTEGER appcode Application code reporting error.
INTEGER()ints Integer data for message formatting.
REAL*()reals Real data for message formatting.
STRING[]()chars String data for message formatting.
INTEGER maxout Maximum size of each output record.
INTEGER chan Channel from a text_open call or zero to write to standard output (xterm window).
Output:
INTEGER <Return Value> Should normally be 2.
Error Conditions:
None.
---------------
em_proceed_normal()
##########
Description:
This function returns FALSE if the user wants to abort and TRUE if the user does not want to abort. The user signals his abort request by clicking the Abort button and confirming the abort request on the Abort Confirmation form. This function also gives the system a chance to update the forms and the Patran viewports.
Input:
None.
Output:
LOGICAL return TRUE - Continue processing. FALSE - Abort processing.
Error Conditions:
None.
---------------
em_proceed_quick()
##########
Description:
This function returns FALSE if the user wants to abort and TRUE if the user does not want to abort. This function is identical to em_proceed_normal except it does not allow the system to update the Patran viewports.
Input:
None.
Output:
LOGICAL return TRUE - Continue processing. FALSE - Abort processing.
Error Conditions:
None.
---------------
em_synchronize()
##########
Description:
Synchronize events and graphics,making sure everything is up to date.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
sf_record_default(filename,rotations)
##########
Description:
Define the default recording session file name. Typically,only the base name should be specified. The complete file name will be <basename>.ses.<version>. If an existing session file is specified,a higher version number will be automatically created. This command should only appear in the system startup file p3epilog.pcl.
Input:
STRING filename New name of recording session file.
LOGICAL rotations Write all rotation command to FILENAME.
Output:
None.
Error Conditions:
None.
---------------
sf_play_default(filename,single_step)
##########
Description:
Define the session file to be played after system initialization has completed. The complete filename <basename>.<extension>.<version> should always be used to eliminate any ambiguity that may arise from using the same recording and playing file basename.This command should only appear in the system startup file p3epilog.pcl.
Input:
STRING filename Name of session file to play.
LOGICAL single_step Play back the session file one line at a time.
Output:
None.
Error Conditions:
None.
---------------
sf_play(filename)
##########
Description:
Define a session file to be played. This command is typically used from inside a session file to play nested session files.
Input:
STRING filename Name of session file to play.
Output:
None.
Error Conditions:
None.
---------------
sf_commit(commit_all)
##########
Description:
Specify if each command played back from a session file should be committed to the database. This command is normally entered in the command line.
Input:
LOGICAL commit_all Commit every session file command.
Output:
None.
Error Conditions:
None.
---------------
sf_pause()
##########
Description:
Allow the playing of a session file to be paused. This will stop/pause the current session file being played and bring up the form. This command is normally edited into a session file for future playback.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
sf_verbose(write_sys_ms)
##########
Description:
Define if system informational messages should be written to the recording session file.
Input:
LOGICAL write_sys_msg Write system messages to the session file
Output:
None.
Error Conditions:
None.
---------------
sf_write(string)
##########
Description:
Write a string to the recording session file. This command is not normally used.
Input:
STRING string String to write to the recording session file.
Output:
None.
Error Conditions:
None.
---------------
sf_write_disable(status)
##########
Description:
This function provides control over the mechanism used to write PCL function call information to session files.
Input:
LOGICAL status This value when set to TRUE will disable,and when set to FALSE will enable,the writing of PCL function call information to the session file.
Output:
None.
Error Conditions:
None.
---------------
sf_force_write(string)
##########
Description:
Write a string to the recording session file,even if recording is paused. This command is mainly used for debugging purposes.
Input:
STRING string String to write to the recording session file.
Output:
None.
Error Conditions:
None.
---------------
sf_rotation()
##########
Description:
Define if the next command to be recorded is a rotation command. This will allow the rotation commands to be recorded only if the record rotations flag is TRUE. This command is normally used in compiled PCL.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
fio_openr(filename,channel)
##########
Description:
Open a text file for read only.
Input:
STRING filename File to open.
INTEGER channel Channel value to use for subsequent operations.
Output:
INTEGER <Return Value> Zero for success,otherwise error status.
Error Conditions:
None.
---------------
fio_openw(filename,channel,overwrite)
##########
Description:
Open a text file for write access.
Input:
STRING filename File to open.
FALSE overwrite Do not overwrite file if exists.
TRUE Overwrite file if exists.
INTEGER channel Channel value to use for subsequent operations.
Output:
INTEGER <Return Value> Zero for success,otherwise error status.
Error Conditions:
None.
---------------
fio_opena(filename,channel)
##########
Description:
Open a text file for write access at end of file for appending.
Input:
STRING filename File to open.
INTEGER channel Channel value to use for subsequent operations.
Output:
INTEGER <Return Value> Zero for success,otherwise error status.
Error Conditions:
None.
---------------
fio_close(channel)
##########
Description:
Close a file opened with one of the FIO_OPENx routines.
Input:
INTEGER channel Channel value from the FIO_OPENx routine.
Output:
INTEGER <Return Value> Zero for success,otherwise error status.
Error Conditions:
None.
---------------
fio_delete(filename)
##########
Description:
Delete a file from the operating system.
Input:
STRING filename File to delete.
Output:
INTEGER <Return Value> Zero for success,otherwise error status.
Error Conditions:
None.
---------------
fio_rewind(channel)
##########
Description:
Set the file read/write position back to the start of the file.
Input:
INTEGER channel Channel value from the FIO_OPENx routine.
Output:
INTEGER <Return Value> Zero for success,otherwise error status.
Error Conditions:
None.
---------------
fio_read(channel,string)
##########
Description:
Read a string from a file.
Input:
INTEGER channel Channel value from the FIO_OPENx routine.
Output:
STRING string String read from the file. Must be at least two characters larger than the line being read.
INTEGER <Return Value> Zero for success,otherwise error status.
Error Conditions:
None.
---------------
fio_write(channel,string)
##########
Description:
Write a string to a file.
Input:
INTEGER channel Channel value from the FIO_OPENx routine.
STRING string String to write to the file.
Output:
INTEGER <Return Value> Zero for success,otherwise error status.
Error Conditions:
None.
---------------
fio_writec(channel,format,args...)
##########
Description:
Perform a limited C style format output to the file.
Input:
INTEGER channel Channel value from the FIO_OPENx routine.
STRING format C Format string with handling of \n,\r,\t,%d,%f,%e,%g,%x,%s,%c,and %%. unknown args Appropriate datatype for format specifiers. Incorrect specifications may cause a crash.
Output:
None.
Error Conditions:
None.
---------------
fio_writef(channel,format,args...)
##########
Description:
Perform a limited FORTRAN style format output to the file.
Input:
INTEGER channel Channel value from the FIO_OPENx routine.
STRING format FORTRAN format string with handling of /,'string',X,I,F,E,G,and A formats. unknown args Appropriate datatype for format specifiers. Incorrect specifications may cause a crash. Array arguments are allowed.
Output:
None.
Error Conditions:
None.
---------------
fio_save_vars(channel,var,var,...)
##########
Description:
Write out PCL variable definitions to a file.
Input:
INTEGER channel Channel value from the FIO_OPENx routine.
ANY var Variable definition to write out to file.
Output:
INTEGER <Return Value> Zero for success,otherwise error status.
Error Conditions:
None.
---------------
lp_eval(list,method,handle)
##########
Description:
Establish a new list processing anchor and handle.
Input:
STRING list Picklist from ui_wid_get_vstring on a select databox.
INTEGER method Code which indicates the evaluation method to use on the picklist. See lpenums.i
Output:
INTEGER handle Used by other lp utilities to parse the Picklist.
INTEGER <Return Value> Message facility code. See Message System Functions,162. 0 indicates no error
Error Conditions:
None.
---------------
lp_sub_str_by_keyword(c_lp_str,c_keyword,case_sensitive,pvc_entity_ids)
##########
Description:
Recover entity ids as they appear in the list processor string.
Input:
STRING[] c_lp_str Input string made with list processor
STRING[] c_keyword This value specifies the keyword for extracting entity ids. Ex: "Point","Curve","Surface","Solid","Node","Element","MPC" keyword_with_no_trailing_blank+" " will be used for the query.
INTEGER case_sensitive 0 if FALSE 1 (or not 0)if TRUE
Output:
STRING[] pvc_entity_ids Pointer to address of virtural string containing all the entities ids as they appear in the list processor string. It will at least be allocated a minimum size of 1 char and set to ““ if a no error condition occured.
INTEGER <Return Value> This function returns a value of 0 when executed successfully.
Error Conditions:
None.
---------------
lp_sublist_type(handle,filter,type)
##########
Description:
Indicates which type of sublist is referenced by the handle.
Input:
INTEGER handle Returned by call to lp_eval
INTEGER filter Filter from lpenums.i,it is most common to use LP_SUBLIST_ANY,or one of the more generic filters as this parameter.
Output:
INTEGER type Actual sublist type. See lpenums.i,sublist types.
INTEGER <Return Value> Message facility code. See Message System Functions,162. 0 indicates no error.
Error Conditions:
None.
---------------
lp_sublist_count(handle,filter,count)
##########
Description:
Count the number of items in a sublist.
Input:
INTEGER handle Returned by call to lp_eval
INTEGER filter Filter from lpenums.i.
Output:
INTEGER count Number of items in sublist.
INTEGER <Return Value> Message facility code. See Message System Functions,162. 0 indicates no error.
Error Conditions:
None.
---------------
lp_sublist_next(handle)
##########
Description:
Set the list position to the next sublist.
Input:
INTEGER handle Returned by call to lp_eval
Output:
INTEGER <Return Value> Message facility code. See Message System Functions,162. 0 indicates no error.
Error Conditions:
None.
---------------
lp_eval_cleanup(handle)
##########
Description:
Free allocated memory for list processor operations.
Input:
INTEGER handle Returned by call to lp_eval
Output:
INTEGER <Return Value> Message facility code. See Message System Functions,162. 0 indicates no error.
Error Conditions:
None.
---------------
lp_sublist_attribute_get_int(handle,attribute,item)
##########
Description:
Return an array of integer values from a Picklist with a specified attribute which has been previously evaluated by a call to lp_eval.
Input:
INTEGER handle Returned by call to lp_eval
INTEGER attribute Attribute requested from sublist. See lpenums.i.
Output:
INTEGER ARRAY item Item parsed from Picklist of the specified attribute.
INTEGER <Return Value> Message facility code. See Message System Functions,162. 0 indicates no error.
Error Conditions:
None.
---------------
lp_sublist_attribute_get_float(handle,attribute,item)
##########
Description:
Return a real value of integer values from a Picklist with a specified attribute which has been previously evaluated by a call to lp_eval.
Input:
INTEGER handle Returned by call to lp_eval
INTEGER attribute Attribute requested from sublist. See lpenums.i.
Output:
REAL item Item parsed from Picklist of the specified attribute.
INTEGER <Return Value> Message facility code. See Message System Functions,162. 0 indicates no error.
Error Conditions:
None.
---------------
lp_sublist_attribute_get_string(handle,attribute,maxsize,item,size)
##########
Description:
Return a string from a Picklist with a specified attribute which has been previously evaluated by a call to lp_eval.
Input:
INTEGER handle Returned by call to lp_eval
INTEGER attribute Attribute requested from sublist. See lpenums.i.
INTEGER maxsize Size of output variable in bytes (use the following):/* PCL interface help */#define BYTES_PER_CHARACTER 					1
Output:
STRING item Item parsed from Picklist of the specified attribute.
INTEGER size Actual return string size of item in bytes.
INTEGER <Return Value> Message facility code. See Message System Functions,162. 0 indicates no error.
Error Conditions:
None.
---------------
lp_sublist_attribute_get_inta(handle,attribute,maxsize,item,size)
##########
Description:
Return an array of integers from a Picklist with a specified attribute which has been previously evaluated by a call to lp_eval.
Input:
INTEGER handle Returned by call to lp_eval
INTEGER attribute Attribute requested from sublist. See lpenums.i.
INTEGER maxsize Size of output variable in bytes (use the following):/* PCL interface help */ #define BYTES_PER_INTEGER 					4
Output:
INTEGER ARRAY item()Item parsed from Picklist of the specified attribute.
INTEGER size Actual array size returned in item in bytes.
INTEGER <Return Value> Message facility code. See Message System Functions,162. 0 indicates no error.
Error Conditions:
None.
---------------
lp_sublist_attribute_get_floata(handle,attribute,maxsize,item_array,size)
##########
Description:
Return a real array from a Picklist with a specified attribute which has been previously evaluated by a call to lp_eval.
Input:
INTEGER handle Returned by call to lp_eval
INTEGER attribute Attribute requested from sublist. See lpenums.i.
INTEGER maxsize Size of output variable in bytes (use the following):/* PCL interface help */ #define BYTES_PER_REAL 					4
Output:
REAL ARRAY item_array()Item parsed from Picklist of the specified attribute.
INTEGER size The size of the item_array in bytes.
INTEGER <Return Value> Message facility code. See Message System Functions,162. 0 indicates no error.
Error Conditions:
None.
---------------
lp_print_list(handle)
##########
Description:
Print the entire Picklist from the anchor block to standard out (The invoking xterm).
Input:
INTEGER handle Returned by call to lp_eval
Output:
INTEGER <Return Value> Message facility code. See Message System Functions,162. 0 indicates no error.
Error Conditions:
None.
---------------
lp_print_sublist(handle)
##########
Description:
Print the sublist prepared by lp_sublist_type from the anchor block to standard out (The invoking xterm).
Input:
INTEGER handle Returned by call to lp_eval
Output:
INTEGER <Return Value> Message facility code. See Message System Functions,162. 0 indicates no error.
Error Conditions:
None.
---------------
lp_sublist_reset(handle)
##########
Description:
Reset the sublist parser to resume parsing the original Picklist.
Input:
INTEGER handle Returned by call to lp_eval
Output:
INTEGER <Return Value> Message facility code. See Message System Functions,162. 0 indicates no error.
Error Conditions:
None.
---------------
lp_sublist_fetch(handle,maxsize,item,size)
##########
Description:
Return the contents of a sublist.
Input:
INTEGER handle Returned by call to lp_eval
INTEGER maxsize Size in bytes of “item”.
Output:
STRING item Contents of sublist.
INTEGER size Actual size returned.
INTEGER <Return Value> Message facility code. See Message System Functions,162. 0 indicates no error.
Error Conditions:
None.
---------------
lp_keyword_text(keyword,family,text)
##########
Description:
The purpose of this function is to return the keywords found in Patran that are used to describe objects,actions,etc. NOTE: This function receives parameters in a nonintuitive fashion. The family is the first method of grouping,and the keyword is next. 1,3 yields point,and 2,3 yields grid. This should show that they keywords are organized by family,the second parameter. Below is shown all the families,and then a listing of the LpGEOMETRY family.
Input:
INTEGER keyword Identifies the entity. From lpkeywords.i: (SAM#define LpPOINT 1 #define LpGRID 2 #define LpCURVE 3 #define LpLINE 4 #define LpSURFACE 5 #define LpPATCH 6 #define LpSOLID 7 #define LpHYPERPATCH 8 #define LpPOINT_IMMEDIATE 9 #define LpSCREEN_PICK 10 #define LpCOORDINATE_FRAME 11 #define LpVECTOR 12 #define LpAXIS 13 #define LpVECTOR_IMMEDIATE 14 #define LpAXIS_IMMEDIATE 15 #define LpSIDE_NUMBER 16
INTEGER family Identifies the group of entities keyword falls. From lpkeywords.i: /* listing of possible families */ #define LpACTION 1 #define LpTECHNIQUE 2 #define LpGEOMETRY 3 #define LpFINITE_ELEMENT 4 #define LpDESIGNATOR 5 #define LpATTRIBUTE 6 #define LpGEOMETRY_TYPES 7 #define LpGEOMETRY_FORMATS 8 #define LpGEOMETRY_COOS 9 #define LpOPERATION 10 #define LpTOKEN_TYPES 11 #define LpELEMENT_TYPES 12 #define LpNUMERIC_STANDIN 13
Output:
STRING[32] item String alias for keyword.
INTEGER <Return Value> Message facility code. See Message System Functions,162. 0 indicates no error.
Error Conditions:
None.
---------------
lp_picklist_string_creator_v(items,item_count,sort,vstring)
##########
Description:
Create a valid Picklist in a virtual string from an array of ids.
Input:
INTEGER(item_count,6)items Each row consists of the following: items(,1): entity Class (i.e. LpGEOMETRY)items(,2): entity Type (i.e. LpSOLID)items(,3): entity Identifier (i.e. 28,for label 28)items(,4): entity SubIdentifier1 (i.e. 2,for solid 28; 0=N/A)face 2 of solid 28 items(,5): entitySubIdentifier2 (i.e. 1,for edge 1of surface 2 of solid 28; 0=N/A)edge 1 of surface 2 of solid 28 items(,6): entitySubIdentifier3 (i.e. 2,for vertex 2 of edge 1 of surface 2 of solid 28; 0=N/A)vertex 2 of edge 1 of surface 2 of solid 28
INTEGER item_count Number of items.
INTEGER sort If non zero,sort the items in ascending order,otherwise keep in original (Input)order.
Output:
STRING [VIRTUAL] vstr PCL virtual string to receive character list.
INTEGER <Return Value> Message facility code. See Message System Functions,162. 0 indicates no error.
Error Conditions:
None.
---------------
app_count_id_list(filter,lst,domesg,status)
##########
Description:
Count the entities of a specified list processor type in a list using the picklist decoder routines.
Input:
INTEGER filter Filter from lpenums.i.
STRING lst Picklist from a selectdatabox.
LOGICAL domesg If TRUE,issue a message if error condition occurs.
Output:
INTEGER status Message facility code. See Message System Functions,162. 0 indicates no error.
INTEGER <Return Value> Number of entities in the picklist of the specified type.
Error Conditions:
None.
---------------
app_count_token_list(lst,domesg,status)
##########
Description:
Count the number of tokens that are contained in a Picklist.
Input:
STRING lst Picklist from a selectdatabox.
LOGICAL domesg If TRUE,issue a message if error condition occurs.
Output:
INTEGER status Message facility code. See Message System Functions,162. 0 indicates no error.
INTEGER <Return Value> Number of tokens in the picklist.
Error Conditions:
None.
---------------
app_get_handle(lst,method,domesg,handle)
##########
Description:
Open a list for processing.
Input:
STRING lst Picklist from a selectdatabox.
INTEGER method Evaluation method from lpenums.i.
LOGICAL domesg If TRUE,issue a message if error condition occurs.
Output:
INTEGER handle List pointer.
INTEGER <Return Value> Number of tokens in the picklist.
Error Conditions:
None.
---------------
app_next_id(handle,filter,lst,domesg,eol,status)
##########
Description:
Get the next id for a sublist (item)from a previously generated list.
Input:
INTEGER handle List pointer returned from app_get_handle.
INTEGER filter Filter from lpenums.i.
STRING lst Picklist from a selectdatabox.
LOGICAL domesg If TRUE,issue a message if error condition occurs.
LOGICAL eol Set to FALSE before making call. Returns TRUE when end of file encountered.
Output:
LOGICAL eol Returned as TRUE when end of file encountered.
INTEGER status Message facility error.
INTEGER <Return Value> ID of next item in Picklist.
Error Conditions:
None.
---------------
app_next_label(handle,filter,lst,domesg,eol,status)
##########
Description:
Get the next label for a sublist item from a previously generated list.
Input:
INTEGER handle List pointer returned from app_get_handle.
INTEGER filter Filter from lpenums.i.
STRING lst Picklist from a selectdatabox.
LOGICAL domesg If TRUE,issue a message if error condition occurs.
LOGICAL eol Set to FALSE before making call. Returns TRUE when end of file encountered.
Output:
LOGICAL eol Returned as TRUE when end of file encountered.
INTEGER status Message facility error.
INTEGER <Return Value> Label of next item in Picklist.
Error Conditions:
None.
---------------
app_lp_err_msg(domesg,lst,lp_routine,caller,status)
##########
Description:
Handle a list processor error.
Input:
LOGICAL domesg If TRUE,issue a message if error condition occurs.
STRING lst Picklist from a selectdatabox.
STRING lp_routine Name of the list processor routine that detected the error.
STRING caller Name of the routine that called the list processor routine.
INTEGER status List processor status code.
Output:
None.
Error Conditions:
None.
---------------
fem_u_count_id_list(sublist_type,lst,domesg,status)
##########
Description:
Count the entities of a specified list processor sublist type in a list using the picklist decoder routines.
Input:
INTEGER sublist_type Works only with following types from lpenums.p As follows: LP_SUBLIST_FINITE_ELEMENT LP_SUBLIST_NODE	 LP_SUBLIST_ELEMENT LP_SUBLIST_MPC LP_SUBLIST_GEOMETRY LP_SUBLIST_POINT LP_SUBLIST_CURVE LP_SUBLIST_SURFACE LP_SUBLIST_SOLID LP_SUBLIST_ANY
STRING lst Picklist from a selectdatabox.
LOGICAL domesg If TRUE,issue a message if error condition occurs.
Output:
INTEGER status Message facility code. See Message System Functions,162. 0 indicates no error.
INTEGER <Return Value> Number of entities in the picklist of the specified type.
Error Conditions:
None.
---------------
fem_u_extract_node_ids(node_list,num_nodes,id_nodes)
##########
Description:
Extract the array of nodes IDs from a Picklist.
Input:
STRING node_list Picklist string.
INTEGER num_nodes Number of nodes,from fem_u_count_id_list()normally.
Output:
INTEGER(num_nodes)id_nodes Array of node IDs.
INTEGER <Return Value> Message facility code. See Message System Functions,162. 0 indicates no error.
Error Conditions:
None.
---------------
fem_u_get_free_faces(el_ids,max_nodes,max_per_face,max_faces,nels,el_con,el_shape,el_nodes,face_el_ids,face_ids,free_faces)
##########
Description:
Create a list of all free element faces in a list of solid finite elements.
Input:
INTEGER el_ids()	 List of solid elements.
INTEGER max_nodes	 Maximum number of nodes per element in EL_IDS.
INTEGER max_per_face	 Maximum number of nodes per face in EL_IDS.
INTEGER max_faces	 Maximum number of faces for any element in EL_IDS.
INTEGER nels	 Number of elements.
INTEGER el_con()	 Element node list (Connectivity).
INTEGER el_shape()	 Element shape array.
INTEGER el_nodes()	 Element node count array.
Output:
INTEGER face_el_ids()	 Associated element ID.
INTEGER face_ids()	 Free face ID.
INTEGER free_faces	 Number of free faces.
INTEGER <Return Value> 0,no error.1,Unsupported element type (shape/nodes).2,Memory allocation error.
Error Conditions:
None.
---------------
fem_u_get_id_list(sublist_type,lst,nument,domesg,ids)
##########
Description:
Return the entities ids of a specified list processor sublist type in a list using the picklist decoder routines.
Input:
INTEGER sublist_type Works only with following types from lpenums.p As follows: LP_SUBLIST_FINITE_ELEMENT LP_SUBLIST_NODE	 LP_SUBLIST_ELEMENT LP_SUBLIST_MPC LP_SUBLIST_GEOMETRY LP_SUBLIST_POINT LP_SUBLIST_CURVE LP_SUBLIST_SURFACE LP_SUBLIST_SOLID LP_SUBLIST_ANY
STRING lst Picklist from a selectdatabox.
INTEGER nument Number of entities to get.
LOGICAL domesg If TRUE,issue a message if error condition occurs.
Output:
INTEGER(nument)ids Array of entity ids.
INTEGER <Return Value> Message facility code. See Message System Functions,162. 0 indicates no error.
Error Conditions:
None.
---------------
fem_u_get_subid_list(sublist_type,lst,nument,domesg,ids,fids,edids)
##########
Description:
Return the entities face ids and edges ids of a specified list processor sublist type in a list using the picklist decoder routines.
Input:
INTEGER sublist_type Works only with following types from lpenums.p As follows: LP_SUBLIST_FINITE_ELEMENT LP_SUBLIST_NODE	 LP_SUBLIST_ELEMENT LP_SUBLIST_MPC LP_SUBLIST_GEOMETRY LP_SUBLIST_POINT LP_SUBLIST_CURVE LP_SUBLIST_SURFACE LP_SUBLIST_SOLID LP_SUBLIST_ANY
STRING lst Picklist from a selectdatabox.
INTEGER nument Number of entities to get.
LOGICAL domesg If TRUE,issue a message if error condition occurs.
Output:
INTEGER(nument)ids Array of entity ids.
INTEGER(nument)fids Face ids of the entities.
INTEGER(nument)edids Edge ids of the entities.
INTEGER <Return Value> Message facility code. See Message System Functions,162. 0 indicates no error.
Error Conditions:
None.
---------------
list_create_boolean_list(blist_a,blist_b,btype,bret_list)
##########
Description:
This function creates a list of entities by combining the contents of the global strings lista and listb using the type of operation specified by the input value boolean and placing the results in the global string listc.
Input:
STRING blist_a[] This value specifies the first string of entities to be combined.
STRING blist_b[] This value specifies the second string of entities to be combined.
STRING btype[7] This value specifies the type of operation to be used to combine the first and second strings of entities. See the remarks below for more information.
Output:
STRING bret_list[] This value returns the results of the specified combination operation.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
48000002 *%A% * is not a valid boolean operator!
48000013 Boolean listc is empty!
---------------
list_create_curve_ass_geo(entity_list,target,return_list)
##########
Description:
This function will create a list of all curves from a list of geometric entities.
Input:
STRING entity_list[] This value specifies a list of geometric entities.
STRING target[6] This value specifies which global string will be used for the storage of the results. This argument can have the following values: ”lista”,or “listb”.
Output:
STRING return_list[VIRTUAL] This value returns a list of curves.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
48000001 *%A% * is not a valid target list!
48000006 No Curve found!
48000006 No Curve found!
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
---------------
list_create_curve_ass_group(group_list,number_of_groups,target,return_list)
##########
Description:
This function will create a list of all curves in a list of groups of geometric entities.
Input:
STRING group_list[](number_of_groups)This value specifies a list of groups of geometric entities.
INTEGER number_of_groups This value specifies the number of groups in the group_list input value.
STRING target[6] This value specifies which global string will be used for the storage of the results. This argument can have the following values: ”lista”,or “listb”.
Output:
STRING return_list[VIRTUAL] This value returns a list of curves.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
8104003 Out of room in destination format string.
8107002 Last command aborted.
11000050 The group name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
11000121 There is not a current group defined.
11000127 The group does not have any entities in it.
48000001 *%A% * is not a valid target list!
48000006 No Curve found!
48000010 No Group selected!
48000006 No Curve found!
8104003 Out of room in destination format string.
8107002 Last command aborted.
11000050 The group name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
11000121 There is not a current group defined.
11000127 The group does not have any entities in it.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000008 Group not found
13000014 Viewport not found
48000001 *%A% * is not a valid target list!
48000010 No Group selected!
---------------
list_create_elem_ass_geo(element_shape_code,entity_list,target,return_list)
##########
Description:
This function will create a list of all elements of a particular finite element model shape in a list of geometric entities.
Input:
INTEGER element_shape_code This value specifies a code value used to select the type of element shape to be used to make the returned list of entities. See the remarks below for more information.
STRING entity_list[] This value specifies a list of geometric entities.
STRING target[6] This value specifies which global string will be used for the storage of the results. This argument can have the following values: “lista”,or “listb”.
Output:
STRING return_list[VIRTUAL] This value returns a list of elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
48000001 *%A% * is not a valid target list!
48000003 No Element found!
---------------
list_create_elem_ass_group(element_shape_code,group_list,number_of_groups,target,return_list)
##########
Description:
This function will create a list of all elements of a particular finite element model shape in a list of groups of geometric entities.
Input:
INTEGER element_shape_code This value specifies a code value used to select the type of element shape to be used to make the returned list of entities. See the remarks below for more information.
STRING group_list[](number_of_groups)This value specifies a list of groups of geometric entities.
INTEGER number_of_groups This value specifies the number of groups in the group_list input value.
STRING target[6] This value specifies which global string will be used for the storage of the results. This argument can have the following values: “lista”,or “listb”.
Output:
STRING return_list[VIRTUAL] This value returns a list of elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
8104003 Out of room in destination format string.
8107002 Last command aborted.
11000050 The group name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
11000121 There is not a current group defined.
11000127 The group does not have any entities in it.
48000001 *%A% * is not a valid target list!
48000003 No Element found!
48000010 No Group selected!
---------------
list_create_elem_ass_node(element_shape_code,node_list,target,return_list)
##########
Description:
This function will create a list of all elements of a particular finite element model shape in a list of nodes.
Input:
INTEGER element_shape_code This value specifies a code value used to select the type of element shape to be used to make the returned list of elements. See the remarks below for more information.
STRING node_list[] This value specifies a list of nodes.
STRING target[6] This value specifies which global string will be used for the storage of the results. This argument can have the following values: “lista”,or “listb”.
Output:
STRING return_list[VIRTUAL] This value returns a list of elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1 This is an internal status condition. There is no corresponding status message in the message database.
258 This is an internal status condition. There is no corresponding status message in the message database.
259 This is an internal status condition. There is no corresponding status message in the message database.
13000096 Not enough storage allocated for elements
14000004 LpSublistType: I am being invoked with a NULL list
48000001 *%A% * is not a valid target list!
48000003 No Element found!
---------------
list_create_elem_att_fringe(element_shape_code,fringe_limits,fringe_comparison_type,tolerance,group_name,target,return_list)
##########
Description:
This function will create a list of all elements of a particular finite element model shape with a specified fringe value in a single group of geometric entities.
Input:
INTEGER element_shape_code This value specifies a code value used to select the type of element shape to be used to make the returned list of entities. See the remarks below for more information.
REAL fringe_limits(2)This value specifies the lower fringe limit as the value in offset 1 and the upper fringe limit as the value in offset 2.
STRING fringe_comparison_type[7] This value specifies the method that will be used for comparing the fringe limits to the fringe value of the element shape. See the remarks below for more information.
REAL tolerance This value specifies a range over which a match between the input value fringe_limits and the fringe value for the finite element model shape can be made.
STRING group_name[] This value specifies the name of a group of geometric entities.
STRING target[6] This value specifies which global string will be used for the storage of the results. This argument can have the following values: “lista”,or “listb”.
Output:
STRING return_list[VIRTUAL] This value returns a list of elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
13000008 Group not found
1300002 Element not found
15500001 Message 15500001 not found in message file(s)
15500002 Message 15500002 not found in message file(s)
15500003 Message 15500003 not found in message file(s)
48000001 *%A% * is not a valid target list!
48000003 No Element found!
48000010 No Group selected!
48000014 *%A% * is not a valid Value option!
---------------
list_create_elem_att_mat(element_shape_code,material_list,num_materials,target,return_list)
##########
Description:
This function will create a list of all elements of a particular finite element model shape from a list of material names.
Input:
INTEGER element_shape_code This value specifies a code value used to select the type of element shape to be used to make the returned list of entities. See the remarks below for more information.
STRING material_list[](num_materials)This value specifies a list of materials names.
INTEGER num_materials This value specifies the number of material entries in the material_list input value.
STRING target[6] This value specifies which global string will be used for the storage of the results. This argument can have the following values: ”lista”,or “listb”.
Output:
STRING return_list[VIRTUAL] This value returns a list of elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
-1 This is an internal status condition. There is no corresponding status message in the message database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000120 The material specified in the query was not found
48000001 *%A% * is not a valid target list!
48000003 No Element found!
---------------
list_create_elem_att_prop(element_shape_code,properties_list,num_properties,target,return_list)
##########
Description:
This function will create a list of all elements of a particular finite element model shape from a list of property names.
Input:
INTEGER element_shape_code This value specifies a code value used to select the type of element shape to be used to make the returned list of entities. See the remarks below for more information.
STRING properties_list[](num_properties)This value specifies a list of property names.
INTEGER num_properties This value specifies the number of material entries in the properties_list input value.
STRING target[6] This value specifies which global string will be used for the storage of the results. This argument can have the following values: ”lista”,or “listb”.
Output:
STRING return_list[VIRTUAL] This value returns a list of elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
29004006 Property%A% could not be retrieved from the database.
48000001 *%A% * is not a valid target list!
48000003 No Element found!
48000011 No Property selected!
---------------
list_create_ent_ass_group(group_count,group_name,entity_count,entity_name,return_list)
##########
Description:
This function will retrieve from the database a list of entities with an association to groups.
Input:
INTEGER group_count This value specifies the number of groups.
STRING group_name[31](group_count)This array specifies the group names. The default group will be used if this value is set to ““.
INTEGER entity_count This value specifies the number of acceptable entity types.
STRING entity_name[7](entity_count)This array specifies the acceptable entity type names. See the remarks below for more information.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_create_ent_ass_vp(viewport_count,viewport_name,entity_count,entity_name,return_list)
##########
Description:
This function will retrieve from the database a list of entities with an association to viewports.
Input:
INTEGER viewport_count This value specifies the number of viewports.
STRING viewport_name[31](viewport_count)This array specifies the viewport names. The default viewport will be used if this value is set to ““.
INTEGER entity_count This value specifies the number of acceptable entity types.
STRING entity_name[7](entity_count)This array specifies the acceptable entity type names. See the remarks below for more information.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_create_ent_att_ep_name(ep_count,ep_name,entity_count,entity_name,return_list)
##########
Description:
This function will retrieve from the database a list of entities with an association to element properties.
Input:
INTEGER ep_count This value specifies the number of element properties.
STRING ep_name[31](ep_count)This array specifies the element property names.
INTEGER entity_count This value specifies the number of acceptable entity types.
STRING entity_name[7](entity_count)This array specifies the acceptable entity type names. See the remarks below for more information.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_create_ent_att_ep_type(general_count,general_name,entity_count,entity_name,return_list)
##########
Description:
This function will retrieve from the database a list of entities with an association to generic element types.
Input:
INTEGER general_count This value specifies the number of generic element types.
STRING general_name[](general_count)This array specifies the generic element type names. See the remarks below for more information.
INTEGER entity_count This value specifies the number of acceptable entity types.
STRING entity_name[7](entity_count)This array specifies the acceptable entity type names. See the remarks below for more information.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_create_ent_att_lbc_name(lbc_count,lbc_name,entity_count,entity_name,return_list)
##########
Description:
This function will retrieve from the database a list of entities with an association to load and boundary condition names.
Input:
INTEGER lbc_count This value specifies the number of load and boundary condition names.
STRING lbc_name[31](lbc_count)This array specifies the load and boundary condition names.
INTEGER entity_count This value specifies the number of acceptable entity types.
STRING entity_name[7](entity_count)This array specifies the acceptable entity type names. See the remarks below for more information.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_create_ent_att_lbc_type(lbc_type_count,lbc_type_name,entity_count,entity_name,return_list)
##########
Description:
This function will retrieve from the database a list of entities with an association to load and boundary condition types.
Input:
INTEGER lbc_type_count This value specifies the number of load and boundary condition type names.
STRING lbc_type_name[31](lbc_type_count)This array specifies the load and boundary condition type names. See the remarks below for more information.
INTEGER entity_count This value specifies the number of acceptable entity types.
STRING entity_name[7](entity_count)This array specifies the acceptable entity type names. See the remarks below for more information.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_create_ent_att_mat_name(material_count,material_name,entity_count,entity_name,return_list)
##########
Description:
This function will retrieve from the database a list of entities with an association to material property names.
Input:
INTEGER material_count This value specifies the number of materials.
STRING material_name[31](material_count)This array specifies the material names.
INTEGER entity_count This value specifies the number of acceptable entity types.
STRING entity_name[7](entity_count)This array specifies the acceptable entity type names. See the remarks below for more information.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_create_ent_att_mat_type(mat_type_count,mat_type_name,entity_count,entity_name,return_list)
##########
Description:
This function will retrieve from the database a list of entities with an association to material property types.
Input:
INTEGER mat_type_count This value specifies the number of material types.
STRING mat_type_name[31](mat_type_count)This array specifies the material type names. See the remarks below for more information.
INTEGER entity_count This value specifies the number of acceptable entity types.
STRING entity_name[7](entity_count)This array specifies the acceptable entity type names. See the remarks below for more information.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_create_ent_att_mat_value(entity_count,entity_name,mat_prop_name,minimum,maximum,eval_at_temperature,evaluation_strain,evaluation_rate,evaluation_time,evaluation_frequency,return_list)
##########
Description:
This function will retrieve from the database a list of entities with an association to material property word values.
Input:
INTEGER entity_count This value specifies the number of acceptable entity types.
STRING entity_name[7](entity_count)This array specifies the acceptable entity type names. See the remarks below for more information.
STRING mat_prop_name[] This value specifies the material property word name. See the remarks below for more information.
REAL minimum This value specifies the minimum value for the range of the material value.
REAL maximum This value specifies the maximum value for the range of the material value.
REAL evaluation_temperature This value specifies the temperature value used for field evaluation.
REAL evaluation_strain This value specifies the strain,total strain,plastic strain,or stress value used for field evaluation.
REAL evaluation_rate This value specifies the strain rate value used for field evaluation.
REAL evaluation_time This value specifies the time value used for field evaluation.
REAL evaluation_frequency This value specifies the frequency value used for field evaluation.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_create_ent_att_vp_vis(viewport_count,viewport_name,entity_count,entity_name,pick_type,pick_erased,return_list)
##########
Description:
This function will retrieve from the database a list of entities with an association to viewports.
Input:
INTEGER viewport_count This value specifies the number of viewports.
STRING viewport_name[31](viewport_count)This array specifies the viewport names. The default viewport will be used if this value is set to ““.
INTEGER entity_count This value specifies the number of acceptable entity types.
STRING entity_name[7](entity_count)This array specifies the acceptable entity type names. See the remarks below for more information.
INTEGER pick_type This value specifies the type of operation used to select entities in the viewport. This value can be set to 0 for picking entities with a centroid visible in the viewport,1 for picking entities that have any portion of themselves visible in the viewport,or 2 for picking only entities that are completely visible in the viewport.
INTEGER pick_erased This value specifies,when set to TRUE,that entities that have been erased but are still associated with the viewport be considered for retrieval.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_create_fem_con_fem(in_list,get_node_con_to_node_by_elem,get_node_con_to_node_by_mpc,get_node_used_by_elem,get_node_used_by_mpc,get_elem_using_node,get_elem_adj_to_elem,get_elem_adj_to_mpc,get_mpc_using_node,get_mpc_adj_to_elem,get_mpc_adj_to_mpc,return_list)
##########
Description:
This function queries the database for entities connected to those in a list processor string.
Input:
STRING in_list[] This value specifies the list processor string of entities.
INTEGER get_node_con_to_node_by_elem This value specifies 1 (TRUE): get nodes connected to nodes in the list processor string by being part of a same Element. 0 otherwise.
INTEGER get_node_con_to_node_by_mpc This value specifies 1 (TRUE): get nodes connected to nodes in the list processor string by being part of a same MPC. 0 otherwise.
INTEGER get_node_used_by_elem This value specifies 1 (TRUE): get nodes part of an Element in the list processor string. 0 otherwise.
INTEGER get_node_used_by_mpc This value specifies 1 (TRUE): get nodes part of an MPC in the list processor string. 0 otherwise.
INTEGER get_elem_using_node This value specifies 1 (TRUE): get Elements having at least one node in the list processor string. 0 otherwise.
INTEGER get_elem_adj_to_elem This value specifies 1 (TRUE): get Elements adjacent (sharing at least a node)to an Element in the list processor string. 0 otherwise.
INTEGER get_elem_adj_to_mpc This value specifies 1 (TRUE): get Elements adjacent (sharing at least a node)to an MPC in the list processor string. 0 otherwise.
INTEGER get_mpc_using_node This value specifies 1 (TRUE): get MPCs having at least one node in the list processor string. 0 otherwise.
INTEGER get_mpc_adj_to_elem This value specifies 1 (TRUE): get MPCs adjacent (sharing at least a node)to an Element in the list processor string. 0 otherwise.
INTEGER get_mpc_adj_to_mpc This value specifies 1 (TRUE): get MPCs adjacent (sharing at least a node)to an MPC in the list processor string. 0 otherwise.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities. The entities output are exclusive (not within)to the input list processor string in_list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_create_node_ass_elem(element_list,target,return_list)
##########
Description:
This function will create a list of all nodes associated with a list of elements.
Input:
STRING element_list[] This value specifies a list of elements.
STRING target[6] This value specifies which global string will be used for the storage of the results. This argument can have the following values: ”lista”,or “listb”.
Output:
STRING return_list[VIRTUAL] This value returns a list of nodes.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1 This is an internal status condition. There is no corresponding status message in the message database.
258 This is an internal status condition. There is no corresponding status message in the message database.
259 This is an internal status condition. There is no corresponding status message in the message database.
14000004 LpSublistType: I am being invoked with a NULL list
48000001 *%A% * is not a valid target list!
48000004 No Node found!
48000004 No Node found!
14000004 LpSublistType: I am being invoked with a NULL list
48000001 *%A% * is not a valid target list!
---------------
list_create_node_ass_geo(geometry_list,target,return_list)
##########
Description:
This function will create a list of all nodes associated with a list of geometry IDs.
Input:
STRING geometry_list[] This value specifies a list of geometry IDs.
STRING target[6] This value specifies which global string will be used for the storage of the results. This argument can have the following values: ”lista”,or “listb”.
Output:
STRING return_list[VIRTUAL] This value returns a list of nodes.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
48000004 No Node found!
48000004 No Node found!
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
---------------
list_create_node_ass_group(group_list,number_of_groups,target,return_list)
##########
Description:
This function will create a list of all nodes associated with a list of groups.
Input:
STRING group_list[](number_of_groups)This value specifies a list of groups of geometric entities.
INTEGER number_of_groups This value specifies the number of groups in the group_list input value.
STRING target[6] This value specifies which global string will be used for the storage of the results. This argument can have the following values: “lista”,or “listb”.
Output:
STRING return_list[VIRTUAL] This value returns a list of nodes.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
8104003 Out of room in destination format string.
8107002 Last command aborted.
11000050 The group name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
11000121 There is not a current group defined.
11000127 The group does not have any entities in it.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000008 Group not found
13000014 Viewport not found
14000001 LpGetHeapSpace: Allocated heap space is exhausted
48000004 No Node found!
48000010 No Group selected!
48000004 No Node found!
8104003 Out of room in destination format string.
8107002 Last command aborted.
11000050 The group name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
11000121 There is not a current group defined.
11000127 The group does not have any entities in it.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000008 Group not found
13000014 Viewport not found
14000001 LpGetHeapSpace: Allocated heap space is exhausted
48000010 No Group selected!
---------------
list_create_node_att_fringe(fringe_limits,fringe_comparison_type,tolerance,group_name,target,return_list)
##########
Description:
This function will create a list of all nodes with a specified fringe value associated with a single group of geometric entities.
Input:
REAL fringe_limits(2)This value specifies the lower fringe limit as the value in offset 1 and the upper fringe limit as the value in offset 2.
STRING fringe_comparison_type[7] This value specifies the method that will be used for comparing the fringe limits to the fringe value of the element shape.
REAL tolerance This value specifies a range over which a match between the input value fringe_limits and the fringe value for the finite element model shape can be made.
STRING group_name[] This value specifies the name of a group of geometric entities.
STRING target[6] This value specifies which global string will be used for the storage of the results. This argument can have the following values: “lista”,or “listb”.
Output:
STRING return_list[VIRTUAL] This value returns a list of nodes.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
13000008 Group not found
13000021 Element not found
15500001 Message 15500001 not found in message file(s)
15500002 Message 15500002 not found in message file(s)
15500003 Message 15500003 not found in message file(s)
48000001 *%A% * is not a valid target list!
48000004 No Node found!
48000010 No Group selected!
48000014 *%A% * is not a valid Value option!
---------------
list_create_node_att_value(coord_values,coord_values_active,coord_comparison_type,tolerance,coord_name,target,return_list)
##########
Description:
This function will get all nodes with a specified coordinate value.
Input:
REAL coord_values(6)This value specifies a list of sets of fringe limits as follows: the lower fringe limits and the upper fringe limits for set 1 are at offsets 1 and 4,the lower fringe limits and the upper fringe limits for set 2 are at offsets 2 and 5,the lower fringe limits and the upper fringe limits for set 3 are at offsets 3 and 6.
LOGICAL coord_values_active(3)This value specifies which sets of fringe values are used for the fringe comparison by setting offset 1 TRUE for the first set,offset 2 TRUE for the second set,and offset 3 TRUE for the third set.
STRING coord_comparison_type{} This value specifies the method that will be used for comparing the fringe limits to the fringe value of the element shape.
REAL tolerance(2)This value specifies a range over which a match between the input value fringe_limits and the fringe value for the finite element model shape can be made. The first array offset is used to set the distance value for the x,y,and z axis for rectangular coordinate systems. The second array offset is used to set the r and z axis distances for cylindrical coordinate systems. The third array offset is used to set the theta angle for cylindrical coordinate systems.
STRING coord_name{} This value specifies the name of a group of geometric entities.
STRING target[] This value specifies which global string will be used for the storage of the results. This argument can have the following values: “lista”,or “listb”.
Output:
STRING return_list[VIRTUAL] This value returns a list of nodes.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
list_create_point_ass_geo(entity_list,target,return_list)
##########
Description:
Get all points associated to geometry.
Input:
STRING entity_list[] This value specifies a list of geometric entities.
STRING target[6] This value specifies which global string will be used for the storage of the results. This argument can have the following values: “lista”,or “listb”.
Output:
STRING return_list[VIRTUAL] This value returns a list of points.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
48000001 *%A% * is not a valid target list!
48000005 No Point found!
48000005 No Point found!
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
48000001 *%A% * is not a valid target list!
---------------
list_create_point_ass_group(group_list,number_of_groups,target,return_list)
##########
Description:
This function will create a list of all points in a list of groups of geometric entities.
Input:
STRING group_list[](number_of_groups)This value specifies a list of groups of geometric entities.
INTEGER number_of_groups This value specifies the number of groups in the group_list input value.
STRING target[6] This value specifies which global string will be used for the storage of the results. This argument can have the following values: “lista”,or “listb”.
Output:
STRING return_list[VIRTUAL] This value returns a list of points.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
8104003 Out of room in destination format string.
8107002 Last command aborted.
11000050 The group name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
11000121 There is not a current group defined.
11000127 The group does not have any entities in it.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000008 Group not found
13000014 Viewport not found
48000001 *%A% * is not a valid target list!
48000005 No Point found!
48000010 No Group selected!
48000005 No Point found!
8104003 Out of room in destination format string.
8107002 Last command aborted.
11000050 The group name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
11000121 There is not a current group defined.
11000127 The group does not have any entities in it.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000008 Group not found
13000014 Viewport not found
48000001 *%A% * is not a valid target list!
48000010 No Group selected!
---------------
list_create_surface_ass_geo(entity_list,target,return_list)
##########
Description:
This function will create a list of all surfaces in a list of geometric entities.
Input:
STRING entity_list[] This value specifies a list of geometry IDs for surfaces.
STRING target[6] This value specifies which global string will be used for the storage of the results. This argument can have the following values: “lista”,or “listb”.
Output:
STRING return_list[VIRTUAL] This value returns a list of points.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
7000132 Unable to allocate enough memory for data.
14000001 LpGetHeapSpace: Allocated heap space is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
48000001 *%A% * is not a valid target list!
48000007 No Surface found!
7000132 Unable to allocate enough memory for data.
14000001 LpGetHeapSpace: Allocated heap space is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
48000007 No Surface found!
---------------
list_create_surface_ass_group(group_list,number_of_groups,target,return_list)
##########
Description:
This function will create a list of all surfaces in a list of groups of geometric entities.
Input:
STRING group_list[](number_of_groups)This value specifies a list of groups of geometric entities.
INTEGER number_of_groups This value specifies the number of groups in the group_list input value.
STRING target[6] This value specifies which global string will be used for the storage of the results. This argument can have the following values: “lista”,or “listb”.
Output:
STRING return_list[VIRTUAL] This value returns a list of surfaces.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
8104003 Out of room in destination format string.
8107002 Last command aborted.
11000050 The group name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
11000121 There is not a current group defined.
11000127 The group does not have any entities in it.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000008 Group not found
13000014 Viewport not found
48000001 *%A% * is not a valid target list!
48000007 No Surface found!
48000010 No Group selected!
48000007 No Surface found!
8104003 Out of room in destination format string.
8107002 Last command aborted.
11000050 The group name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
11000121 There is not a current group defined.
11000127 The group does not have any entities in it.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000008 Group not found
13000014 Viewport not found
---------------
list_create_target_list(target,entity_list)
##########
Description:
This function allocates space for a string,sets the value of the allocated string using an input value,and assigns the allocated string to one of two global string variables named lista or listb based on the settings of two matching internal global variables named lista_nomerge and listb_nomerge.
Input:
STRING target[] This value specifies which global string will be used for the storage of the results. This argument can have the following values: “lista”,or “listb”.
STRING entity_list[] This value specifies a list of entities to be stored.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
48000001 *%A% * is not a valid target list!
48000001 *%A% * is not a valid target list!
---------------
list_filter_by_elem_dim(input_list,criterion,segment_count,minimum,maximum,return_list)
##########
Description:
This function will create a list processor string of entities for elements which have dimensions within a specified range.
Input:
STRING input_list[] This value specifies the list processor string of entities that will be filtered by this function.
STRING criterion[13] This value specifies the element attribute criterion for evaluation. See the remarks below for more information.
INTEGER segment_count This value specifies the number of segments desired for length evaluation on an element edge. Isoparametric shape functions are used for the evaluation of intermediate locations. If this value is 0,then consider segments formed by the straight lines between the nodes along the edge.
REAL minimum This value specifies the minimum value for the range of the specified criterion.
REAL maximuim This value specifies the maximum value for the range of the specified criterion.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities that fit the range and attribute criteria specified in the input values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_filter_by_ent_shape(input_list,geometric_points,geometric_curves,geometric_surfaces,geometric_solids,element_points,element_beams,element_tria,element_quad,element_tet,element_wedge,element_hex,node,mpc,any_other,return_list)
##########
Description:
This function will create a list processor string of entities match the specified entity types.
Input:
STRING input_list[] This value specifies the list processor string of entities that will be filtered by this function. See the remarks below for more information.
INTEGER geometric_points This value specifies,when set to FALSE,that all zero dimensional geometric or point entities be ignored.
INTEGER geometric_curves This value specifies,when set to FALSE,that all single dimensional geometric or curve entities be ignored.
INTEGER geometric_surfaces This value specifies,when set to FALSE,that all two dimensional geometric or surface entities be ignored.
INTEGER geometric_solids This value specifies,when set to FALSE,that all three dimensional geometric or solid entities be ignored.
INTEGER element_points This value specifies,when set to FALSE,that all zero dimensional or point elements be ignored.
INTEGER element_beams This value specifies,when set to FALSE,that all single dimensional or beam elements be ignored.
INTEGER element_tria This value specifies,when set to FALSE,that all two dimensional triangular elements be ignored.
INTEGER element_quad This value specifies,when set to FALSE,that all two dimensional quadrilateral elements be ignored.
INTEGER element_tet This value specifies,when set to FALSE,that all three dimensional tetrahedral elements be ignored.
INTEGER element_wedge This value specifies,when set to FALSE,that all three dimensional wedge elements be ignored.
INTEGER element_hex This value specifies,when set to FALSE,that all three dimensional hexagonal elements be ignored.
INTEGER node This value specifies,when set to FALSE,that all nodes be ignored.
INTEGER mpc This value specifies,when set to FALSE,that all mass property constraints be ignored.
INTEGER any_other This value specifies,when set to FALSE,that all entities of a type that is not listed above be ignored.
Output:
STRING return_list[ VIRTUAL] This value returns a list processor string of entities that match the specified types.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_filter_by_ep_type(input_list,ep_type_count,ep_type_name,return_list)
##########
Description:
This function will create a list processor string of entities that match the specified element property types.
Input:
STRING input_list[] This value specifies the list processor string of entities that will be filtered by this function.
INTEGER ep_type_count This value specifies the number of generic element types.
STRING ep_type_name[31](type_count)This array specifies the generic element type names. See the remarks below for more information.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities that match the specified types.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_filter_by_ep_value(input_list,element_property,component,minimum,maximum,return_list)
##########
Description:
This function will create a list processor string of entities that match the specified element property word value range.
Input:
STRING input_list[] This value specifies the list processor string of entities that will be filtered by this function.
STRING element_property[] This value specifies the element property word string. See the remarks below for more information.
INTEGER component This value specifies the component of data to extract. This value ranges from 1 to 3 and is ignored if the entities in the input value input_list are scalar values.
REAL minimum This value specifies the minimum value for the range of the specified criterion.
REAL maximum This value specifies the maximum value for the range of the specified criterion.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities that match the specified types.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_filter_by_fem_type(input_list,fem_type_count,fem_type_name,return_list)
##########
Description:
This function will create a list processor string of entities that match the specified FEM type.
Input:
STRING input_list[] This value specifies the list processor string of entities that will be filtered by this function.
INTEGER fem_type_count This value specifies the number of finite element type names.
STRING fem_type_name[31](fem_type_count)This array specifies the finite element types. See the remarks below for more information.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_filter_by_lbc_type(input_list,lbc_type_count,lbc_type_name,return_list)
##########
Description:
This function will create a list processor string of entities that match the specified load and boundary condition type.
Input:
STRING input_list[] This value specifies the list processor string of entities that will be filtered by this function.
INTEGER lbc_type_count This value specifies the number of load and boundary condition type names.
STRING lbc_type_name[31](lbc_type_count)This array specifies the load and boundary condition type names. See the remarks below for more information.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_filter_by_lbc_value(input_list,load_case_name,lbc_var_name,component,minimum,maximum,evaluation_time,evaluation_frequency,sub_entity,return_list)
##########
Description:
This function will create a list processor string of entities that match the specified load and boundary condition value range.
Input:
STRING input_list[] This value specifies the list processor string of entities that will be filtered by this function. Face and edge sub-entity ids are ignored.
STRING load_case_name[] This value specifies the load case name. The default load case is used if this value is set to ““.
STRING lbc_var_name[] This value specifies the load and boundary condition variable name. See the remarks below for more information.
INTEGER component This value specifies the component of data to extract. This value ranges from 1 to 3 and is ignored if the entities in the input value input_list are scalar values.
REAL minimum This value specifies the minimum value for the range of the load and boundary condition value.
REAL maximum This value specifies the maximum value for the range of the load and boundary condition value.
REAL evaluation_time This value specifies the time value used for field evaluation.
REAL evaluation_frequency This value specifies the frequency value used for field evaluation.
STRING sub_entity[] This value specifies,when set to “ANY”,that any sub-entity that corresponds to the input value lbc_var_name that has a value in the specified range be listed in the output value return_list. When this value is set to “ALL”,all sub-entities with values in the specified range are included in the output value return_list.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_filter_by_mat_name(input_list,mat_count,mat_name,return_list)
##########
Description:
This function will create a list processor string of entities that are associated to a material name.
Input:
STRING input_list[] This value specifies the list processor string of entities that will be filtered by this function.
INTEGER mat_count This value specifies the number of material names.
STRING mat_name[31](mat_count)This array specifies the material names.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_filter_by_mat_type(input_list,mat_type_count,mat_type_name,return_list)
##########
Description:
This function will create a list processor string of entities that are associated to a material type.
Input:
STRING input_list[] This value specifies the list processor string of entities that will be filtered by this function.
INTEGER mat_type_count This value specifies the number of material types.
STRING mat_type_name[31](mat_type_count)This array specifies the material type names. See the remarks below for more information.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_filter_by_mat_value(input_list,mat_prop_name,minimum,maximum,eval_at_temperature,evaluation_strain,evaluation_rate,evaluation_time,evaluation_frequency,return_list)
##########
Description:
This function will create a list processor string of entities that match the specified material property value range.
Input:
STRING input_list[] This value specifies the list processor string of entities that will be filtered by this function.
STRING mat_prop_name[] This value specifies the material property word name. See the remarks below for more information.
REAL minimum This value specifies the minimum value for the range of the material value.
REAL maximum This value specifies the maximum value for the range of the material value.
REAL evaluation_temperature This value specifies the temperature value used for field evaluation.
REAL evaluation_strain This value specifies the strain,total strain,plastic strain,or stress value used for field evaluation.
REAL evaluation_rate This value specifies the strain rate value used for field evaluation.
REAL evaluation_time This value specifies the time value used for field evaluation.
REAL evaluation_frequency This value specifies the frequency value used for field evaluation.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_filter_by_presence(input_list,acceptance_criteria,reference_list,return_list)
##########
Description:
This function will create a list processor string of entities by using a specified acceptance criteria to compare to list processor strings.
Input:
STRING input_list[] This value specifies the list processor string of entities that will be filtered by this function.
STRING acceptance_criteria[7] This value specifies the acceptance criterion for a match. See the remarks below for more information.
STRING reference_list[] This value specifies the list processor string of entities that will be used as the reference input for the comparison operation.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_intersect(input_list_1,input_list_2,return_list)
##########
Description:
This function will get the intersection of entities by performing comparisons at the entity and up to third sub-entity level.
Input:
STRING input_list_1[] This value specifies the first list processor string of entities.
STRING input_list_2[] This value specifies the second list processor string of entities.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string describing the intersecting entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_rem_duplicate(input_list,return_list)
##########
Description:
This function will create a list processor string from which any duplicate entities have been removed.
Input:
STRING input_list[] This value specifies the list processor string of entities that will searched for duplicates.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities with an duplicate entities removed.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
list_save_group(target_list,group_name,update)
##########
Description:
This function will add a list of entities stored in a global string variable into a group.
Input:
STRING target[] This value specifies which global string will be used for the storage of the results. This argument can have the following values: “lista”,“listb”,or “listc”.
STRING group_name[] This value specifies the name of the group to which the entities are stored.
LOGICAL update This value specifies,if set to TRUE,that the viewport that contains the newly updated group will be updated.
Output:
None.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1000025 Error attempting to allocate virtual memory.
11000011 The entity is not contained in the specified group.
11000012 The entity is already contained in the specified group.
11000050 The group name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
11000121 There is not a current group defined.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000008 Group not found
13000014 Viewport not found
48000001 *%A% * is not a valid target list!
48000001 *%A% * is not a valid target list!
---------------
uil_list_a.previous()
##########
Description:
This function will swap the contents of the global string variable lista with the contents of the global string variable lista_reset.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
uil_list_b.previous()
##########
Description:
This function will swap the contents of the global string variable listb with the contents of the global string variable listb_reset.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
uil_list_a.clear()
##########
Description:
This function sets the global string lista_reset to the contents of the global string lista and then sets lista to a single space.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
uil_list_b.clear()
##########
Description:
This function sets the global string listb_reset to the contents of the global string listb and then sets listb to a single space.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
uil_list_boolean.create(boolean)
##########
Description:
This function creates a list of entities by combining the contents of the global strings lista and listb using the type of operation specified by the input value boolean and placing the results in the global string listc.
Input:
STRING boolean[7] This value specifies the type of combination operation. See the remarks below for more information.
Output:
None.
Error Conditions:
None.
---------------
uil_list_a.replace()
##########
Description:
This function will set the contents of the global string variable lista_reset to equal the contents of the global string variable lista. It will then set the global string variable lista to equal the contents of the global string variable listc.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
uil_list_b.replace()
##########
Description:
This function will set the contents of the global string variable listb_reset to equal the contents of the global string variable listb. It will then set the global string variable listb to equal the contents of the global string variable listc.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
region.create(name,targ_entity,targ_type,app_region)
##########
Description:
This function creates a region.
Input:
STRING name The name of the region
STRING targ_entity Target entity type (Node,Element,Edge,Face)
	INTEGER targ_type Target element type:
0 = 0D Element or Node
1 = 1D Element
2 = 2D Element or Edge
3 = 3D Element or Face
STRING app_region[VIRTUAL] The application region for the Region definition
Input:
<return value> 0 for success,non-zero on error
---------------
region.delete(names)
##########
Description:
This function deletes the region.
Input:
STRING names[32]()Array of names of regions for deletion
Input:
<return value> 0 for success,non-zero on error
---------------
region.modify(old_name,new_name,targ_entity,targ_type,app_region)
##########
Description:
This function modifies the region.
Input:
STRING old_name The original name of the region
STRING new_name The new name of the region
STRING targ_entity Target entity type (Node,Element,Edge,Face)
INTEGER targ_type Target element type:
0 = 0D Element or Node
1 = 1D Element
2 = 2D Element or Edge
3 = 3D Element or Face
STRING app_region[VIRTUAL] The application region for the Region definition
Input:
<return value> 0 for success,non-zero on error
---------------
region.get_region_data(name,targ_entity,targ_type,app_region)
##########
Description:
This function gets the region data,i.e. target entity,target type and the application region..
Input:
STRING name The name of the required region
Input:
STRING targ_entity Target entity type (Node,Element,Edge,Face)
INTEGER targ_type Target element type:
0 = Node or 0D Element
1 = 1D Element
2 = 2D Element or Edge
3 = 3D Element or Face
STRING app_region[VIRTUAL] The application region for the Region definition
---------------
region.does_region_exist(name)
##########
Description:
This function checks if the given region exists.
Input:
STRING name The name of the region
Input:
<return value> 1 = region exists,0 = region does not exist
---------------
region.get_region_names(nregions,names)
##########
Description:
This function gets the number of regions in the database and the array of rigion names.
Input:
None
Input:
INTEGER nregions Number of regions in the database
STRING names[32](VIRTUAL)Array of the region names
---------------
mass_prop_create(analysis_model_type,all_or_group,include,number_of_groups,groups,coordinate_frame,density,thickness_or_area,axisymmetric_frame,axisymmetric_axis,other_axis,plot,aligned_frame,mass_properties,entity_list,length_entities,number_of_entities,reject_list,length_reject,number_of_rejects,segment_id,aligned_label,coordinate_label)
##########
Description:
This function will calculate the mass properties of a set of finite element and geometric entities,can plot the principal axes of the inertia tensor at the center of gravity,and can create and post a coordinate frame that is aligned with the principal axes of the inertia tensor.
Input:
STRING analysis_model_type[15] This value specifies the analysis model type. This argument may have the value “3D”,“2D Axisymmetric”,“2D Plane Stress”,or “2D Plane Strain”.
STRING all_or_group[5] This value specifies the use of all entities in a model or to make use of a list of groups of entities for the mass property calculations. This value may be set to “All” or “Group”.
STRING include[8] This value specifies the selection of geometric or finite element entities or both types of entities. This value may be set to “Geometry”,“FEM”,or “Both”
INTEGER number_of_groups This value specifies the number of groups in the region to which this mass property applies. This value is ignored if the input value all_or_group is set to “All”.
STRING groups[31](number_of_groups)This value specifies an array of group names that will be used for mass property calculations. The number of offsets defined for this array should be equal to the value of the input value number_of_groups. This argument is ignored if the input value all_or_group is set to “All”.
STRING coordinate_frame[] This value specifies a list of entities used to define a coordinate frame against which the mass properties will be calculated. This argument is used only if the input value analysis_model_type is set to “3D”,“2D Plane Stress”,or “2D Plane Strain”. If the input value analysis_model_type is set to “2D Axisymmetric”,this value will not be used and the input value axisymmetric_frame will be used in its place. The coordinate frame that this value defines must be either Cartesian coordinate system only.
STRING density[22] This value specifies a selection between the mass properties defined with each element or the use of mass properties that have been set to a unity value. This argument can be set to either the value “Use Element Properties” or “Unity”.
STRING thickness_or_area[22] This value specifies the thickness and area used with one and two dimensional entities as either being the thickness or area defined by the entity or being a unit value. This argument may be set to a value of either “Use Element Properties” or “Unity”.
STRING axisymmetric_frame[] This value specifies information in the list processor format that defines the axisymmetric modeling coordinate frame against which the mass properties will be calculated. This argument is used only if the input value analysis_model_type is set to “2D Axisymmetric”. If the input value analysis_model_type is not set to “2D Axisymmetric”,the input value coordinate_frame will be used instead of the input value axisymmetric_frame. The coordinate frame that this argument defines must be either a Cartesian or a cylindrical coordinate system.
INTEGER axisymmetric_axis This value specifies the axis of symmetry for axisymmetric models. This argument may have a value of 1,2,or 3 and is used only when the input value analysis_model_type is set to “2D Axisymmetric”.
INTEGER other_axis This value specifies an axis that along with the input value axisymmetric_axis defines the axisymmetric modeling plane. This argument may have a value of 1,2,or 3 and is used only when the input value analysis_model_type is set to “2D Axisymmetric”.
LOGICAL plot This value specifies,when set to TRUE,that the principal axes of the inertia tensor to be plotted.
LOGICAL aligned_frame This value specifies,when set to TRUE,that a coordinate frame that is aligned with the principal axes of inertia be created.
Output:
REAL mass_properties(VIRTUAL)This value returns a 68 element array of mass properties. See the remarks below for more information.
STRING entity_list[VIRTUAL] This value returns a list of all entities passed to this function as a string in the list processor format.
INTEGER length_entities This value returns the length of the string in the return value entity_list.
INTEGER number_of_entities This value returns the number of entities in the list of entities returned by the output value entity_list.
STRING reject_list[VIRTUAL] This value returns list of entities that were not included in the mass property calculations.
INTEGER length_reject This value returns the length of the string in the output value reject_list.
INTEGER number_of_rejects This value returns the number of entities in the list of entities returned by the output value reject_list.
INTEGER segment_id This value returns the segment ID for the plot of the principal axes of the inertia tensor. This argument will be set to -1 if the input value plot is set to FALSE.
INTEGER aligned_label This value returns the label for a coordinate frame that has been created so that it is coincident with the principle axes of inertia. If the input value aligned_frame is set to FALSE,this output value will be set to 0.
INTEGER coordinate_label This value returns the label for the coordinate frame defined by the input value coordinate_frame.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
-1 This is an internal status condition. There is no corresponding status message in the message database.
1 This is an internal status condition. There is no corresponding status message in the message database.
2001083 A system error has occurred in the FEM C Applications Memory Manager.
2001084 Unable to acquire %I% bytes of virtual memory.
2001085 A programming error has resulted in an attempt to free unallocated memory.
2001086 A programming error has resulted in an attempt to reallocate unallocated memory.
2001087 A programming error has resulted in an attempt to acquire zero bytes of virtual memory.
8107002 Last command aborted.
13000002 Unrecoverable database error
13000004 Duplicate entry exists in table
13000006 Referenced item is missing
13000007 An unspecified database error occurred
13000008 Group not found
13000020 Node not found
13000021 Element not found
13000032 Point not found
13000041 Element not found
13000056 Coordinate frame not found
13000088 Preference not found
13000097 Curve input was not found
13000098 Solid input was not found
13000107 Vector input was not found
13000122 The surface requested was not found
13000126 The entity specified in the query was not labeled.
13000210 The system is out of virtual memory.
13000211 Virtual memory has been exhausted.
13000212 There is an error interacting with the PERSISTENT_MEMORY relation in the database.
13000215 Message 13000215 not found in message file(s
13000220 Plane input was not found
14000001 LpGetHeapSpace: Allocated heapspace is exhausted
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is uncalssifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000146 LpSublistFetch: The output area is too small to hold the sublist being fetched.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
16000105 A programming error has caused an invalid PCL symbol to be passed.
30001046 Storage Error. The selected term has no data stored. Please re-create this field.
30001401 Unable to allocate enough memory to evaluate the field.
30001402 No Evaluation method is defined for this field type.
30001404 Error occurred when evaluating the PCL expression.
30001413 Error in results dimension; should be 1 or 3
30001414 Unable to get element properties for specified elements.
30001415 Results table dimension not the expected 1 or 3.
30001416 Unable to allocate memory for interpolation.
30001417 Error creating connectivity array index.
30001418 Error finding Hpat coefficients for element.
30001421 Error getting EP node list.
30001422 Error making constraints from elements.
30001423 Number of independent dimensions of results fields not equal to 3.
30001431 Unable to Evaluate the specified element.
30001438 Unable to Evaluate the field.
30001435 Unable to evaluate the FEM field for this application because no valid elements were detected in the group which was used to define this field. At this time,only 2D and 3D elements are supported for FEM Field evaluation.
38000001 The allocated space for the blob is too small.
38000003 No blob provided.
53000001 The axisymmetric coordinate frame cannot be spherical.
53000002 The reference coordinate frame must be rectangular.
53000003 The specified axes for the axisymmetric modeling frame are unreasonable.
53000004 The specified axes for the axisymmetric modeling frame are both %I%. The axisymmetric frame is,therefore,not well-defined.
53000005 You have requested to specify your region by groups,but the group list is empty.
53000006 An unsupported widget value has been selected for the %A% widget.
53000007 Unable to obtain model definition data from the database.
53000008 The specified region contains no entities.
53000010 A database error occurred while attempting to fetch an element property region for %A%.
53000011 There is no default analysis code in the database. This is a problem with database template initialization.
53000012 A database error occurred while attempting to fetch the physical property ID’s for element property region %I% having entities of dimension %I%.
53000013 A database consistency error occurred while attempting to fetch physical property %I% of element property region %I%.
53000014 Unable to perform a database fetch of a coordinate frame (Internal ID = %I%).
53000015 Unable to fetch the definition data for element property region %I%.
53000016 Unable to fetch the properties of material %I%.
53000017 Unable to fetch the definition for %A% %I%.
53000018 Unable to perform a database fetch of a coordinate frame (Internal ID = %I%)referenced by a concentrated mass.
53000019 Unable to fetch the coordinates of a point to determine the location of a concentrated mass.
53000020 Unable to fetch the coordinates of a 0D element.
53000022 A programming error has occurred while attempting to process a solid entity in an axisymmetric model. An earlier filter should have prevented this. For a workaround,please do not specify any such entities for mass properties calculation.
53000026 No mass properties can be calculated for any of the entities in the specified region. The reasons are given in the ensuing warning messages. Check the History window for multiple warning messages.
53000027 None of the entities in the specified region is compatible with the requested analysis type.
53000028 The list of included entities could not be generated.
53000029 The list of rejected entities could not be generated.
53000043 Unable to calculate a normal for 2D element %I%.
53000044 Unable to process the geometric definition for %A% %I%.
53000046 The modeling plane cannot be uniquely determined from the entities specified.
53000048 A normal to the axisymmetric modeling plane cannot be determined.
53000050 Unable to evaluate a point relative to the 2D modeling plane.
53000051 Unable to evaluate a point of %A%.
53000063 Some of the referenced element properties define an offset. All offsets are ignored in the calculation of mass properties. This can cause the results to change substantially.
53000065 Unable to evaluate the area of %A%.
53000067 The specified axis of symmetry divides the specified model. Mass properties can only be calculated when all of the specified entities are on the same side of the symmetry axis.
53000068 A database error occurred while attempting to fetch the element property regions for the specified entities.
53000070 Zero-dimensional entities are not included in the mass property calculations if you do not specify that Element Properties are to be used to determine density and concentrated mass. Consequently there are no valid entities in the specified region.
---------------
mass_prop_create_detailed(an_mod_typ,select_type,include,display,ngroups,groups,user_coord,density,thick_area,axy_coord,sym_axis,other_axis,plot,cord_frame,noutputs,group_names,entity_ids,entity_types,)
##########
Description:
For a given set of FEM and/or Geometric entities,calculate the mass properties based on selecting Geometry,FEM,or Both and returning them as a summary,or on a per group or entity basis. If requested,plot the principal axes of the inertia tensor at the CG,and create and post a coordinate frame aligned with those axes. This function is typically used in conjunction with mass_prop.cleanup_detailed and mass_prop.gen_report_detailed.
Input:
STRING an_mod_typ[] Analysis model type. It may be either “3D”,“2D Axisymmetric”,“2D Plane Stress”,or “2D Plane Strain”.
STRING select_type[] This first region specifier,may be either “All” ,“Group” or "Selected".
STRING include[] This second region specifier,may be either “Geometry”,“FEM”,or “Both”.
STRING display[] This determines how the results are displayed to the spreadsheet. Either "Summary","Group",or "Entity". For display of “Summary”,duplicate entries will be filtered out to avoid counting entities more than once.
INTEGER ngroups Number of groups in the region for mass properties. If "select_type" is set to "Group" then this is the number of groups. If "select_type" is set to "Entity" or "All",then this value is ignored.
STRING groups[32](VIRTUAL)If "display" is set to "Group" or "All",then this is an array of group names in the region for mass properties. If "display" is set to "Entity",this value is ignored.
STRING entities[VIRTUAL] The list of entities specified if the select_type is set to "Selected". This value is ignored if the select_type is set to "All" or "Group".
STRING user_coord[] Select databox string defining the coordinate frame relative to which the mass properties are to be calculated.
STRING density[] Option used to define mass properties for the selected entities. It may be either “Use Element Properties” or “Unity”.
STRING thick_area[] Option used to define the thicknesses and areas for the selected 2D and 1D entities respectively. It may be either “Use Element Properties” or “Unity”.
STRING axy_coord[] Select databox string defining the axisymmetric modeling coordinate frame. It is used only if an_mod_type is “2D Axisymmetric”. The coordinate frame must be rectangular or cylindrical.
INTEGER sym_axis Axis of symmetry for axisymmetric models. It may be either 1,2,or 3. This is used only if an_mod_type is “2D Axisymmetric”.
INTEGER other_axis ’other_axis’ and sym_axis define the axisymmetric modeling plane. Acceptable values are 1,2,or 3. This is used only if an_mod_type is “2D Axisymmetric”.
LOGICAL plot If TRUE,then the principal axes of the inertia tensor will be plotted.
LOGICAL cord_frame If TRUE,then a coordinate frame aligned with the principal axes will be generated.
Input:
INTEGER noutputs If display is set to "Entity",this is the number of unique entities that have valid mass properties. If "display" is set to "Group",then noutputs is returned equal to the number of groups with valid mass properties. If the "display" is set to "Summary",this value is equal to "1".
STRING group_names (noutputs)Returned array of noutputs group names. This is only used for display mode of group.
INTEGER entity_ids(noutputs)If "display" is set to "Entity",this is an array of all selected entity ids that have valid mass properities. If "display" is set to "Group" or "All",this is ignored.
INTEGER entity_types(noutputs)This will tell what type of entity is given in the entity_ids array above. Duplicate IDs may exist for an element & a surface for example. This array would give the corresponding lpenums.i value to determine the entity type.
REAL mass_props_array(noutputs,VIRTUAL)This data is returned on a per output (group or entity)basis. The order of this array matches the order of "entities" for "display" set to "Entity" or the order of "groups" when "display" is set to "Group". Array of mass properties,including,in this order: (1)volume,(2)mass,(3-5)CG in specified frame,(6-11)inertia tensor in specified frame,(12-17)inertia tensor at CG in specified frame,(18-20)principal inertias at CG,(21-29)principal directions in specified frame,(30-32)radii of gyration corresponding to the principal inertias,(33-35)CG in reference Cartesian frame,(36-41)inertia tensor in reference Cartesian frame,(42-47)inertia tensor at CG in reference Cartesian frame,(48-56)principal directions in reference Cartesian frame,(57-59)principal direction 3-2-1 space-fixed rotation angles from specified frame,(60-62)principal direction 3-1-3 body-fixed rotation angles from specified frame,(63-65)principal direction 3-2-1 space-fixed rotation angles from reference Cartesian frame,(66-68)principal direction 3-1-3 body-fixed rotation angles from reference Cartesian frame,(69)if bar then this is length,if shell this is surface area,and if solid element then this value is ignored. Symmetric tensors are in the order: XX,XY,XZ,YY,YZ,ZZ.
STRING entity_list(VIRTUAL)This is a List Processor-recognizable list of all entities specified. This is only valid if noutputs is 1 (such as display set to “Summary”).
INTEGER len_elist Length of string ’entity_list’. Only used if Display of Summary
INTEGER num_ents Number of entities in ’entity_list’.Only used if Display of Summary
STRING reject_list(VIRTUAL)List of input entities not included in mass property calculations.
INTEGER len_rlist Length of string ’reject_list’.Only used if Display of Summary
INTEGER num_rejects Number of entities in ’reject_list’.Only used if Display of Summary
INTEGER cord_segment Segment ID for graphics (-1 if none were generated)
INTEGER cord_label Label of coordinate frame created coincident with the principal directions
INTEGER user_frame_id ID of user-specified reference coordinate frame
INTEGER <Return Value> Error code (= 0 if successful)
Side Effects:
Messages:
If an error condition exists,then the diagnostics will be output and a reject list of the elements with invalid properties will be generated. Some of the warnings and error messages are suppressed for display by group and display by entity to avoid displaying a large number of duplicate error messages. These warnings and errors can be seen by selecting the rejected element list and displaying by summary.
Error Conditions:
Same as Error Conditions in mass_prop_create function
---------------
mass_prop.gen_report(file_columns,mass_properties,coordinate_label,entity_list,number_of_entities,entity_list_length,reject_list,number_of_rejects,length_reject)
##########
Description:
This function will write a set of mass properties and an entity list to a report file. The report file name can be set through the “Report...” item of the “File” menu bar selection in the main form of Patran.
Input:
INTEGER file_columns This value specifies the number of columns in the report. This value must be either 80 or 132.
REAL mass_properties(68)This value specifies the property information that will be listed in the report. See the remarks below for more information.
INTEGER coordinate_label This value specifies a label used to define a coordinate frame against which the mass properties were calculated.
STRING entity_list[] This value specifies a list of entities in the list processor format of all of the entities that are associated with the input value mass_properties being written to the report file.
INTEGER number_of_entities This value specifies the number of entities listed in the entity_list input value.
INTEGER entity_list_length This value specifies the length of the input value entity_list.
STRING reject_list[] This value specifies a list of entities in the list processor format that where rejected in the calculation of the input value mass_properties being written to the report file.
INTEGER number_of_rejects This value specifies the number of entities in the input value reject_list.
INTEGER length_reject This value specifies the length of the input value reject_list.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1 This is an internal status condition. There is no corresponding status message in the message database.
53000057 Unable to complete the Mass Properties report file. Failure occurred while attempting to write: %A%
53000058 Unable to allocate virtual memory.
---------------
mass_prop.gen_report_detailed(file_width,noutputs,display_method,includes,groups,entities,entity_types,mass_props_array,thick_area,user_frame_id,entity_list,num_ents,len_elist,reject_list,num_rejects,len_rlist)
##########
Description:
Write the mass properties and the entity lists generated by mass_prop_create_detailed to a report file.
Input:
INTEGER file_width Width of report file. Input 80 or 132
INTEGER noutputs If display from mass_prop_create_detailed is set to "Entity",this is the number of unique entities that have mass. If "display" is set to "Group",then this is the number of groups. If the "display" is set to "Summary",this value is equal to "1".
STRING display_method[] This determines how the results are displayed to the spreadsheet. Either "Summary","Group",or "Entity"
STRING includes[] This region specifier,may be either “Geometry”,“FEM”,or “Both”.
STRING groups[32](noutputs)If "display" is set to "Group",then this is an array of group names in the region for mass properties. If "display" is set to “All” or "Entity",this value is ignored.
INTEGER entities(noutputs)The list of entity ids (not applicable if display is set to “Summary").
INTEGER entity_types(noutputs)The entity type corresponding to the entity given in the “entities” array (not applicable if display is set to “Summary”). These types are given in the lpenums.i define file.
REAL mass_props_array(noutputs,VIRTUAL)Array of mass properties,including,in this order: (1)volume,(2)mass,(3-5)CG in specified frame,(6-11)inertia tensor in specified frame,(12-17)inertia tensor at CG in specified frame,(18-20)principal inertias at CG,(21-29)principal directions in specified frame,(30-32)radii of gyration corresponding to the principal inertias,(33-35)CG in reference Cartesian frame,(36-41)inertia tensor in reference Cartesian frame,(42-47)inertia tensor at CG in reference Cartesian frame,(48-56)principal directions in reference Cartesian frame,(57-59)principal direction 3-2-1 space-fixed rotation angles from specified frame,(60-62)principal direction 3-1-3 body-fixed rotation angles from specified frame,(63-65)principal direction 3-2-1 space-fixed rotation angles from reference Cartesian frame,(66-68)principal direction 3-1-3 body-fixed rotation angles from reference Cartesian frame,(69)if bar then this is length,if shell this is surface area,and if solid element then this value is ignored. Symmetric tensors are in the order: XX,XY,XZ,YY,YZ,ZZ. noutputs is the number of outputs returned from mass_prop_create_detailed (ie. number of entities or groups selected).
STRING thick_area Option used to define the thicknesses and areas for the selected 2D and 1D entities respectively. It may be either “Use Element Properties” or “Unity”.
INTEGER user_frame_id ID of user-specified reference coordinate frame
STRING entity_list[VIRTUAL] This is a List Processor-recognizable list of all entities specified. This is only valid if noutputs is 1 (such as display set to “Summary”).
INTEGER num_ents Number of entities in ’entity_list’
INTEGER len_elist Length of string ’entity_list’
STRING reject_list[VIRTUAL] List of input entities not included in mass property calculations
INTEGER num_rejects Number of entities in ’reject_list’. Only valid if “display” in mass_prop_create_detailed call is set to “Summary”
INTEGER len_rlist Length of string ’reject_list’. Only valid if “display” in mass_prop_create_detailed call is set to “Summary”
Output:
None
INTEGER <Return Value> = 0 Function was successful
Side Effects:
Files: A Mass Properties report is written to the report file.
Error Conditions:
Error: Unable to allocate virtual memory.
Error Unable to write the Mass Properties report file. Failure occurred while attempting to write.
---------------
mass_prop.cleanup(mass_props,entity_list,reject_list,num_ents,num_rejects)
##########
Description:
Free the mass properties arrays created by mass_prop_create.
Input:
REAL mass_props(VIRTUAL)Array of mass properties,including,in this order: (1)volume,(2)mass,(3-5)CG in specified frame,(6-11)inertia tensor in specified frame,(12-17)inertia tensor at CG in specified frame,(18-20)principal inertias at CG,(21-29)principal directions in specified frame,(30-32)radii of gyration corresponding to the principal inertias,(33-35)CG in reference Cartesian frame,(36-41)inertia tensor in reference Cartesian frame,(42-47)inertia tensor at CG in reference Cartesian frame,(48-56)principal directions in reference Cartesian frame,(57-59)principal direction 3-2-1 space-fixed rotation angles from specified frame,(60-62)principal direction 3-1-3 body-fixed rotation angles from specified frame,(63-65)principal direction 3-2-1 space-fixed rotation angles from reference Cartesian frame,(66-68)principal direction 3-1-3 body-fixed rotation angles from reference Cartesian frame. Symmetric tensors are in the order: XX,XY,XZ,YY,YZ,ZZ
STRING entity_list(VIRTUAL)This is a List Processor-recognizable list of all entities specified
STRING reject_list(VIRTUAL)List of input entities not included in mass property calculations
INTEGER num_ents Number of entities in ’entity_list’
INTEGER num_rejects Number of entities in ’reject_list’
Output:
None
---------------
mass_prop.cleanup_detailed(mass_props,entity_list,reject_list)
##########
Description
Free the mass properties arrays created by mass_prop_create_detailed. This routine should be called before an additional call to mass_prop_create_detailed to free the arrays.
Input:
REAL mass_props_array(noutputs,VIRTUAL)Array of mass properties,including,in this order: (1)volume,(2)mass,(3-5)CG in specified frame,(6-11)inertia tensor in specified frame,(12-17)inertia tensor at CG in specified frame,(18-20)principal inertias at CG,(21-29)principal directions in specified frame,(30-32)radii of gyration corresponding to the principal inertias,(33-35)CG in reference Cartesian frame,(36-41)inertia tensor in reference Cartesian frame,(42-47)inertia tensor at CG in reference Cartesian frame,(48-56)principal directions in reference Cartesian frame,(57-59)principal direction 3-2-1 space-fixed rotation angles from specified frame,(60-62)principal direction 3-1-3 body-fixed rotation angles from specified frame,(63-65)principal direction 3-2-1 space-fixed rotation angles from reference Cartesian frame,(66-68)principal direction 3-1-3 body-fixed rotation angles from reference Cartesian frame,(69)if bar then this is length,if shell this is surface area,and if solid element then this value is ignored. Symmetric tensors are in the order: XX,XY,XZ,YY,YZ,ZZ. noutputs is the number of outputs returned from mass_prop_create_detailed (ie. number of entities or groups selected).
STRING entity_list[VIRTUAL] This is a List Processor-recognizable list of all entities specified
STRING reject_list[VIRTUAL] List of input entities not included in mass property calculations
Output:
None
---------------
ga_display_autosubdivconst_get(display_name,tolerance)
##########
Description:
This function gets the subdivision tolerance value used in conjunction with setting the ranges for spectrums used to display results.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
REAL tolerance This value returns the range subdivision tolerance value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000016 Display not found
---------------
ga_display_autosubdivconst_set(display_name,tolerance)
##########
Description:
This function sets the subdivision tolerance value used in conjunction with setting the ranges for spectrums used to display results.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
REAL tolerance This value specifies the range subdivision tolerance value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_autosubdivide_get(display_name,autosubdivide_status)
##########
Description:
This function gets the status of the autosubdivide flag used in storing the value of a setting for the range used with spectrums used to display results.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER autosubdivide_status This value returns the autosubdivide and can be any value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_autosubdivide_set(display_name,autosubdivide_status)
##########
Description:
This function sets the status of the autosubdivide flag used in storing the value of a setting for the range used with spectrums to display results.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER autosubdivide_status This value specifies the autosubdivide status and can be set to any value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_backfacing_get(display_name,backface_status)
##########
Description:
This function gets the status of the value used to control the display of back facing polygons.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER backface_status This value returns the status for the display of back facing polygons. This argument may be set to any value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_backfacing_set(display_name,backface_status)
##########
Description:
This function sets the value used to control the display of back facing polygons.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER backface_status This value specifies the status for the display of back facing polygons. It can be set to any value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_bumpmap_get(display_name,bump_map_id,bump_map_number)
##########
Description:
This function gets the bump map parameters for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER bump_map_id This value returns the bump map ID.
INTEGER bump_map_number This value returns the number of bump maps per surface.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_bumpmap_set(display_name,bump_map_id,bump_map_number)
##########
Description:
This function sets the bump map parameters for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER bump_map_id This value specifies the ID number identifying a specific bump map.
INTEGER bump_map_number This value specifies the number of bump maps per surface.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_contour_lblspcng_get(display_name,label_spacing)
##########
Description:
This function gets the label spacing for contour plots from the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER label_spacing This value returns the label spacing for contour plots. This value will always be greater than zero.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_contour_lblspcng_set(display_name,label_spacing)
##########
Description:
This function sets the label spacing for contour plots for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER label_spacing This value specifies the label spacing for contour plots. This value must be greater than zero or an error condition will be returned.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000091 The specified contour label spacing is not valid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_create(display_name)
##########
Description:
This function will create a named display property list using display property list assigned the current group for its default values.
Input:
STRING display_name[31] This value specifies the name of the display property list to be created.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000041 A display property list with the given name is already in the database.
11000042 The display property list is invalid.
11000097 There is not enough disk space to complete operation.
11000098 A fatal error has occurred in the database. Database is corrupted.
13000007 An unspecified database error occurred
---------------
ga_display_deform_scale_get(display_name,deformation_scale)
##########
Description:
This function gets the deformation scale for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
REAL deformation_scale This value returns the deformation scale value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_deform_scale_set(display_name,deformation_scale)
##########
Description:
This function sets the deformation scale for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
REAL deformation_scale This value specifies the deformation scale for the named display property list.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_deform_scalintrp_get(display_name,interpretation)
##########
Description:
This function gets the interpretation of the deformation scale for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
STRING interpretation[31] This value returns the deformation scale interpretation string which can have a value of either “VALUE”,or “PERCENTAGE”.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_deform_scalintrp_set(display_name,interpretation)
##########
Description:
This function will set the interpretation value for the deformed entity scale for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
STRING interpretation[31] This value specifies the interpretation value. This string can have either be set to “VALUE” or “PERCENTAGE”.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000093 The specified deform scale interpretation is not valid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_delete(display_name)
##########
Description:
This function will delete the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
11000141 The Display Property is in use by the model or is assigned to a group.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_diffuse_get(display_name,diffuse_reflectance)
##########
Description:
This function will get the diffuse reflectance value for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
REAL diffuse_reflectance This value returns the diffuse reflectance value for the named display property list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_diffuse_set(display_name,diffuse_reflectance)
##########
Description:
Set the diffuse reflectance.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
REAL diffuse_reflectance This value specifies the diffuse reflectance for the named display property list.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_displays_get(display_list)
##########
Description:
This function will get a list of all of the defined named display property lists.
Input:
None.
Output:
STRING display_list[31]()This value returns a list of all defined display property lists. See the remarks below for more information.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000098 A fatal error has occurred in the database. Database is corrupted.
13000085 Cursor not open
---------------
ga_display_edgecolor_get(display_name,color_index)
##########
Description:
This function will get the edge color attributes used in shading for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER color_index This value returns the color index for the edges of the named display property list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_edgecolor_set(display_name,color_index)
##########
Description:
This function will set the edge color attributes used in shading for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER color_index This value specifies the edge color attributes for the named display property list.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_exist_get(display_name,display_status)
##########
Description:
This function is used to check for the existence of a named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER display_status This value returns the existence of the named display property list. It will be set to 0 or FALSE if the list does not exist and it will be set to 1 or TRUE if the list exists.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_freefem_get(display_name,style)
##########
Description:
This function will get the free FEM characteristics display style attribute from the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER style This value returns the free FEM display style for the named display property list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_freefem_set(display_name,style)
##########
Description:
This function will set the free FEM characteristics display style attribute for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER style This value specifies the free FEM display style for the named display property list.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_gloss_get(display_name,gloss_value)
##########
Description:
This function will get the amount of glossiness for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
REAL gloss_value This value returns the gloss value for the named display property list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_gloss_set(display_name,gloss_value)
##########
Description:
This function will set the amount of gloss for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
REAL gloss_value This value specifies the gloss for the named display property list.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_gravitation_get(display_name,gravity_status)
##########
Description:
This function gets the on/off status for the display of gravitational points for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER gravity_status This value returns the on/off status for the display of gravitational points and can be of any value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_gravitation_set(display_name,gravity_status)
##########
Description:
This function sets the on/off status for the display of gravitational points for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER gravity_status This value specifies the on/off status used to control the display of gravitational points and can be of any value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_hilight_get(display_name,specular_value)
##########
Description:
This function will get the value used to control specular reflections for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER specular_value This value returns the state of the value used to control specular reflections.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_hilight_set(display_name,specular_value)
##########
Description:
This function will set the value used to control specular reflections for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER specular_value This value specifies the state of the value used to control specular reflections.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_labelcolor_get(display_name,label_color)
##########
Description:
This function will get the label color for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER label_color This value returns the label color for the named display property list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_labelcolor_set(display_name,label_color)
##########
Description:
This function sets the label color for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER label_color This value specifies the label color.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_lines_get(display_name,line_number)
##########
Description:
This function gets the number of visualization lines from the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER line_number This value returns the number of visualization lines.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_lines_set(display_name,line_number)
##########
Description:
This function will set the number of visualization lines for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER line_number This value specifies the number of visualization lines.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_linestyle_get(display_name,line_style)
##########
Description:
This function will get the line style for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
STRING line_style[31] This value returns one of the two values,“SOLID”,or “DASHED”,that are used to specify the line style.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_linestyle_set(display_name,line_style)
##########
Description:
Set the curve style.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
STRING line_style[31] This value specifies the line_style and it should be set to one of the two supported values: “SOLID”,or “DASHED”. These two values are not case sensitive.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000043 The specified line style is not valid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_linewidth_get(display_name,line_width)
##########
Description:
This function will get the line width for the named display property list. See remarks below.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER line_width This value returns the line width for the named display property list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_linewidth_set(display_name,line_width)
##########
Description:
This function will set the line width for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER line_width This value specifies the line width for the named display property list.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_ndisplays_get(number_of_displays)
##########
Description:
This function will get the number of named display properties currently defined.
Input:
None.
Output:
INTEGER number_of_displays This value returns the number of display properties.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000098 A fatal error has occurred in the database. Database is corrupted.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000085 Cursor not open
---------------
ga_display_nlspc_get(display_name,number_of_segments)
##########
Description:
This function will get the number of line segments per curve for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER number_of_segments This value returns the number of line segments per curve.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_nlspc_set(display_name,number_of_segments)
##########
Description:
This function will set the number of line segments per curve for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER number_of_segments This value specifies the number of line segments per curve.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_nspe_get(display_name,number_of_segments)
##########
Description:
This function will get the number of line segments per edge for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER number_of_segments This argument returns the number of line segments per edge.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_nspe_set(display_name,number_of_segments)
##########
Description:
This function will set the number of line segments per edge for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER number_of_segments This values specifies the number of line segments per edge.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_offsets_get(display_name,offset_status)
##########
Description:
This function controls the on/off status of the offset for the display of element properties for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER offset_status This argument returns the on/off status of the offset for the display of element properties. This argument may be any of any value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_offsets_set(display_name,offset_status)
##########
Description:
This function will set the on/off status of the offset for the display of element properties for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER offset_status This value specifies the on/off status for the display of element properties. This argument can be set to any value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_parametric_get(display_name,parametric_status)
##########
Description:
This function gets the on/off status for the display of parametric directions for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER parametric_status This value returns the on/off status for the display of parametric directions. This argument can return any value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_parametric_set(display_name,parametric_status)
##########
Description:
This function will set the on/off status for the display of parametric directions for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER parametric_status This values specifies the on/off status for the display of parametric directions.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_rename(original_name,new_name)
##########
Description:
This function will rename the named display property list.
Input:
STRING original_name[] This value specifies the original name of the display property list.
STRING new_name[] This value specifies the new name of the display property list.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_result_label_get(display_name,result_label_status)
##########
Description:
This function will get the on/off status value for the named display property list that is used to control the display of results labels.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER result_label_status This value returns the on/off status used to control the display of results labels. This argument can return any value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_result_label_set(display_name,result_label_status)
##########
Description:
This function is used to set the on/off status value for the named display property list that is used to control the display of results labels.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER result_label_status This value specifies the status value that controls the display of results labels. This argument can be of any value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_result_lblformat_get(display_name,label_format)
##########
Description:
This function will get the format value of the result labels for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
STRING label_format[31] This value returns the result label format value which can be set to either “LETTER” or “VALUE”.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_result_lblformat_set(display_name,label_format)
##########
Description:
This function will set the format value of the results labels for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
STRING label_format[31] This value specifies the result label format. This argument can be set to a case insensitive value of either “LETTER”,or “VALUE”.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000092 The specified result label format is not valid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_showedges_get(display_name,edges_status)
##########
Description:
This function will get the on/off status of the value used to control the display of edges for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER edges_status This value returns the on/off status used to control the display of edges. This argument can be of any value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_showedges_set(display_name,edges_status)
##########
Description:
This function will set the on/off status of the value used to control the display of edges for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER edges_status This value specifies the on/off status used to control the display of edges. This argument can be set to any value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_shrfem_get(display_name,shrink_factor)
##########
Description:
This function gets the shrink factor used in the display of finite elements for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
REAL shrink_factor This value returns the shrink factor.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_shrfem_set(display_name,shrink_factor)
##########
Description:
This function sets the shrink factor used in the display of finite elements for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
REAL shrink_factor This value specifies the shrink factor.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_silhouette_get(display_name,silhouette_status)
##########
Description:
This function will get the value used to turn the display of silhouettes on and off for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER silhouette_status This value returns the value of used to control the display of silhouettes. This argument can return any value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_silhouette_set(display_name,silhouette_status)
##########
Description:
This function will set the value used to turn the display of silhouettes on and off for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER silhouette_status This value specifies the status value used control the display of silhouettes. This argument can be set to any value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_specular_get(display_name,color_value)
##########
Description:
This function will get the value used to control the color used for the shading of specular reflections for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER color_value This value returns the value used to control the color used for the shading of specular reflections. This argument can have a value of 1,for the color of the light,or 2,for the color of the object.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_specular_set(display_name,color_value)
##########
Description:
This function will set the value used to control the color used for the shading of specular reflections for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER color_value This value specifies the color used for the shading of specular reflections. This argument can be set to a value of 1,for the color of light,or 2,for the color of the object.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_subdivision_get(display_name,tolerance)
##########
Description:
This function will get the subdivision tolerance for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
REAL tolerance This value returns the subdivision tolerance.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_subdivision_set(display_name,tolerance)
##########
Description:
This function will set the subdivision tolerance for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
REAL tolerance This value specifies the subdivision tolerance value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_texture_get(display_name,texture_value)
##########
Description:
This function will get the texture value from the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
REAL texture_value This value returns the texture value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_texture_set(display_name,texture_value)
##########
Description:
This function will set the texture value for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
REAL texture_value This value specifies the texture value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_transparency_get(display_name,transparency_value)
##########
Description:
This function will get the transparency level from the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
REAL transparency_value This value returns the transparency level.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_transparency_set(display_name,transparency_value)
##########
Description:
This function will set the transparency level for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
REAL transparency_value This value specifies the transparency value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_undeform_color_get(display_name,color_value)
##########
Description:
This function will get the value of the color for undeformed entities from the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER color_value This value returns the color value for undeformed entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_undeform_color_set(display_name,color_value)
##########
Description:
This function will set the value of the color for undeforned entities for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER color_value This value specifies the color used for the display of undeformed entities.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_undeform_get(display_name,undeform_status)
##########
Description:
This function will get the on/off status of the value used to control the display of undeformed entities from the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER undeform_status This value returns the status value used to control the display of undeformed entities. This argument can return any value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_undeform_set(display_name,undeform_status)
##########
Description:
This function will set the on/off status of the value used to control the display of undeformed entities for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER undeform_status This value specifies the on/off status used to control the display of undeformed entities. The argument can be set to any value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_undeform_style_get(display_name,curve_style)
##########
Description:
This function will get the value used to control the style used for the display of the lines that comprise undeformed entities from the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
STRING curve_style[31] This value returns the style used to display the lines that comprise undeformed entities. This value will be set to either “SOLID”,or “DASHED”.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_undeform_style_set(display_name,curve_style)
##########
Description:
This function will set the value used to control the style used for the display of the lines that comprise undeformed entities for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
STRING curve_style[31] This value specifies the style used to display the lines that comprise undeformed entities. The values allowed for this string are “SOLID”,or “DASHED”. This argument is not case sensitive.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000090 The specified undeformed entity style is not valid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector_color_get(display_name,color_value)
##########
Description:
This function will get the value for the color used to plot vectors from the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER color_value This value returns the color used to plot vectors.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector_color_set(display_name,color_value)
##########
Description:
This function will set the value of the color used to plot vectors for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER color_value This value specifies the color used to plot vectors.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector_colorstyl_get(display_name,vector_style)
##########
Description:
This function will get the style used to plot vectors from the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
STRING vector_style[31] This value returns the style used to plot vectors. This argument can return the values “VALUE”,“COMPONENT”,or “SPECTRUM”.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector_colorstyl_set(display_name,vector_style)
##########
Description:
This function will set the style used to plot vectors for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
STRING vector_style[31] This value specifies the style used to plot vectors. This argument can a value of “VALUE”,“COMPONENT”,or “SPECTRUM”.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000094 Message 11000094 not found in message file(s).
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector_facolor_get(display_name,color_value)
##########
Description:
This function will get the colors used to display functional assignment vectors from the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER color_value(5)This value returns the color values used to display functional assignment vectors.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector_facolor_set(display_name,color_value)
##########
Description:
This function will set the values used to display functional assignment vectors for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER color_value(5)This value specifies the color values used to display functional assignment vectors.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector_falabel_get(display_name,label_status)
##########
Description:
This function will get the on/off status value used to control the display of labels for functional assignment vectors from the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER label_status This value returns the on/off status for the display of functional assignment vector labels. This argument can return any value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector_falabel_set(display_name,label_status)
##########
Description:
This function will set the on/off status value used to control the display of labels for functional assignment vectors for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER label_status This value specifies the on/off status for the display of function assignment vector labels. This argument can be set to any value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector_length_get(display_name,vector_style)
##########
Description:
This function will get the value used to control the length style of plotted vectors from the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
STRING vector_style[31] This value returns the vector length style. This argument will return the value “CONSTANT/SCREEN”,“SCALED/SCREEN”,“CONSTANT/MODEL”,or “SCALED/MODEL”.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector_length_set(display_name,vector_style)
##########
Description:
This function will set the value used to control the length style of plotted vectors for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
STRING vector_style[31] This value specifies the vector length style. This argument can be set to the value “CONSTANT/SCREEN”,“SCALED_SCREEN”,“CONSTANT/MODEL”,or “SCALED/MODEL”. The value of this argument is not case sensitive.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000094 Message 11000094 not found in message file(s).
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector_reslabel_get(display_name,label_status)
##########
Description:
This function will get the on/off status value used to control the display of labels on results vectors from the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER label_status This value returns the status value used to control the display of labels on results vectors. This argument can return any value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector_reslabel_set(display_name,label_status)
##########
Description:
This function will set the on/off status value used to control the display of labels on results vectors for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER label_status This value specifies the status of the value used to control the display of labels on results vectors. This argument can be set to any value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector_scale_get(display_name,vector_scale)
##########
Description:
This function will get the scale value used with vector plots from the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
REAL vector_scale This value returns the scale value used with vector plots.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector_scale_set(display_name,vector_scale)
##########
Description:
This function will set the scale value used with vector plots for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
REAL vector_scale This value specifies the scale value used with vector plots.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector1_color_get(display_name,color_value)
##########
Description:
This function will get the first vector component color from the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER color_value This value returns the color value for the first vector component.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector1_color_set(display_name,color_value)
##########
Description:
This function will set the first vector component color for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER color_value This value specifies the color value for the first vector component.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector2_color_get(display_name,color_value)
##########
Description:
This function will get the second vector component color from the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER color_value This value returns the color value for the second vector component.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector2_color_set(display_name,color_value)
##########
Description:
This function will set the second vector component color for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER color_value This value specifies the color value for the second vector component.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector3_color_get(display_name,color_value)
##########
Description:
This function will get the third vector component color from the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list from which the requested data value will be obtained.
Output:
INTEGER color_value This value returns the color value for the third vector component.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_display_vector3_color_set(display_name,color_value)
##########
Description:
This function will set the third vector component color for the named display property list.
Input:
STRING display_name[31] This value specifies the name of the display property list to which the requested data value will be set.
INTEGER color_value This value specifies the color value for the third vector component.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000107 The specified display property list was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_viewport_axis_get(viewport_name,axis_display)
##########
Description:
This function will return a value from the database indicating if a coordinate axis should be displayed in a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport.
Output:
INTEGER axis_display This value returns the status of the coordinate axis display in the viewport. It will be set to TRUE or 1 if the coordinate axis should be displayed and FALSE or 0 if it should not.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
13000004 GaErrDuplicate entry exists in table
13000007 An unspecified database error occurred
13000014 Viewport not found
---------------
ga_viewport_axis_set(viewport_name,axis_display)
##########
Description:
This function will set a value in the database used to indicate if a coordinate axis display should be shown in the viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport.
INTEGER axis_display This value should be set to TRUE or 1 if the coordinate axis should be displayed and FALSE or 0 if it should not.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
13000004 GaErrDuplicate entry exists in table
13000007 An unspecified database error occurred
13000014 Viewport not found
---------------
ga_viewport_background_get(viewport_name,background_color)
##########
Description:
This function will get the background color of a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport.
Output:
INTEGER background_color This value returns the background color for the viewport.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
13000004 GaErrDuplicate entry exists in table
13000007 An unspecified database error occurred
13000014 Viewport not found
---------------
ga_viewport_background_set(viewport_name,background_color)
##########
Description:
This function will set and post the background color of a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport.
INTEGER background_color This value specifies the background color for the viewport.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
13000004 GaErrDuplicate entry exists in table
13000007 An unspecified database error occurred
13000014 Viewport not found
---------------
ga_viewport_create(viewport_name,x_location,y_location,width,height)
##########
Description:
This function will create,set the active group to the current group,make current,and post a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport.
REAL x_location This value specifies the X axis location of the upper left corner of the viewport relative to the upper left corner of the screen.
REAL y_location This value specifies the Y axis location of the upper left corner of the viewport relative to the upper left corner of the screen.
REAL width This value specifies the width of the viewport.
REAL height This value specifies the height of the viewport.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000006 A viewport with the given name is already in the database.
11000007 The viewport name is invalid.
11000008 The location of the viewport is out of range
11000009 The size of the viewport is out of range
11000097 There is not enough disk space to complete operation.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000013 View not found
---------------
ga_viewport_current_get(viewport_name)
##########
Description:
This function will get the name of the current viewport.
Input:
None.
Output:
STRING viewport_name[31] This value returns the name of the current viewport.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000014 Viewport not found
---------------
ga_viewport_current_set(viewport_name)
##########
Description:
This function will set the name of the current viewport.
Input:
STRING viewport_name[31] This value specifies the name of the current viewport.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_viewport_delete(viewport_name)
##########
Description:
This function deletes the named viewport.
Input:
STRING viewport_name[31] This value specify the name of the viewport to be deleted.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000095 The specified operation cannot be performed on the current viewport.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_viewport_exist_get(viewport_name,existance_flag)
##########
Description:
This function can be used to find out if a viewport with a specified name exists.
Input:
STRING viewport_name[31] This value specifies the name of the viewport to be checked for existence.
Output:
INTEGER existance_flag This value returns TRUE or 1 if the named viewport exists,and FALSE or 0 if it does not.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000095 The specified operation cannot be performed on the current viewport.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_viewport_group_post(viewport_name,group_name)
##########
Description:
This function posts a group to a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport to which the group will be posted. If this value is set to nothing or ““,the current viewport will be used.
STRING group_name[31] This value specifies the name of the group to be posted. If this value is set to nothing or ““,the current viewport will be used.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000050 The group name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
11000121 There is not a current group defined.
11000122 The group has already been posted to the viewport.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000008 Group not found
13000014 Viewport not found
---------------
ga_viewport_group_post_all(viewport_name)
##########
Description:
This function posts all defined groups to a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport to which the group will be posted. If this value is set to nothing or ““,the current viewport will be used.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
11000105 The specified group was not found in the database.
11000122 The group has already been posted to the viewport.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000008 Group not found
---------------
ga_viewport_group_unpost(viewport_name,group_name)
##########
Description:
This function unposts a group from a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport to which the group will be posted. If this value is set to nothing or ““,the current viewport will be used.
STRING group_name[31] This value specifies the name of the group to be unposted. If this value is set to nothing or ““,the current viewport will be used.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000050 The group name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
11000105 The specified group was not found in the database.
11000121 There is not a current group defined.
11000122 The group has already been posted to the viewport.
11000124 Group cannot be unposted from viewport not posted to.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000008 Group not found
13000014 Viewport not found
---------------
ga_viewport_group_unpost_all(viewport_name)
##########
Description:
This function will unpost all posted groups from a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport to which the group will be unposted. If this value is set to nothing or ““,the current viewport will be used.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000096 A current viewport has not been defined.
11000100 The specified viewport was not found in the database.
11000105 The specified group was not found in the database.
11000125 The viewport has no groups posted to it.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000008 Group not found
---------------
ga_viewport_groups_get(viewport_name,group_list)
##########
Description:
This function gets the groups posted to a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport from which the group list will be made. If this value is set to nothing or ““,the current viewport will be used.
Output:
STRING group_list[31]()This value returns a list of group names posted to the viewport. The number of offsets allocated for this array should match the number of groups posted to this viewport. See the remarks below for more information.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
11000114 There are no groups posted to the viewport.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000008 Group not found
13000085 Cursor not open
---------------
ga_viewport_light_post(viewport_name,light)
##########
Description:
This function posts a light source to a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport to which the light source will be posted. If this value is set to nothing or ““,the current viewport will be used.
STRING light[31] This value specifies the name of a light source.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000036 A light source with the given name is already in the database.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000104 The specified light source was not found in the database.
13000010 Light source not found
13000014 Viewport not found
---------------
ga_viewport_light_unpost(name,light)
##########
Description:
This function unposts a light source from a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport to which the light source will be unposted. If this value is set to nothing or ““,the current viewport will be used.
STRING light[31] This value specifies the name of a light source.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000036 A light source with the given name is already in the database.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000104 The specified light source was not found in the database.
13000010 Light source not found
13000014 Viewport not found
---------------
ga_viewport_lights_get(viewport_name,light_list)
##########
Description:
This function gets a list of light source names posted to a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport from which the list of light sources will be made. If this value is set to nothing or ““,the current viewport will be used.
Output:
STRING light_list[31]()This value returns a list of light source names posted to the viewport. The number of offsets allocated for this array should match the number of light sources posted to this viewport. See the remarks below for more information.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
11000113 There are no light sources posted to the viewport.
13000014 Viewport not found
---------------
ga_viewport_location_get(viewport_name,x,y)
##########
Description:
This function gets the viewport location relative to the upper left corner of the parent graphics window.
Input:
STRING viewport_name[31] This value specifies the name of the viewport from which the location will be retrieved. If this value is set to nothing or ““,the current viewport will be used.
Output:
REAL x This value returns the viewport X position.
REAL y This value returns the viewport Y position.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
13000014 Viewport not found
---------------
ga_viewport_location_set(viewport_name,x,y,update_control)
##########
Description:
This function sets and optionally posts the viewport location relative to the upper left corner of the parent graphics window.
Input:
STRING viewport_name[31] This value specifies the name of the viewport that will have its location set. If this value is set to nothing or ““,the current viewport will be used.
REAL x This value specifies the viewport X position and it must be a positive number.
REAL y This value specifies the viewport Y position and it must be a positive number.
INTEGER update_control This value specifies the method used to update or post the display with the new location information. When this value is set to 1 or TRUE,the viewport will be updated immediately. If the this value is set to 0 or FALSE,updating the viewport will be deferred until another graphics manager event takes place. It is recommended that this value always be set to 1 or TRUE.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000008 The location of the viewport is out of range
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
---------------
ga_viewport_ngroups_get(viewport_name,number_of_groups)
##########
Description:
This function will get the number of groups posted to a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport from which the number of groups assigned to the viewport will be obtained. If this value is set to nothing or ““,the current viewport will be used.
Output:
INTEGER number_of_groups This value returns the number of groups assigned to a viewport.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000096 A current viewport has not been defined.
11000100 The specified viewport was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_viewport_nlights_get(viewport_name,number_of_lights)
##########
Description:
This function will get the number of lights posted to a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport from which the number of light sources assigned to the viewport will be obtained. If this value is set to nothing or ““,the current viewport will be used.
Output:
INTEGER number_of_lights This value returns the number of light sources assigned to a viewport.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
---------------
ga_viewport_nposted_get(number_of_viewports)
##########
Description:
This function will get the number of viewports that have been marked as posted.
Input:
None.
Output:
INTEGER number_of_viewports This value returns the number of posted viewports.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_viewport_nviewports_get(number_of_viewports)
##########
Description:
This function will get the number of viewports that have been defined in the database.
Input:
None.
Output:
INTEGER number_of_viewports This value returns the number of viewports.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_viewport_origin_get(viewport_name,origin_status)
##########
Description:
This function will get the status of a value used to state if a symbol should be displayed at the origin of the global coordinate system for a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport that will be checked for the state of the origin symbol. If this value is set to nothing or ““,the current viewport will be used.
Output:
INTEGER origin_status This value returns the status value used to indicate if a coordinate system origin symbol should be displayed. This value will be set to 1 or TRUE if the coordinate system origin should be displayed,0 or FALSE if it should not be displayed.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
13000014 Viewport not found
---------------
ga_viewport_origin_set(viewport_name,origin_status)
##########
Description:
This function will set and post the status of a value used to state if a symbol should be displayed at the origin of the global coordinate system for a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport that will have its coordinate system origin state set. If this value is set to nothing or ““,the current viewport will be used.
INTEGER origin_status This value specifies the status value used to indicate if a coordinate system origin symbol should be displayed. This value should be set to either 1 or TRUE if the coordinate system origin should be displayed,or 0 or FALSE if it should not.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
13000014 Viewport not found
---------------
ga_viewport_post(viewport_name)
##########
Description:
This function will post a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport that will have its coordinate system origin state set. If this value is set to nothing or ““,the current viewport will be used.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
13000014 Viewport not found
---------------
ga_viewport_posted_get(viewport_list)
##########
Description:
This function will get a list of all of the posted viewports.
Input:
None.
Output:
STRING viewport_list[31]()This value returns a list of all of the posted viewports. The number of offsets allocated for this array should match the number of posted viewports. See the remarks below for more information.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
---------------
ga_viewport_range_get(viewport_name,range)
##########
Description:
This function will get the name of the range of numeric values used in conjunction with spectrums for displaying results posted to a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport from which the range assigned to the viewport will be obtained. If this value is set to nothing or ““,the current viewport will be used.
Output:
STRING range[31] This value returns the name of the range posted to the specified viewport.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
---------------
ga_viewport_range_set(viewport_name,range)
##########
Description:
This function will set and post the name of the range of numeric values used in conjunction with spectrums for displaying results to a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport from which the range assigned to the viewport will be obtained. If this value is set to nothing or ““,the current viewport will be used.
STRING range[31] This value specifies the name of the range that will be set and posted to the viewport. If this value is set to nothing or ““,the current range will be used.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
---------------
ga_viewport_rename(original_name,new_name)
##########
Description:
This function will rename a viewport.
Input:
STRING original_name[31] This value specifies the original name of the viewport. Setting this value to nothing or ““to identify the current viewport does not work here and will generate an error.
STRING new_name[31] This value specifies the new viewport name.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
---------------
ga_viewport_size_get(viewport_name,width,height)
##########
Description:
This function gets the width and height of a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport from which the height and width will be obtained. If this value is set to nothing or ““,the current viewport will be used.
Output:
REAL width This value returns the viewport width.
REAL height This value returns the viewport height.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
---------------
ga_viewport_size_set(viewport_name,width,height,update_control)
##########
Description:
This function sets the width and height of a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport from which the height and width will be obtained. If this value is set to nothing or ““,the current viewport will be used.
REAL width This value specifies the width of the viewport and must be greater than or equal to 1.0.
REAL height This value specifies the height of the viewport and must be greater than or equal to 1.0.
INTEGER update_control This value specifies the method used to update or post the display with the new size information. When this value is set to 1 or TRUE,the viewport will be updated immediately. If the this value is set to 0 or FALSE,updating the viewport will be deferred until another graphics manager event takes place. It is recommended that this value always be set to 1 or TRUE.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000009 The size of the viewport is out of range.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
---------------
ga_viewport_spectrum_get(viewport_name,spectrum_status)
##########
Description:
This function gets the current value of an integer intended to be used to record the posting status of the current spectrum for a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport from which the posting status of the current spectrum will be obtained. If this value is set to nothing or ““,the current viewport will be used.
Output:
INTEGER spectrum_status This value returns the status of the integer intended for use in recording the posting status of the current spectrum to a viewport.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
---------------
ga_viewport_spectrum_set(viewport_name,spectrum_status)
##########
Description:
This function sets the posting status of the current spectrum and the legend for a viewport.
Input:
STRING viewport_name[31] This value specifies the name of viewport to which the current spectrum will be posted. If this value is set to nothing or ““,the current viewport will be used.
INTEGER spectrum_status This value specifies the status of current spectrum and the legend for viewport. The possible integer values and their corresponding status are: •	 0 - No Spectrum,No Legend
---------------
ga_viewport_title_post(viewport_name,title)
##########
Description:
This function will post a title to a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport from which the title will be posted. If this value is set to nothing or ““,the current viewport will be used.
STRING title[256] This value specifies the title that will be posted to the viewport.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
13000004 Duplicate entry exists in table
13000014 Viewport not found
13000135 The specified VP title was not found.
---------------
ga_viewport_title_unpost(viewport_name,title)
##########
Description:
This function will unpost a title from a viewport and delete the title from the database.
Input:
STRING viewport_name[31] This value specifies the name of the viewport from which the title will be unposted. If this value is set to nothing or ““,the current viewport will be used.
STRING title[256] This value specifies the title that will be unposted from the viewport.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
13000014 Viewport not found
13000135 The specified VP title was not found.
---------------
ga_viewport_unpost(viewport_name)
##########
Description:
This function will unpost a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport that will be marked as unposted. If this value is set to nothing or ““,the current viewport will be used.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
---------------
ga_viewport_view_get(name_of_view,viewport_name)
##########
Description:
This function will assign a view name to the current view parameters of a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport from which the current view parameters will be obtained. If this value is set to nothing or ““,the current viewport will be used.
STRING name_of_view[31] This value specifies the name of the view to which the current view parameters of the viewport will be assigned.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000058 The view name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
11000103 The specified view was not found in the data base.
---------------
ga_viewport_view_name(viewport_name,name_of_view)
##########
Description:
This function will get the name of the view of a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport from which the name of the view will be obtained. If this value is set to nothing or ““,the current viewport will be used.
Output:
STRING name_of_view[31] This value returns the name of the view for the specified viewport.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
11000116 No view has been assigned to the viewport.
---------------
ga_viewport_view_set(name_of_view,viewport_name)
##########
Description:
This function will post a view to a viewport.
Input:
STRING viewport_name[31] This value specifies the name of the viewport to which the view will be posted. If this value is set to nothing or ““,the current viewport will be used.
STRING name_of_view[31] This value specifies the name of the view that will be posted to the viewport. If this value is set to nothing or ““,the current view will be used.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000058 The view name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000100 The specified viewport was not found in the database.
11000103 The specified view was not found in the data base.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000013 View not found
---------------
ga_viewport_viewports_get(viewport_list)
##########
Description:
This function gets a list of all of the viewports,including viewports that have not been posted.
Input:
None.
Output:
STRING viewport_list[31]()This value returns a list of all of the viewports. The number of offsets allocated for this array should match the number of viewports. See the remarks below for more information.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_view_aa_get(name_of_view,angle_x,angle_y,angle_z)
##########
Description:
This function gets the absolute x,y,and z angles of rotation around the axes of the global model coordinate system of the specified view.
Input:
STRING name_of_view[31] This value specifies the name of the view from which the absolute angles will be obtained. If this value is set to nothing or ““,the current view will be used.
Output:
REAL angle_x This value returns the rotation about the x axis.
REAL angle_y This value returns the rotation about the y axis.
REAL angle_z This value returns the rotation about the z axis.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
---------------
ga_view_aa_set(angle_x,angle_y,angle_z)
##########
Description:
This function sets the absolute x,y,and z angles of rotation around the axes of the global model coordinate system for the current view.
Input:
REAL angle_x This value specifies the angle of rotation for the x axis.
REAL angle_y This value specifies the angle of rotation for the y axis.
REAL angle_z This value specifies the angle of rotation for the z axis.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
13000014 Viewport not found
---------------
ga_view_ar_set(angle_x,angle_y,angle_z)
##########
Description:
This function sets the x,y,and z angles of rotation around the axes of the global model coordinate system for the current view relative to current rotational position.
Input:
REAL angle_x This value specifies the angle of rotation for the x axis.
REAL angle_y This value specifies the angle of rotation for the y axis.
REAL angle_z This value specifies the angle of rotation for the z axis.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
13000014 Viewport not found
---------------
ga_view_back_get(name_of_view,distance)
##########
Description:
This function gets the distance of the back clipping plane.
Input:
STRING name_of_view[31] This value specifies the name of the view from which the back clipping plane will be obtained. If this value is set to nothing or ““,the current view will be used.
Output:
REAL distance This value returns the location of back clipping plane.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
13000014 Viewport not found
---------------
ga_view_back_set(distance)
##########
Description:
This function sets the distance of the back clipping plane.
Input:
REAL distance This value sets the location of back clipping plane.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_view_capping_get(name_of_view,capping_status)
##########
Description:
This function will return the on/off status for capping.
Input:
STRING name_of_view[31] This value specifies the name of the view from which the capping status will be obtained. If this value is set to nothing or ““,the current view will be used.
Output:
LOGICAL capping_status This value returns the on/off status of capping. It will be set TRUE for on,FALSE for off.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
---------------
ga_view_capping_set(capping_status)
##########
Description:
This function sets the on/off status of capping for the current view.
Input:
LOGICAL capping_status This value sets the status of capping to either TRUE for on,or FALSE for off.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_view_center_get(name_of_view,coordinate_x,coordinate_y)
##########
Description:
This function returns the location of the center of the named view in the global model coordinate system.
Input:
STRING name_of_view[31] This value specifies the name of the view from which the center location will be obtained. If this value is set to nothing or ““,the current view will be used.
Output:
REAL coordinate_x This value returns the x coordinate for the center of the view.
REAL coordinate_y This value returns the y coordinate for the center of the view.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
---------------
ga_view_center_set(coordinate_x,coordinate_y)
##########
Description:
This function centers the current view around a specified point in the global model coordinate system.
Input:
REAL coordinate_x This value specifies the x coordinate around which the view will be centered.
REAL coordinate_y This value specifies the x coordinate around which the view will be centered.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_view_center_set_world(vpname,center,rctr)
##########
Description:
The view center will be set such that a Node,point or world coordinates can be used as the center of the current viewport.
Input:
STRING vpname Viewport name
STRING center New view center pick
LOGICAL rctr True if rotation center to be set also
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None
---------------
ga_view_clipping_get(name_of_view,clipping_status)
##########
Description:
This function will return the on/off status for clipping.
Input:
STRING name_of_view[31] This value specifies the name of the view from which the clipping status will be obtained. If this value is set to nothing or ““,the current view will be used.
Output:
LOGICAL clipping_status This value returns the on/off status of capping. It will be set TRUE for on,FALSE for off.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
---------------
ga_view_clipping_set(clipping_status)
##########
Description:
This function sets the on/off status of clipping for the current view.
Input:
LOGICAL clipping_status This value sets the status of clipping to either TRUE for on,or FALSE for off.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_view_corners_set(point_1,point_2,aspect_ratio)
##########
Description:
This function changes the size and center location of the current view.
Input:
REAL point_1(3)This value specifies a point that is the location of the corner point of a box that is on a diagonal to point_2. See the remarks below for more information.
REAL point_2(3)This value specifies a point that is the location of the corner point of a box that is on a diagonal to point_1. See the remarks below for more information.
REAL aspect_ratio This value specifies the relationship between the size of the box and the zoom value applied to the view. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_view_create(name_of_view,viewport_name)
##########
Description:
This function will create a named view and post it to a viewport.
Input:
STRING name_of_view[31] This value specifies the name of the view. If this value is set to nothing or ““,an error status value will be returned by the function.
STRING viewport_name[31] This value specifies the name of the viewport to which the view will be posted. If this value is set to nothing or ““,the current viewport will be used.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000007 The viewport name is invalid.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000153 The specified Named View already exists.
13000007 An unspecified database error occurred
13000014 Viewport not found
---------------
ga_view_delete(name_of_view)
##########
Description:
This function deletes a named view.
Input:
STRING name_of_view[31] This value specifies the name of the view to be deleted. If this value is set to nothing or ““,the current view will be used.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_view_dist_get(name_of_view,distance)
##########
Description:
The function will get the distance from the center of the named view to the view plane along the z axis of the global model coordinate system.
Input:
STRING name_of_view[31] This value specifies the name of the view from which the distance will be obtained. If this value is set to nothing or ““,the current view will be used.
Output:
REAL distance This value returns the distance from the center of the named view to the view plane. The output value distance will always be less than the observer position distance.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
---------------
ga_view_dist_set(distance)
##########
Description:
This function will set the distance from the center of the current view to the view plane along the z axis of the global model coordinate system.
Input:
REAL distance This value specifies the distance from the view plane to the center of the current view. This input value must be less than the observer position distance.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_view_exist_get(name_of_view,view_status)
##########
Description:
This function returns a status value reporting the existence of a named view.
Input:
STRING name_of_view[31] This value specifies the name of the view from which the distance will be obtained. If this value is set to nothing or ““,the current view will be used.
Output:
INTEGER view_status This value returns the status of the named view as 1 or TRUE if it exists,and 0 or false if it does not exist.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
13000007 An unspecified database error occurred
---------------
ga_view_fov_get(name_of_view,fov_angle)
##########
Description:
This function will get the field of view angle for the named view.
Input:
STRING name_of_view[31] This value specifies the name of the view from which the field of view angle will be obtained. If this value is set to nothing or ““,the current view will be used.
Output:
REAL fov_angle This value returns the field of view angle for the named view.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
---------------
ga_view_fov_set(fov_angle)
##########
Description:
This function will set the field of view angle for the current view.
Input:
REAL fov_angle This value specifies the field of view angle.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_view_from_get(name_of_view,position)
##########
Description:
This function will get the position of the observer.
Input:
STRING name_of_view[31] This value specifies the name of the view from which the position of the observer will be obtained. If this value is set to nothing or ““,the current view will be used.
Output:
REAL position(3)This value returns the location of the position of the observer. The offsets of the array (1,2,3)correspond to the axes of the global model coordinate system (x,y,z).
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
---------------
ga_view_from_set(position)
##########
Description:
This function will set the position of the observer in the current view.
Input:
REAL point(3)This value specifies the position of the observer. The offsets of the array (1,2,3)correspond to the axes of the global model coordinate system (x,y,z).
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_view_front_get(name_of_view,distance)
##########
Description:
The function will get the distance from the center of the named view to the front clipping plane along the z axis of the global model coordinate system.
Input:
STRING name_of_view[31] This value specifies the name of the view from which the distance of the front clipping plane will be obtained. If this value is set to nothing or ““,the current view will be used.
Output:
REAL distance This value returns the distance from the center of the named view to the front clipping plane. The output value distance will always be greater than the distance to the back clipping plane.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
---------------
ga_view_front_set(distance)
##########
Description:
This function will set the distance from the center of the named view to the front clipping plane along the z axis of the global model coordinate system.
Input:
REAL distance This value specifies the distance from the center of the named view to the front clipping plane. This value must always be greater than the distance to the back clipping plane.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_view_model_scale_get(name_of_view,scale_x,scale_y,scale_z)
##########
Description:
This function gets the model scale factors for each of the axes in the global model coordinate system of the named view.
Input:
STRING name_of_view[31] This value specifies the name of the view from which the model scale factors will be obtained. If this value is set to nothing or ““,the current view will be used.
Output:
REAL scale_x This value returns the scale factor for the x axis.
REAL scale_y This value returns the scale factor for the y axis.
REAL scale_z This value returns the scale factor for the z axis.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
---------------
ga_view_model_scale_set(scale_x,scale_y,scale_z)
##########
Description:
This function sets the model scale factors for each of the axes in the global model coordinate system of the current view.
Input:
REAL scale_x This value specifies the scale factor for the x axis.
REAL scale_y This value specifies the scale factor for the y axis.
REAL scale_z This value specifies the scale factor for the z axis.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_view_nviews_get(number_of_views)
##########
Description:
This function gets the number of views.
Input:
None.
Output:
INTEGER number_of_views This value returns the number of views.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000098 A fatal error has occurred in the database. Database is corrupted.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000085 Cursor not open
---------------
ga_view_perspective_get(name_of_view,perspective_status)
##########
Description:
This function gets the on/off status of the perspective for the name view.
Input:
STRING name_of_view[31] This value specifies the name of the view from which the perspective status will be obtained. If this value is set to nothing or ““,the current view will be used.
Output:
LOGICAL perspective_status This value returns the status of the perspective. It will either be set to on (TRUE),or off (FALSE).
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
---------------
ga_view_perspective_set(perspective_status)
##########
Description:
This function sets the on/off status of the perspective for the current view.
Input:
LOGICAL perspective_status This value specifies the status of the perspective to be either TRUE for on,or FALSE for off.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_view_plane_set(point_1,point_2,point_3)
##########
Description:
This function set a plane defined by three input points in the global model coordinate system as the current view plane in the current view.
Input:
REAL point_1(3)This value specifies the first point defining a plane.
REAL point_2(3)This value specifies the second point defining a plane.
REAL point_3(3)This value specifies the third point defining a plane.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_view_rename(original_name,new_name)
##########
Description:
This function renames a view.
Input:
STRING original_name[31] This value specifies the original name of the view. If this value is set to nothing or ““,the current view will be used.
STRING new_name[31] This value specifies a new name to be assigned to the view.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000153 The specified Named View already exists.
13000007 An unspecified database error occurred
---------------
ga_view_sa_get(name_of_view,angle_x,angle_y,angle_z)
##########
Description:
This function gets the absolute x,y,and z angles of rotation around the axes of the global screen coordinate system of the specified view.
Input:
STRING name_of_view[31] This value specifies the name of the view from which the absolute angles will be obtained. If this value is set to nothing or ““,the current view will be used.
Output:
REAL angle_x This value returns the rotation about the x axis.
REAL angle_y This value returns the rotation about the y axis.
REAL angle_z This value returns the rotation about the z axis.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
---------------
ga_view_sa_set(angle_x,angle_y,angle_z)
##########
Description:
This function sets the absolute x,y,and z angles of rotation around the axes of the global screen coordinate system for the current view.
Input:
REAL angle_x This value specifies the angle of rotation for the x axis.
REAL angle_y This value specifies the angle of rotation for the y axis.
REAL angle_z This value specifies the angle of rotation for the z axis.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
13000014 Viewport not found
---------------
ga_view_screen_scale_get(name_of_view,scale_x,scale_y)
##########
Description:
This function gets the model scale factors for each of the axes in the global screen coordinate system of the named view.
Input:
STRING name_of_view[31] This value specifies the name of the view from which the screen scale factors will be obtained. If this value is set to nothing or ““,the current view will be used.
Output:
REAL scale_x This value returns the scale factor for the x axis.
REAL scale_y This value returns the scale factor for the y axis.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
---------------
ga_view_screen_scale_set(scale_x,scale_y)
##########
Description:
This function sets the screen scale factors for each of the axes in the global screen coordinate system of the current view.
Input:
REAL scale_x This value specifies the scale factor for the x axis.
REAL scale_y This value specifies the scale factor for the y axis.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_view_sr_set(angle_x,angle_y,angle_z)
##########
Description:
This function sets the relative x,y,and z angles of rotation around the axes of the global screen coordinate system for the current view.
Input:
REAL angle_x This value specifies the angle of rotation for the x axis.
REAL angle_y This value specifies the angle of rotation for the y axis.
REAL angle_z This value specifies the angle of rotation for the z axis.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000096 A current viewport has not been defined.
11000132 There is no current view.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_view_to_get(name_of_view,center_point)
##########
Description:
This function returns the center point of the named view.
Input:
STRING name_of_view[31] This value specifies the name of the view from which the center point will be obtained. If this value is set to nothing or ““,the current view will be used.
Output:
REAL center_point(3)This value returns the location of the center point of the view. The offsets of the array (1,2,3)correspond to the axes of the global model coordinate system (x,y,z).
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000132 There is no current view.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
---------------
ga_view_to_set(point)
##########
Description:
This function will set the position of the observer in the current view.
Input:
REAL point(3)This value sets the position of the observer. The offsets of the array (1,2,3)correspond to the axes of the global model coordinate system (x,y,z).
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_view_up_get(name_of_view,direction_vector)
##########
Description:
This function returns a point that is on a vector normal to the view plane of the named view that defines the up direction of the view.
Input:
STRING name_of_view[31] This value specifies the name of the view from which the direction vector will be obtained. If this value is set to nothing or ““,the current view will be used.
Output:
REAL direction_vector(3)This value returns the location of a point on a vector normal to the view plane defining the up direction of the view. The offsets of the array (1,2,3)correspond to the axes of the global model coordinate system (x,y,z).
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
---------------
ga_view_up_set(direction_vector)
##########
Description:
This function defines the up direction in a view by setting a point that is on a vector normal to the view plane of the current view.
Input:
REAL direction_vector(3)This value specifies the location of a point on a vector normal to the view plane defining the up direction of the view. The offsets of the array (1,2,3)correspond to the axes of the global model coordinate system (x,y,z).
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000013 View not found
---------------
ga_view_views_get(view_list)
##########
Description:
This function gets a list of all of the named views.
Input:
None.
Output:
STRING view_list[31]()This value returns a list of all of the view. The number of offsets allocated for this array should match the number of viewports. See the remarks below for more information.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000098 A fatal error has occurred in the database. Database is corrupted.
13000085 Cursor not open
---------------
ga_view_zoom_get(name_of_view,zoom_factor)
##########
Description:
This function will get the zoom factor for the named view.
Input:
STRING name_of_view[31] This value specifies the name of the view from which the zoom factor will be obtained. If this value is set to nothing or ““,the current view will be used.
Output:
REAL zoom_factor This value returns the zoom factor for the named view.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000058 The view name is invalid.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
---------------
ga_view_zoom_set(zoom_factor)
##########
Description:
This function will set the current zoom factor for the current view.
Input:
REAL zoom_factor This value specifies the new zoom factor to which the current view will be set. The zoom factor value must be between 1e-32 and 1e+32 or otherwise function will return an error.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000096 A current viewport has not been defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000103 The specified view was not found in the data base.
11000132 There is no current view.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
ga_group_clear(group_name)
##########
Description:
This function clears a group of all of its members.
Input:
STRING group_name[31] This value specifies the name of the group to clear.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
11000050 The group name is invalid.
11000105 The specified group was not found in the database.
---------------
ga_group_create_groups(options,group_name,num_select_1,select_1,num_select_2,select_2)
##########
Description:
Create single or multiple groups using different selection methods.
Input:
INTEGER options Defines the creation options in a bit mask:GA_GROUP_CREATE_SELECTION 0X00000001GA_GROUP_CREATE_PROP_SETS 0X00000002GA_GROUP_CREATE_PROP_TYPE 0X00000004GA_GROUP_CREATE_LBC_SETS 0X00000008GA_GROUP_CREATE_LBC_TYPE 0X00000010GA_GROUP_CREATE_MATERIAL 0X00000020GA_GROUP_CREATE_ELM_TOPS 0X00000040GA_GROUP_CREATE_ELM_SHAPE 0X00000080GA_GROUP_CREATE_ELEM_IDS 0X00000100GA_GROUP_CREATE_MPC_TYPE 0X00000200GA_GROUP_CREATE_BOOLEAN 0X00000400
STRING group_name [32] Group name.
INTEGER num_select_1 The starting element id for an option value of GA_GROUP_CREATE_ELEM_IDS
STRING select_1 [32] ()The first selected list of entities.
INTEGER num_select_2 The ending element id for an option value of GA_GROUP_CREATE_ELEM_IDS
STRING select_2 [32] ()The second selected list of entities.
Output:
INTEGER <Return Value> 0 if no error have occured.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000049 A group with the given name is already in the database.
11000050 The group name is invalid.
11000097 There is not enough disk space to complete operation.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_current_set(group_name)
##########
Description:
This function will set any new entities as members of the specified group and then post the specified group to the current viewport.
Input:
STRING group_name[31] This value specifies the name of the group to which new entities will be set and that will be posted to the current viewport,
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000049 A group with the given name is already in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_delete(group_name)
##########
Description:
This function will delete a group from the database.
Input:
STRING group_name[31] This value specifies the name of the group. Setting this string to nothing or “” will allow the use of the current group to be deleted.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000050 The group name is invalid.
11000121 There is not a current group defined.
11000140 The group can not be deleted while selected as the current group of any viewport.
11000105 The specified group was not found in the database.
---------------
ga_group_display_set(group_name,display_list)
##########
Description:
This function changes the current display property list associated with a group and posts the group to the current viewport.
Input:
STRING group_name[31] This value specifies the name of the group. Setting this string to nothing or “” will allow the use of the current group.
STRING display_list[31] This value is the name of the display property list.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000042 The display property list is invalid.
11000050 The group name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
11000118 There is no display property posted to the group.
11000121 There is not a current group defined.
---------------
ga_group_entity_add(group_name,entities)
##########
Description:
This function adds a list of entities as members to a group.
Input:
STRING group_name[31] This value specifies the name of the group to which the entities will be added. Setting this string to nothing or “” will allow the use of the current group.
STRING entities[] This value specifies the list of entities to be added to the group.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1000025 Error attempting to allocate virtual memory.
11000011 The entity is not contained in the specified group.
11000012 The entity is already contained in the specified group.
11000050 The group name is invalid.
11000078 The specified entity could not be found in the database
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
11000121 There is not a current group defined.
---------------
ga_group_entity_remove(group_name,entities)
##########
Description:
This function will remove a list of entities from a group.
Input:
STRING group_name[31] This value specifies the name of the group. Setting this string to nothing or “” will allow the use of the current group.
STRING entities[] This value specifies the list of entities to be disassociated from the group.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000050 The group name is invalid.
11000121 There is not a current group defined.
11000011 The entity is not contained in the specified group.
---------------
ga_group_members_delete(group_name)
##########
Description:
This function will delete all of the entities from a group.
Input:
STRING group_name[31] This value specifies the name of the group. Setting this string to nothing or “” will allow the use of the current group.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000050 The group name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
11000121 There is not a current group defined.
11000127 The group does not have any entities in it.
---------------
ga_group_move_translate(ngroups,group_names,coordinate_frame_id,translation_vector,action_flag)
##########
Description:
This function moves a group of model geometry and FEM entities from one place in the model space to another.
Input:
INTEGER ngroups This value specifies the number of groups to copy.
STRING group_names[] This value specifies the names of the groups that will have their positions translated. Set this string to “” to transform the current group.
STRING coordinate_frame_id[] This value specifies the reference coordinate frame.
STRING translation_vector[] This value specifies the group translation direction and distance.
INTEGER action_flag This value specifies whether or not to transform Loads/Boundary Conditions and Properties: 8=transform Loads/Boundary Conditions 16=transform Properties 24=transform both Loads/Boundary Conditions and Properties
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve cannot be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface cannot be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
---------------
ga_group_move_translate_1(ngroups,group_names,coordinate_frame_id,translation_vector,vector_magnitude,reverse_dir,action_flag)
##########
Description:
This function moves a group of model geometry and FEM entities to a different space within the model.
Input:
INTEGER ngroups This value specifies the number of groups to copy.
STRING group_names[] This value specifies the names of the groups that will have their positions translated. Set this string to “” to transform the current group.
STRING coordinate_frame_id[] This value specifies the reference coordinate frame.
STRING translation_vector[] This value specifies the group translation direction.
REAL vector_magnitude This value specifies the group translation distance.
LOGICAL reverse_dir This value specifies whether or not to reverse the direction vector.
INTEGER action_flag This value specifies whether or not to transform Loads/Boundary Conditions and Properties: 8=transform Loads/Boundary Conditions 16=transform Properties 24=transform both Loads/Boundary Conditions and Properties
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve cannot be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface cannot be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
---------------
ga_group_precision_set(group_name,precision_status)
##########
Description:
This function sets the precision of the rendering for a specified group.
Input:
STRING group_name[] This value specifies the name of the group. Set this string to nothing or “” to use of the current group.
INTEGER precision_status This is the value to be used as the precision for the group which can have the following values: 0 for speed,1 for accuracy.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000050 The group name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
11000121 There is not a current group defined.
---------------
ga_group_rename(original_name,new_name)
##########
Description:
This function renames a group.
Input:
STRING original_name[31] This value specifies the original name of the group. Setting this string to nothing or “” will allow the use of the current group.
STRING new_name[31] This value specifies the new name of the group.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
11000050 The group name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
11000121 There is not a current group defined.
---------------
ga_group_transform_mirror(group_name,plane,offset,delete_original,use_original_labels,reverse)
##########
Description:
This function creates a new set of entities which are a mirror of the entities contained in the named group.
Input:
STRING group_name[31] This value specifies the name of the group to be mirrored. This value can be set to “” to mirror the current group.
STRING plane[] This value specifies the plane around which the mirror transformation will take place.
REAL offset This value specifies a distance along a vector that is normal to the mirror plane,starting at the mirror plane surface. This distance defines an offset for the placement of the mirrored entities.
LOGICAL delete_original This value,when set to TRUE,specifies the deletion of the original geometry being mirrored.
LOGICAL use_original_labels This value,when set to TRUE with the input value delete_original being set to TRUE,will allow the original geometry IDs for the mirrored entities to be used.
LOGICAL reverse This value,when set to TRUE,will allow the parametric direction of the curves and surfaces of the mirrored geometry to be reversed.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is%A%. Unable to process request.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is%A%. Unable to process request.
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
---------------
ga_group_transform_mirror2(group_name,plane,offset,delete_original,use_original_labels,reverse,lbc_copy_sets,lbc_transform_sets,prop_copy_sets,prop_transform_sets)
##########
Description:
This function creates a set of entities which are a mirror of the entities contained in the named group.
Input:
STRING group_name[31] This value specifies the name of the group to be mirrored. This value can be set to “” to mirror the current group.
STRING plane[] This value specifies the plane around which the mirror transformation will take place.
REAL offset This value specifies a distance along a vector that is normal to the mirror plane,starting at the mirror plane surface. This distance defines an offset for the placement of the mirrored entities.
LOGICAL delete_original This value,when set to TRUE,will allow the deletion of the original geometry being mirrored.
LOGICAL use_original_labels This value,when set to TRUE with the input value delete_original being set to TRUE,will allow the original geometry IDs for the mirrored entities to be used.
LOGICAL reverse This value,when set to TRUE,will allow the parametric direction of the curves and surfaces of the mirrored geometry to be reversed.
STRING lbc_copy_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the load boundary condition sets to be copied,with no coordinate transformations,to the mirrored entities.
STRING lbc_transform_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the load boundary condition sets to be mirrored to the mirrored entities.
STRING prop_copy_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the property sets to be copied,with no coordinate transformations,to the mirrored entities.
STRING prop_transform_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the property sets to be mirrored to the mirrored entities.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is%A%. Unable to process request.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is%A%. Unable to process request.
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
---------------
ga_group_transform_pivot(group_name,pivot_point,start_point,end_point,delete_original,use_original_labels)
##########
Description:
This function creates a set of entities which are a copy of the entities contained in the named group,pivoted around a point defined in space.
Input:
STRING group_name[31] This value specifies the name of the group to be pivoted. This value can be set to “” to pivot the current group.
STRING pivot_point[] This value specifies the point around which the model and FEM geometry will be pivoted.
STRING start_point[] This value specifies the starting point from which the pivot operation will take place.
STRING end_point[] This value specifies the ending point from which the pivot operation will take place.
LOGICAL delete_original This value,when set to TRUE,will cause the original geometry being pivoted to be deleted.
LOGICAL use_original_labels This value,when set to TRUE with the input value delete_original being set to TRUE,will allow the original geometry IDs for the pivoted entities to be used.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1 This is an internal status condition. There is no corresponding status message in the message database.
2 This is an internal status condition. There is no corresponding status message in the message database.
3 This is an internal status condition. There is no corresponding status message in the message database.
1000211 The length of the Axis equals zero.
1000302 The three points specified are nearly collinear.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
ga_group_transform_pivot2(group_name,pivot_point,start_point,end_point,delete_original,use_original_labels,lbc_copy_sets,lbc_transform_sets,prop_copy_sets,prop_transform_sets)
##########
Description:
This function creates a set of entities which are a copy of the entities contained in the named group,pivoted around a point defined in space.
Input:
STRING group_name[31] This value specifies the name of the group to be pivoted. This value can be set to “” to pivot the current group.
STRING pivot_point[] This value specifies the point around which the model and FEM geometry will be pivoted.
STRING start_point[] This value specifies the starting point from which the pivot operation will take place.
STRING end_point[] This value specifies the ending point from which the pivot operation will take place.
LOGICAL delete_original This value,when set to TRUE,will cause the original geometry being pivoted to be deleted.
LOGICAL use_original_labels This value,when set to TRUE with the input value delete_original being set to TRUE,will allow the original geometry IDs for the pivoted entities to be used.
STRING lbc_copy_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the load boundary condition sets to be copied,with no coordinate transformations,to the copied entities.
STRING lbc_transform_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the load boundary condition sets to be added to the transformed entities.
STRING prop_copy_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the property sets to be copied,with no coordinate transformations,to the transformed entities.
STRING prop_transform_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the property sets to be added to the transformed entities.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1 This is an internal status condition. There is no corresponding status message in the message database.
2 This is an internal status condition. There is no corresponding status message in the message database.
3 This is an internal status condition. There is no corresponding status message in the message database.
1000211 The length of the Axis equals zero.
1000302 The three points specified are nearly collinear.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
ga_group_transform_position(group_name,start_point_1,start_point_2,start_point_3,end_point_1,end_point_2,end_point_3,delete_original,use_original_labels)
##########
Description:
This function will do a rigid body positional and rotational translation of a group of model geometry and FEM entities.
Input:
STRING group_name[31] This value specifies the name of the group that will have its position transformed. This value can be set to “” to transform the current group.
STRING start_point_1[] This value specifies the first point in space used to define a coordinate system for the starting position of the position translation operation.
STRING start_point_2[] This value silicifies the second point in space used to define a coordinate system for the starting position of the position translation operation.
STRING start_point_3[] This value specifies the third point in space used to define a coordinate system for the starting position of the position translation operation.
STRING end_point_1[] This value specifies the first point in space used to define a coordinate system for the ending position of the position translation operation.
STRING end_point_2[] This value specifies the second point in space used to define a coordinate system for the ending position of the position translation operation.
STRING end_point_3[] This value specifies the third point in space used to define a coordinate system for the ending position of the position translation operation.
LOGICAL delete_original This value,when set to TRUE,will cause the original geometry being transformed to be deleted.
LOGICAL use_original_labels This value,when set to TRUE with the input value delete_original being set to TRUE,will allow the original geometry IDs for the pivoted entities to be used.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1000211 The length of the Axis equals zero.
1000302 The three points specified are nearly collinear.
13000088 Preference not found
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
---------------
ga_group_transform_position2(group_name,start_point_1,start_point_2,start_point_3,end_point_1,end_point_2,end_point_3,delete_original,use_original_labels,lbc_copy_sets,lbc_transform_sets,prop_copy_sets,prop_transform_sets)
##########
Description:
This function will do a rigid body positional and rotational translation of a group of model geometry and FEM entities.
Input:
STRING group_name[31] This value specifies the name of the group that will have its position transformed. This value can be set to “” to transform the current group.
STRING start_point_1[] This value specifies the first point in space used to define a coordinate system for the starting position of the position translation operation.
STRING start_point_2[] This value specifies the second point in space used to define a coordinate system for the starting position of the position translation operation.
STRING start_point_3[] This value specifies the third point in space used to define a coordinate system for the starting position of the position translation operation.
STRING end_point_1[] This value specifies the first point in space used to define a coordinate system for the ending position of the position translation operation.
STRING end_point_2[] This value specifies the second point in space used to define a coordinate system for the ending position of the position translation operation.
STRING end_point_3[] This value specifies the third point in space used to define a coordinate system for the ending position of the position translation operation.
LOGICAL delete_original This value,when set to TRUE,will cause the original geometry being transformed to be deleted.
LOGICAL use_original_labels This value,when set to TRUE with the input value delete_original being set to TRUE,will allow the original geometry IDs for the pivoted entities to be used.
STRING lbc_copy_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the load boundary condition sets to be copied,with no coordinate transformations,to the copied entities.
STRING lbc_transform_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the load boundary condition sets to be added to the transformed entities.
STRING prop_copy_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the property sets to be copied,with no coordinate transformations,to the transformed entities.
STRING prop_transform_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the property sets to be added to the transformed entities.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1000211 The length of the Axis equals zero.
1000302 The three points specified are nearly collinear.
13000088 Preference not found
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
---------------
ga_group_transform_rotate(group_name,coordinate_frame_id,rotation_axis,rotational_angle,offset_angle,delete_original,use_original_labels,repeat_count)
##########
Description:
This function will do a rigid body rotational translation of a group of model geometry and FEM entities.
Input:
STRING group_name[31] This value specifies the name of the group that will have its position rotated. This value can be set to “” to rotate the current group.
STRING coordinate_frame_id[] This value specifies the reference coordinate frame.
STRING rotation_axis[] This value specifies a vector that is normal to the plane of rotation. This vector forms the axis around which the rotation translation will take place.
REAL rotation_angle[] This value specifies the angle of displacement in degrees that will take place around the axis of rotation.
REAL offset_angle[] This value specifies an angular offset in degrees around the axis of rotation for the start of the rotational translation.
LOGICAL delete_original This value,when set to TRUE,will cause the original geometry being transformed to be deleted.
LOGICAL use_original_labels This value,when set to TRUE with the input value delete_original being set to TRUE,will allow the original geometry IDs for the pivoted entities to be used.
INTEGER repeat_count This value specifies the number of times to repeat the transform with each additional transform being positioned relative to the previous transformation results.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1 This is an internal status condition. There is no corresponding status message in the message database.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
---------------
ga_group_transform_rotate2(group_name,coordinate_frame_id,rotation_axis,rotational_angle,offset_angle,delete_original,use_original_labels,repeat_count,lbc_copy_sets,lbc_transform_sets,prop_copy_sets,prop_transform_sets)
##########
Description:
This function will do a rigid body rotational translation of a group of model geometry and FEM entities.
Input:
STRING group_name[31] This value specifies the name of the group that will have be rotated. This value can be set to “” to rotate the current group.
STRING coordinate_frame_id[] This value specifies the reference coordinate frame.
STRING rotation_axis[] This value specifies a vector that is normal to the plane of rotation. This vector forms the axis around which the rotation translation will take place.
REAL rotation_angle[] This value specifies the angle of displacement in degrees that will take place around the axis of rotation.
REAL offset_angle[] This value specifies an angular offset in degrees around the axis of rotation for the start of the rotational translation.
LOGICAL delete_original This value,when set to TRUE,will cause the original geometry being transformed to be deleted.
LOGICAL use_original_labels This value,when set to TRUE with the input value delete_original being set to TRUE,will allow the original geometry IDs for the pivoted entities to be used.
INTEGER repeat_count This value specifies the number of times to repeat the transform with each additional transform being positioned relative to the previous transformation results.
STRING lbc_copy_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the load boundary condition sets to be copied,with no coordinate transformations,to the copied entities.
STRING lbc_transform_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the load boundary condition sets to be added to the transformed entities.
STRING prop_copy_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the property sets to be copied,with no coordinate transformations,to the transformed entities.
STRING prop_transform_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the property sets to be added to the transformed entities.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1 This is an internal status condition. There is no corresponding status message in the message database.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
ga_group_transform_scale(group_name,coordinate_frame_id,origin_point,scale_factors,delete_original,use_original_labels,repeat_count)
##########
Description:
This function will change the scale of the selected group of model geometry and FEM entities.
Input:
STRING group_name[31] This value specifies the name of the group that will have its position scaled. This value can be set to “” to scale the current group.
STRING coordinate_frame_id[] This value specifies the reference coordinate frame.
STRING origin_point[] This value specifies a point in space from which the group will be scaled.
REAL scale_factors[3] This value specifies the scale factors in the X,Y,and Z coordinate axis.
LOGICAL delete_original This value,when set to TRUE,will cause the original geometry being transformed to be deleted.
LOGICAL use_original_labels This value,when set to TRUE with the input value delete_original being set to TRUE,will allow the original geometry IDs for the pivoted entities to be used.
INTEGER repeat_count This value specifies the number of times to repeat the transform with each additional transform being positioned relative to the previous transformation results.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
ga_group_transform_scale2(group_name,coordinate_frame_id,origin_point,scale_factors,delete_original,use_original_labels,repeat_count,lbc_copy_sets,lbc_transform_sets,prop_copy_sets,prop_transform_sets)
##########
Description:
This function will change the scale of the selected group of model geometry and FEM entities.
Input:
STRING group_name[31] This value specifies the name of the group that will have its position scaled. This value can be set to “” to scale the current group.
STRING coordinate_frame_id[] This value specifies the reference coordinate frame.
STRING origin_point[] This value specifies a point in space from which the group will be scaled.
REAL scale_factors[3] This value specifies the scale factors in the X,Y,and Z coordinate axis.
LOGICAL delete_original This value,when set to TRUE,will cause the original geometry being transformed to be deleted.
LOGICAL use_original_labels This value,when set to TRUE with the input value delete_original being set to TRUE,will allow the original geometry IDs for the pivoted entities to be used.
INTEGER repeat_count This value specifies the number of times to repeat the transform with each additional transform being positioned relative to the previous transformation results.
STRING lbc_copy_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the load boundary condition sets to be copied,with no coordinate transformations,to the copied entities.
STRING lbc_transform_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the load boundary condition sets to be added to the transformed entities.
STRING prop_copy_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the property sets to be copied,with no coordinate transformations,to the transformed entities.
STRING prop_transform_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the property sets to be added to the transformed entities.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
---------------
ga_group_transform_translate(group_name,coordinate_frame_id,translation_vector,delete_original,use_original_labels,repeat_count)
##########
Description:
This function will move or translate a group of model geometry and FEM entities from one place in the model space to another.
Input:
STRING group_name[31] This value specifies the name of the group that will have its position translated. This value can be set to “” to transform the current group.
STRING coordinate_frame_id[] This value specifies the reference coordinate frame.
STRING translation_vector[] This value specifies the direction and distance that the group will be translated.
LOGICAL delete_original This value,when set to TRUE,will cause the original geometry being transformed to be deleted.
LOGICAL use_original_labels This value,when set to TRUE with the input value delete_original being set to TRUE,will allow the original geometry IDs for the pivoted entities to be used.
INTEGER repeat_count This value specifies the number of times to repeat the transform with each additional transform being positioned relative to the previous transformation results.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
ga_group_transform_translate_1(ngroups,group_names,coordinate_frame_id,translation_vector,action_flag,name_flag,new_group_names,repeat_count)
##########
Description:
This function will copy a group of model geometry and FEM entities from one place in the model space to another.
Input:
INTEGER ngroups This value specifies the number of groups to copy.
STRING group_names[] This value specifies the names of the groups that will have their positions translated. This value can be set to “” to transform the current group.
STRING coordinate_frame_id[] This value specifies the reference coordinate frame.
STRING translation_vector[] This value specifies the group translation direction and distance.
INTEGER action_flag This value specifies whether or not to transform Loads/Boundary Conditions and Properties: 8=transform Loads/Boundary Conditions 16=transform Properties 24=transform both Loads/Boundary Conditions and Properties
INTEGER name_flag This value specifies how to interpret the “new_group_names” argument describing the “Transformed Group Name(s)”: 0=Original Group Name 1=New Group Name 2=Group Name Prefix 3=Group Name Suffix 4=Current Group Name
STRING new_group_names This value specifies the string associated with the argument “name_flag”. This will be either a: New Group Name Group Name Prefix,or Group Name Suffix
INTEGER repeat_count This value specifies the number of times to repeat the transform with each additional transform being positioned relative to the previous transformation results.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve cannot be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface cannot be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
---------------
ga_group_transform_translate2(group_name,coordinate_frame_id,translation_vector,delete_original,use_original_labels,repeat_count,lbc_copy_sets,lbc_transform_sets,prop_copy_sets,prop_transform_sets)
##########
Description:
This function will move or translate a group of model geometry and FEM entities from one place in the model space to another.
Input:
STRING group_name[31] This value specifies the name of the group that will have its position translated. This value can be set to “” to transform the current group.
STRING coordinate_frame_id[] This value specifies the reference coordinate frame.
STRING translation_vector[] This value specifies the direction and distance that the group will be translated.
LOGICAL delete_original This value,when set to TRUE,will cause the original geometry being transformed to be deleted.
LOGICAL use_original_labels This value,when set to TRUE with the input value delete_original being set to TRUE,will allow the original geometry IDs for the pivoted entities to be used.
INTEGER repeat_count This value specifies the number of times to repeat the transform with each additional transform being positioned relative to the previous transformation results.
STRING lbc_copy_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the load boundary condition sets to be copied,with no coordinate transformations,to the copied entities.
STRING lbc_transform_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the load boundary condition sets to be added to the transformed entities.
STRING prop_copy_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the property sets to be copied,with no coordinate transformations,to the transformed entities.
STRING prop_transform_sets[]()This value specifies an array of strings,terminated by an empty string,listing the names of the property sets to be added to the transformed entities.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve cannot be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface cannot be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
---------------
ga_group_transform_translate_2(ngroups,group_names,coordinate_frame_id,translation_vector,vector_magnitude,reverse_dir,action_flag,name_flag,new_group_names,repeat_count)
##########
Description:
This function will copy a group of model geometry and FEM entities from one place in the model space to another.
Input:
INTEGER Ngroups This value specifies the number of groups to copy.
STRING group_names[] This value specifies the names of the groups that will have their positions translated. This value can be set to “” to transform the current group.
STRING coordinate_frame_id[] This value specifies the reference coordinate frame.
STRING translation_vector[] This value specifies the direction that the group will be translated.
REAL vector_magnitude This value specifies the distance that the group will be translated.
LOGICAL reverse_dir This value specifies whether or not to reverse the direction vector.
INTEGER action_flag This value specifies whether or not to transform Loads/Boundary Conditions and Properties: 8=transform Loads/Boundary Conditions16=transform Properties24=transform both Loads/Boundary Conditions and Properties
INTEGER name_flag This value specifies how to interpret the “new_group_names” argument describing the “Transformed Group Name(s)”: 0=Original Group Name1=New Group Name2=Group Name Prefix3=Group Name Suffix4=Current Group Name
STRING new_group_names This value specifies the string associated with the argument “name_flag”. This will be either a: New Group NameGroup Name Prefix,orGroup name Suffix
INTEGER repeat_count This value specifies the number of times to repeat the transform with each additional transform being positioned relative to the previous transformation results.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry
14000211 LpSublistAttributeGet: Surface evaluator error
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
---------------
uil_group_members_get(group_name,members)
##########
Description:
This function will get a list of all the members of a group.
Input:
STRING group_name[31] This value specifies the name of the group that will be retrieved. This value can be set to “” to retrieve the current group.
Output:
STRING members[VIRTUAL] This value returns a list of the members of the group.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
8104003 Out of room in destination format string.
8107002 Last command aborted.
11000050 The group name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
11000121 There is not a current group defined.
11000127 The group does not have any entities in it.
---------------
neutold_import_neutral(file_name,group_name,entity_flags,minimum_id,maximum_id,offset)
##########
Description:
This function is used to import a neutral file.
Input:
STRING file_name[] This value specifies the name of the neutral file to be imported.
STRING group_name[] This value specifies the name of the group to which the imported geometry will be added.
LOGICAL entity_flags(35)This value specifies an array of flags identifying the types of entities to be imported from the neutral file. See the remarks below for more information.
INTEGER minimum_id(35)This value specifies an array of values used to set the minimum ID values for the entities in the current database.
INTEGER maximum_id(35)This value specifies an array of values used to set maximum ID value for the entities in the current database.
INTEGER offset(35)This value specifies user supplied entity label or id offsets.
Output:
INTEGER <Return Value> This function always returns a value of 0.
Error Conditions:
None.
---------------
neutral_export2(file_name,title,entity_flags,all_groups,number_of_groups,group_entity_ids)
##########
Description:
This function will generate a Patran 2.5 format neutral file from a Patran database.
Input:
STRING file_name[] This value specifies the name of the neutral file to be written.
STRING title[] This value specifies the title to put in the packet 25 title field.
LOGICAL entity_flags(35)This value specifies an array of flags used to identify the specific entity types to be exported. See the remarks below for more information.
LOGICAL all_groups This value should be set TRUE if the entire model is to be exported,FALSE if only selected groups are to be exported.
INTEGER number_of_groups If exporting selected groups,this value is used to indicate the number of groups being written to the neutral file.
INTEGER group_entity_ids(number_of_groups)If exporting selected groups,this value is used to pass the list of group IDs for the entities being written to the neutral file.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function may return a nonzero value if an error occurs.
---------------
p3_cad_get_entity_name(p3id,p3type,attribute)
##########
Description:
This function will retrieve a string of a CAD name attribute for a Patran entity. The Patran identifier and entity type are used to lookup the associated CAD name attribute.
Input:
INTEGER p3id The Patran id of the entity used to look up the associated CAD name attribute.
INTEGER p3type The Patran entity type. Valid entity type values are: 1 for a point,2 for a curve,3 for a surface,and 4 for a solid.
Output:
STRING attribute The CAD name attribute.
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
1 Out of memory
10 A corrupt attribute was detected.
255 Invalid string length.
257 Can’t reallocate virtual string array.
259 Not a virtual string.
13000211 Virtual memory has been exhausted.
13000212 There is an error interacting with the PERSISTENT_MEMORY relation in the database.
13000213 A database lookup failed to locate the target index key.
<non-zero> Attribute not found
---------------
p3_cad_get_entity_strings(p3id,p3type,attrib_count,attrib_titles,attrib_values)
##########
Description:
This function will retrieve all CAD string attributes for a Patran entity. The Patran identifier and entity type are used to look up the associated CAD string attributes.
Input:
INTEGER p3id The Patran id of the entity used to look up the associated CAD name attributes.
INTEGER p3type The Patran entity type. Valid entity type values are: 1 for a point,2 for a curve,3 for a surface,and 4 for a solid.
Output:
INTEGER attrib_count The number of string attributes associated to the referenced Patran entity.
STRING[] attrib_titles An array of CAD name attribute titles.
STRING[] attrib_values An array of CAD name attribute values.
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
1 Out of memory
10 A corrupt attribute was detected.
255 Invalid string length.
257 Can’t reallocate virtual string array.
259 Not a virtual string.
13000211 Virtual memory has been exhausted.
13000212 There is an error interacting with the PERSISTENT_MEMORY relation in the database.
13000213 A database lookup failed to locate the target index key.
<non-zero> Attribute not found
---------------
p3_express_import(option_file,file_name,geometry_tracking,reset_tolerance,tolerance_prompt,return_entity_count,entities)
##########
Description:
This function imports geometry information from a file using the express neutral file format.
Input:
STRING option_file[] This value specifies the name of the express options file which determines entity and group filters,etc. It is optional and can be input as an empty string or ““.
STRING file_name[] This value specifies the name of the express file to import.
LOGICAL geometry_tracking This value should be set to TRUE if a log file of geometry tracking is to be created.
LOGICAL reset_tolerance This value should be set to TRUE if the user will allow Patran to reset the tolerances.
LOGICAL tolerance_prompt This value should be set to TRUE if the user would like to be prompted before tolerances are changed.
LOGICAL return_entity_count This value should be set to TRUE if Patran is to return a count of entities created in the entities array.
Output:
INTEGER entities (64)(2)This value is an array of entity types and the number of types in the express file.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
-9999 This is an internal status condition. There is no corresponding status message in the message database.
55001011 The file option is not valid or not supported.
---------------
p3_express_import_preview(option_file,file_name,tolerance_check,return_entity_count,entities,cad_attributes,cad_tolerance,shortest_curve_length)
##########
Description:
This function previews geometry information from a file using the express neutral file format.
Input:
STRING option_file[] This value specifies the name of the express options file which determines entity and group filters,etc. It is optional and can be input as an empty string or ““.
STRING file_name[] This value specifies the name of the express file to import.
LOGICAL tolerance_check This value should be set to TRUE if the tolerance needs to be checked.
LOGICAL return_entity_count This value should be set to TRUE if this function is to return a count of entities created in the entities array.
Output:
INTEGER entities (64)(2)This value returns an array of entity types and the number of types in the express file.
STRING cad_attributes[2](256)This value returns the CAD system and model name.
REAL cad_tolerance This value returns the calculated CAD tolerance.
REAL shortest_curve_length This value returns the shortest curve length for non-degenerate curves in the model. This value is calculated only if the input value tolerance_check is set to TRUE.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
-9999 This is an internal status condition. There is no corresponding status message in the message database.
55001012 %I% Error(s)encountered during generation of the import file in the foreign sending system. These errors are detailed in the log file%A%.
---------------
p3_express_import_exit(delete_option_file,delete_express_file)
##########
Description:
This function is called to terminate an express neutral file import operation.
Input:
LOGICAL delete_option_file This value,when set to TRUE,will cause the express options file to be deleted.
LOGICAL delete_express_file This value,when set to TRUE,will cause the express neutral import file to be deleted.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
55000011 The file option is not valid or not supported.
55000014 The file was not found.
55000016 Unable to close the file.
---------------
p3_express_options_file(option_file,versioning,file_format,action,source,transform_exists,transformation,number_of_groups,group_names,group_entities,group_layers,group_colors,all_entities,entities,all_layers,layers,all_colors,colors,trimmed_curve_type,trimmed_surface_type,solid_representation)
##########
Description:
This function writes an optional file that is used as an input to the p3_express_import()and p3_express_import_preview()functions.
Input:
STRING option_file[] This value specifies the name of the express options file to be created.
LOGICAL versioning This value,when set to TRUE,specifies the use of a version number to be used with the express options file being created.
INTEGER file_format This value sets the file format to be used in writing the file and can have the following values: 1 for ascii files,2 for compressed ascii with no white space characters,and 3 for binary files.
INTEGER action This value specifies the type of operation that this options file will be used with. Currently,only the input file operation is supported. This argument can have the following values: 1 import file,2 export file,3 import modifications,and 4 export modifications.
INTEGER source This value specifies the source of the geometry entities. This argument can have values that are defined in the header file geometry_coos.i as the following symbols: MCDONNEL_DOUGLAS or 101254,DASSAULT_SYSTEMS or 40686,PARAMETRIC_TECHNOLOGY or 22058,MATRA or 32465,COMPUTER_VISION or 22085,PDA_ENGINEERING or 52054.
LOGICAL transform_exists This value,when set to TRUE,indicates that a transformation matrix is available in the input value transformation and is to be written to the options file.
REAL transformation[12] This value expresses the transformation matrix to be written to the file. This arguement creates the transformation matrix for translators that provide a model units/scale factor: The scale factor value is added in the 1,5,9 locations of the matrix. This is applied to the geometry on import. /* * Build the transformation matrix based on the scale * factor */ FOR (i = 1 TO 12)tmat(i)= 0.0 END FOR IF(scale_factor > 0.0)THEN use_tmat = TRUE tmat(1)= scale_factor tmat(5)= scale_factor tmat(9)= scale_factor END IF
INTEGER number_of_groups This value specifies the number of groups to be created in the options file.
STRING group_names[number_of_groups]()This value specifies an array of group names that will whose entities will be read from the express neutral file.
INTEGER group_entities(number_of_groups)(64)This value specifies the entities to be read in for each group from the express neutral file. Initialize all unused entries to 0. If the first entry is 0,then it is assumed that all entities are desired.
INTEGER group_layers(number_of_groups)(256)This value specifies the layers to be read in for each group from the express neutral file. Initialize all unused entries to -1. If the first entry is -1,then it is assumed that all layers are desired. Each entry in this argument can have a value ranging from 0 to 255 or 1 to 256 depending on the CAD system. A value of 257 indicates that the working or active layer will be accessed.
INTEGER group_colors(number_of_groups)(10)This value specifies the colors to be read in for each group from the express neutral file. Initialize all unused entries to 0. If the first entry is 0,then it is assumed that all colors are desired. See the remarks below for more information.
LOGICAL all_entities This value,when set to TRUE,will cause all entities to be imported.
INTEGER entities(64)This value specifies the ID values for the entities to import from the express neutral file. All unused entries must be initialized to 0. This array is not used if the input value all_entities is set to TRUE.
LOGICAL all_layers Set this value to TRUE to import all layers.
INTEGER layers(256)This value specifies the layers to import from the express neutral file. All unused entries must be initialized to -1. This array is not used if the input value all_layers is set to TRUE.
LOGICAL all_colors Set this value to TRUE to import all colors.
INTEGER colors(10)This value specifies the colors to import from the express neutral file. All unused entries must be initialized to 0. This array is not used if the input value all_colors is set to TRUE.
INTEGER trimmed_curve_type This value specifies the trimmed curves type to be used with curves from the express neutral file. This argument can have the following values: 1 for 2-d or parametric trimming curves,2 for 3-d or real space trimming curves,or 3 for no preference.
INTEGER trimmed_surface_type This value specifies the trimmed surface type to be used with surfaces from the express neutral file. This argument can have the following values: 1 for both general and simply trimmed surfaces,2 for only general trimmed surfaces,or 3 for no preference.
INTEGER solid_representation This value specifies the solid representation type to be used with surfaces from the express neutral file. This argument can have the following values: 1 for boundary representation solids,2 for the constituent surfaces of the boundary representation solid,or 3 for no preference.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
55000001 Unable to allocate memory.
55000006 The handle accessed is not a file handle.
55000011 Error(s)occurred which may be resolved by using a more refined tolerance.
55000014 The file was not found.
55000016 Unable to close the file.
55000022 Not a valid entity. Either the name is not correct or it is not supported.
---------------
p3_ug_xmt_import(xmt_file_name,part_file_name,express_file_name,import_switch,sew_edges,ug_count,patran_count,tolerance)
##########
Description:
This function imports parasolid transmit file models.
Input:
STRING xmt_file_name[512] This value specifies the name of the transmit file.
STRING part_file_name[512] his value specifies the Unigraphics part file name. This value must include the full path and may be set to nothing or ““.
STRING express_file_name[] This value specifies the express options file name. This value may be set to nothing or ““.
LOGICAL import_switch This value specifies,when set to TRUE,that the transmit file should be imported. When this value is set to FALSE the transmit file will be previewed.
INTEGER sew_edges This value specifies sewing,verification,and cleanup options. The option values can be anded together to specify more than one option. The following option values are allowed: 2 to sew Patran edges,4 to verify edges,8 to remove degenerate faces,16 to comvert trimmed to untrimmed surfaces,32 to equivelance edge vertices.
Output:
INTEGER ug_count[5] This value returns counts for the following items: offset 0,minimal or vertex bodies; offset 1,wire bodies; offset 2,sheet bodies; offset 3,b-rep bodies; offset 4,general bodies.
INTEGER patran_count[4] This value returns the number of: offset 0,points; offset 1,curves; offset 2,surfaces; offset 3,solids; created by the import process.
REAL tolerance[2] This value returns the suggested model tolerance for modeling and meshing operations in offset 0 and the graphics tolerance in offset 1.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
21010002 Unigraphics reports error opening file%A%. Check part file,Path name,Version number and check run-time environment variables and/or support files.
21010007 A Unigraphics memory allocation error occurred. Unable to allocate memory.
21010009 An error occurred while closing the model. Filename =%A%.
21010035 Unigraphics database%A% already referenced. Open a new Patran database to access another part.
---------------
p3_ug_xmt_import_v1(xmt_file_name,part_file_name,express_file_name,import_switch,sew_edges,ug_count,patran_count,n_layers,layer_ids,tolerance)
##########
Description:
This function imports parasolid transmit file models.
Input:
STRING xmt_file_name[512] This value specifies the name of the transmit file.
STRING part_file_name[512] his value specifies the Unigraphics part file name. This value must include the full path and may be set to nothing or ““.
STRING express_file_name[] This value specifies the express options file name. This value may be set to nothing or ““.
LOGICAL import_switch This value specifies,when set to TRUE,that the transmit file should be imported. When this value is set to FALSE the transmit file will be previewed.
INTEGER sew_edges This value specifies sewing,verification,and cleanup options. The option values can be anded together to specify more than one option. The following option values are allowed: 2 to sew Patran edges,4 to verify edges,8 to remove degenerate faces,16 to comvert trimmed to untrimmed surfaces,32 to equivelance edge vertices.
Output:
INTEGER ug_count[5] This value returns counts for the following items: offset 0,minimal or vertex bodies; offset 1,wire bodies; offset 2,sheet bodies; offset 3,b-rep bodies; offset 4,general bodies.
INTEGER patran_count[4] This value returns the number of: offset 0,points; offset 1,curves; offset 2,surfaces; offset 3,solids; created by the import process.
INTEGER	 n_layers This value returns the number of layers used in system that generated the parasolid transmit file.
INTEGER layer_ids[5][256] This value returns the layer ids used in the system that generated the parasolid transmit file.
REAL tolerance[2] This value returns the suggested model tolerance for modeling and meshing operations in offset 0 and the graphics tolerance in offset 1.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
21010002 Unigraphics reports error opening file%A%. Check part file,Path name,Version number and check run-time environment variables and/or support files.
21010007 A Unigraphics memory allocation error occurred. Unable to allocate memory.
21010009 An error occurred while closing the model. Filename =%A%.
21010035 Unigraphics database%A% already referenced. Open a new Patran database to access another part.
---------------
p3_ug_xmt_preview(xmt_file_name,ug_count,n_layers,layer_ids)
##########
Description:
This function previews the contents of parasolid transmit file models.
Input:
STRING xmt_file_name[512] This value specifies the name of the transmit file.
Output:
INTEGER ug_count[5] This value returns counts for the following items: offset 0,minimal or vertex bodies; offset 1,wire bodies; offset 2,sheet bodies; offset 3,b-rep bodies; offset 4,general bodies.
INTEGER n_layers This value returns the number of layers used in system that generated the parasolid transmit file.
INTEGER layer_ids This value returns the layer idsused in system that generated the parasolid transmit file
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
---------------
ps_get_body_integer_attribute(p3id,p3type,identifier,field_no,n_values,attribute_values)
##########
Description:
This function will retrieve integer values of a Parasolid integer attribute that is attached to a Patran entity. The attribute definition must be identified by the input “identifier”. The Patran id and entity type are used to lookup the associated Parasolid attribute definition.
Input:
INTEGER p3id The Patran id of the entity used to look up the associated Parasolid attribute definition.
INTEGER p3type The Patran entity type. Valid entity type values are: 1 for a point,2 for a curve,3 for a surface,and4 for a solid
STRING identifier The string by which the attribute definition is identified.
INTEGER field_no The index to the location of the string field of the attribute definition.
Output:
INTEGER n_values The number of integer attribute values.
REAL attribute_values[]		 The Parasolid integer attribute values.
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
1 Out of memory.
4 Parasolid tag not found
7 The specified attribute does not exist.
8 The Parasolid attribute class does not exist.
9 The Parasolid attribute definition was not found.
11 Non-printing characters in name.
255 Invalid string length.
257 Can’t reallocate virtual string array
259 Not a virtual string.
5013 The attribute does not have a field with this number.
5014 The field is not a string field.
13000211 Virtual memory has been exhausted.
13000212 There is an error interacting with the PERSISTENT_MEMORY relation in the database.
13000213 A database lookup failed to locate the target index key.
<non-zero> Attribute not found.
---------------
ps_get_body_real_attribute(p3id,p3type,identifier,field_no,n_values,attribute_values)
##########
Description:
This function will retrieve real values of a Parasolid real attribute that is attached to a Patran entity. The attribute definition must be identified by the input “identifier”. The Patran id and entity type are used to lookup the associated Parasolid attribute definition.
Input:
INTEGER p3id The Patran id of the entity used to look up the associated Parasolid attribute definition.
INTEGER p3type The Patran entity type. Valid entity type values are: 					1 for a point,					2 for a curve,					3 for a surface,and 					4 for a solid
STRING identifier The string by which the attribute definition is identified.
INTEGER field_no The index to the location of the string field of the attribute definition.
Output:
INTEGER n_values The number of real attribute values.
REAL attribute_values[]		 The Parasolid real attribute values.
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
1 Out of memory.
4 Parasolid tag not found
7 The specified attribute does not exist.
8 The Parasolid attribute class does not exist.
9 The Parasolid attribute definition was not found.
11 Non-printing characters in name.
255 Invalid string length.
257 Can’t reallocate virtual string array
259 Not a virtual string.
5013 The attribute does not have a field with this number.
5014 The field is not a string field.
13000211 Virtual memory has been exhausted.
13000212 There is an error interacting with the PERSISTENT_MEMORY relation in the database.
13000213 A database lookup failed to locate the target index key.
<non-zero> Attribute not found.
---------------
ps_get_body_string_attribute(p3id,p3type,identifier,field_no,attribute)
##########
Description:
This function will retrieve a Parasolid string attribute that is attached to a Patran entity. The attribute definition must be identified by the input “identifier” and attached to a Parasolid entity at the body layer. The Patran ID and entity type are used to lookup the associated Parasolid attribute definition. Note:	 For identifier “SDL/TYSA_NAME”,the field_no = 0
---------------
ps_get_string_attribute(p3id,p3type,classname,field,attribute)
##########
Description:
This function will retrieve a Parasolid string attribute that is attached to a Patran entity. The attribute definition must be identified by the input “identifier” and attached to a Parasolid Entity at the topology
Input:
INTEGER p3id The Patran id of the entity used to look up the associated Parasolid id.
INTEGER p3type The Patran entity type. Valid entity type values are: 1 for a point,2 for a curve,3 for a surface,and 4 for a solid.
STRING classname The Parasolid attribute class. (See Parasolid Reference Manual for more information.)
INTEGER field The Parasolid attribute field. (See Parasolid Reference Manual for more information.)
Output:
STRING attribute The Parasolid string attribute.
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
1 Out of memory
4 Parasolid tag not found
7 The specified attribute does not exist
8 The Parasolid attribute class does not exist. - (See Parasolid reference for more information.
9 The Parasolid attribute definition was not found. - (See Parasolid reference for more information.
11 Non-printing characters in name - (see parasolid_kernel.h)
255 Invalid string length.
257 Can’t reallocate virtual string array.
259 Not a virtual string.
5013 The attribute does not have a field with this number - (see parasolid_kernel.h.)
5014 The field is not a string field - (see parasolid_kernel.h.)
13000211 Virtual memory has been exhausted.
13000212 There is an error interacting with the PERSISTENT_MEMORY relation in the database.
13000213 A database lookup failed to locate the target index key.
13000215 A database lookup failed to locate the target index key
---------------
select_focus.exit()
##########
Description:
This function will hide the currently displayed select menu,clear the current filter,and reset the currently selected data box.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
sgm_cad_access_v1(file_name,file_name_length,group_name,group_name_length,entity_toggle_values,simply_trimmed,access_as_solids,enable_tol_prompt,color_toggle_values,all_layers,active_layer,layer_numbers,model_type,number_of_groups,group_entity_ids,group_entity_values,group_color_values,active_layer_values,layer_pointers,group_layers,n_ug_layers,ug_count,patran_count)
##########
Description:
This function is used to import a Unigraphics part file defining the geometry of a model.
Input:
STRING file_name[] This value specifies the name of the path and the file to be imported.
INTEGER file_name_length This value specifies the number of characters in the file_name input value.
STRING group_name[80] This value specifies the name of the group to which the imported geometry will be added.
INTEGER group_name_length This value specifies the number of characters in the group_name input value.
LOGICAL entity_toggle_values(18)This value specifies an array used to select the geometry entity types to be imported where the offset into the array defines the entity type. The value at that offset will be set TRUE if that entity type is to be imported. See the remarks below for more information.
LOGICAL simply_trimmed This value,when set TRUE,causes all surfaces to be imported as simple trimmed surfaces and when set FALSE all surfaces are imported as general trimmed surfaces.
LOGICAL access_as_solids This value,when set to TRUE,allows all imported geometric entities are to be accessed as solids. Set this value to FALSE if the imported geometric entities define constituent surfaces.
LOGICAL enable_tol_prompt This value,when set to TRUE,enables the user to be prompted for the global model tolerance. When this value is set to FALSE,the currently defined global model tolerance is used.
LOGICAL color_toggle_values(14)This value specifies the overall color filter values. Currently,these values are ignored.
LOGICAL all_layers Set this value to TRUE if all entities identified by the input value entity_toggle_values from all layers should be imported.
LOGICAL active_layer This value should be set to TRUE if only the active or work layer entities will be imported.
INTEGER layer_numbers(256)This value specifies an input value that contains the layer values entered by the user from which entities will be imported.
STRING model_type[6] This value specifies the CAD model type and should always be set to “ug”.
INTEGER number_of_groups This value specifies the number of groups defined. This input has a maximum value of 256.
INTEGER group_entity_ids(number_of_groups)This value specifies an array that specifies the ID values used for each entity group.
LOGICAL group_entity_values(number_of_groups,20)This value specifies a two dimensional array that contains values set to TRUE if an entity is to be included and FALSE if an entity is not to be included in the group being imported. The offset in the first dimension corresponds to the group id in the same offset of the group_entity_ids input value. The offset in the second dimension of the array identifies the entity type. See the remarks below for more information.
LOGICAL group_color_values(number_of_groups,14)This value specifies a two dimensional array that contains values set to TRUE if a color value is to be used. The offset in the first dimension corresponds to the group id in the same offset of the group_entity_ids input value. The offset in the second dimension of the array identifies the color type. Currently this input value is ignored.
LOGICAL active_layer_values(number_of_groups)This value specifies an array where the value at an offset corresponding to the offset for the group id in the group_entity_values input value to is set to TRUE if an entity in the active layer is included in the group identified by the offset into this array.
INTEGER layer_pointers(number_of_groups)This value specifies an array where the offset into the array corresponds with the offset into the group_entity_ids array that lists the group ids. The value at that offset in this array identifies the offset into the group_layers array where the number of layer values for each group is stored. This array can store values that range from 1 to (512 - number_of_groups).
INTEGER group_layers(512)This value specifies an array that contains values used to identify the number of layers imported for each group.
Output:
INTEGER ug_count(256,37)This value specifies a two dimensional array that uses the first dimension to identify a layer. The second dimension is used to identify a particular entity type. The cell value indicates the number of entities of a particular entity type present on a particular layer.
INTEGER patran_count(4)This value indicates the number of entities that were successfully imported. See the remarks below for more information.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
21010002 Unigraphics reports error opening file%A%. Check part file,Path name,Version number and check run-time environment variables and/or support files.
21010007 A Unigraphics memory allocation error occurred. Unable to allocate memory.
21010009 An error occurred while closing the model. Filename =%A%.
21010035 Unigraphics database%A% already referenced. Open a new Patran database to access another part.
---------------
sgm_catia_access(file_name,group_name,group_name_length,entity_toggle_values,simply_trimmed,color_toggle_values,all_layers,active_layer,layer_numbers,model_type,number_of_groups,group_entity_ids,group_entity_values,group_color_values,active_layer_values,layer_pointers,group_layers,interactive_flag,user_control_flag)
##########
Description:
This function is used to import a CATIA model geometry file but has no control over the model tolerance.
Input:
STRING file_name[] This value specifies the name of the path and the file to be imported.
STRING group_name[80] This value specifies the name of the group to which the imported geometry will be added. Currently,this value is ignored.
INTEGER group_name_length This value specifies the number of characters in the group_name input value. Currently,this value is ignored.
LOGICAL entity_toggle_values(18)This value specifies an array used to select the geometry entity types to be imported where the offset into the array defines the entity type. The value at that offset will be set TRUE if that entity type is to be imported. Currently,these values are ignored.
LOGICAL simply_trimmed This value should be set to TRUE to import all surfaces as simple trimmed surfaces or to FALSE to import all surfaces as general trimmed surfaces. Currently,this value is ignored.
LOGICAL color_toggle_values(14)This value species an array that defines the overall color filter values. Currently,these values are ignored.
LOGICAL all_layers This value should be set to TRUE if all entities identified by the input value entity_toggle_values from all layers should be imported. Currently,this value is ignored.
LOGICAL active_layer This value should be set to TRUE if only the active or work layer entities will be imported. Currently,this value is ignored.
INTEGER layer_numbers(256)This value specifies an array that contains the layer values entered by the user for the overall layer filter. Currently,this value is ignored.
STRING model_type[6] This value specifies the CAD model type and should always be set to “catia”.
INTEGER number_of_groups This value specifies the number of groups defined. This input has a maximum value of 256. Currently,this value is ignored.
INTEGER group_entity_ids(number_of_groups)This value specifies the ID values for each user group. Currently,this value is ignored.
LOGICAL group_entity_values(number_of_groups,20)This value specifies a two dimensional array that contains values set to TRUE if an entity is to be included and FALSE if an entity is not to be included in the group being imported. The offset in the first dimension corresponds to the group id in the same offset of the group_entity_ids input value. The offset in the second dimension of the array identifies the entity type. Currently,these values are ignored.
LOGICAL group_color_values(number_of_groups,14)This value specifies a two dimensional array that contains values set to TRUE if a color value is to be used. The offset in the first dimension of this array corresponds to the group id in the same offset of the group_entity_ids input value. The offset in the second dimension of this array identifies the color type. Currently,these values are ignored.
LOGICAL active_layer_values(number_of_groups)This value specifies an array that is used by setting the value at an offset that corresponds to the offset for the group id in the group_entity_values input value to TRUE if an entity in the active layer is included in the group identified by the offset into the array. Currently,these values are ignored.
INTEGER layer_pointers(number_of_groups)This value specifies an array that is used by setting a value at an offset that corresponds with the offset into the group_entity_ids input value that lists the group ids. The value at that offset in this array identifies the offset into the group_layers input value where the number of layer values for each group is stored. This array can store values that range from 1 to (512 - number_of_groups). Currently,these values are ignored.
INTEGER group_layers()This value specifies an array used to identify the number of layers imported for each group. Currently these values are ignored,allowing the array to be any size.
INTEGER interactive_flag This value is used to indicate if the import of the file is to take place in batch mode. Currently,this value is ignored.
INTEGER user_control_flag(2)This value specifies an array where offset 1 is a flag indicating that duplicate geometric entities should always be created. This value should be initialized to 0 and should always be set to 0 if the value at offset 2 is set to 1. Offset 2 is a flag indicating that duplicate geometric entities should never be created. This value should be initialized to 0 and should always be set to 0 if the value at offset 1 is set to 1.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
sgm_catia_access_v1(file_name,group_name,group_name_length,entity_toggle_values,simply_trimmed,enable_tol_prompt,color_toggle_values,all_layers,active_layer,layer_numbers,model_type,number_of_groups,group_entity_ids,group_entity_values,group_color_values,active_layer_values,layer_pointers,group_layers,interactive_flag,user_control_flag)
##########
Description:
This function is used to import a CATIA model geometry file while providing the user with control over the model tolerance.
Input:
STRING file_name[] This value specifies the name of the path and the file to be imported.
STRING group_name[80] This value specifies the name of the group to which the imported geometry will be added. Currently,this value is ignored.
INTEGER group_name_length This value specifies the number of characters in the group_name input value. Currently,this value is ignored.
LOGICAL entity_toggle_values(18)This value specifies an array used to select the geometry entity types to be imported where the offset into the array defines the entity type. The value at that offset will be set TRUE if that entity type is to be imported. Currently,these values are ignored.
LOGICAL simply_trimmed This value should be set to TRUE to import all surfaces as simple trimmed surfaces or to FALSE to import all surfaces as general trimmed surfaces. Currently,this value is ignored.
LOGICAL enable_tol_prompt This value should be set to TRUE to enable prompting from the user for the global model tolerance or to FALSE to use the currently defined global model tolerance.
LOGICAL color_toggle_values(14)This value specifies an array that is used to set the overall color filter values. Currently,these values are ignored.
LOGICAL all_layers This value should be set to TRUE if all entities identified by the input value entity_toggle_values from all layers should be imported. Currently,this value is ignored.
LOGICAL active_layer This value should be set to TRUE if only the active or work layer entities will be imported. Currently,this value is ignored.
INTEGER layer_numbers(256)This value specifies an array that is used to set the layer values entered by the user for the overall layer filter. Currently,this value is ignored.
STRING model_type[6] This value specifies the CAD model type and should always be set to “catia”.
INTEGER number_of_groups This value specifies the number of groups defined. This input has a maximum value of 256.
INTEGER group_entity_ids(number_of_groups)This value specifies an array that is used to set the ID values for each user group. Currently,this value is ignored.
LOGICAL group_entity_values(number_of_groups,20)This value specifies a two dimensional array that contains values set to TRUE if an entity is to be included and FALSE if an entity is not to be included in the group being imported. The offset in the first dimension corresponds to the group id in the same offset of the group_entity_ids input value. The offset in the second dimension of the array identifies the entity type. Currently,these values are ignored.
LOGICAL group_color_values(number_of_groups,14)This value specifies a two dimensional array that contains values set to TRUE if a color value is to be used. The offset in the first dimension of this array corresponds to the group id in the same offset of the group_entity_ids input value. The offset in the second dimension of this array identifies the color type. Currently,these values are ignored.
LOGICAL active_layer_values(number_of_groups)This value specifies an array that is used by setting the value at an offset that corresponds to the offset for the group id in the group_entity_values input value to TRUE if an entity in the active layer is included in the group identified by the offset into the array. Currently,these values are ignored.
INTEGER layer_pointers(number_of_groups)This value specifies an array that is used by setting a value at an offset that corresponds with the offset into the group_entity_ids input value that lists the group ids. The value at that offset in this array identifies the offset into the group_layers input value where the number of layer values for each group is stored. This array can store values that range from 1 to (512 - number_of_groups). Currently,these values are ignored.
INTEGER group_layers()This value specifies an array used to identify the number of layers imported for each group. Currently these values are ignored,allowing the array to be any size.
INTEGER interactive_flag This value is used to indicate if the import of the file is to take place in batch mode. Currently,this value is ignored.
INTEGER user_control_flag(2)This value specifies an array where offset 1 is a flag indicating that duplicate geometric entities should always be created. This value should be initialized to 0 and should always be set to 0 if the value at offset 2 is set to 1. Offset 2 is a flag indicating that duplicate geometric entities should never be created. This value should be initialized to 0 and should always be set to 0 if the value at offset 1 is set to 1.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
sgm_catia_import(file_name,simple_trim,solid_type,enable_tol_prompt)
##########
Description:
This function will import CATXPRES catia geometry objects.
Input:
STRING file_name[] This value specifies the name of the CATXPRES file to import.
LOGICAL simple_trim This value specifies,when set to TRUE,that the Catia surfaces will be converted to Patran simple trimmed surfaces. When set to FALSE,the Catia surfaces will be converted to Patran general trimmed surfaces.
INTEGER solid_Type This value specifes,when set to 1 that all solids will be converted to Patran brep solids. When this value is set to 2,all solids will be converted to Patran tri-parametric solids.
LOGICAL enable_tol_prompt This value specifies,when set to TRUE,to prompt users to decide to use the Patran default or model tolerance. When set to FALSE,the Patran model tolerance will be used.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
sgm_ptc_access_v2(file_name,file_type,simply_trimmed,create_groups,save_geo_file,enable_tol_prompt,pro_entities,pro_count,patran_count)
##########
Description:
This function is used to import a Pro/ENGINEER model geometry file.
Input:
STRING file_name[] This value specifies the name of the path and the file to be imported.
STRING file_type[3] This value specifies the geometry file type and can have the following case insensitive values: “PRT”,“ASM”,and “GEO”.
LOGICAL simply_trimmed This value should be set to TRUE to import all surfaces as simple trimmed surfaces or to FALSE to import all surfaces as general trimmed surfaces.
LOGICAL create_groups This value should be set to TRUE if Patran groups are to be created from Pro/ENGINEER parts in an assembly listed in the imported file.
LOGICAL save_geo_file This value should be set to TRUE if the .geo file is to be saved after accessing the .prt or .asm file.
LOGICAL enable_tol_prompt This value should be set to TRUE to enable prompting from the user for the global model tolerance or to FALSE to use the currently defined global model tolerance.
INTEGER pro_entities (17)This value specifies the Pro/ENGINEER entities to access. See the remarks below for more information.
Output:
INTEGER pro_count(9)This value returns an array listing the counts of Pro/ENGINEER entities that were in the imported file versus the counts of entities that were processed. See the remarks below for more information.
INTEGER patran_count(7)This value returns an array listing the number of Patran entities created. See the remarks below for more information.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000802 Unable to acquire Pro/ENGINEER Geometry file size.
38000803 Unable to read Pro/ENGINEER Geometry file%A%.
38000805 Unable to acquire%I% words of virtual memory.
38000819 The file type%A% is not a valid Pro/ENGINEER file type. Input either PRT,ASM,or GEO.
38000821 Importing Pro/ENGINEER Part File.
38000823 Adding geometry to group%A%.
38000826 Patran ProENGINEER Access Model Import Terminated.
38000828 A total of%I% surface contours were not closed in real (3D)space. The maximum gap distance was%G%. Try setting the Global Model Tolerance in the Global Preferences to a value greater than the gap distance and try again.
---------------
sgm_ptc_access_v4(file_name,file_type,simply_trimmed,create_groups,save_geo_file,tol_prompt_on,as_solid,pro_entities,pro_count,patran_count)
##########
Description:
This function is used to import a Pro/ENGINEER model geometry file.
Input:
STRING file_name[] This value specifies the name of the path and the file to be imported.
STRING file_type[3] This value specifies the geometry file type and can have the following case insensitive values: “PRT”,“ASM”,and “GEO”.
LOGICAL simply_trimmed This value should be set to TRUE to import all surfaces as simple trimmed surfaces or to FALSE to import all surfaces as general trimmed surfaces.
LOGICAL create_groups This value should be set to TRUE if Patran groups are to be created from Pro/ENGINEER parts in an assembly listed in the imported file.
LOGICAL save_geo_file This value should be set to TRUE if the .geo file is to be saved after accessing the .prt or .asm file.
LOGICAL tol_prompt_on This value should be set to TRUE to enable prompting from the user for the global model tolerance or to FALSE to use the currently defined global model tolerance.
LOGICAL as_solid This value should be set to TRUE if a B-rep is to be imported as a Solid or to FALSE if a B-rep is to be imported as a set of constituent surfaces.
INTEGER pro_entities (19)This value specifies the Pro/ENGINEER entities to access. See the remarks below for more information.
Output:
INTEGER pro_count(13)This value returns an array listing the counts of Pro/ENGINEER entities that were in the imported file versus the counts of entities that were processed. See the remarks below for more information.
INTEGER patran_count(10)This value returns an array listing the number of Patran entities created. See the remarks below for more information.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000802 Unable to acquire Pro/ENGINEER Geometry file size.
38000803 Unable to read Pro/ENGINEER Geometry file%A%.
38000805 Unable to acquire%I% words of virtual memory.
38000819 The file type%A% is not a valid Pro/ENGINEER file type. Input either PRT,ASM,or GEO.
38000821 Importing Pro/ENGINEER Part File.
38000823 Adding geometry to group%A%.
38000826 Patran ProENGINEER Access Model Import Terminated.
38000828 A total of%I% surface contours were not closed in real (3D)space. The maximum gap distance was%G%. Try setting the Global Model Tolerance in the Global Preferences to a value greater than the gap distance and try again.
---------------
sgm_ptc_access_v5(file_name,file_type,simply_trimmed,create_groups,save_geo_file,tol_prompt_on,as_solid,pro_entities,pro_count,patran_count)
##########
Description:
This function is used to import a Pro/ENGINEER model geometry file.
Input:
STRING file_name[] This value specifies the name of the path and the file to be imported.
STRING file_type[3] This value specifies the geometry file type and can have the following case insensitive values: “PRT”,“ASM”,and “GEO”.
LOGICAL simply_trimmed This value should be set to TRUE to import all surfaces as simple trimmed surfaces or to FALSE to import all surfaces as general trimmed surfaces.
LOGICAL create_groups This value should be set to TRUE if Patran groups are to be created from Pro/ENGINEER parts in an assembly listed in the imported file.
LOGICAL save_geo_file This value should be set to TRUE if the .geo file is to be saved after accessing the .prt or .asm file.
LOGICAL tol_prompt_on This value should be set to TRUE to enable prompting from the user for the global model tolerance or to FALSE to use the currently defined global model tolerance.
LOGICAL as_solid This value should be set to TRUE if a B-rep is to be imported as a Solid or to FALSE if a B-rep is to be imported as a set of constituent surfaces.
INTEGER pro_entities (20)This value specifies the Pro/ENGINEER entities to access. See the remarks below for more information.
Output:
INTEGER pro_count(15)This value returns an array listing the counts of Pro/ENGINEER entities that were in the imported file versus the counts of entities that were processed. See the remarks below for more information.
INTEGER patran_count(11)This value returns an array listing the number of Patran entities created. See the remarks below for more information.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000802 Unable to acquire Pro/ENGINEER Geometry file size.
38000803 Unable to read Pro/ENGINEER Geometry file%A%.
38000805 Unable to acquire%I% words of virtual memory.
38000819 The file type%A% is not a valid Pro/ENGINEER file type. Input either PRT,ASM,or GEO.
38000821 Importing Pro/ENGINEER Part File.
38000823 Adding geometry to group%A%.
38000826 Patran ProENGINEER Access Model Import Terminated.
38000828 A total of%I% surface contours were not closed in real (3D)space. The maximum gap distance was%G%. Try setting the Global Model Tolerance in the Global Preferences to a value greater than the gap distance and try again.
38000847 The Material assigned to part %A% in Pro/ENGINEER was not written to the Patran database because a solid did not get created.
38000848 Error occurred ateempting to write the Material %A% assigned to aprt %A% in Pro/ENGINEER to solid %l% in the Patran database.
---------------
uil_db_commit(command)
##########
Description:
This function will submit the last database transaction so that it cannot be undone and set the description string to be used with the undone operation.
Input:
STRING command[] This value specifies a description of current command to be used in the message when the command is undone.
Output:
None.
Error Conditions:
None.
---------------
uil_db_undo()
##########
Description:
This function will undo the last database transaction.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
uil_file_close.go()
##########
Description:
This function will close a database.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
uil_file_new.go(template_name,file_name)
##########
Description:
This function will create and open a new database using the specified database and template file name.
Input:
STRING template_name[256] This value specifies the name of database to be used as the template. If this value is set to “”,the P3_HOME/template.db file will be used.
STRING file_name[256] This value specifies the name of the database to be created.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
8111002 File%A% is in use by another user. Opening this database may cause undesirable results. Do you wish to continue anyway?
36000001 Cannot open database%A%.A database is already open.
36000002 Database%A% already exists.Do you wish to delete the existing database and create a new one?
8111002 File%A% is in use by another user. Opening this database may cause undesirable results. Do you wish to continue anyway?
36000002 Database%A% already exists. Do you wish to delete the existing database and create a new one?
36000001 Cannot open database%A%.A database is already open.
---------------
uil_file_open.go(file_name)
##########
Description:
This function will open a database.
Input:
STRING file_name[256] This value specifies the name of the database to open.
Output:
None.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
8111002 File%A% is in use by another user. Opening this database may cause undesirable results. Do you wish to continue anyway?
36000001 Cannot open database%A%.A database is already open.
36000002 Database%A% already exists.Do you wish to delete the existing database and create a new one?
36000003 Database%A% does not exist.Do you wish to create a new database?
36000001 Cannot open database%A%.A database is already open.
39000004 Journal file%A% does not exist. No journal file will be created.
36000003 Database%A% does not exist.Do you wish to create a new database?
---------------
uil_imaging_coordframes.post_cf(contents)
##########
Description:
This function will post the selected coordinate frames to all viewports.
Input:
STRING contents[] This value specifies a list of coordinate frame identifiers to post to all viewports.
Output:
None.
Error Conditions:
None
11005001 Global Coordinate Frame 0 (Global Axes Display)is controlled per viewport via the Viewport Modify form.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
---------------
uil_imaging_coordframes.unpost_cf(contents)
##########
Description:
This function will unpost the selected coordinate frames to all viewports.
Input:
STRING contents[] This value specifies a list of coordinate frame identifiers to unpost from all viewports.
Output:
None.
Error Conditions:
None.
14000001 LpGetHeapSpace: Allocated heap space is exhausted
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000281 LpExpandPclVariables: Virtual memory is full.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
11005001 Global Coordinate Frame 0 (Global Axes Display)is controlled per viewport via the Viewport Modify form.
---------------
uil_primary.get_menubar_id()
##########
Description:
This function returns the widget value for the Patran menu bar.
Input:
None.
Output:
widget <Return Value> This value returns the widget identifier for the main menu bar.
Error Conditions:
None.
---------------
uil_viewport_tiling.tile()
##########
Description:
This function tiles or places in a side by side arrangement up to four posted viewports.
Input:
None.
Output:
None.
Error Conditions:
None.
11003004 Unable to tile more than 4 Viewports.
---------------
ugi_export_iges(file_name,start_section,model_units,entity_values,all_groups,number_of_groups,group_entity_ids,patran_count,iges_count)
##########
Description:
This function exports Patran geometry information from the database to a file in the IGES standard file format.
Input:
STRING file_name[] This value specifies the name of the path and the file to be created.
STRING start_section[] This value specifies the IGES file start section prolog lines.
STRING model_units[] This value specifies the IGES file model units.
LOGICAL entity_values(7)This value specifies the entity type filter status flags used to specify which Patran entity types will be exported to the IGES file.
LOGICAL all_groups This value is set to TRUE if all groups are to be exported to the IGES file.
INTEGER number_of_groups This value specifies the number of Patran groups to be exported to the IGES file.
INTEGER group_entity_ids(number_of_groups)This value specifies an array containing the IDs of the Patran groups to be exported to the IGES file.
Output:
INTEGER patran_count(7)This value returns a list of the number of Patran entities processed from the database by type.
INTEGER iges_count(20)This value returns the number of IGES entities created by type.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000597 Exporting%I% Patran Elements.
38000602 Creating%I% IGES file Parameter Data Records.
38000607 Exporting%I% Patran Elements by Group.
38000504 Unable to open scratch file.
38000505 Unable to open IGES file%A%.
38000805 Unable to acquire%I% words of virtual memory.
36000005 %A% File%A% already exists.Do you wish to delete the existing%A% file and create a new one?
---------------
ugi_export_iges_v1(file_name,start_section,nlpos,nlknt,product_id,author,author_org,model_units,entity_values,all_groups,number_of_groups,group_entity_ids,patran_count,iges_count)
##########
Description:
This function exports Patran geometry information from the database to a file in the IGES standard file format.
Input:
STRING file_name[] This value specifies the name of the path and the file to be created.
STRING start_section[] This value specifies the IGES file start section prolog lines.
INTEGER nlpos(*)New line character (\n)positions in Start Section.
INTEGER nlknt Number of new line characters (\n)in Start Section.
STRING product_id Product Id for receiving system
STRING author Author
STRING author_org Author’s Organization
STRING model_units[] This value specifies the IGES file model units.
LOGICAL entity_values(8)This value specifies the entity type filter status flags used to specify which Patran entity types will be exported to the IGES file.
LOGICAL all_groups This value is set to TRUE if all groups are to be exported to the IGES file.
INTEGER number_of_groups This value specifies the number of Patran groups to be exported to the IGES file.
INTEGER group_entity_ids(number_of_groups)This value specifies an array containing the IDs of the Patran groups to be exported to the IGES file.
Output:
INTEGER patran_count(8)This value returns a list of the number of Patran entities processed from the database by type.
INTEGER iges_count(21)This value returns the number of IGES entities created by type.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000597 Exporting%I% Patran Elements.
38000602 Creating%I% IGES file Parameter Data Records.
38000607 Exporting%I% Patran Elements by Group.
38000504 Unable to open scratch file.
38000505 Unable to open IGES file%A%.
38000805 Unable to acquire%I% words of virtual memory.
36000005 %A% File%A% already exists.Do you wish to delete the existing%A% file and create a new one?
---------------
ugi_export_iges_v2(file_name,start_section,product_id,author,author_org,model_units,entity_values,all_groups,number_of_groups,group_entity_ids,patran_count,iges_count)
##########
Description:
This function exports Patran geometry information from the database to a file in the IGES standard file format.
Input:
STRING file_name[] This value specifies the name of the path and the file to be created.
STRING start_section[] This value specifies the IGES file start section prolog lines.
STRING product_id Product Id for receiving system
STRING author Author
STRING author_org Author’s Organization
STRING model_units[] This value specifies the IGES file model units.
LOGICAL entity_values(8)This value specifies the entity type filter status flags used to specify which Patran entity types will be exported to the IGES file.
LOGICAL all_groups This value is set to TRUE if all groups are to be exported to the IGES file.
INTEGER number_of_groups This value specifies the number of Patran groups to be exported to the IGES file.
INTEGER group_entity_ids(number_of_groups)This value specifies an array containing the IDs of the Patran groups to be exported to the IGES file.
Output:
INTEGER patran_count(8)This value returns a list of the number of Patran entities processed from the database by type.
INTEGER iges_count(21)This value returns the number of IGES entities created by type.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000597 Exporting%I% Patran Elements.
38000602 Creating%I% IGES file Parameter Data Records.
38000607 Exporting%I% Patran Elements by Group.
38000504 Unable to open scratch file.
38000505 Unable to open IGES file%A%.
38000805 Unable to acquire%I% words of virtual memory.
36000005 %A% File%A% already exists.Do you wish to delete the existing%A% file and create a new one?
---------------
ugi_import_iges(file_name,group_name,entity_toggle_values,color_toggle_values,color_method,color_definition,all_layers,layer,number_of_groups,group_entity_ids,group_entity_values,group_color_values,layer_pointers,group_layers,scale,iges_count,patran_count)
##########
Description:
This function imports geometry information from a file in the IGES standard file format into the Patran database.
Input:
STRING file_name[] This value specifies the name of the path and the file to be imported.
STRING group_name[31] This value specifies the name of the group to which the imported geometry will be added.
LOGICAL entity_toggle_values(23)This value specifies the entity type filter status flags to specify which IGES entity types to import.
LOGICAL color_toggle_values(9)This value defined the entity color filter status flags to specify which IGES entity colors to import.
STRING color_method[7] This value is used to specify the color definition entity method used to import color definition entities.
STRING color_definition[] This value specifies the color definition entities to import.
LOGICAL all_layers This value should be set to TRUE if all geometry layers are to be imported.
STRING layer[] This value specifies a string that is used to specify the geometry layers to be imported.
INTEGER number_of_groups This value is the number of groups defined.
INTEGER group_entity_ids(number_of_groups)This array specifies the ID values for each user group.
LOGICAL group_entity_values(20,number_of_groups)This value specifies a two dimensional array that contains values set to TRUE if an entity is to be included and FALSE if an entity is not to be included in the group being imported. The offset in the first dimension corresponds to the group id in the same offset of the group_entity_ids input value. The offset in the second dimension of the array identifies the entity type.
LOGICAL group_color_values(10,number_of_groups)This value specifies a two dimensional array that contains values set to TRUE if a color value is to be used. The offset in the first dimension of this array corresponds to the group id in the same offset of the group_entity_ids input value. The offset in the second dimension of this array identifies the color type.
INTEGER layer_pointers(number_of_groups)This value specifies an array that is used by setting a value at an offset that corresponds with the offset into the group_entity_ids input value that lists the group ids. The value at that offset in this array identifies the offset into the group_layers input value where the number of layer values for each group is stored. The maximum value allowed for this array is equal to the number of integers in the group_layers input value.
INTEGER group_layers()This value specifies an array used to identify the number of layers imported for each group. The size of this array must be equal to or greater than the largest value placed in the layer_pointers input value.
Output:
REAL scale This value returns the IGES file model space scale.
INTEGER iges_count(20)This value returns the number of IGES entities imported by type.
INTEGER patran_count(8)This value returns the number of Patran entities written to the database by type.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
ugi_import_iges_v4(file_name,group_name,entity_toggle_values,color_toggle_values,color_method,color_definition,all_layers,layer,number_of_groups,group_entity_ids,group_entity_values,group_color_values,layer_pointers,group_layers,scale,iges_count,patran_count)
##########
Description:
This function imports geometry information from a file in the IGES standard file format into the Patran database.
Input:
STRING file_name[] This value specifies the name of the path and the file to be imported.
INTEGER ipref142 User preference for Curve on Surface (142)entity representation use flag. 0 = Unspecified,use what is defined in the IGES file. 1 = S o B is preferred. (parametric space)2 = C is preferred. (real space)
STRING group_name[31] This value specifies the name of the group to which the imported geometry will be added.
LOGICAL entity_toggle_values(35)This value specifies the entity type filter status flags to specify which IGES entity types to import.
LOGICAL color_toggle_values(10)This value defined the entity color filter status flags to specify which IGES entity colors to import.
STRING color_method[10] This value is used to specify the color definition entity method used to import color definition entities.
STRING color_definition[] This value specifies the color definition entities to import.
LOGICAL all_layers This value should be set to TRUE if all geometry layers are to be imported.
STRING layer[] This value specifies a string that is used to specify the geometry layers to be imported.
INTEGER number_of_groups This value is the number of groups defined.
INTEGER group_entity_ids(number_of_groups)This array specifies the ID values for each user group.
LOGICAL group_entity_values(22,number_of_groups)This value specifies a two dimensional array that contains values set to TRUE if an entity is to be included and FALSE if an entity is not to be included in the group being imported. The offset in the first dimension corresponds to the group id in the same offset of the group_entity_ids input value. The offset in the second dimension of the array identifies the entity type.
LOGICAL group_color_values(10,number_of_groups)This value specifies a two dimensional array that contains values set to TRUE if a color value is to be used. The offset in the first dimension of this array corresponds to the group id in the same offset of the group_entity_ids input value. The offset in the second dimension of this array identifies the color type.
INTEGER layer_pointers(number_of_groups)This value specifies an array that is used by setting a value at an offset that corresponds with the offset into the group_entity_ids input value that lists the group ids. The value at that offset in this array identifies the offset into the group_layers input value where the number of layer values for each group is stored. The maximum value allowed for this array is equal to the number of integers in the group_layers input value.
INTEGER group_layers()This value specifies an array used to identify the number of layers imported for each group. The size of this array must be equal to or greater than the largest value placed in the layer_pointers input value.
Output:
REAL scale This value returns the IGES file model space scale.
INTEGER iges_count(50)This value returns the number of IGES entities imported by type.
INTEGER patran_count(9)This value returns the number of Patran entities written to the database by type.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
ugi_import_iges_v5(file_name,group_name,entity_toggle_values,color_toggle_values,color_method,color_definition,all_layers,layer,number_of_groups,group_entity_ids,group_entity_values,group_color_values,layer_pointers,group_layers,create_groups,groups_prefix,scale,iges_count,patran_count)
##########
Description:
This function imports geometry information from a file in the IGES standard file format into the Patran database.
Input:
STRING file_name[] This value specifies the name of the path and the file to be imported.
INTEGER ipref142 User preference for Curve on Surface (142)entity representation use flag. 0 = Unspecified,use what is defined in the IGES file. 1 = S o B is preferred. (parametric space)2 = C is preferred. (real space)
STRING group_name[31] This value specifies the name of the group to which the imported geometry will be added.
LOGICAL entity_toggle_values(35)This value specifies the entity type filter status flags to specify which IGES entity types to import.
LOGICAL color_toggle_values(10)This value defined the entity color filter status flags to specify which IGES entity colors to import.
STRING color_method[10] This value is used to specify the color definition entity method used to import color definition entities.
STRING color_definition[] This value specifies the color definition entities to import.
LOGICAL all_layers This value should be set to TRUE if all geometry layers are to be imported.
STRING layer[] This value specifies a string that is used to specify the geometry layers to be imported.
INTEGER number_of_groups This value is the number of groups defined.
INTEGER group_entity_ids(number_of_groups)This array specifies the ID values for each user group.
LOGICAL group_entity_values(22,number_of_groups)This value specifies a two dimensional array that contains values set to TRUE if an entity is to be included and FALSE if an entity is not to be included in the group being imported. The offset in the first dimension corresponds to the group id in the same offset of the group_entity_ids input value. The offset in the second dimension of the array identifies the entity type.
LOGICAL group_color_values(10,number_of_groups)This value specifies a two dimensional array that contains values set to TRUE if a color value is to be used. The offset in the first dimension of this array corresponds to the group id in the same offset of the group_entity_ids input value. The offset in the second dimension of this array identifies the color type.
INTEGER layer_pointers(number_of_groups)This value specifies an array that is used by setting a value at an offset that corresponds with the offset into the group_entity_ids input value that lists the group ids. The value at that offset in this array identifies the offset into the group_layers input value where the number of layer values for each group is stored. The maximum value allowed for this array is equal to the number of integers in the group_layers input value.
INTEGER group_layers()This value specifies an array used to identify the number of layers imported for each group. The size of this array must be equal to or greater than the largest value placed in the layer_pointers input value.
LOGICAL create_groups This value should be set to TRUE if Patran groups are to be created automatically from IGES layers.
STRING groups_prefix This value specifies the group names prefix if Patran groups are to be created automatically from IGES layers. If blank,the group names prefix will be the name of the IGES file imported.
Output:
REAL scale This value returns the IGES file model space scale.
INTEGER iges_count(50)This value returns the number of IGES entities imported by type.
INTEGER patran_count(9)This value returns the number of Patran entities written to the database by type.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
ugi_query_iges_v2(file_name,query_options,create_report,report_name,entity_count,entity_attributes,num_colors,entity_colors,num_colors_per,num_layers,entity_layers,num_layers_per)
##########
Description:
This function provides information on the contents of an IGES geometry file.
Input:
STRING file_name[] This value specifies the name of the path and the file to be imported.
LOGICAL query_options(7)This value specifies the types of query operations to perform. See the remarks below for more information.
LOGICAL create_report This value specifies,when set to TRUE,that the report information will be written to an Patran report file. When this value is set to FALSE,a report file will not be created.
STRING report_name[] This value specifies the name of the Patran report file to which query information is written.
Output:
INTEGER entity_count This value returns the number of IGES entities identified in the IGES geometry file.
INTEGER entity_attributes(12,50)This value returns the IGES entity attributes for each entity type. The use of this array is described in the remarks below.
INTEGER num_colors(50)This value returns the number of colors used by the IGES geometry file.
INTEGER entity_colors(256,50)This value returns the color numbers per entity type used by the IGES geometry file. See the remarks below for more information on the use of this value.
INTEGER num_colors_per(256,50)This value returns the number of colors per entity type used by the IGES geometry file.
INTEGER num_layers(50)This value reports the number of layers per entity type in the IGES geometry file.
INTEGER entity_layers(256,50)This value returns the layer numbers per entity type in the IGES geometry file.
INTEGER num_layers_per(256,50)This value returns the number of layers per entity type.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See Status Messages for information on any error values returned by this function.
Remarks:
This function will provide an information display listing the contents of the IGES file. The input value query_options uses the following offsets to control the type of information placed in a report. When the value at the offset is set to TRUE,the information will be placed in the report. When the value at the offset is set to FALSE,the listed information will be omitted from the report.
---------------
ge_export_xmt(filnam,refittol,scale_factor,entity_values,patran_summary,para_summary)
##########
Description:
This function will export Patran geometry to a Parasolid transmit file.
Input:
STRING filnam[] This value specifies the Parasolid transmit file name to create.
REAL refittol This value specifies the tolerance used to refit Patran geometry to Parasolid format. The default value = geotol/scale_factor,where: geotol = Global Modeling Tolerance scale_factor = Geometry Scale Factor
REAL scale_factor This value specifies the Geometry Scale Factor used to convert Patran geometry into Parasolid units. The default value = 39.37
LOGICAL entity_values(3)This value specifies the types of Patran geometric entity types to export: (1)= true if curves are to be exported. (2)= true if surfaces are to be exported. (3)= true if solids are to be exported.
Output:
INTEGER patran_summary(3)This value returns the number of patran geometric entity types exported: (1)= number of curves exported. (2)= number of surfaces exported. (3)= number of solids exported.
INTEGER para_summary(3)This value returns the number of parasolid geometric entity types created: (1)= number of parasolid curves created. (2)= number of parasolid surfaces created. (3)= number of parasolid solids created.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_conn_fastener_create(id,pname,method,fmt,gs,ga,gb,pata,patb)
##########
Description:
This function will create fastener connectors.
Input:
INTEGER id The starting id for the new connector(s). If zero,then fetch the next available id from the database.
STRING[] pname[] The connector property name.
STRING[] method The connector creation method (Projection or Axis).
STRING[] fmt The weld format (ELPAT,PARTPAT,ALIGN,ELEMID,or GRIDID).
STRING[] gs List of connector locations (nodeds or xyz).
STRING[] ga List of surface A pierce nodes.
STRING[] gb List of surface B pierce nodes.
STRING[] pata List of surface A patch identifiers.
STRING[] patb List of surface B patch identifiers.
Output:
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
MSG_FEM_CONN_ZERO_DIAMMSG_FEM_CONN_GS_OR_GA_REQDMSG_FEM_CONN_ALIGN_GA_GB_REQDMSG_FEM_CONN_PATA_PATB_REQDMSG_FEM_CONN_BAD_POINT_PATCHMSG_FEM_CONN_GS_NODE_ID_REQDMSG_FEM_CONN_PROP_NOT_FOUND
---------------
fem_conn_fastener_prop_create(name,diameter,kti,kri,mass,mcid,mflag,id)
##########
Description:
This function will create a fastener connector property record in the database.
Input:
STRING[] name The name of the connector property.
REAL diameter The connector diameter.
REAL(3)kti Stiffness values in directions 1 to 3.
REAL(3)kri Rotation stiffness values in directions 1 to 3.
REAL mass The lumped mass of the fastener.
INTEGER mcid The element stiffness coordinate system (-1 = use element coordinate system).
INTEGER mflag Defines whether the coordinate system specified for mcid is absolute (1)or relative (0).
Output:
INTEGER id The ID of the new connector property.
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
DbDuplicateEntryDbMaterialNotFound
---------------
fem_conn_property_create(name,type,mat,rvals,ivals,id)
##########
Description:
This function will create a connector property record in the database.
Input:
STRING[] name The name of the connector property.
STRING[] type The type of connector property (General,Spot Weld).
STRING[] mat Name of the reference material property.
REAL()rvals Real property values (diameter,Idmin,Idmax,etc.).
INTEGER()ivals Integer property values.
Output:
INTEGER id The ID of the new connector property.
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
DbDuplicateEntryDbMaterialNotFound
---------------
fem_conn_spotweld_create(id,pname,method,fmt,gs,ga,gb,pata,patb,sptyp)
##########
Description:
This function will create a spot weld connector property record in the database.
Input:
INTEGER id The starting id for the new connector(s). If zero,then fetch the next available id from the database.
STRING[] pname[] The connector property name.
STRING[] method The connector creation method (Projection or Axis).
STRING[] fmt The weld format (ELPAT,PARTPAT,ALIGN,ELEMID,or GRIDID).
STRING[] gs List of connector locations (nodeds or xyz).
STRING[] ga List of surface A pierce nodes.
STRING[] gb List of surface B pierce nodes.
STRING[] pata List of surface A patch identifiers.
STRING[] patb List of surface B patch identifiers.
STRING[] sptyp Surface patch types (GRIDID format only). Q4Q8 = quad4/quad8,Q4T6 = quad4/tri6,etc.
Output:
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
MSG_FEM_CONN_ZERO_DIAMMSG_FEM_CONN_GS_OR_GA_REQDMSG_FEM_CONN_ALIGN_GA_GB_REQDMSG_FEM_CONN_PATA_PATB_REQDMSG_FEM_CONN_BAD_POINT_PATCHMSG_FEM_CONN_GS_NODE_ID_REQDMSG_FEM_CONN_PROP_NOT_FOUND
---------------
fem_conn_spotweld_prop_create(name,mat,diameter,imset,id)
##########
Description:
This function will create spot weld connectors.
Input:
STRING[] name The name of the connector property.
STRING[] mat Name of the reference material property.
REAL diameter The connector diameter.
INTEGER imset The M-set flag (0=OFF,1=ON).
Output:
INTEGER id The ID of the new connector property.
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
DbDuplicateEntryDbMaterialNotFound
---------------
fem_create_nodes_1(ref_coord_frame,anly_coord_frame,flag_geometry,node_select,point_select,fem_nodes_created)
##########
Description:
This function will create and display new FEM nodes.
Input:
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
STRING anly_coord_frame[] This value specifies an identifier for the analysis coordinate frame.
INTEGER flag_geometry This value of 1 for the old associated being true and 2 to use the new numbering control scheme.
STRING node_select[] This value specifies a selection of node identifiers to be used for the FEM nodes being created.
STRING point_select[] This value specifies a selection of points defining the locations of the FEM nodes to be created.
Output:
STRING fem_nodes_created[VIRTUAL] This value returns a description of the FEM nodes created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_create_elems_1(shape,element_type,element_select,connection_pattern,flag,corner1_node_select,corner2_node_select,corner3_node_select,corner4_node_select,corner5_node_select,corner6_node_select,corner7_node_select,corner8_node_select,fem_elements_created)
##########
Description:
This function will create and display new elements.
Input:
STRING shape[] This value specifies the shape of the elements to be created. Currently,this value is not used.
STRING element_type[31] This value specifies the element type to be created. See the remarks below.
STRING element_select[] This value specifies a selection of element identifiers to be used for the elements being created.
STRING connection_pattern[31] This value specifies the type of connection made between elements. This case sensitive value may be defined as “Elem Edge”,“Elem Face”,“PWL”,and “Standard”. Setting this argument to any other value will cause the default or “Standard” behavior to be used.
INTEGER flag This value of 1 for the old midnode_flag being true and 2 to use the new numbering control scheme.
STRING corner1_node_select[] This value specifies a selection of entities used to define the nodes for the first corner of the elements being created.
STRING corner2_node_select[] This value specifies a selection of entities used to define the nodes for the second corner of the elements being created.
STRING corner3_node_select[] This value specifies a selection of entities used to define the nodes for the third corner of the elements being created.
STRING corner4_node_select[] This value specifies a selection of entities used to define the nodes for the fourth corner of the elements being created.
STRING corner5_node_select[] This value specifies a selection of entities used to define the nodes for the fifth corner of the elements being created.
STRING corner6_node_select[] This value specifies a selection of entities used to define the nodes for the sixth corner of the elements being created.
STRING corner7_node_select[] This value specifies a selection of entities used to define the nodes for the seventh corner of the elements being created.
STRING corner8_node_select[] This value specifies a selection of entities used to define the nodes for the eighth corner of the elements being created.
Output:
VIRTUAL fem_elements_created This value returns a description of the elements created. .
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_create_mpc_cyclic_symmetry(mpc_id,tolerance,cyl_coord_frame,dependent_region,independent_region)
##########
Description:
This function will create and display a cyclic symmetry nodal MPC.
Input:
INTEGER mpc_id This value specifies the ID value to be used to identify the created MPC.
REAL tolerance This value specifies the tolerance used when comparing the coordinates of the FEM nodes in the dependent and independent regions. This argument must have a positive,nonzero value.
STRING cyl_coord_frame[] This value specifies the cylindrical coordinate frame whose z axis is the axis of symmetry.
STRING dependent_region[] This value specifies a selection of entities that defines the dependent region. Entities in this region can be nodes,3D element faces,2D element edges,points,curves,or surfaces.
STRING independent_region[] This value specifies a selection of entities that defines the independent region. Entities in this region can be nodes,3D element faces,2D element edges,points,curves,or surfaces.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_create_mpc_nodal(mpc_id,mpc_type,constant,num_terms,dependency_state,term_coefficients,node_select,freedom_select)
##########
Description:
This function will create and display an MPC which has an association with a selection of specified FEM nodes.
Input:
INTEGER mpc_id This value specifies the ID value to be used to identify the created MPC.
STRING mpc_type[31] This value specifies the type of the MPC that will be created.
REAL constant This value specifies the constant term used with an MPC of the “Explicit” type.
INTEGER num_terms This value specifies the number of terms in the MPC.
LOGICAL dependency_state(num_terms)This value specifies the dependency state for each term in the MPC where setting an offset to TRUE indicates that the term is dependent and setting an offset to FALSE indicates that the term is independent.
REAL term_coefficients(num_terms)This value specifies the coefficients for each term in the MPC.
STRING node_select[](num_terms)This value specifies the identifiers for the nodes used for each term in the MPC.
STRING freedom_select[](num_terms)This value specifies the degrees of freedom for each term in the MPC.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
-1 This is an internal status condition. There is no corresponding status message in the message database.
1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
fem_create_mpc_nodal2(mpc_id,mpc_type,constant,num_terms,dependency_state,term_coefficients,node_select,freedom_select)
##########
Description:
This function will create and display an MPC which has an association with a selection of specified FEM nodes.
Input:
INTEGER mpc_id This value specifies the ID value to be used to identify the created MPC.
STRING mpc_type[32] This value specifies the type of the MPC that will be created.
REAL constant This value specifies the constant term used with an MPC of the “Explicit” type.
INTEGER num_terms This value specifies the number of terms in the MPC.
LOGICAL dependency_state(num_terms)This value specifies the dependency state for each term in the MPC where setting an offset to TRUE indicates that the term is dependent and setting an offset to FALSE indicates that the term is independent.
STRING term_coefficients(num_terms)This value specifies the coefficients for each term in the MPC.
STRING node_select[](num_terms)This value specifies the identifiers for the nodes used for each term in the MPC.
STRING freedom_select[](num_terms)This value specifies the degrees of freedom for each term in the MPC.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
-1 This is an internal status condition. There is no corresponding status message in the message database.
1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
fem_create_mpc_sliding_surface(mpc_id,tolerance,coord_option,coord_frame,normal_axis,dependent_region,independent_region)
##########
Description:
This function will create and display a sliding surface nodal MPC.
Input:
INTEGER mpc_id This value specifies the ID value to be used to identify the created MPC.
REAL tolerance This value specifies the tolerance used when comparing the coordinates of the FEM nodes in the dependent and independent regions. This argument must have a positive,nonzero value.
STRING coord_option[31] This value specifies that a coordinate system is to be user specified or internally created. This argument accepts “User Specified” and “Automatic” as the only valid setting.
STRING coord_frame[] This value specifies the normal coordinate frame. This argument is used only when the input value coord_option is set to “User Specified”.
STRING normal_axis[31] This value specifies the axis that is normal to every FEM node. This argument accepts “Axis 1”,“Axis 2”,and “Axis 3” as the only valid settings. This argument is used only when the input value coord_option is set to “User Specified”.
STRING dependent_region[] This value specifies a selection of entities that defines the dependent region. Entities in this region can be 2D element edges,2D elements,3D element faces,3D surface edges,and 3D surfaces.
STRING independent_region[] This value specifies a selection of entities that defines the independent region. Entities in this region can be 2D element edges,2D elements,3D element faces,3D surface edges,and 3D surfaces.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_create_mesh_2curve_1(curve1_select,curve2_select,size_method,flag,global_edge_length,num_along_curve,num_across_curve,element_topology,node_select,element_select,anly_coord_frame,ref_coord_frame,num_fem_nodes,num_fem_elements,fem_nodes_created,fem_elements_created)
##########
Description:
This function will create a FEM surface mesh between two curves using an isometric meshing operation.
Input:
STRING curve1_select[] This value specifies a selection of entities that defines the first set of curves.
STRING curve2_select[] This value specifies a selection of entities that defines the second set of curves.
INTEGER size_method This value specifies the method used to determine the size of the mesh. Setting this value to 1 will allow the function to use the input values num_along_curve and num_across_curve. Setting this value to anything other than 1 will allow the input value global_edge_length to be used.
INTEGER flag This value to use new numbering control scheme.
REAL global_edge_length This value specifies the global element edge length used in creating the mesh.
INTEGER num_along_curve This value specifies the number of mesh elements created along the curves defining the area where the mesh will be placed.
INTEGER num_across_curve This value specifies the number of elements created across the curves defining the area where the mesh will be placed.
STRING element_topology[31] This value specifies the topology of the element to be created. See the remarks below.
STRING node_select[] This value specifies an optional selection of node identifiers.
STRING element_select[] This value specifies an optional selection of element identifiers.
STRING anly_coord_frame[] This value specifies an identifier for the analysis coordinate frame.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
Output:
INTEGER num_fem_nodes This value returns the number of FEM nodes created.
INTEGER num_fem_elements This value returns the number of elements created.
STRING fem_nodes_created [VIRTUAL] This value returns a description of the FEM nodes created.
STRING fem_elements_created [VIRTUAL] This value returns a description of the elements created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_create_mesh_curv_1(curve_select,flag,global_edge_length,element_topology,node_select,element_select,anly_coord_frame,ref_coord_frame,num_fem_nodes,num_fem_elements,fem_nodes_created,fem_elements_created)
##########
Description:
This function will create a FEM curve mesh using an isometric meshing operation.
Input:
STRING curve_select[] This value specifies a selection of curves to be meshed.
INTEGER flag This value to use new numbering control scheme.
REAL global_edge_length This value specifies the global element edge length to be used for the mesh. This value must be greater than 0.
STRING element_topology[31] This value specifies the topology of the elements to be created and can be set to “Bar2”,“Bar3”,and “Bar4” only.
STRING node_select[] This value specifies an optional selection of FEM node identifiers.
STRING element_select[] This value specifies an optional selection of element identifiers.
STRING anly_coord_frame[] This value specifies an identifier for the analysis coordinate frame.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
Output:
INTEGER num_fem_nodes This value returns the number of FEM nodes created by this function.
INTEGER num_fem_elements This value returns the number of elements created by this function.
STRING fem_nodes_created [VIRTUAL] This value returns a description of the FEM nodes created.
STRING fem_elements_created [VIRTUAL] This value returns a description of the elements created.
---------------
fem_create_mesh_sol_3(mesher,options_control,solid_select,num_values,value_array,element_topology,node_select,element_select,anly_coord_frame,ref_coord_frame,num_fem_nodes,num_fem_elements,fem_nodes_created,fem_elements_created)
##########
Description:
This function will create a FEM solid mesh.
Input:
STRING mesher[31] This value specifies the type of mesher to be used to create the FEM mesh and can be set to either “IsoMesh” or “TetHybrid”.
INTEGER options_control This value specifies the use of various options influencing the creation of the FEM mesh.
STRING solid_select[] This value specifies a selection of solids to be meshed.
INTEGER num_values This value specifies the number of entries in the input value value_array.
REAL value_array(num_values)Values used by the meshers.
STRING element_topology[31] This value specifies the topology of the elements to be created. See the remarks below.
STRING node_select[] This value specifies an optional selection of FEM node identifiers.
STRING element_select[] This value specifies an optional selection of element identifiers.
STRING anly_coord_frame[] This value specifies an identifier for the analysis coordinate frame.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
Output:
INTEGER num_fem_nodes This value returns the number of FEM nodes created by this function.
INTEGER num_fem_elements This value returns the number of elements created by this function.
STRING fem_nodes_created [VIRTUAL] This value returns a description of the FEM nodes created.
STRING fem_elements_created [VIRTUAL] This value returns a description of the elements created.
---------------
fem_create_mesh_sol_5(solid_list,mesher_pick,elem_topo,mesher_val_qtt,ac_mesher_val,flags,FMF_perform,FMF_make_dup_node,FMF_stop_when_interf_meshed,FMF_use_prox_tol,FMF_prox_tol,FMF_solid_neighbors,node_list,elem_list,a_coord_frame,r_coord_frame,num_nodes,num_elems,nodes_created,elems_created)
##########
Description:
This function will call the appropriate solid mesher.
Input:
STRING solid_list[] List of solids to be meshed. Ex: “Solid 1:3”
STRING mesher_pick[] Mesher to be used: “IsoMesh”,“TetState”,“TetAries” or “TetHybrid” (same mesher,different names),or “HexMesh.”
STRING elem_topo[] Element topology (i.e. “Tet4”,“Tet10”,“Tet16”).
INTEGER mesher_val_qtt Number of values in ac_mesher_val().
STRING ac_mesher_val[](1:NUMVAL)Note that NUMVAL=4 (1): Global Edge Length (2): Maximum h/L curvature error. (3): Minimum Edge Length as a ratio of the Global Edge Length. (4): 0.0
INTEGER flags = 0 as default += 4 (FEM_MF_CREATE_P_ELEMENTS_F)--> Create P- Elements. += 1 (FEM_MF_PREVIEW_ON_F)--> Do a preview. += 16384 (FEM_MF_USE_NEW_NUMBERING_CONTROL_F)--> To use the new numbering control (we always want this). += 1048576 (FEM_MF_GRADE_MESH_F)--> Allow for mesh internal coarsening. += 16 (FEM_MF_CURVATURE_CHECK_F)--> Perform mesh curvature check. += 512 (FEM_MF_ALLOW_TRIS_IN_QUAD_MESH_F)--> If we allow Tris in Quad meshes.
INTEGER FMF_perform Note:	 FMF_ stands for “force-matched face.”
---------------
fem_create_mesh_surf_3(mesher,options_control,surface_select,num_values,value_array,element_topology,node_select,element_select,anly_coord_frame,ref_coord_frame,num_fem_nodes,num_fem_elements,fem_nodes_created,fem_elements_created)
##########
Description:
This function will create a FEM surface mesh.
Input:
STRING mesher[31] This value specifies the type of mesher to be used to create the FEM mesh and can be set to either “IsoMesh” or “Paver”.
INTEGER options_control This value specifies the use of various options influencing the creation of the FEM mesh. See the remarks below. Multiple options can be set by adding together the values for the different options. For example: setting this input value to 9748 would turn on all of the options.
STRING surface_select[] This value specifies a selection of surfaces to be meshed.
INTEGER num_values This value specifies the number of entries in the input value value_array. This value should be set to 1 if the input value mesher is set to “IsoMesh” and 4 if the input value mesher is set to “Paver”.
STRING value_array(num_values)[] This value specifies the global edge length in offset 1,the allowable curvature error for the curvature check in offset 2,the minimum desired edge length for the mesh in offset 3,and the maximum desired edge length for the mesh in offset four. The global edge length must be greater than 0.0. The allowable curvature error can range from 0.0 to 0.25. The desired edge length values must both be greater than zero and the maximum value must be greater than the minimum value. Offset 1 is used only when the input value mesher”is set to “IsoMesh” and the offsets 2,3,and 4 are used only when the input value mesher is set to “Paver”.
STRING element_topology[31] This value specifies the topology of the elements to be created. See the remarks below.
STRING node_select[] This value specifies an optional list of FEM nodes.
STRING element_select[] This value specifies an optional list of elements.
STRING anly_coord_frame[] This value specifies an identifier for the analysis coordinate frame.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
Output:
INTEGER num_fem_nodes This value returns the number of FEM nodes created by this function.
INTEGER num_fem_elements This value returns the number of elements created by this function.
STRING fem_nodes_created [VIRTUAL] This value returns a description of the FEM nodes created.
STRING fem_elements_created [VIRTUAL] This value returns a description of the elements created.
---------------
fem_create_mesh_surf_4(mesher_pick,flag,surface_list,num_val,val_array_str,elem_topo,node_list,elem_list,a_coord_frame,r_coord_frame,num_nodes,num_elems,nodes_created,elems_created)
##########
Description:
This function will deal with the various meanings of the val_array data.
Input:
STRING mesher_pick[] Mesher to be used: “IsoMesh” or “Paver”.
INTEGER flag Flag word,not used yet. The integer input value flag can have the following values: Value Option Description 4 Create a p-element mesh to be created. 16 Do a curvature check operation. 512 Allow triangular elements in a quad mesh 1024 Use the global space only. 8192 Use the desired edge lengths
STRING surface_list[] List of surfaces to be meshed.
INTEGER num_val Number of float values.
STRING val_array_str[] String values. The string input array val_array_str can have the following values: 0 Global Length 1 Maximum Deviation 2 Minimum Length 3 Maximum Length
STRING elem_topo[] Element topology (i.e.; “Quad4”).
STRING node_list[] List of output node IDs.
STRING elem_list[] List of output element IDs.
STRING a_coord_frame[] Analysis coordinate frame.
STRING r_coord_frame[] Reference coordinate frame.
Output:
INTEGER num_nodes Number of nodes created.
INTEGER num_elems Number of elements created.
STRING nodes_created [] IDs of nodes created.
STRING elems_created [] IDs of elements created.
---------------
fem_create_mesh_quad_4(in_elem_list,bndy_vert_list,bndy_edge_list,bndy_seed_list,hard_node_list,hard_edge_list,soft_edge_list,hard_elem_list,user_node_id_list,user_elem_id_list,elem_type,elem_size,int_param,feature_param,num_out_elems,num_out_nodes,out_elem_list,out_node_list)
##########
Description:
These functions will convert an input shell mesh to a quad/tria mesh.
Input:
STRING in_elem_list A list of element ids ("ELEM2D"). If the "Guide elements" integer parameter (offset 16)= 0 these are the elements on the input mesh. = 1 these are the guiding elements for the elements ids to be obtained from groups.
STRING bndy_vert_list A list of 4 or less node ids defining the boundary verticies used for iso-meshing. See the "Use iso-meshing" (offset 3)integer parameter.
STRING bndy_edge_list A list of bar element ids defining input boundary edges.
STRING bndy_seed_list A list of node ids defining boundary seeds. These boundary seeds may or may not be on the input mesh defined for in_elem_list. See the "Seed type" integer parameter (offset 1).
STRING hard_node_list A list of node ids for defining hard nodes. The nodes may or may not be on the input mesh and or the boundary of the input mesh.
STRING hard_edge_list A list of bar element ids defining hard edges. The end nodes of the hard edges may or may not be on the input mesh and or the boundary of the of the input mesh.
STRING soft_edge_list A list of bar element ids defining soft edges. The end nodes of the soft edges may or may not be on the input mesh and or the boundary of the of the input mesh.
STRING file_name The input data file name.
STRING user_node_id_list A list of output node ids defined by the user.
STRING user_elem_id_list A list of output element ids defined by the user.
STRING elem_type The output element type. Currently only "Quad4" and "Tria3" are supported.
REAL elem_size The created element length.
INTEGER int_param This value provides integer parameters. The fem_create_mesh_mom ()function call accepts a maximum of 30 integer parameters. The fem_create_mesh_quad_4 ()function call accepts a maximum of 8 integer parameters and should be considered to be OBSOLETE. See integer parameter definitions in Notes below.
REAL feature_param This value provides real parameters. The fem_create_mesh_mom ()function call accepts a maximum of 30 real parameters. The fem_create_mesh_quad_4 ()function call accepts a maximum of 8 real parameters and should be considered to be OBSOLETE. See feature parameter definitions in Notes below.
Output:
INTEGER num_out_elems The number of elements created.
INTEGER num_out_nodes The number of nodes created.
STRING out_elem_list [ VIRTUAL ] A list of the created element ids.
STRING out_node_list [ VIRTUAL ] A list of the created node ids.
INTEGER <return value> A value of zero if the function executed correctly.
---------------
fem_create_mshctl_surface.exec(surface_list,global_edge_length)
##########
Description:
This function creates a surface mesh control that will be used to mesh the interior of the surface. The mesh length given in the Create-Mesh form will continue to drive the element edge lengths on the boundary of the surfaces selected for meshing,irrespective of the mesh control applied to the surfaces.
Input:
STRING surface_list[VIRTUAL] This value specifies the list of surfaces to which surface mesh control must be applied.
STRING global_edge_length Global element length for the surfaces in surface_list
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_create_surface_mesh_control(surface_list,num_int_arg,int_arg_list,num_float_arg,float_arg_list)
##########
Description:
This function creates a surface mesh control that will be used to mesh the interior of the surface. The mesh length given in the Create-Mesh form will continue to drive the element edge lengths on the boundary of the surfaces selected for meshing,irrespective of the mesh control applied to the surfaces.
Input:
STRING surface_list[VIRTUAL] This value specifies the list of surfaces to which surface mesh control must be applied.
INTEGER num_int_arg This value specifies the number of arguments in the input array int_arg_list.
INTEGER int_arg_list(4)This value specifies an array of integer values. The delimiter for each argument is a comma (,). The items in order in the list are as follows: Mesher Type: 1= Iso mesher,and 2 = Paver. Global Space Meshing Only: 1 = True,and 0 = False. Curvature Refinement: 1 = True,and 0 = False. p-Element Mesh: 1 = True,and 0 = False.
INTEGER num_float_arg This value specifies the number of arguments in the input array float_arg_list.
REAL float_arg_list(3)This value specifies an array of real (float)values. The delimiter for each item is a comma (,). The items in order in the list are as follows: Global element length for the surfaces in surface_list The next two fields are not used currently.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_create_mesh_mom.exec(domain,node_vertx_list,bar_bndy_list,node_seed_list,node_hard_list,bar_hard_list,bar_soft_list,output_file,node_list,elem_list,element_topology,edge_length_global,params,num_elems,num_nodes,elems_created,nodes_created)
##########
Description:
This function creates a new quad/tria mesh over an input mesh according to given mesh parameters.
Input:
STRING domain[] List of shell elements to mesh over.
STRING node_vertx_list[] Node list for boundary vertices used for iso meshing. Maximal number of vertices on the list is 4.
STRING bar_bndy_list[] Bar element list for input boundary edges
STRING node_seed_list[] Node list for boundary seeds. If a boundary seed is not a node on the input mesh,the program will project it onto the mesh.
STRING node_hard_list[] Node list for hard nodes. The program will preserve the hard nodes on the output mesh. If a hard node is not a node on the input mesh,the program will project it onto the mesh.
STRING bar_hard_list[] Bar element list for hard element edges. The program will preserve the hard edges (or its projection)on the output mesh. If a hard edge is not an existing edge on the input mesh,the program will project its end nodes onto the mesh and imprint the edge on the mesh.
STRING bar_soft_list[] Bar element list for soft element edges. A soft feature line is a sequence of consecutive soft element edges. The program will preserve the soft feature line and its two end nodes on the output mesh,but the end nodes of each soft element edge may not be preserved on the output mesh. If a soft edge is not an existing edge on the input mesh,the program will imprint the edge on the mesh.
STRING output_file[] Not used.
STRING node_list[] Node id list specified by user to be assigned to the nodes on output mesh.
STRING elem_list[] Element id list specified by user to be assigned to the elements on output mesh.
STRING element_topology[] String for element type. Currently we support "Quad4" and "Tria3".
REAL edge_length_global Mesh size to be used to create the new mesh.
STRING params[]()Mesh parameters list.: •	 [1]: int,seed_type
---------------
fem_mom_region_mesh(surf_list,feature_curve_list,feature_vertex_list,iso_mesh_flag,feature_flag,seed_type,num_val,val_array_str,elem_topo,node_list,elem_list,num_nodes,num_elems,nodes_created,elems_created)
##########
Description:
This function will create a shell mesh on a congruent surfaced model and preserve the feature curves and feature vertices on the output mesh.
Input:
STRING surf_list The list of surface to be meshed.
STRING feature_curve_list The list of curves to be preserved.
STRING feature_vertex_list The list of vertices on the boundary of the region or feature curves to be preserved.
INTEGER iso_mesh_flag A value of 0 will turn this feature off. If the flag is on or 1,the program will iso-mesh a 3/4 sided region. The first 3/4 vertices on the feature_vertex_list will be the vertices of the region.
INTEGER feature_flag A value of 0 will turn this feature off. If the flag is on or 1,the program will define the feature edge/vertex based on the feaure_edge_angle and feature_vertex_angle.
INTEGER seed_type The following values can be used: 0 Uniform boundary seeding.1 Curvature based boundary seeding.2 Keep all boundary vertices.
INTEGER num_val The number of offsets in the val_array_str array of strings. This value must be greater than 0 and less than or equal to 6.
STRING val_array_str An array of strings providing input real values. The offsets are to be used as follows: Offset Description1 Element size2 Height/Length ratio3 "Minimum size"/"Element Size" ratio4 Maximum size5 Feature edge angle6 Feature vertex angle
STRING elem_topo Element topology: "Quad" or "Tria"
STRING node_list List of output node IDs.
STRING elem_list List of output element IDs.
Output:
INTEGER num_nodes The number of nodes created.
INTEGER num_elems The number of elements created.
STRING nodes_created The ids of nodes created.
STRING elems_created The ids of elements created.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_prj_nod_surf_norm(node_select,surface_select)
##########
Description:
This function will project FEM nodes onto surfaces using the closest approach method.
Input:
STRING node_select[] This value specifies a selection of FEM nodes to be projected onto the surfaces.
STRING surface_select[] This value specifies a selection of surfaces on which the FEM nodes will be projected.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_prj_nod_surf_vect(node_select,surface_select,projection_option,projection_vector,coord_frame)
##########
Description:
This function will project FEM nodes onto surfaces using one of three possible methods.
Input:
STRING node_select[] This value specifies a selection of FEM nodes to be projected onto the surfaces.
STRING surface_select[] This value specifies a selection of surfaces on which the FEM nodes will be projected.
INTEGER projection_option This value specifies the method to be used in projecting the FEM nodes onto the surfaces: 1 = the closest approach method,2 = use a vector projection method,and 3 = the view vector method.
STRING projection_vector[] This value specifies the projection vector used when the input value projection_option is set to 2.
STRING coord_frame[] This value specifies the coordinate frame used with the input value projection_vector. This value is only used when the input value projection_option is set to 2.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_prj_nod_curve_norm(node_select,curve_select)
##########
Description:
This function will project FEM nodes onto curves using the closest approach method.
Input:
STRING node_select[] This value specifies a selection of FEM nodes to be projected onto the curves.
STRING curve_select[] This value specifies a selection of curves onto which the FEM nodes will be projected.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_prj_nod_cplane(node_select,direction,constant_value,coord_frame)
##########
Description:
This function will project FEM nodes onto a constant plane.
Input:
STRING node_select[] This value specifies a selection of FEM nodes to be projected onto the plane.
INTEGER direction This value specifies the direction of a vector used to project the nodes onto the plane and is normal to that plane. This value can be set to 1= X axis,2 = Y axis,or 3 = Z axis.
REAL constant_value This value specifies the distance from the origin along the axis specified by the input value direction at which the constant plane is defined.
STRING coord_frame[] This value specifies the coordinate frame for the input value node_select and the constant plane.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
mesh_seed_create(curve_select,seed_option,num_seeds,ratio,length_1,length_2)
##########
Description:
This function will create and display FEM mesh seeds on a selection of curves based on a uniform,a one-way bias,or a two-way bias mesh seed spacing.
Input:
STRING curve_select[] This value specifies a selection of curves to be seeded.
INTEGER seed_option This value specifies the options for this function. See the remarks below.
INTEGER num_seeds This value specifies the number of seeds per edge for use when the input value seed_option is set to 1,3,or 5.
REAL ratio This value specifies the length ratio used when the input value seed_option is set to 3 or 5. This value must be greater than 0.
REAL length_1 This value specifies the first element length used when the input value seed_option is set to 2,4,or 6. This value must be greater than 0.
REAL length_2 This value specifies the second element length used when the input value seed_option is set to 4 or 6. This value must be greater than the input value “length_1”.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
mesh_seed_create_curv_based(curve_select,element_length_type,allow_curve_error,constraint_option,minimum_id_length,maximum_id_length,minimum_number,maximum_number)
##########
Description:
This function will create and display FEM mesh seeds on a selection of curves based on the allowable curve error and either the number of mesh seeds per element or the length of an element.
Input:
STRING curve_select[] This value specifies a selection of curves to be seeded.
STRING element_length_type[31] This value specifies an element length type of either “Uniform” or “Variable”.
REAL allow_curve_error This value specifies the allowable curvature error which must be greater than 0.
STRING constraint_option[31] This value specifies the element constraint option of either “Length” or “Number”. This value is used to select between the use of the input values minimum_id_length and maximum_id_length or minimum_number and maximum_number.
REAL minimum_id_length This value specifies the minimum length of an element that will be seeded. This value must be equal to or greater than 0 and is used only when the input value constraint_option is set to “Length”.
REAL maximum_id_length This value specifies the maximum length of an element that will be seeded. This value must be greater than the input value minimum_id_length and is used only when the input value constraint_option is set to “Length”.
INTEGER minimum_number This value specifies the minimum number of mesh seeds that will be placed on an element. This value must be greater than 0 and is used only when the input value constraint_option is set to “Number”.
INTEGER maximum_number This value specifies the maximum number of mesh seeds that will be placed on an element. This value must be greater than the input value minimum_number and is used only when the input value constraint_option is set to “Number”.
Output:
None.
Error Conditions:
None.
---------------
mesh_seed_create_tabular(curve_select,coord_type,num_entries,table_of_values)
##########
Description:
This function will create and display FEM mesh seeds at specific points on a selection of curves using a table of either percentage values of the arc length or of the parametric length of a curve.
Input:
STRING curve_select[] This value specifies a selection of curves to be seeded.
STRING coord_type[] This value specifies the coordinate type used in the input value table_of_values and can be set to either “Arc Length” or “Parametric”.
INTEGER num_entries This value specifies the number of entries in the input value table_of_values.
REAL table_of_values(num_entries + 2)This value specifies a table of either percentage values of the arc length or of the parametric length of a curve. The number of offsets allocated for this array should be two greater than the input value num_entries to allow for the inclusion of the values 0.0 and 1.0. All entries in this table can range from 0.0 to 1.0.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
mesh_seed_create_tabular2(curve_select,coord_type,num_entries,table_of_values)
##########
Description:
This function will create and display FEM mesh seeds at specific points on a selection of curves using a table of either percentage values of the arc length or of the parametric length of a curve.
Input:
STRING curve_select[] This value specifies a selection of curves to be seeded.
STRING coord_type[] This value specifies the coordinate type used in the input value table_of_values and can be set to either “Arc Length” or “Parametric”.
INTEGER num_entries This value specifies the number of entries in the input value table_of_values.
STRING table_of_values(num_entries + 2)
This value specifies a table of either percentage values of the arc length or of the parametric length of a curve. The number of offsets allocated for this array should be two greater than the input value num_entries to allow for the inclusion of the values 0.0 and 1.0. All entries in this table can range from 0.0 to 1.0. Table_of_values is a string array so that each element can support unevaluated PCL expressions.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
mesh_seed_create_tabular_points(curve_list,point_list,tolerance)
##########
Description:
This function will create a mesh seed on a curve or an edge using the nodes,points or locations provided in the point_list. The points (nodes)should lie within tolerance specified.
Input:
STRING curve_list[VIRTUAL] This value specifies a list of curves or edges on which mesh seed needs to be created.
STRING point_list[VIRTUAL] This value specifies the list of locations. This value could be nodes,points,or [x y z] locations.
REAL tolerance This value specifies the tolerance within which the items in the input value point_list should lie with respect to the curve to create a tabular mesh seed.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
MSG_FEM_SEED_00_ADDED - Arc length ratio 0.0 added to seed table for start point of curve.MSG_FEM_SEED_10_ADDED - Arc length ratio 1.0 added to seed table for end point of curve.While the above two can be ignored all other error messages should be handled as the situation warrants. See the Status Messages for information on any error values returned by this function.
---------------
mesh_seed_display_mgr.init()
##########
Description:
This function will initialize the mesh seed display manager.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
mesh_seed_display_mgr.plot()
##########
Description:
This function will display all visible mesh seeds in the current viewport.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
mesh_seed_display_mgr_erase()
##########
Description:
This function will erase all visible mesh seeds in the current viewport.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
mesh_seed_display_mgr.refresh()
##########
Description:
This function will refresh the mesh seed shown in the current viewport if the mesh seeds are displayed.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
create_freebody_fields3(ufb_method,uresult_title,usubcase_title,usubcase_id,uresult_type,dummy0,usummation_pt,dummy1,utransform_on,ucoord_sys,dummy2,uelement_list,dummya,uplanar,uplane,dummy8,ucontributions_on,dummy3,uzero_on,utolerance,dummy4,uformat_type,usig_digits,dummy5,uforce_field_on,uforce_opts,uforce_field_name,uforce_inc_start,dummy6,umoment_field_on,umoment_opts,umoment_field_name,umoment_inc_start,dummy7,ulbc_on,ulbc_opts,ulbc_labels,ulbc_inc_start,ulc_insert,ulc_inc_start)
##########
Description:
This function will create freebody fields.
Input:
STRING ufb_method[] Freebody method "Freebody Loads","Interface Loads" or "Forced Displacements"
STRING uresult_title[] Result title
STRING usubcase_title[] Subcase title
INTEGER usubcase_id Subcase id
STRING uresult_type[] Result type
STRING dummy0[] Constant set to "Summation Point"
STRING usummation_pt[] Summation point
STRING dummy1[] Constant set to "Transform Results"
LOGICAL utransform_on Transformation flag,If FALSE use Analysis Coord Frame.
STRING ucoord_sys[] Transform coordinate system. Used if "utransform" is TRUE.
STRING dummy2[] Constant set to "Entity List"
STRING uelement_list[] Entities of interest
STRING dummya[] Constant set to "Planar Data"
LOGICAL uplanar TRUE if plane is active
STRING uplane[] Active plane if "uplanar" is TRUE
STRING dummy8[] Interface method
LOGICAL ucontributions_on Nodal contributions flag
STRING dummy3[] Constant set to "Zero Tolerance"
LOGICAL uzero_on Ignore values near zero flag
REAL utolerance Zero Tolerance value
STRING dummy4[] Constant set to "Output Format"
STRING uformat_type[] Real format,exponential or fixed
INTEGER usig_digits Number of significant digits
STRING dummy5[] Force Field type: "Force Field" or "Translational Displacement Field"
LOGICAL uforce_field_on Flag for creating a Force field
LOGICAL uforce_opts()Three Flags: 	1.	 Overwrite
---------------
fem_delete_conn_by_id(n_conn,conn_ids,conn_deleted_ids)
##########
Description:
This function is used to delete connector elements from the database.
Input:
INTEGER n_conn The number of connectors to be deleted
INTEGER conn_ids(n_conn)Array of connector IDs to be deleted
Output:
STRING conn_deleted_ids(VIRTUAL)
The list of deleted IDs
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_delete_elem_and_node(element_select,deleted_elements)
##########
Description:
This function will delete elements and their associated nodes from the database and the graphics window.
Input:
STRING element_select[] This value specifies a selection of nodes and elements to be deleted.
Output:
STRING deleted_elements[VIRTUAL]
This value returns a description of the deleted nodes and elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_delete_element(element_select,deleted_elements)
##########
Description:
This function will delete elements from the database and the graphics window.
Input:
STRING element_select[] This value specifies a selection of elements to be deleted.
Output:
STRING deleted_elements[VIRTUAL]
This value returns a description of the deleted elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_delete_free_node(node_select,deleted_nodes,not_found_nodes)
##########
Description:
Deletes a set of nodes from the database and the graphics window.
Input:
STRING node_select[] This value specifies a selection of nodes to be deleted.
Output:
STRING deleted_nodes[VIRTUAL]
This value returns a description of the deleted nodes.
STRING not_found_nodes[VIRTUAL]
This value returns a description of any nodes that were listed in the input value node_select but not found in the database.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_delete_mesh_from_curve(curve_select,deleted_mesh,not_found_mesh)
##########
Description:
This function will delete a mesh from a set of curves. The curves may be edges of surfaces or solids.
Input:
STRING curve_select[] This value specifies a selection of curves from which the mesh is to be deleted.
Output:
STRING deleted_mesh[VIRTUAL]
This value returns a description of the curves from which the mesh was deleted.
STRING not_found_mesh[VIRTUAL]
This value returns a description of the curves from which there was no mesh that could be deleted.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_delete_mesh_from_surface(surface_select,deleted_mesh,not_found_mesh)
##########
Description:
This function will delete a mesh from a set of surfaces.
Input:
STRING surface_select[] This value specifies a selection of surfaces from which the mesh is to be deleted.
Output:
STRING deleted_mesh[VIRTUAL]
This value returns a description of the surfaces from which the mesh was deleted.
STRING not_found_mesh[VIRTUAL]
This value returns a description of the surfaces from which there was no mesh that could be deleted.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_delete_mesh_from_solid(solid_select,deleted_mesh,not_found_mesh)
##########
Description:
This function will delete a mesh from a set of solids.
Input:
STRING solid_select[] This value specifies a selection of solids from which the mesh is to be deleted.
Output:
STRING deleted_mesh[VIRTUAL]
This value returns a description of the solids from which the mesh was deleted.
STRING not_found_mesh[VIRTUAL]
This value returns a description of the solids from which there was no mesh that could be deleted.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
flds_retrieve_gen_options(cframe_id,dim_angle)
##########
Description:
This function retrieves the value of the Basic Aero Coord Frame and the value of the Dimensional Angle and Rates toggle from the database.
Input:
INTEGER lbccframe_id This value specifies the id of the Basic Aero Coord Frame.
LOGICAL dim_angle This value specifies the state of the dimensional angle and rates toggle
Output:
None.
---------------
flds_store_gen_options(cframe_id,dim_angle)
##########
Description:
This function stores the value of the Basic Aero Coord Frame and the value of the Dimensional Angle and Rates toggle in the database.
Input:
INTEGER lbccframe_id This value specifies the id of the Basic Aero Coord Frame.
LOGICAL dim_angle This value specifies the state of the dimensional angle and rates toggle
Output:
None.
---------------
flds_store_mod_options(cre_geom,auto_mchk,strt_elem,elem_inc,int_grp,warp_tol,edge_ratio)
##########
Description:
This function stores the Aero Modeling options in the database.
Input:
LOGICAL cre_geom TRUE: if geometry is to be created; FALSE otherwise.
LOGICAL auto_mchk TRUE: if auto model checking is to be done; FALSE otherwise.
INTEGER strt_elem,This value specifies the starting element id number.
INTEGER elem_inc This value specifies the element increment value.
INTEGER int_grp This value specifies the interference group id number.
REAL warp_tol,This value specifies the warp tolerance value.
REAL edge_ratio This value specifies the edge ratio value.
Output:
None.
---------------
flds_store_sgrp_data(type,name)
##########
Description:
This function stores the SuperGroup type and name in the database.
Input:
STRING type This value specifies the type of SuperGroup to store. (FLAT_PLATE or THREED)
STRING name This value specifies the name of the SuperGroup to store.
Output:
None.
---------------
flds_store_start_elem_id(strt_elem)
##########
Description:
This function stores the Starting Element id in the database.
Input:
INTEGER strt_elem This value specifies the starting element id.
Output:
None.
---------------
db_get_connector_fastener(id,pname,fmt,nid_gs,xyz_gs,nid_ga,nid_gb,id_pata,id_patb)
##########
Description:
This function retrieves fastener connector attributes from the database.
Input:
INTEGER ID The connector ID.
Output:
STRING[] pname The name of the associated connector property.
INTEGER fmt The format of the spot weld (enum: SW_UNKNOWN=0,SW_PARTPAT=1,SW_ELPAT=2,SW_ELEMID=3,SW_GRIDID=4,OR SW_ALIGN=5).
INTEGER nid_gs ID of the node at the connector location (if zero,use xyz_gs - supported for ELPAT and PARTPAT formats only).
REAL(3)xyz_gs XYZ location of the connector location (used only if nid_gs is zero - ELPAT and PARTPAT formats only).
INTEGER nid_ga ID of the node at the pierce location on surface patch A (zero if not specified).
INTEGER nid_gb Id of the node at the pierce location on surface patch B (zero if not specified).
INTEGER(33)id_pata The element ID,property ID or array of node ids defining surface patch A (all formats except ALIGN).
INTEGER(33)id_patb The element ID,property ID or array of node ids defining surface patch B(all formats except ALIGN).
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
DbConnectorNotFoundDbConnectorWrongType
---------------
db_get_connector_spot_weld(id,pname,fmt,nid_gs,xyz_gs,nid_ga,nid_gb,id_pata,id_patb)
##########
Description:
This function retrieves spot weld connector attributes from the database.
Input:
INTEGER ID The connector ID.
Output:
STRING[] pname The name of the associated connector property.
INTEGER fmt The format of the spot weld (enum: SW_UNKNOWN=0,SW_PARTPAT=1,SW_ELPAT=2,SW_ELEMID=3,SW_GRIDID=4,OR SW_ALIGN=5).
INTEGER nid_gs ID of the node at the connector location (if zero,use xyz_gs - supported for ELPAT and PARTPAT formats only).
REAL(3)xyz_gs XYZ location of the connector location (used only if nid_gs is zero - ELPAT and PARTPAT formats only).
INTEGER nid_ga ID of the node at the pierce location on surface patch A (zero if not specified).
INTEGER nid_gb Id of the node at the pierce location on surface patch B (zero if not specified).
INTEGER(33)id_pata The element ID,property ID or array of node ids defining surface patch A (all formats except ALIGN).
INTEGER(33)id_patb The element ID,property ID or array of node ids defining surface patch B(all formats except ALIGN).
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
DbConnectorNotFoundDbConnectorWrongType
---------------
db_get_connector_type(id,title)
##########
Description:
Given a connector ID,this function retrieves the connector type from the database..
Input:
INTEGER list The connector ID.
Output:
STRING[] type The connector type (e.g.,Spot Weld,Fastener).
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
MSG_FEM_CONN_NOT_FOUND
---------------
fem_geom_match_closest(source_select,target_select,entity_count,match,distance,length)
##########
Description:
This function will compare two lists of entities,returning the entities from the second list that have the smallest geometric distances to entities in the first list.
Input:
STRING source_select[] This value specifies a selection of geometric and finite element entities. Each entity in this list will be compared against all of the entities in the input value target_select.
STRING target_select[] This value specifies a selection of geometric and finite element entities. All of the entities in this list will be compared against each entity listed in the input value source_select.
Output:
INTEGER entity_count This value will return the number of entities in the returned values match and distance.
STRING match[VIRTUAL] This value will return a description of the matched entities from the input value target_select.
REAL distance(VIRTUAL)This value will return the centroid to centroid distance of each entity listed in the output value match to each entity listed in the input value source_select.
INTEGER length This value returns the length of the output value match.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
fem_geom_edge_length(element_select,lengths,entity_count)
##########
Description:
This function determines the length of finite element model bar elements and 2D geometric element edges.
Input:
STRING element_select[] This value specifies a selection of finite element model bar elements and 2D geometric element edges.
Output:
REAL lengths(VIRTUAL)This value returns the length of each entity in the input value element_select.
INTEGER entity_count This value returns the number of entities in the input value element_select and the number of offsets in the output value lengths.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
fem_geom_edge_length2(edge_count,element_id,element_face_id,element_face_edge_id,segment_count,edge_length)
##########
Description:
This function finds the length of the edge of elements.
Input:
INTEGER edge_count This value specifies the number of edges in the element_id array.
INTEGER element_id(edge_count)This array specifies the element ids.
INTEGER element_face_id(edge_count)This array specifies the element face ids. This value can be 0,or 1 to 6. Values between 1 and 6 are used to identify the element’s face number. When this value is equal to 0 the input value element_face_edge_id will designate the unique edge number.
INTEGER element_face_edge_id(edge_count)
This array specifies the element face edge id. If the input value element_face_id is greater than 0,this value will designate the face’s edge number for the element face with a value ranging from 1 to 4. If the input value element_face_id is equal to 0,this value will designate the unique edge number of the element with a value that ranging from 1 to 12.
INTEGER segment_count This value specifies the number of segments by which an element edge length will be divided. If this value is 0,it will be assumed that the edge of the element will be comprised of a single segment formed by a straight line between the nodes making up the corners of the edge of the element.
Output:
REAL edge_length(VIRTUAL)This array returns the lengths of the element edges. The number of offsets in the array will be set by the input value edge_count.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
fem_geom_face_area(element_select,areas,entity_count)
##########
Description:
This function determines the face area of finite element model shell elements and 3D geometric element edges.
Input:
STRING element_select[] This value specifies a selection of finite element model shell elements and 3D geometric element edges.
Output:
REAL areas(VIRTUAL)This value returns the face area of each entity in the input value element_select.
INTEGER entity_count This value returns the number of entities in the input value element_select and the number of offsets in the output value areas.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
fem_geom_elem_volume(element_select,volumes,entity_count)
##########
Description:
This function determines the volume of finite element model and 3D geometric elements.
Input:
STRING element_select[] This value specifies a selection of finite element model and 3D geometric elements.
Output:
REAL volumes(VIRTUAL)This value returns the volume of each entity in the input value element_select.
INTEGER entity_count This value returns the number of entities in the input value element_select and the number of offsets in the output value volumes.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
fem_geom_elem_location(element_select,locations,entity_count)
##########
Description:
This function will find the location of the centroid of finite element model and geometric elements,element faces,and element edges. Note that the “centroid” locations does not correspond to the center of gravity for the supplied finite element entities,but instead,to their parametric centers which are then mapped into real space.
Input:
STRING element_select[] This value specifies a selection of finite element model elements,element faces,and element edges.
Output:
REAL locations(VIRTUAL)This value returns a two dimensional array specifying the centroidal locations of each entity in the input value element_select. See the remarks below for more information.
INTEGER entity_count This value returns the number of entities in the input value element_select and the number of offsets in the first dimension of the two dimensional output value locations.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
fem_get_mesh_edge_def_data(curve_id,mesh_status,mesh_type,num_elements,mesh_ratio,num_hard,node_locations)
##########
Description:
This function returns information about the definition of a mesh and/or a mesh seed on a curve or on an edge of a surface or solid.
Input:
INTEGER curve_id This value specifies the internal database identifier value for a curve or an edge of a surface or solid.
Output:
INTEGER mesh_status This value returns information stating whether the curve or edge has a finite element mesh,a mesh seed,both a mesh and a mesh seed,or no mesh or mesh seed defined along its length. See the remarks below for more information.
INTEGER mesh_type This value returns information about how the mesh or mesh seed on the curve or edge is defined. See the remarks below for more information.
INTEGER num_elements This value returns the number of finite element model elements on the curve or edge specified by the input value curve_id and the number of offsets in the output value node_locations.
REAL mesh_ratio This value returns the mesh ratio for the finite element model mesh defined on the curve or edged specified by the input value curve_id.
INTEGER num_hard This value returns the number of points in each node location.
REAL node_locations [VIRTUAL]
This value returns the curve normalized arc length locations of the nodes along the specified curve or edge. The number of offsets defined for this array will be returned by the output value num_elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
del_2n_edge_for_all_elm(node_prefer_to_del_id,node_prefer_to_keep_id,consider_geometry,reason_why_not)
##########
Description:
This function deletes an element edge for all Tet/Tri/Bar elements using it.
Input:
INTEGER node_prefer_to_del_id This value specifies the Patran node id for deletion. This should be the one you prefer to delete.
INTEGER node_prefer_to_keep_id This value specifies the Patran node id for deletion. This should be the one you prefer to keep.
INTEGER consider_geometry This value specifies the options : 1 (TRUE)if you wish to consider geometry,otherwise,0 (FALSE).
STRING [VIRTUAL] reason_why_not This value specifies the virtual string containing : "" for this string if the edge was deleted. Otherwise (string length greater than 0),this string holds the reason why it cannot be deleted.
Output:
INTEGER <Return Value> This function returns a value of 0 if no error occurred.
---------------
fem_conn_fastener_prop_modify(name,diameter,kti,kri,mass,mcid,mflag,id)
##########
Description:
This function modifies a fastener connector property record in the database.
Input:
STRING[] name The name of the connector property.
REAL diameter The connector diameter.
REAL(3)kti Stiffness values in directions 1 to 3.
REAL(3)kri Rotation stiffness values in directions 1 to 3.
REAL mass The lumped mass of the fastener.
INTEGER mcid The element stiffness coordinate system (-1 = use element coordinate system).
INTEGER mflag Defines whether the coordinate system specified for mcid is absolute (1)or relative (0).
Output:
INTEGER id The ID of the new connector property.
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
DbDuplicateEntryDbMaterialNotFound
---------------
fem_conn_property_get(name,type,mat,rvals,ivals,id)
##########
Description:
This function retrieves data for a connector property record in the database.
Input:
STRING[] name The name of the connector property.
Output:
STRING[] type The type of connector property (General,Spot Weld,fastener).
STRING[] mat Name of the reference material property.
REAL(10)rvals Real property values (diameter,Idmin,Idmax,etc.).
INTEGER(10)ivals Integer property values.
INTEGER id The ID of the connector property.
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
DbRegionNotFoundDbPropValNotFoundDbMaterialNotFound
---------------
fem_conn_property_modify(name,type,mat,rvals,ivals,id)
##########
Description:
This function modifies a connector property record in the database.
Input:
STRING[] name The name of the connector property.
STRING[] type The type of connector property (Generl,Spot Weld).
STRING[] mat Name of the reference material property.
REAL()rvals Real property values (diameter,Idmin,Idmax,etc.).
INTEGER()ivals Integer property values.
Output:
INTEGER id The ID of the connector property.
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
DbRegionNotFoundDbPropValNotFoundDbMaterialNotFound
---------------
fem_conn_spotweld_modify(id,pname,method,fmt,gs,ga,gb,pata,patb,sptyp)
##########
Description:
This function modifies spot weld connectors (usually one at a time).
Input:
INTEGER id The starting id for the new connector(s).
STRING[] pname[] The connector property name.
STRING[] method The connector creation method (Projection or Axis).
STRING[] fmt The weld format (ELPAT,PARTPAT,ALIGN,ELEMID,or GRIDID).
STRING[] gs List of connector locations (nodeds or xyz).
STRING[] ga List of surface A pierce nodes.
STRING[] gb List of surface B pierce nodes.
STRING[] pata List of surface A patch identifiers.
STRING[] patb List of surface B patch identifiers.
STRING[] sptyp Surface patch types (GRIDID format only). Q4Q8 = quad4/quad8,Q4T6 = quad4/tri6,etc.
Output:
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
MSG_FEM_CONN_ZERO_DIAMMSG_FEM_CONN_GS_OR_GA_REQDMSG_FEM_CONN_ALIGN_GA_GB_REQDMSG_FEM_CONN_PATA_PATB_REQDMSG_FEM_CONN_BAD_POINT_PATCHMSG_FEM_CONN_GS_NODE_ID_REQDMSG_FEM_CONN_PROP_NOT_FOUND
---------------
fem_conn_spotweld_prop_modify(name,mat,diameter,imset,id)
##########
Description:
This function modifies a spot weld connector property record in the database.
Input:
STRING[] name The name of the connector property.
STRING[] mat Name of the reference material property.
REAL diameter The connector diameter.
INTEGER imset The M-Set flag (0=OFF,1=ON).
Output:
INTEGER id The ID of the new connector property.
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
DbDuplicateEntryDbMaterialNotFound
---------------
fem_mod_elem_reverse(element_select,elements_reversed)
##########
Description:
This function will reverse the connectivity of the specified elements,reversing the direction of the normal vector for those elements.
Input:
STRING element_select[] This value specifies a selection of element identifiers to be used for the elements being reversed.
Output:
STRING elements_reversed[VIRTUAL]
This value returns a description of the elements which were reversed.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_mod_elem_separate(element_select,node_select,seperation_option,keep_association,num_nodes,nodes_created)
##########
Description:
This function will separate elements at the specified nodes,edges or faces.
Input:
STRING element_select[] This value specifies a selection of element identifiers to be used for the elements being separated. Element edges and faces can also be specified with this value.
STRING node_select[] This value specifies a selection of nodes identifying where the elements will be separated.
INTEGER seperation_option This value specifies the method used to separate elements from nodes. See the remarks below for more information.
LOGICAL keep_association This value specifies,when set to TRUE,that new nodes that are created will maintain an association to the model geometry.
Output:
INTEGER num_nodes This value returns the number of nodes created.
STRING nodes_created[VIRTUAL]
This value returns a description of the nodes created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_mod_quad_split_nm(pattern,auto_manual,element_select,orientation_element,num_selected,num_orientation,num_nodes_created,num_elems_created,num_nodes_deleted,num_elems_deleted,nodes_created,elements_created,nodes_deleted,elements_deleted)
##########
Description:
This function will split quadrilateral elements in a specified pattern using a selection of elements as input.
Input:
STRING pattern[] This value specifies the pattern into which the quadrilateral elements will be split and should always be set to “nm_quad”.
STRING auto_manual[] This value specifies,when set to “Manual”,that the number of entities in the input value element_select be counted to determine how many orientation edges will be needed. This value can accept two values “Auto” or “Manual” and should be set to “Auto” if the input values num_selected and num_orientation equal each other.
STRING element_select[] This value specifies a selection of quadrilateral elements to be split.
STRING orientation_element[] This value specifies a selection of elements that are used to specify the orientation of the elements to be split.
INTEGER num_selected This value specifies the number of elements described in the input value element_select.
INTEGER num_orientation This value specifies the number of element edges described in the input value orientation_element.
Output:
INTEGER num_nodes_created This value returns the number of nodes created.
INTEGER num_elems_created This value returns the number of elements created.
INTEGER num_nodes_deleted This value returns the number of nodes deleted.
INTEGER num_elems_deleted This value returns the number of elements deleted.
STRING nodes_created[VIRTUAL]
This value returns a description of the created nodes.
STRING elements_created[VIRTUAL]
This value returns a description of the created elements.
STRING nodes_deleted[VIRTUAL]
This value returns a description of the deleted nodes.
STRING elements_deleted[VIRTUAL]
This value returns a description of the deleted elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_modify_nodes(node_select,new_node_id,ref_coord_frame,anly_coord_frame,point_select,modify_options,nodes_modified)
##########
Description:
This function will modify specified node attributes.
Input:
STRING node_select[] This value specifies a selection of nodes to be modified.
STRING new_node_id[] This value specifies a selection of node identifiers to be assigned to the modified nodes.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame assigned to the modified nodes.
STRING anly_coord_frame[] This value specifies an identifier for the analysis coordinate frame assigned to the modified nodes.
STRING point_select This value specifies a selection of points to which the modified nodes will be moved.
INTEGER modify_options(10)This value specifies the manner in which the node attributes will be modifies. Each offset in the array of values can be set to 1 to cause the attribute to be modified or to 0 so that the attribute is not modified. See the remarks below for more information.
Output:
STRING nodes_modified[VIRTUAL]
This value returns a description of the modified nodes.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_modify_nodes_offset(transformation_type,ref_coord_frame,vector_direction,magnitude,reverse_direction,node_select,nodes_modified)
##########
Description:
This function will move nodes by a specified vector distance.
Input:
LOGICAL transformation_type This value specifies,when set to TRUE,that the move will be curvilinear in the reference coordinate system. If this value is set to FALSE,a cartesian move in the reference coordinate frame will take place.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame in which the move will take place.
STRING vector_direction[] This value specifies a vector that defines the direction in which the nodes will be moved. This vector does not affect the distance that the move will take,only the direction.
STRING magnitude[] This value specifies how far the nodes will be moved. This argument is ignored if “transformation_type” is set to TRUE.
LOGICAL reverse_direction This value specifies,when set to TRUE,that the direction of the input value vector_direction be reversed.
STRING node_select[] This value specifies a selection of nodes to be modified.
Output:
STRING nodes_modified[VIRTUAL]
This value will return a description of the nodes that have been modified.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_modify_elems(new_element_id,new_shape,new_element_type,current_node_select,new_node_select,element_select,modify_options,elements_modified)
##########
Description:
This function will modify the specified element attributes.
Input:
STRING new_element_id[] This value specifies a selection of new element identifiers to be assigned to the modifies elements.
STRING new_shape[] This value specifies a new element shape to assign to the modified elements. See the remarks below for more information. This value is currently not used.
STRING new_element_type[] This value specifies a new element topology to assign to the modified elements. See the remarks below for more information.
STRING current_node_select[] This value is a selection of nodes describing the current element nodes to be modified.
STRING new_node_select[] This value is a selection of nodes describing the new element nodes to which the modified elements will be assigned.
STRING element_select[] This value specifies a selection of elements to be modified.
INTEGER modify_options(10)This value specifies the manner in which the node attributes will be modifies. Each offset in the array of values can be set to 1 to cause the attribute to be modified or to 0 so that the attribute is not modified. See the remarks below for more information.
Output:
STRING elements_modified[VIRTUAL]
This value returns a description of the modified elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_modify_mpc_nodal(mpc_id,constant,num_terms,dependency_flag,coefficient,node_select,degrees_of_freedom)
##########
Description:
This function will modify a multi-point constraint which is associated to the specified nodes.
Input:
INTEGER mpc_id This value specifies the id for the multi-point constraint to be modified.
REAL constant This value specifies the constant term for the multi-point constraint.
INTEGER num_terms This value specifies the number of terms defined for the multi-point constraint.
LOGICAL dependency_flag(num_terms)
This value specifies the dependency state for each term of the multi-point constraint. The term will be dependent if the value in dependency_flag is set to TRUE and will be independent if the array value is set to FALSE.
REAL coefficient(num_terms)
This value specifies the coefficient used with each term.
STRING node_select[](num_terms)
This value specifies a selection of nodes associated with each term.
STRING degrees_of_freedom[](num_terms)
This value specifies the degrees of freedom for each term.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_modify_mpc_nodal2(mpc_id,constant,num_terms,dependency_flag,coefficient,node_select,degrees_of_freedom)
##########
Description:
This function will modify a multi-point constraint which is associated to the specified nodes.
Input:
INTEGER mpc_id This value specifies the id for the multi-point constraint to be modified.
REAL constant This value specifies the constant term for the multi-point constraint.
INTEGER num_terms This value specifies the number of terms defined for the multi-point constraint.
LOGICAL dependency_flag(num_terms)
This value specifies the dependency state for each term of the multi-point constraint. The term will be dependent if the value in dependency_flag is set to TRUE and will be independent if the array value is set to FALSE.
STRING coefficient(num_terms)
This value specifies the coefficient used with each term.
STRING node_select[](num_terms)
This value specifies a selection of nodes associated with each term.
STRING degrees_of_freedom[](num_terms)
This value specifies the degrees of freedom for each term.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_mod_bar_split(element_select,num_nodes_created,num_elems_created,num_nodes_deleted,num_elems_deleted,nodes_created,elements_created,nodes_deleted,elements_deleted)
##########
Description:
This function will split a set of bars in two.
Input:
STRING element_select[] This value specifies a selection of bars to be split.
Output:
INTEGER num_nodes_created This value returns the number of nodes created.
INTEGER num_elems_created This value returns the number of elements created.
INTEGER num_nodes_deleted This value returns the number of nodes deleted.
INTEGER num_elems_deleted This value returns the number of elements deleted.
STRING nodes_created[VIRTUAL]
This value returns a description of the created nodes.
STRING elements_created[VIRTUAL]
This value returns a description of the created elements.
STRING nodes_deleted[VIRTUAL]
This value returns a description of the deleted nodes.
STRING elements_deleted[VIRTUAL]
This value returns a description of the deleted elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_mod_tria_split(pattern,auto_manual,element_select,orientation_node,num_nodes_created,num_elems_created,num_nodes_deleted,num_elems_deleted,nodes_created,elements_created,nodes_deleted,elements_deleted)
##########
Description:
This function will split triangular elements in a specified pattern using a selection of elements and nodes as input.
Input:
STRING pattern[] This value specifies the pattern into which the triangular elements will be split. See the remarks below for more information.
STRING auto_manual[] This value specifies,when set to “Manual”,that the number of entities in the input value element_select be counted to determine how many orientation edges will be needed. This value can accept two values “Auto” or “Manual” and the “Manual” setting is active only when the input value pattern is set to either “2_tria” or “Mixed”.
STRING element_select[] This value specifies a selection of triangular elements to be split.
STRING orientation_node[] This value specifies a selection of nodes that are used to specify the orientation of the nodes in the elements to be split.
Output:
INTEGER num_nodes_created This value returns the number of nodes created.
INTEGER num_elems_created This value returns the number of elements created.
INTEGER num_nodes_deleted This value returns the number of nodes deleted.
INTEGER num_elems_deleted This value returns the number of elements deleted.
STRING nodes_created[VIRTUAL]
This value returns a description of the created nodes.
STRING elements_created[VIRTUAL]
This value returns a description of the created elements.
STRING nodes_deleted[VIRTUAL]
This value returns a description of the deleted nodes.
STRING elements_deleted[VIRTUAL]
This value returns a description of the deleted elements
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_mod_quad_split(pattern,auto_manual,element_select,orientation_node,orientation_element,num_nodes_created,num_elems_created,num_nodes_deleted,num_elems_deleted,nodes_created,elements_created,nodes_deleted,elements_deleted)
##########
Description:
This function will split quadrilateral elements in a specified pattern using a selection of elements and nodes as input.
Input:
STRING pattern[] This value specifies the pattern into which the quadrilateral elements will be split. See the remarks below for more information.
STRING auto_manual[] This value specifies,when set to “Manual”,that the number of entities in the input values orientation_node and orientation_element be counted. The number of entities in the input value orientation_node will be counted when the input value pattern is set “2_tria” or “3_quad”. The number of entities in the input value orientation_element will be counted when the input value pattern is set to “2_quad” pr “3_tria”. This value can accept two values,“Auto” or “Manual”.
STRING element_select[] This value specifies a selection of quadrilateral elements to be split.
STRING orientation_node[] This value specifies a selection of nodes that are used to specify the orientation of the nodes in the elements to be split.
STRING orientation_element[] This value specifies a selection of element edges that are used to specify the orientation of the elements to be split.
Output:
INTEGER num_nodes_created This value returns the number of nodes created.
INTEGER num_elems_created This value returns the number of elements created.
INTEGER num_nodes_deleted This value returns the number of nodes deleted.
INTEGER num_elems_deleted This value returns the number of elements deleted.
STRING nodes_created[VIRTUAL]
This value returns a description of the created nodes.
STRING elements_created[VIRTUAL]
This value returns a description of the created elements.
STRING nodes_deleted[VIRTUAL]
This value returns a description of the deleted nodes.
STRING elements_deleted[VIRTUAL]
This value returns a description of the deleted elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
improve_mesh_2(input_data_qtt,ac_input_data,mesh_is_acceptable,worst_tet_iter_info,elem_qual_val_min_old,elem_qual_val_min_new,elem_improved_qtt,reason_why_not)
##########
Description:
This function allows users to improve a Tet mesh for Jacobian values.
Input:
INTEGER input_data_qtt This value specifies the quantity of input data strings in ac_input_data.
STRING[]()ac_input_data This value specifies the input data items. The format for each data item is : IDENTIFIER=VALUE. For more information on each of these items,see the description below where the string is found and its value passed to a distinct variable.
Output:
LOGICAL mesh_is_acceptable This value will be set to TRUE if the mesh is acceptable; FALSE if otherwise.
INTEGER worst_tet_iter_info This value returns the information on the number of iterations performed. Possible values : Positive (Good): The quantity of iterations performed before running out of elements which could be fixed. Negative (Bad): The quantity of iterations performed before an interruption occurred. One may re-submit this function in the later case.
REAL elem_qual_val_min_old Old (before mesh improvements)minimum normalized global element quality found in the mesh.
REAL elem_qual_val_min_new New (after mesh improvements)minimum normalized global element quality found in the mesh.
INTEGER elem_improved_qtt This value returns the quantity of elements which were not acceptable,and which were improved. Note that this may include new elements which were not in the original mesh,as multiple passes are performed on the mesh.
STRING [VIRTUAL] reason_why_not This value indicates the reason why a mesh improvement could not be attempted: Null string: A mesh enhancement was attempted. String length greater than 0: Reason why a mesh enhancement could not be attempted.
INTEGER <Return Value> This function returns a value of 0 if no error occurred.
---------------
modify_mesh_seed(curve_list,input_option,num_elem,ratio,length1,length2)
##########
Description:
This function allows users to modify the mesh seed on a curve from type to another. For example,a one way bias seeded edge can be converted to tabular. Users can modify seed on only one curve at a time.
Input:
STRING curve_list[VIRTUAL] This value specifies a list of curves or edges on which mesh seeds need to be modified.
INTEGER input_option This value specifies the input option. Valid values are: 1 = uniform mesh seed with num_elem inputs,3 = one-way-biased mesh seed with num_elem and ratio inputs,and 5 = two-way-biased mesh seed with num_elem and ratio inputs.
INTEGER num_elem This value specifies the number of elements for the curve.
REAL ratio This value specifies the ratio between the last element and the first. (length2/length1)
REAL length1 This value specifies the length of the first element.
REAL length2 This value specifies the length of the last element.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
modify_mesh_seed_tabular(curve_list,coord_type,num_nodes,node_locs,point_list)
##########
Description:
This function will delete elements from the database and the graphics window.
Input:
STRING curve_list[VIRTUAL] This value specifies a list of curves or edges on which mesh seeds need modified.
STRING coord_type[VIRTUAL] This value specifies the coordinate type. Valid values are: ``Arc Length’’ and``Parametric’’.
INTEGER num_nodes This value specifies the number of nodes in the table. (including 0.0 and 1.0)
REAL node_locs(VIRTUAL)This value specifies the node location values. (should be in [0.0,1.0])
STRING point_list[VIRTUAL] This value specifies the list of point locations.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
refine_mesh_1(node_lp_str,edge_length_max,consider_geometry,reason_why_not)
##########
Description:
This function will split all element edges which are longer than a specified value using the specified node vertices.
Input:
STRING node_lp_str This value specifies a list processor string identifying nodes used as element edge vertices. This string is used to identify valid element edges to be considered for splitting.
REAL edge_length_max This value specifies,when positive,the desired maximum edge length. A negative value will be used to specify a fraction and can have a value between 0.0 and 0.1. The absolute value of the negative input will be used to take the fraction of the longest element edge using node vertices amongst the supplied nodes.
INTEGER consider_geometry This value when set to one will specify the consideration of geometry. New nodes will be projected and associated with the appropriate geometry. New elements will be associated to geometry. When this value is set to zero,geometry will be ignored.
Output:
REAL edge_length_max This value will return the maximum edge length used to split element edges.
STRING reason_why_not[VIRTUAL]
This value will return an empty string if the function completes normally. Otherwise if the function fails this string will specify the reason the operation could not be completed.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function may return a nonzero value if an error occurs.
---------------
split_2n_edge_for_all_elm(node_a_id,node_b_id,param_pos,consider_geometry,reason_why_not)
##########
Description:
This function will split an element edge for all Tet/Tri/Bar elements using it.
Input:
INTEGER node_a_id This value specifies the Patran first edge vertex node id.
INTEGER node_b_id This value specifies the Patran second edge vertex node id.
REAL param_pos This value specifies the parametric position for split. Values range from 0.0(1st node)to 1.0(2nd node).
INTEGER consider_geometry This value specifies the options : 1 (TRUE)if you wish to consider geometry; 0 (FALSE)otherwise.
STRING [VIRTUAL] reason_why_not This value specifies the virtual string containing : "" for this string if the edge was split. Otherwise (string length greater than 0),this string holds the reason why it could not be split.
Output:
INTEGER <Return Value> This function returns a value of 0 if no error occurred.
---------------
split_3n_face_for_all_elm(node_a_id,node_b_id,node_c_id,a_area_coors,consider_geometry,reason_why_not)
##########
Description:
This function will split an element triangular face for all Tet/Tri elements using it.
Input:
INTEGER node_a_id This value specifies the Patran first triangular face vertex node id.
INTEGER node_b_id This value specifies the Patran second triangular face vertex node id.
INTEGER node_c_id This value specifies the Patran third triangular face vertex node id.
REAL a_area_coors This value specifies the area coordinate parametric position. Values range from 0.0 to 1.0. The sum of the 3 is equal to 1. The coordinates are normally called L1/L2/L3,where each value is equal to the smaller triangle area formed by the mid point and the triangle edge opposite of the corner,divided by the area of the whole triangle.
INTEGER consider_geometry This value specifies the options : 1 (TRUE)if we wish to consider geometry; 0 (FALSE)otherwise.
STRING [VIRTUAL] reason_why_not This value specifies the virtual string containing : "" for this string if the edge was split. Otherwise (string length greater than 0)this string holds the reason why we could not split it.
Output:
INTEGER <Return Value> This function returns a value of 0 if no error occurred.
---------------
str_from_real_signif_digit(value_real,significant_digit_qtt,digits_before_decimal_qtt_max,leading_0_after_decimal_qtt_max,accept_non_0_int_simplification,c_value_real)
##########
Description:
This function will split an element edge for all Tet/Tri/Bar elements using it.
Input:
REAL value_real This value specifies the numerical value.
INTEGER significant_digit_qtt This value specifies the quantity of significant digits (must be equal or greater to 1). 4 is typical.
INTEGER digits_before_decimal_qtt_max
This value specifies the maximum number of digits before the decimal point. 5 is typical.
INTEGER leading_0_after_decimal_qtt_max
This value specifies the maximum number of "0" after the decimal point before the 1st significant digit. 3 is typical
INTEGER accept_non_0_int_simplification
This value specifies the options (0 is typical): 1 (TRUE)Case where we wish to consider an integer notation for non-zero values that could be expressed in a floating point notation. This simplification will only occur if the value is exactly equal to its rounded integer value. Note : Be aware that this kind of output may easily vary according to the precision of the numerical value. 0 (FALSE)otherwise. This is recommended for the stability of the output string values.
Output:
STRING [64 ] c_value_real This value returns the string of characters representing the numerical value.
INTEGER <Return Value> This function returns a value of 0 if no error occurred.
##########
Description:
Display element coordinate systems of selected element.
Input:
INTEGER segment_id Graphic segment ID
STRING c_elem_lp_st[] List processor string with list of elements
INTEGER a_axis_show(3)For each element direction (X/Y/Z): 0 (FALSE): Do not plot this axis. 1 (TRUE): Plot this axis.
INTEGER a_axis_label_show(3)For each element direction (X/Y/Z): 0 (FALSE): Do not show axis label. 1 (TRUE): Show axis label.
INTEGER a_axis_color(3): For each element direction (X/Y/Z): Color id (0-15)
INTEGER cs_def_type Element coordinate system definition :1 : Patran2 : MSC Nastran3 : MSC.Marc
INTEGER cs_origin_display_loc element coordinate system origin display location :1 : Patran definition of element centroid2 : Selected analysis code element coordinate system definition (cs_def_type)location.
INTEGER use_offset_1d_elem 0 : (FALSE)Do not consider 1d element (beam)offset for CS display1 : (TRUE)Consider 1d element (beam)offset for CS display
Output:
INTEGER <Return Value> Element coordinate system ploted on the selected elements.
---------------
display_freebody_data3(ufb_method,uresult_title,usubcase_title,usubcase_id,uresult_type,dummy1,usummation_pt,dummy2,utransform_on,ucoord_sys,dummy3,uelement_list,uvector,ucomponent,utoggles,ucolors,dummya,uplanar,uplane,dummy4,uscale_on,uscale,dummy10,ustyle_on,uanchorStyle,uheadScale,dummy5,uzero_on,utolerance,dummy6,ulabel_on,uformat_type,usig_digits,dummy7,utitle_on,utitle_color,utitles,dummy8,uprint_on,dummy9,ucontributions_on,dummyb,uprint_report,uappend_report,ureport_name)
##########
Description:
This function displays freebody data.
Input:
STRING ufb_method[] Choices are: Freebody Loads,Interface Loads,Forced Displacements.
STRING uresult_title[] Name of the selected Result Case.
STRING usubcase_title[] Title of the selected Result Case.
INTEGER usubcase_id ID of the selected Result Case.
STRING uresult_type[] Choices are: Freebody Loads,Applied Laods,Constraint Forces,Internal Forces,Summation of Forces,Displacements.
STRING dummy1[] Set to "Summation Point".
STRING usummation_pt[] Summation point coordinates input as "[x y z]" values: Example: "[0 0 0]".
STRING dummy2[] Set to "Transform Results".
LOGICAL utransform_on TRUE to transform results to different coordinate system,FALSE otherwise.
STRING ucoord_sys[] Cooridnate system to transform results.
STRING dummy3[] Set to "Entity List".
STRING uelement_list[] List of entities in list processor format. Example "Node,1:10 Elm,1:10".
STRING uvector[] Choices are: Force,Moment,Force/Moment.
STRING ucomponent[] Choices are: Component or Resultant.
LOGICAL utoggles()For Component,logical array of three or six for display of FX,FY,FZ,MX,MY,MZ. For Resultant,logical array of one of two for display of Force and/or Moment.
INTEGER ucolors()Integer array corresponding to utoggles for color ID of display arrows.
STRING dummya[] Set to "Planar Data".
LOGICAL uplanar TRUE if planar data,otherwise FALSE for 3D data.
STRING uplane[] Choices are XY Plane,YZ Plane,or ZX Plane if uplanar is TRUE.
STRING dummy4[] Set to "Scale Results".
LOGICAL uscale_on TRUE if result to be scaled,FALSE otherwise.
REAL uscale Scale Factor for scaling results.
STRING dummy10[] Set to "Vector Style".
LOGICAL ustyle_on TRUE if vector GUI displayed - has no effect on freebody plot.
STRING uanchorStyle[] Set to "Head" or "Tail" to define vector anchor.
REAL uheadScale Size of vector head.
STRING dummy5[] Set to "Zero Tolerance".
LOGICAL uzero_on TRUE if Zero Tolerance GUI displayed - has no effect on freebody plot.
REAL utolerance Zero tolerance for plotting freebody vectors - vector will not be plotted if below this tolerance.
STRING dummy6[] Set to "Display Value".
LOGICAL ulabel_on TRUE if Dispay Value GUI dislayed - has no effect on freebody plot.
STRING uformat_type[] Choices are "Fixed" or "Exponential" for vector label display.
INTEGER usig_digits Number of significant digits for vector label display.
STRING dummy7[] Set to "Display Title".
LOGICAL utitle_on TRUE if Display Title GUI displayed - has no effet on freebody plot.
INTEGER utitle_color Color ID of title.
STRING utitles[]()String array of three items. First item is freebody title. Second item is the font size - choice are: "8 Pts","10 Pts","12 Pts","14 Pts". Third item is title location - choices are: "Upper Left","Lower Left".
STRING dummy8[] Set to "Automatic Print".
LOGICAL uprint_on TRUE if automatic print ON,FALSE otherwise.
STRING dummy9[] Set to "Free Edges Only".
LOGICAL ucontributions_on TRUE to plot vectors on free edges only,FALSE otherwise.
STRING dummyb[] Set to "Print Report".
LOGICAL uprint_report TRUE to print text report,FALSE otherwise.
LOGICAL uappend_report TRUE to append to existing report,FALSE otherwise.
STRING ureport_name[] Report file name - not functional - all reports written to n_freebody_data.dat where n is the plot number.
---------------
flds_calc_fringe_value(threshold,swtch_val,dbox1_val,dbox2_val,grp_name,min_val,max_val,table_id)
##########
Description:
This function calculates the fringe value for each QUAD in the current group.
Input:
REAL threshold The comparison value to indicate element has failed. Threshold is a lower limit.
STRING swtch_val The value of the switch that determines which equation is to be used in calculating the Boxes/Wavelength. (“Dimensional (v and f)” or “Nondimensional (c and k)”)
REAL dbox1_val The Minimum Velocity or the Reference Length depending on what the value of swtch_val
REAL dbox2_val The Maximum Cyclic Frequency or the Maximum Reduced Frequency depending on what the value of swtch_val
Output:
STRING grp_name Current group label
REAL min_val Minimum fringe factor for QUADS tested
REAL max_val Maximum fringe factor for QUADS tested
INTEGER table_id ID of scalar element fringe results table
INTEGER <Return Value> 0 = Success; otherwise a problem was encountered
---------------
flds_delete_element(element_name,delete_geom)
##########
Description:
This function deletes the Aero element and all its associated entities. This action includes the deletion of the property set and the associated group containing the nodes and boxes/beams,geometries,and removes the nodes and boxes/beams. If specified by the user,the surface/curve and the points used to create the Aero element are also deleted. Moreover,the Splines,Control Devices and Fields are deleted if their respective application regions are emptied due to the Aero element deletion.
Input:
STRING element_name This value specifies the name of the element to be deleted.
LOGICAL delete_geom TRUE if the associated geometries are to be deleted; FALSE otherwise.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1 This is am internal status condition. There is no corresponding status message in the message database.
-1 This is am internal status condition. There is no corresponding status message in the message database.
---------------
flds_gnrl_cntrl_cre(device_name,units_label,super_group_name)
##########
Description:
This function creates the General Contols control device
Input:
STRING device_name Name of the General Controller
STRING units_label Units label for the General Controller
STRING super_group_name Name of the current SuperGroup
Output:
INTEGER <Return Value> 0 = Success; otherwise there is a problem
---------------
flds_gnrl_cntrl_mod(device_name,units_label,super_group_name)
##########
Description:
This function modifies the specified General Controls control device.
Input:
STRING device_name Name of the General Controller
STRING units_label Units label for the General Controller
STRING super_group_name Name of the current SuperGroup
Output:
INTEGER <Return Value> 0 = Success; otherwise there is a problem
---------------
flds_lbc_delete(num_names,name_array)
##########
Description:
This function deletes the Aero LBC from the database.
Input:
INTEGER num_names This value specifies the number of selected LBCs.
STRING name_array()This value specifies the array of selected LBC names to be deleted.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is am internal status condition. There is no corresponding status message in the message database.
---------------
flds_mod_mng_sup_grp_cre(sg_name,sg_type,num_sel_grps,sel_gnames,mk_cur_flag)
##########
Description:
This function checks the validity of the entered SuperGroup Name,to create it,to associate the appropriate Aero Groups to it,and to make it current if need be.
Input:
STRING sg_name This value specifies the name of the SuperGroup to create.
STRING sg_type This value specifies the type of the SuperGroup. (FLAT_PLATE or THREED)
INTEGER num_sel_grps This value specifies the number of Aero Groups selected.
STRING sel_gnames()This value specifies the array listing the selected Aero Group Names.
LOGICAL mk_cur_flag TRUE if the SuperGroup is to be made current; FALSE otherwise.
Output:
None.
---------------
flds_mod_mng_sup_grp_cur(sg_type,sg_name)
##########
Description:
This function makes the selected SuperGroup current.
Input:
STRING sg_type This value specifies the type of the SuperGroup to make current. (FLAT_PLATE or THREED)
STRING sg_name This value specifies the name of the SuperGroup to make current.
Output:
None.
---------------
flds_mod_mng_sup_grp_del(sg_type,num_sel_sgrps,sg_names)
##########
Description:
This function deletes the list of given SuperGroup names.
Input:
STRING sg_type This value specifies the type of the SuperGroup to delete. (FLAT_PLATE or THREED)
INTEGER num_sel_sgrps This value specifies the number of SuperGroups selected.
STRING sg_names()This value specifies the array listing the selected SuperGroup Names.
Output:
None.
---------------
flds_mod_mng_sup_grp_mod(sg_name,new_sg_name,sg_type,num_sel_grps,sel_gnames)
##########
Description:
This function checks the validity of the entered SuperGroup Name,modifies the selected SuperGroup and reassociates the appropriate Aero Groups to it.
Input:
STRING sg_name This value specifies the name of the SuperGroup to modify.
STRING new_sg_name This value specifies the new name of the SuperGroup to be used if different than sg_name
STRING sg_type This value specifies the type of the SuperGroup. (FLAT_PLATE or THREED)
INTEGER num_sel_grps This value specifies the number of Aero Groups selected.
STRING sel_gnames()This value specifies the array listing the selected Aero Group Names.
Output:
None.
---------------
flds_mod_mng_sup_grp_rbld(num_entities,entity_names,num_aero_grps,aero_grps,crnt_sgrp_name)
##########
Description:
This function rebuilds all the Aero Groups and the SuperGroups.
Input:
INTEGER num_entities This value specifies the number of selected Lifting Surface/Body names.
STRING entity_names()This value specifies the array listing the selected Lifting Surface/Body names.
INTEGER num_aero_grps This value specifies the number of existing Aero Groups.
STRING aero_grps()This value specifies the array listing the Aero Group Names.
STRING crnt_sgrp_name This value specifies the name of the current SuperGroup to which the selected Lifting Surface/Body names are to be assigned. This value is left blank if they are not to be assigned to the current SuperGroup.
Output:
None.
---------------
flds_monitor_pts_cre(aero_or_struct,monitor_name,monitor_pt_label,num_box,box_id_array,coord_label,monitor_comp)
##########
Description:
This function creates the monitor points.
Input:
INTEGER aero_or_struct 1 = Aero; 2 = Structural
STRING monitor_name Name of the monitor point
STRING monitor_pt_label Monitor point label
INTEGER num_box Number of box id’s specified in box_id_array
INTEGER box_id_array()The array of areodynamic boxes/elements making up the nonlinear control surface component
INTEGER coord_label The label of the rectangular coordinate system
INTEGER monitor_comp(6)The monitor components
Output:
INTEGER <Return Value> 0 = Success; otherwise there is a problem
---------------
flds_monitor_pts_get(monitor_name,monitor_pt_label,num_elem,app_reg_ent,coordinate_id,monitor_comp)
##########
Description:
This function gets the data for the specified Monitor Point.
Input:
STRING monitor_name Name of the monitor point to get
Output:
STRING monitor_pt_label The monitor point label
INTEGER num_elem The number of boxes/elements in the application region
INTEGER app_reg_ent()The array of box/element ids making up the nonlinear control surface component
INTEGER coordinate_id The label of the rectangular coordinate system
INTEGER monitor_comp(6)The monitor components
INTEGER <Return Value> 0 = Success; otherwise there is a problem
---------------
flds_monitor_pts_mod(aero_or_struct,monitor_name,monitor_pt_label,num_box,box_id_array,coord_label,monitor_comp)
##########
Description:
This function modifies the specified monitor point.
Input:
INTEGER aero_or_struct 1 = Aero; 2 = Structural
STRING monitor_name Name of the monitor point to modify
STRING monitor_pt_label Monitor point label
INTEGER num_box Number of box id’s specified in box_id_array
INTEGER box_id_array()The array of areodynamic boxes/elements making up the nonlinear control surface component
INTEGER coord_label The label of the rectangular coordinate system
INTEGER monitor_comp(6)The monitor components
Output:
INTEGER <Return Value> 0 = Success; otherwise there is a problem
---------------
flds_nonlnr_cntrl_srf_cre(device_name,coord_label,num_box,box_id_array,effectiveness,ref_chord_len,ref_area,upper_def_limit,lower_def_limit,is_up_mom_defined,upper_mom_limit,is_lo_mom_defined,lower_mom_limit,up_def_limit_field,low_def_limit_field,cntrl_param_unit,super_group_name)
##########
Description:
This function creates the Nonlinear Control Surface control device.
Input:
STRING device_name This value specifies the name of the Nonlinear Control Surface.
INTEGER coord_label This value specifies the label of the rectangular coordinate with y-axis defining the hinge line of the control surface component.
INTEGER num_box This value specifies the number of box id’s specified in the box_id_array
INTEGER box_id_array()This value specifies the array of aerodynamic boxes/elements making up the control surface component.
REAL effectiveness This value specifies the Control Device effectiveness.
REAL ref_chord_len This value specifies the reference chord length.
REAL ref_area This value specifies the reference area for the Control Device.
REAL upper_def_limit This value specifies the upper deflection limit (Radians).
REAL lower_def_limit This value specifies the lower deflection limit (Radians).
LOGICAL is_up_mom_defined TRUE: if the upper moment is defined; FALSE otherwise.
REAL upper_mom_limit This value specifies the upper hinge moment limit.
LOGICAL is_lo_mom_defined TRUE: if the lower moment is defined; FALSE otherwise.
REAL lower_mom_limit This value specifies the lower hinge moment limit.
STRING up_def_limit_field This value specifies the Field name containing the upper deflection limits vs. Dynamic pressure. If up_def_limit_fieldupper_def_limit
STRING low_def_limit_field This value specifies the Field name containing the lower deflection limits vs. Dynamic Pressure. If low_def_limit_fieldlower_def_limit
STRING cntrl_param_unit “Degrees” or “Rads”
STRING super_group_name Current SuperGroup name
Output:
INTEGER <Return Value> 0 = Success; otherwise there is a problem
---------------
flds_nonlnr_cntrl_srf_mod(device_name,new_dev_name,coord_label,num_box,box_id_array,effectiveness,ref_chord_len,ref_area,upper_def_limit,lower_def_limit,is_up_mom_defined,upper_mom_limit,is_lo_mom_defined,lower_mom_limit,up_def_limit_field,low_def_limit_field,cntrl_param_unit,super_group_name)
##########
Description:
This function modifies the specified Nonlinear Control Surface control device.
Input:
STRING device_name This value specifies the old name of the Nonlinear Control Surface.
STRING new_dev_name This value specifies the new name of the Nonlinear Control Surface.
INTEGER coord_label This value specifies the label of the rectangular coordinate with y-axis defining the hinge line of the control surface component.
INTEGER num_box This value specifies the number of box id’s specified in the box_id_array
INTEGER box_id_array()This value specifies the array of aerodynamic boxes/elements making up the control surface component.
REAL effectiveness This value specifies the Control Device effectiveness.
REAL ref_chord_len This value specifies the reference chord length.
REAL ref_area This value specifies the reference area for the Control Device.
REAL upper_def_limit This value specifies the upper deflection limit (Radians).
REAL lower_def_limit This value specifies the lower deflection limit (Radians).
LOGICAL is_up_mom_defined TRUE: if the upper moment is defined; FALSE otherwise.
REAL upper_mom_limit This value specifies the upper hinge moment limit.
LOGICAL is_lo_mom_defined TRUE: if the lower moment is defined; FALSE otherwise.
REAL lower_mom_limit This value specifies the lower hinge moment limit.
STRING up_def_limit_field This value specifies the Field name containing the upper deflection limits vs. Dynamic pressure. If up_def_limit_fieldupper_def_limit
STRING low_def_limit_field This value specifies the Field name containing the lower deflection limits vs. Dynamic Pressure. If low_def_limit_fieldlower_def_limit
STRING cntrl_param_unit “Degrees” or “Rads”
STRING super_group_name Current SuperGroup name
Output:
INTEGER <Return Value> 0 = Success; otherwise there is a problem
---------------
flds_rigid_bdy_mot_cntrl_cre(rbm_type,rbm_status,super_group_name)
##########
Description:
This function creates the Rigid Body Motion control device.
Input:
STRING rbm_type “ANGLEA”,“SIDES”,“ROLL”,“PITCH”,or “YAW”
STRING rbm_status “Linear”,“Nonlinear”,or “Do Not Create”
STRING super_group_name Name of the current SuperGroup. This is the SuperGroup the rigid body motion will be associated with.
Output:
INTEGER <Return Value> 0 = Success; otherwise there is a problem
---------------
flds_rigid_bdy_mot_cntrl_mod(rbm_type,rbm_status,super_group_name)
##########
Description:
This function modifies the specified Rigid Body Motion control device.
Input:
STRING rbm_type “ANGLEA”,“SIDES”,“ROLL”,“PITCH”,or “YAW”
STRING rbm_status “Linear”,“Nonlinear”,or “Do Not Create”
STRING super_group_name Name of the current SuperGroup. This is the SuperGroup the rigid body motion will be associated with.
Output:
INTEGER <Return Value> 0 = Success; otherwise there is a problem
---------------
flds_rigid_body_mod_cntrl_get(rbm_type,super_group_name,rbm_status)
##########
Description:
This function gets the status of the specified Rigid Body Motion in the specified SuperGroup.
Input:
STRING rbm_type Name of the specified Rigid Body Motion (“ANGLEA”,“SIDES”,“ROLL”,“PITCH”,or “YAW”)
STRING super_group_name Name of the current SuperGroup
Output:
STRING rbm_status “Linear”,“Nonlinear”,or “Do Not Create”
INTEGER <Return Value> 0 = Success; otherwise there is a problem
---------------
flat_plate_body_create(body_name,body_orient,xyz1,x12,starting_elem_id,interference_id,coordinate_id,num_slender,slender_array,num_interf,interf_array,half_width_array,interf_half_width,interf_aspect_ratio,num_interf_theta,interf_theta_array,keep_geom,exist_curve_name,aero_coord_id)
##########
Description:
This function creates the flat plate Aero body given the information available on a CAERO2 card,and the coordinates of the point X1 and the body length.
Input:
STRING body_name This value specifies the user defined name of the body.
STRING body_orient This value specifies the orientation. (Z_BODY,Y_BODY,ZY_BODY)
REAL xyz1 This value specifies the coordinates of the X1 point.
REAL x12 This value specifies the length of the body.
INTEGER starting_elem_id This value specifies the starting element ID.
INTEGER interference_id This value specifies the interference group ID.
INTEGER coordinate_id This value specifies the reference coordinate ID.
INTEGER num_slender This value specifies the number of seeds for slender body.
REAL slender_array This value specifies the seed array for slender body.
INTEGER num_interf This value specifies the number of seeds for interference body.
REAL interf_array This value specifies the seed array for interference body.
REAL half_width_array This value specifies the slender body half width distribution.
REAL interf_half_width This value specifies the interference body half width value.
REAL interf_aspect_ratio This value specifies the interference body aspect ratio.
INTEGER num_interf_theta This value specifies the number of interference body theta values.
REAL interf_theta_array This value specifies the interference body theta distribution.
LOGICAL keep_geom TRUE if the curve/points are to be kept; FALSE otherwise.
STRING exist_curve_name This value specifies the name of an existing curve("" if not used).
INTEGER aero_coord_id This value specifies the label of the Aero coordinate system.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
6026016 The group already exists in the database.
1 This is am internal status condition. There is no corresponding status message in the message database.
---------------
flat_plate_body_modify(body_name,starting_elem_id,interf_group_id,coordinate_id,num_slender,slender_mesh,num_interf,interf_mesh,slender_half_width,num_theta,interf_body_theta,interf_half_width,interf_aspect_ratio,new_body_name,aero_coord_id)
##########
Description:
This function modifies the specified flat plate body with the updated property/mesh values. The group is updated with the new elements and nodes if necessary.
Input:
STRING body_name This value specifies the user defined name of the body.
INTEGER starting_elem_id This value specifies the starting element ID.
INTEGER interf_group_id This value specifies the interference group ID.
INTEGER coordinate_id This value specifies the reference coordinate system ID for X1.
INTEGER num_slender This value specifies the number of slender mesh seeds.
REAL slender_mesh()This value specifies the array of mesh seed distribution for the slender body.
INTEGER num_interf This value specifies the number of interference mesh seeds.
REAL interf_mesh()This value specifies the array of mesh seed distribution for the interference body.
REAL slender_half_width()This value specifies the array of slender body half width distribution.
INTEGER num_theta This value specifies the number of theta values.
REAL interf_body_theta()This value specifies the array of interference body theta distribution.
REAL interf_half_width This value specifies the interference body half width value.
REAL interf_aspect_ratio This value specifies the interference body aspect ratio.
STRING new_body_name This value specifies the new name of the body.
INTEGER aero_coord_id This value specifies the ID of the Aero Coordinate System.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1 This is am internal status condition. There is no corresponding status message in the message database.
---------------
flat_plate_cntrl_dev_create(device_name,device_type,coord_label,num_box,box_id_array,effectiveness,ref_chord_len,ref_area,upper_def_limit,lower_def_limit,is_up_mom_defined,upper_mom_limit,is_lo_mom_defined,lower_mom_limit,up_def_limit_field,low_def_limit_field)
##########
Description:
This function creates a Linear Control Surface control device given the information available on an AESURF/AELIST cards.
Input:
STRING device_name This value specifies the name of the Control Device.
INTEGER device_type This value specifies the type. (1=SURFACE,2=GIMBLE,3=THRUST,4=GENERAL)
INTEGER coord_label This value specifies the label of the rectangular coordinate with y-axis defining the hinge line of the control surface component.
INTEGER num_box This value specifies the number of box id’s specified in the box_id_array
INTEGER box_id_array()This value specifies the array of aerodynamic boxes/elements making up the control surface component.
REAL effectiveness This value specifies the Control Device effectiveness.
REAL ref_chord_len This value specifies the reference chord length.
REAL ref_area This value specifies the reference area for the Control Device.
REAL upper_def_limit This value specifies the upper deflection limit (Radians).
REAL lower_def_limit This value specifies the lower deflection limit (Radians).
LOGICAL is_up_mom_defined TRUE: if the upper moment is defined; FALSE otherwise.
REAL upper_mom_limit This value specifies the upper hinge moment limit.
LOGICAL is_lo_mom_defined TRUE: if the lower moment is defined; FALSE otherwise.
REAL lower_mom_limit This value specifies the lower hinge moment limit.
STRING up_def_limit_field This value specifies the Field name containing the upper deflection limits vs. Dynamic pressure. If up_def_limit_fieldupper_def_limit
STRING low_def_limit_field This value specifies the Field name containing the lower deflection limits vs. Dynamic Pressure. If low_def_limit_fieldlower_def_limit
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1 This is am internal status condition. There is no corresponding status message in the message database.
---------------
flat_plate_cntrl_dev_modify(device_name,new_device_name,device_type,coord_label,num_box,box_id_array,effectiveness,ref_chord_len,ref_area,upper_def_limit,lower_def_limit,is_up_mom_defined,upper_mom_limit,is_lo_mom_defined,lower_mom_limit,up_def_limit_field,low_def_limit_field)
##########
Description:
This function modifies the specified Linear Control Surface.
Input:
STRING device_name This value specifies the name of the Control Device.
STRING new_device_name This value specifies the new name of the Control Device.
INTEGER device_type This value specifies the type. (1=SURFACE,2=GIMBLE,3=THRUST,4=GENERAL)
INTEGER coord_label This value specifies the label of the rectangular coordinate with y-axis defining the hinge line of the control surface component.
INTEGER num_box This value specifies the number of box id’s specified in the box_id_array
INTEGER box_id_array()This value specifies the array of aerodynamic boxes/elements making up the control surface component.
REAL effectiveness This value specifies the Control Device effectiveness.
REAL ref_chord_len This value specifies the reference chord length.
REAL ref_area This value specifies the reference area for the Control Device.
REAL upper_def_limit This value specifies the upper deflection limit (Radians).
REAL lower_def_limit This value specifies the lower deflection limit (Radians).
LOGICAL is_up_mom_defined TRUE: if the upper moment is defined; FALSE otherwise.
REAL upper_mom_limit This value specifies the upper hinge moment limit.
LOGICAL is_lo_mom_defined TRUE: if the lower moment is defined; FALSE otherwise.
REAL lower_mom_limit This value specifies the lower hinge moment limit.
STRING up_def_limit_field This value specifies the Field name containing the upper deflection limits vs. Dynamic pressure. If up_def_limit_fieldupper_def_limit
STRING low_def_limit_field This value specifies the Field name containing the lower deflection limits vs. Dynamic Pressure. If low_def_limit_fieldlower_def_limit
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1 This is am internal status condition. There is no corresponding status message in the message database.
---------------
flat_plate_surf_create(surf_name,xyz1,xyz4,x12,x43,starting_elem_id,interference_id,coordinate_id,body_flag,num_bodies,body_name_array,num_span,num_chord,span_array,chord_array,keep_geom,exist_surf_name,aero_coord_id,auto_connect)
##########
Description:
This function creates the flat plate surface given the information available on a CAERO card,and the coordinates of the points X1,X4,and the chord lengths X12 and X43.
Input:
STRING surf_name This value specifies the user defined name of the surface.
REAL xyz1()This value specifies the coordinates of Point 1 in coordinate_id
REAL xyz4()This value specifies the coordinates of Point 4 in coordinate_id
REAL x12 This value specifies the X12 edge chord length in the Aerodynamic coordinate system.
REAL x43 This value specifies the X43 edge chord length in the Aerodynamic coordinate system.
INTEGER starting_elem_id This value specifies the starting element ID
INTEGER interference_id This value specifies the interference ID.
INTEGER coordinate_id This value specifies the reference coordinate system ID for X1 and X4.
STRING body_flag This value specifies the body flag. ("None","All","All IGID","Select")
INTEGER num_bodies This value specifies the number of bodies.
STRING body_name_array()This value specifies the array of body names. (Only used if the body_flag
INTEGER num_span This value specifies the number of seeds in span direction.
INTEGER num_chord This value specifies the number of seeds in chord direction.
REAL span_array()This value specifies the seed array in the span direction.
REAL chord_array()This value specifies the seed array in the chord direction.
LOGICAL keep_geom TRUE: if the surface/points are to be kept; FALSE otherwise.
STRING exist_surf_name This value specifies the name of an existing surface ("" if not used)
INTEGER aero_coord_id This value specifies the Aero coordinate system id.
LOGICAL auto_connect TRUE if the surface connectivity is to be automatically reset such that Y4 >= Y1. Where Y1 is the Y coordinate of Point 1 in the Aero coordinate system,Y4 is the Y coordinate of Point 4 in the Aero coordinate system following the right hand rule. FALSE if the user defined connection is to be used.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
6026016 The group already exists in the database.
1 This is am internal status condition. There is no corresponding status message in the message database.
---------------
flat_plate_surf_modify(surf_name,starting_elem_id,interference_id,coordinate_id,body_flag,num_bodies,body_name_array,num_span,span_array,num_chord,chord_array,new_surf_name,aero_coord_id)
##########
Description:
This function modifies the specified flat plate surface with the updated property/mesh values. The group is updated with the new elements and nodes if necessary.
Input:
STRING surf_name This value specifies the user defined name of the surface.
INTEGER starting_elem_id This value specifies the starting element ID
INTEGER interference_id This value specifies the interference ID.
INTEGER coordinate_id This value specifies the reference coordinate system ID for X1 and X4.
STRING body_flag This value specifies the body flag. ("None","All","All IGID","Select")
INTEGER num_bodies This value specifies the number of bodies.
STRING body_name_array()This value specifies the array of body names. (Only used if the body_flag
INTEGER num_span This value specifies the number of seeds in span direction.
REAL span_array()This value specifies the seed array in the span direction.
INTEGER num_chord This value specifies the number of seeds in chord direction.
REAL chord_array()This value specifies the seed array in the chord direction.
STRING new_surf_name This value specifies the new name of the surface.
INTEGER aero_coord_id This value specifies the Aero coordinate system id.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1 This is am internal status condition. There is no corresponding status message in the message database.
---------------
fem_conn_fastener_verify(method,fmt,diameter,gs,ga,gb,pata,patb)
##########
Description:
This function will verify spot weld connector inputs.
Input:
STRING[] method The connector creation method (Projection or Axis).
STRING[] fmt The fastener format (PROP or ELEM).
REAL diameter The connector diameter.
STRING[] gs List of connector locations (nodes or xyz).
STRING[] ga List of surface A pierce nodes.
STRING[] gb List of surface B pierce nodes.
STRING[] pata List of surface A patch identifiers.
STRING[] patb List of surface B patch identifiers.
Output:
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
MSG_FEM_CONN_ZERO_DIAMMSG_FEM_CONN_GS_OR_GA_REQDMSG_FEM_CONN_ALIGN_GA_GB_REQDMSG_FEM_CONN_PATA_PATB_REQDMSG_FEM_CONN_BAD_POINT_PATCHMSG_FEM_CONN_GS_NODE_ID_REQDMSG_FEM_CONN_PROP_NOT_FOUND
---------------
fem_conn_spotweld_verify(method,fmt,diameter,gs,ga,gb,pata,patb,sptyp)
##########
Description:
This function will verify spot weld connector inputs.
Input:
STRING[] method The connector creation method (Projection or Axis).
STRING[] fmt The weld format (ELPAT,PARTPAT,ALIGN,ELEMID,or GRIDID).
REAL diameter The spot weld diameter.
STRING[] gs List of connector locations (nodes or xyz).
STRING[] ga List of surface A pierce nodes.
STRING[] gb List of surface B pierce nodes.
STRING[] pata List of surface A patch identifiers.
STRING[] patb List of surface B patch identifiers.
STRING[] sptyp Surface patch types (GRIDID format only). Q4Q8 = quad4/quad8,Q4T6 = quad4/tri6,etc.
Output:
INTEGER <Return Value> This function returns a value of 0 if successful.
Error Conditions:
MSG_FEM_CONN_ZERO_DIAMMSG_FEM_CONN_GS_OR_GA_REQDMSG_FEM_CONN_ALIGN_GA_GB_REQDMSG_FEM_CONN_PATA_PATB_REQDMSG_FEM_CONN_BAD_POINT_PATCHMSG_FEM_CONN_GS_NODE_ID_REQDMSG_FEM_CONN_PROP_NOT_FOUND
---------------
fem_verify_display(group_name,table_id,best_value,worst_value,threshold,render_style)
##########
Description:
This function will display a graphics table of the results of an element verification procedure. It will make use of a threshold value to identify elements that have failed.
Input:
STRING group_name[31] This value specifies the label of the group to which the results will be assigned.
INTEGER table_id This value specifies the id for a graphic table that will be assigned to the group specified by the input value group_name.
REAL best_value This value specifies the best value in the graphic table.
REAL worst_value This value specifies the worst value in the graphic table.
REAL threshold This value specifies the threshold for all elements that have failed the verification process. Any entry with a value greater than the threshold value will be shown as an element that has failed.
STRING render_style[31] This value specifies the render style assigned to each element. This value should be set to “ELEMFILL”. See the remarks below for a table of allowed values.
Output:
None.
Error Conditions:
None.
---------------
fem_verify_ids_display(group_name,table_id,minimum_value,maximum_value,render_style)
##########
Description:
This function will display a graphics table of the results of an element verification procedure without the use of a threshold value.
Input:
STRING group_name[31] This value specifies the label of the group to which the results will be assigned.
INTEGER table_id This value specifies the id for a graphic table that will be assigned to the group specified by the input value group_name.
REAL minimum_value This value specifies the minimum value in the graphic table.
REAL maximum_value This value specifies the maximum value in the graphic table.
STRING render_style[31] This value specifies the render style assigned to each element. This value should be set to “ELEMFILL”. See the remarks below for a table of allowed values.
Output:
None.
Error Conditions:
None.
---------------
fem_verify_display.plot(option,table_id,threshold,entities_failed)
##########
Description:
This function will display the entities that have failed an element verification procedure as a high lighted wireframe.
Input:
STRING option[] This value specifies the type of plot to be displayed: “plot_failed” to plot only the elements that have failed the verification process and are members of the current group,or “restore” to restore the original viewport display.
INTEGER table_id This value specifies the id for a graphics table that will be assigned to the current group.
REAL threshold This value specifies the threshold for all elements that will be colored as elements that have failed the verification process.
Output:
STRING entities_failed [VIRTUAL]
This value will return a description of the elements in the current group that have failed the element verification process when the input value option is set to “plot_failed”. If the input value option is not set to “plot_failed” this value will return the initial value set by the calling function.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
fem_verify_draw_normal_vectors(segment_id)
##########
Description:
This function will draw normal vectors on all shell or surface elements in the current group.
Input:
INTEGER segment_id This value specifies the graphics segment id for the graphics segment in which the normal vectors will be drawn.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
fem_verify_el_ids(group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the id values of all of the elements in the current group as scalar results values.
Input:
None.
Output:
STRING group_name[31] This value will return a description of the group to which the id value information has been applied.
REAL minimum_value This value will return the minimum id value.
INTEGER minimum_id This value will return the id of the element with the minimum id value.
REAL maximum_value This value will return the maximum id value.
INTEGER maximum_id This value will return the id of the element with the maximum id value.
INTEGER table_id This value returns the id for the table of element id values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_elem_conect(reverse,entities_failed)
##########
Description:
This function will test solid elements for proper connectivity.
Input:
LOGICAL reverse This value specifies,when set to TRUE,that any elements that are found with a negative volume should be reversed so that the volume is positive. When this value is set to false,elements will be allowed to retain negative volume values.
Output:
STRING entities_failed [VIRTUAL]
This value will return a description of the elements in the current group that have failed the element verification process.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_elem_jacobratio(group_name minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the Jacobian ratio values of all of the elements in the current group.
Input:
None.
Output:
STRING group_name[31] This value will return a description of the group to which the Jacobian ratio information has been applied.
REAL minimum_value This value will return the minimum Jacobian ratio value.
INTEGER minimum_id This value will return the id of the element with the minimum Jacobian ratio value.
REAL maximum_value This value will return the maximum Jacobian ratio value.
INTEGER maximum_id This value will return the id of the element with the maximum Jacobian ratio value.
INTEGER table_id This value returns the id for the table of element Jacobian ratio values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_elem_jacobzero(group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the Jacobian zero values of all of the elements in the current group.
Input:
None.
Output:
STRING group_name[31] This value will return a description of the group to which the Jacobian zero information has been applied.
REAL minimum_value This value will return the minimum Jacobian zero value.
INTEGER minimum_id This value will return the id of the element with the minimum Jacobian zero value.
REAL maximum_value This value will return the maximum Jacobian zero value.
INTEGER maximum_id This value will return the id of the element with the maximum Jacobian zero value.
INTEGER table_id This value returns the id for the table of element Jacobian zero values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_element_duplicates(delete_elements,delete_high,num_duplicates,kept_elements,deleted_elements)
##########
Description:
Check the entire database for duplicate elements and optionally delete them.
Input:
LOGICAL delete_elements This value specifies,when set to TRUE,that any duplicate elements will be deleted. When this value is set to FALSE,duplicate elements will not be deleted.
LOGICAL delete_high This value specifies,when set to TRUE,that the elements with the higher identifier values will be deleted from sets of duplicate elements. If this value is set to FALSE,the duplicate elements with the lower identifier values will be deleted from sets of duplicate elements. Duplicate elements will be deleted only when the input value delete_elements is set to TRUE.
Output:
INTEGER num_duplicates This value returns the number of duplicate elements that where found.
STRING kept_elements[VIRTUAL]
This value returns a description of the elements that where not deleted by the verification process.
STRING deleted_elements[VIRTUAL]
This value returns a description of the elements that where deleted by the verification process.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
fem_verify_element_normals(reverse_elements,color_code,guide_element,group_name,table_id)
##########
Description:
This function will verify the direction of the normal vectors for all shell elements in the current group.
Input:
LOGICAL reverse_elements This value specifies,when set to TRUE,that reversed normals be flipped to match the direction specified by the input value guide_element.
LOGICAL color_code This value specifies,when set to TRUE,that a results table to be used for the element color coding to be created.
STRING guide_element[] This value specifies the id for an element that is used to define the desired normal direction.
Output:
STRING group_name[31] This value will return a description of the group to which the normal vector information has been applied.
INTEGER table_id This value returns the id for the table of element normal vector values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_get_graphset(display_method,group_name,render_style,viewport_name,spectrum_setting)
##########
Description:
This function will retrieve the graphics display settings that can be used to restore the graphics display to its original state.
Input:
None.
Output:
INTEGER display_method This value returns the display method value: 1 = entities,or 2 = groups.
STRING group_name[31] This value returns the name of the current group.
STRING render_style[31] This value returns the render style. See the remarks below for a table of allowed values.
STRING viewport_name[31] This value returns the name of the current viewport.
INTEGER spectrum_setting This value returns TRUE or 1 if the current spectrum settings are posted to the current viewport and FALSE or 0 otherwise.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_hex_all(threshold,num_failures,worst_value,worst_id)
##########
Description:
This function will run all of the verification tests for all hexagonal elements in the current group and highlight any elements that fail the tests.
Input:
REAL threshold(10)This value specifies the threshold comparison value for all of the tests. See the remarks for a description of the use of each offset in this array.
Output:
INTEGER num_failures(10)This value returns the number of elements that have failed a test. See the remarks for a description of the use of each offset in this array.
REAL worst_value(10)This value returns the value for the worst case value of each test. See the remarks for a description of the use of each offset in this array.
INTEGER worst_id(10)This value returns the id for the worst case element of each test. See the remarks for a description of the use of each offset in this array.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_hex_aspect(normalize,threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the aspect ratio values of all of the hexagonal elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the aspect ratio values loaded into the graphic display table are calculated using this formula: 1 - width / length. The standard aspect ratio values are calculated when this value is set to FALSE using this formula: length / width.
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 1.0 E +10.
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum aspect ratio value.
INTEGER minimum_id This value will return the id of the element with the minimum aspect ratio value.
REAL maximum_value This value will return the maximum aspect ratio value.
INTEGER maximum_id This value will return the id of the element with the maximum aspect ratio value.
INTEGER table_id This value returns the id for the table of element aspect ratio values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_hex_edangle(normalize,threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the edge angle values of all of the hexagonal elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the edge angle values loaded into the graphic display table are calculated using this formula: (90.0 - interior angle)/ 90.0. The standard edge angle values are calculated when this value is set to FALSE using this formula: 90.0 - interior angle.
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 120.0.
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum edge angle value.
INTEGER minimum_id This value will return the id of the element with the minimum edge angle value.
REAL maximum_value This value will return the maximum edge angle value.
INTEGER maximum_id This value will return the id of the element with the maximum edge angle value.
INTEGER table_id This value returns the id for the table of element edge angle values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_hex_fskew(normalize,threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the face skew values of all of the hexagonal elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the face skew values loaded into the graphic display table are calculated using this formula: (90.0 - interior angle)/ 90.0. The standard face skew values are calculated when this value is set to FALSE using this formula: 90.0 - interior angle.
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 90.0.
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum face skew value.
INTEGER minimum_id This value will return the id of the element with the minimum face skew value.
REAL maximum_value This value will return the maximum face skew value.
INTEGER maximum_id This value will return the id of the element with the maximum face skew value.
INTEGER table_id This value returns the id for the table of element face skew values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_hex_ftaper(normalize,threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the face taper values of all of the hexagonal elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the face taper values loaded into the graphic display table are calculated using this formula: (90.0 - interior angle)/ 90.0. The standard face taper values are calculated when this value is set to FALSE using this formula: 90.0 - interior angle.
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 2147483600.0.
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum face taper value.
INTEGER minimum_id This value will return the id of the element with the minimum face taper value.
REAL maximum_value This value will return the maximum face taper value.
INTEGER maximum_id This value will return the id of the element with the maximum face taper value.
INTEGER table_id This value returns the id for the table of element face taper values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_hex_fwarp(normalize,threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the face warp values of all of the hexagonal elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the face warp values loaded into the graphic display table are calculated using this formula: (interior angle)/ 15.0. The standard face warp values are calculated when this value is set to FALSE using this formula: interior angle.
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 90.0.
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum face warp value.
INTEGER minimum_id This value will return the id of the element with the minimum face warp value.
REAL maximum_value This value will return the maximum face warp value.
INTEGER maximum_id This value will return the id of the element with the maximum face warp value.
INTEGER table_id This value returns the id for the table of element face warp values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_hex_twist(normalize,threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the twist values of all of the hexagonal elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the twist values loaded into the graphic display table are calculated using this formula: (interior angle)/ 90.0. The standard twist values are calculated when this value is set to FALSE using this formula: interior angle.
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 90.0.
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum twist value.
INTEGER minimum_id This value will return the id of the element with the minimum twist value.
REAL maximum_value This value will return the maximum twist value.
INTEGER maximum_id This value will return the id of the element with the maximum twist value.
INTEGER table_id This value returns the id for the table of element twist values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_midnode_normoff(threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the midnode normal offset values of all of the elements in the current group.
Input:
REAL threshold This value specifies the threshold of failure comparison value. This value must be greater than 0.0 and equal to or less than 1.0.
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum normal offset value.
INTEGER minimum_id This value will return the id of the element with the minimum normal offset value.
REAL maximum_value This value will return the maximum normal offset value.
INTEGER maximum_id This value will return the id of the element with the maximum normal offset value.
INTEGER table_id This value returns the id for the table of normal element offset values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_midnode_tanoff(threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the midnode tangent offset values of all of the elements in the current group.
Input:
REAL threshold This value specifies the threshold of failure comparison value. This value must be greater than 0.0 and equal to or less than 1.0.
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum tangent offset value.
INTEGER minimum_id This value will return the id of the element with the minimum tangent offset value.
REAL maximum_value This value will return the maximum tangent offset value.
INTEGER maximum_id This value will return the id of the element with the maximum tangent offset value.
INTEGER table_id This value returns the id for the table of tangent element offset values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_node_ids(group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the id values of all of the nodes in the current group as scalar results values.
Input:
None.
Output:
STRING group_name[31] This value will return a description of the group to which the id value information has been applied.
REAL minimum_value This value will return the minimum id value.
INTEGER minimum_id This value will return the id of the element with the minimum id value.
REAL maximum_value This value will return the maximum id value.
INTEGER maximum_id This value will return the id of the element with the maximum id value.
INTEGER table_id This value returns the id for the table of element id values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
fem_verify_quad_all(threshold,num_failures,worst_value,worst_id)
##########
Description:
This function will run all of the verification tests for all quadrilateral elements in the current group and highlight any elements that fail the tests.
Input:
REAL threshold(8)This value specifies the threshold comparison value for all of the tests. See the remarks for a description of the use of each offset in this array.
Output:
INTEGER num_failures(8)This value returns the number of elements that have failed a test. See the remarks for a description of the use of each offset in this array.
REAL worst_value(8)This value returns the value for the worst case value of each test. See the remarks for a description of the use of each offset in this array.
INTEGER worst_id(8)This value returns the id for the worst case element of each test. See the remarks for a description of the use of each offset in this array.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_quad_aspect(normalize,threshold,split,group_name,minimum_value,minimum_id,maximum_value,maximum_id,created_elements,created_nodes,table_id)
##########
Description:
This function will load the graphic display tables with the aspect ratio values of all of the quadrilateral elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the aspect ratio values loaded into the graphic display table are calculated using this formula: (1 - (h2 / h1)). The standard aspect ratio values are calculated when this value is set to FALSE using this formula: (h1 / h2).
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 2147483600.0.
LOGICAL split This value specifies,when set to TRUE,that each quadrilateral element that fails the test will be deleted and replaced with two quadrilateral elements that split the original element across its longer dimension.
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum aspect ratio value.
INTEGER minimum_id This value will return the id of the element with the minimum aspect ratio value.
REAL maximum_value This value will return the maximum aspect ratio value.
INTEGER maximum_id This value will return the id of the element with the maximum aspect ratio value.
STRING created_elements[VIRTUAL]
This value returns a description of any elements that have been created by this function.
STRING created_nodes[VIRTUAL]
This value returns a description of any nodes that have been created by this function.
INTEGER table_id This value returns the id for the table of element aspect ratio values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_quad_skew(normalize,threshold,split,group_name,minimum_value,minimum_id,maximum_value,maximum_id,created_elements,created_nodes,table_id)
##########
Description:
This function will load the graphic display tables with the skew angle values of all of the quadrilateral elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the skew angle values loaded into the graphic display table are calculated using this formula: ((90.0 - interior angle)/ 90.0). The standard skew angle values are calculated when this value is set to FALSE using this formula: (90.0 - interior angle).
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 90.0.
LOGICAL split This value specifies,when set to TRUE,that each quadrilateral element that fails the test will be deleted and replaced with two triangular elements that split the original element along its shorter diagonal dimension.
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum skew angle value.
INTEGER minimum_id This value will return the id of the element with the minimum skew angle value.
REAL maximum_value This value will return the maximum skew angle value.
INTEGER maximum_id This value will return the id of the element with the maximum skew angle value.
STRING created_elements[VIRTUAL]
This value returns a description of any elements that have been created by this function.
STRING created_nodes[VIRTUAL]
This value returns a description of any nodes that have been created by this function.
INTEGER table_id This value returns the id for the table of element skew angle values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_quad_taper(normalize,threshold,split,group_name,minimum_value,minimum_id,maximum_value,maximum_id,created_elements,created_nodes,table_id)
##########
Description:
This function will load the graphic display tables with the taper angle values of all of the quadrilateral elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the taper angle values loaded into the graphic display table are calculated using this formula: (1- ((4.0 x interior angle)/ quadrilateral area)). The standard taper angle values are calculated when this value is set to FALSE using this formula: ((4.0 x interior angle)/ quadrilateral area).
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 1.0.
LOGICAL split This value specifies,when set to TRUE,that each quadrilateral element that fails the test will be deleted and replaced with two quadrilateral elements.
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum taper angle value.
INTEGER minimum_id This value will return the id of the element with the minimum taper angle value.
REAL maximum_value This value will return the maximum taper angle value.
INTEGER maximum_id This value will return the id of the element with the maximum taper angle value.
STRING created_elements[VIRTUAL]
This value returns a description of any elements that have been created by this function.
STRING created_nodes[VIRTUAL]
This value returns a description of any nodes that have been created by this function.
INTEGER table_id This value returns the id for the table of element taper angle values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_quad_warp(normalize,threshold,split,group_name,minimum_value,minimum_id,maximum_value,maximum_id,created_elements,created_nodes,table_id)
##########
Description:
This function will load the graphic display tables with the warp angle values of all of the quadrilateral elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the warp angle values loaded into the graphic display table are calculated using this formula: (interior angle / 15.0). The standard warp angle values are calculated when this value is set to FALSE using this formula: (interior angle).
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 90.0.
LOGICAL split This value specifies,when set to TRUE,that each quadrilateral element that fails the test will be deleted and replaced with two triangular elements.
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum warp angle value.
INTEGER minimum_id This value will return the id of the element with the minimum warp angle value.
REAL maximum_value This value will return the maximum warp angle value.
INTEGER maximum_id This value will return the id of the element with the maximum warp angle value.
STRING created_elements[VIRTUAL]
This value returns a description of any elements that have been created by this function.
STRING created_nodes[VIRTUAL]
This value returns a description of any nodes that have been created by this function.
INTEGER table_id This value returns the id for the table of element warp angle values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_reset_graphics(render_style,group_name,spectrum_set,viewport_name)
##########
Description:
This function can be used to reset graphics parameters after the results of a finite element verification operation has been displayed in a viewport.
Input:
STRING render_style[31] This value specifies the original render style. This value will either be applied to the group named in the input value group_name or to all of the entities in the model,depending on the current display method setting. See the remarks below for a table of allowed values.
STRING group_name[31] This value specifies the original group name to which the render style will be applied.
INTEGER spectrum_set This value specifies the original spectrum setting which,if set to TRUE or 1,will indicate that the current spectrum settings are posted to the viewport. This value can be set to FALSE or 0 to indicate that the current spectrum settings are not posted to the viewport.
STRING viewport_name[31] This value specifies the original viewport name to which the input value spectrum_set will be applied.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
fem_verify_tet_all(threshold,num_failures,worst_value,worst_id)
##########
Description:
This function will run all of the verification tests for all tetrahedral elements in the current group and highlight any elements that fail the tests.
Input:
REAL threshold(8)This value specifies the threshold comparison values for all tests.
Output:
INTEGER num_failures(8)This value returns the number of elements failing the tests.
REAL worst_value(8)This value returns the value at which worst case occurred.
INTEGER worst_id(8)This value returns the identifiers for the worst case elements that have failed the tests.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_tet_aspect(normalize,threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the aspect ratio values of all of the tetrahedral elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the aspect ratio values loaded into the graphic display table are calculated using a normalization formula.
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 1.0 E +10.
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum aspect ratio value.
INTEGER minimum_id This value will return the id of the element with the minimum aspect ratio value.
REAL maximum_value This value will return the maximum aspect ratio value.
INTEGER maximum_id This value will return the id of the element with the maximum aspect ratio value.
INTEGER table_id This value returns the id for the table of element aspect ratio values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_tet_collapse(normalize,threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the collapse values of all of the tetrahedral elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the collapse values loaded into the graphic display table are calculated using a normalization formula.
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 1.0 E +10.
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum collapse value.
INTEGER minimum_id This value will return the id of the element with the minimum collapse value.
REAL maximum_value This value will return the maximum collapse value.
INTEGER maximum_id This value will return the id of the element with the maximum collapse value.
INTEGER table_id This value returns the id for the table of element collapse values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_tet_edangle(normalize,threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the edge angle values of all of the tetrahedral elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the edge angle values loaded into the graphic display table are calculated using a normalization formula.
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 1.0 E +10.
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum edge angle value.
INTEGER minimum_id This value will return the id of the element with the minimum edge angle value.
REAL maximum_value This value will return the maximum edge angle value.
INTEGER maximum_id This value will return the id of the element with the maximum edge angle value.
INTEGER table_id This value returns the id for the table of element edge angle values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_tet_fskew(normalize,threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the face skew values of all of the tetrahedral elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the face skew values loaded into the graphic display table are calculated using a normalization formula.
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 90.0.
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum face skew value.
INTEGER minimum_id This value will return the id of the element with the minimum face skew value.
REAL maximum_value This value will return the maximum face skew value.
INTEGER maximum_id This value will return the id of the element with the maximum face skew value.
INTEGER table_id This value returns the id for the table of element face skew values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_tria_all(threshold,num_failures,worst_value,worst_id)
##########
Description:
This function will run all of the verification tests for all triangular elements in the current group an highlight any elements that fail the tests.
Input:
REAL threshold(6)This value specifies the threshold comparison value for all of the tests. See the remarks for a description of the use of each offset in this array.
Output:
INTEGER num_failures(6)This value returns the number of elements that have failed a test. See the remarks for a description of the use of each offset in this array.
REAL worst_value(6)This value returns the value for the worst case value of each test. See the remarks for a description of the use of each offset in this array.
INTEGER worst_id(6)This value returns the id for the worst case element of each test. See the remarks for a description of the use of each offset in this array.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_tria_aspect(normalize,threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the aspect ratio values of all of the triangular elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the aspect ratio values loaded into the graphic display table are calculated using a normalization formula.
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 90.0.
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum aspect ratio value.
INTEGER minimum_id This value will return the id of the element with the minimum aspect ratio value.
REAL maximum_value This value will return the maximum aspect ratio value.
INTEGER maximum_id This value will return the id of the element with the maximum aspect ratio value.
INTEGER table_id This value returns the id for the table of element aspect ratio values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_tria_skew(normalize,threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the skew angle values of all of the triangular elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the skew angle values loaded into the graphic display table are calculated using a normalization formula.
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 90.0.
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum skew angle value.
INTEGER minimum_id This value will return the id of the element with the minimum skew angle value.
REAL maximum_value This value will return the maximum skew angle value.
INTEGER maximum_id This value will return the id of the element with the maximum skew angle value.
INTEGER table_id This value returns the id for the table of element skew angle values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_wedge_all(threshold,num_failures,worst_value,worst_id)
##########
Description:
This function will run all of the verification tests for all wedge elements in the current group an highlight any elements that fail the tests.
Input:
REAL threshold(10)This value specifies the threshold comparison value for all of the tests. See the remarks for a description of the use of each offset in this array.
Output:
INTEGER num_failures(10)This value returns the number of elements that have failed a test. See the remarks for a description of the use of each offset in this array.
REAL worst_value(10)This value returns the value for the worst case value of each test. See the remarks for a description of the use of each offset in this array.
INTEGER worst_id(10)This value returns the id for the worst case element of each test. See the remarks for a description of the use of each offset in this array.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_wedge_aspect(normalize,threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the aspect ratio values of all of the wedge elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the aspect ratio values loaded into the graphic display table are calculated using a normalization formula.
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 10.0 E +10.
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum aspect ratio value.
INTEGER minimum_id This value will return the id of the element with the minimum aspect ratio value.
REAL maximum_value This value will return the maximum aspect ratio value.
INTEGER maximum_id This value will return the id of the element with the maximum aspect ratio value.
INTEGER table_id This value returns the id for the table of element aspect ratio values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_wedge_edangle(normalize,threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the face edge angle values of all of the wedge elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the face edge angle values loaded into the graphic display table are calculated using a normalization formula.
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 120.0
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum face edge angle value.
INTEGER minimum_id This value will return the id of the element with the minimum face edge angle value.
REAL maximum_value This value will return the maximum face edge angle value.
INTEGER maximum_id This value will return the id of the element with the maximum face edge angle value.
INTEGER table_id This value returns the id for the table of element face edge angle values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_wedge_fskew(normalize,threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the face skew angle values of all of the wedge elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the face skew angle values loaded into the graphic display table are calculated using a normalization formula.
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 90.0
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum face skew angle value.
INTEGER minimum_id This value will return the id of the element with the minimum face skew angle value.
REAL maximum_value This value will return the maximum face skew angle value.
INTEGER maximum_id This value will return the id of the element with the maximum face skew angle value.
INTEGER table_id This value returns the id for the table of element face skew angle values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_wedge_ftaper(normalize,threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the face taper values of all of the wedge elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the face taper values loaded into the graphic display table are calculated using a normalization formula.
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 2147483600.0
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum face taper value.
INTEGER minimum_id This value will return the id of the element with the minimum face taper value.
REAL maximum_value This value will return the maximum face taper value.
INTEGER maximum_id This value will return the id of the element with the maximum face taper value.
INTEGER table_id This value returns the id for the table of element face taper values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_wedge_fwarp(normalize,threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the face warp values of all of the wedge elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the face taper values loaded into the graphic display table are calculated using a normalization formula.
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 90.0
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum face warp value.
INTEGER minimum_id This value will return the id of the element with the minimum face warp value.
REAL maximum_value This value will return the maximum face warp value.
INTEGER maximum_id This value will return the id of the element with the maximum face warp value.
INTEGER table_id This value returns the id for the table of element face warp values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_verify_wedge_twist(normalize,threshold,group_name,minimum_value,minimum_id,maximum_value,maximum_id,table_id)
##########
Description:
This function will load the graphic display tables with the twist values of all of the wedge elements in the current group.
Input:
LOGICAL normalize This value specifies,when set to TRUE,that the twist values loaded into the graphic display table are calculated using a normalization formula.
REAL threshold This value specifies the threshold of failure comparison value. When the input value normalize is set to TRUE,this value must be greater than 0.0 and equal to or less than 1.0. When the input value normalize is set to FALSE,this value must be greater than 0.0 and less than or equal to 120.0
Output:
STRING group_name[31] This value will return a description of the group to which the test has been applied.
REAL minimum_value This value will return the minimum twist value.
INTEGER minimum_id This value will return the id of the element with the minimum twist value.
REAL maximum_value This value will return the maximum twist value.
INTEGER maximum_id This value will return the id of the element with the maximum twist value.
INTEGER table_id This value returns the id for the table of element twist values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
verify_boundaries_display_mgr.erase()
##########
Description:
This function will erase the free boundary display in the viewport.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
verify_boundaries_display_mgr.plot(display_type)
##########
Description:
This function will plot either the free faces or face edges of all of the elements in the model.
Input:
STRING display_type[10] This value specifies the property of the free elements to plot and can be set to either “Free_Edges” or “Free_Faces”.
Output:
None.
Error Conditions:
None.
---------------
fem_optimize(object,method,criterion,starting_id,bandwidth,profile,maximum_wavefront,average_wavefront,rms_wavefront)
##########
Description:
This function will renumber the nodes or elements in the model to minimize the time required to find a finite element solution.
Input:
STRING object[8] This value specifies the type of entity to optimize. This argument can have the following values: “Nodes” or “Elements”.
STRING method[] This value specifies the type of optimization method used. This argument can have the following values: “C” = “Cuthill-McKee” method,“G” = “Gibbs-Poole-Stockmeyer”,or “B” = both methods.
STRING criterion[] This value specifies the minimization criterion used by the optimization process. This argument can have the following values: “RMS Wavefront”,” Bandwidth”,“Max Wavefront”,or “Profile”.
INTEGER starting_id This value specifies the id at which to start the renumbering process.
Output:
INTEGER bandwidth(4)This value returns the bandwidth calculated both before and after the optimization process is done. See the remarks listed below for a description of the use of each offset.
INTEGER profile(4)This value returns the profile calculated both before and after the optimization process is done. See the remarks listed below for a description of the use of each offset.
INTEGER maximum_wavefront(4)
This value returns the maximum wavefront value calculated both before and after the optimization process is done. See the remarks listed below for a description of the use of each offset.
REAL avgerage_wavefront(4)
This value returns the minimum wavefront value calculated both before and after the optimization process is done. See the remarks listed below for a description of the use of each offset.
REAL rms_wavefront(4)This value returns the root mean squared wavefront value calculated both before and after the optimization process is done. See the remarks listed below for a description of the use of each offset.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_equiv_all_group(group_id,num_groups,tolerance_type,tolerance,updated_tolerance,segment_id)
##########
Description:
This function will reduce all nodes that coexist at single points to single nodes. The nodes are identified through an array of group ids.
Input:
INTEGER group_id(num_groups)
This value specifies an array of group ids identifying the nodes to be reduced. This value is ignored if the input value num_groups is set to zero.
INTEGER num_groups This value specifies the number of groups identifying nodes to be reduced. If this value is set to zero,the entire model will be reduced. This value must be equal to or greater than zero and equal to or less than the number of offsets defined for the input array group_id.
INTEGER tolerance_type This value specifies the type of tolerance geometry that will be used to reduce nodes. All nodes that fit in the tolerance region will be reduced to a single node. A cubic tolerance geometry will be used if this value is set to 1 and a spherical tolerance geometry will be used if this value is set to 2.
REAL tolerance This value specifies the size of the tolerance region. This value must greater than zero.
Output:
REAL updated_tolerance This value returns the size of the tolerance region,recalculated to prevent the collapse of element edges. The input value tolerance is used as the starting value for the algorithm used to calculate this value.
INTEGER segment_id This value returns the segment id for the graphics segment that needs to be cleared. This value will be set to -1 if the graphics segment has already been cleared.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_equiv_all_group2(group_id,num_groups,tolerance_type,tolerance,verify,updated_tolerance,segment_id)
##########
Description:
This function will reduce all nodes that coexist at single points to single nodes. The nodes are identified through an array of group ids. This function is identical to the fem_equiv_all_group()function except for the addition of the input argument verify,which provides for user verification of the reduction process before the results are saved to the database.
Input:
INTEGER group_id(num_groups)
This value specifies an array of group ids identifying the nodes to be reduced. This value is ignored if the input value num_groups is set to zero.
INTEGER num_groups This value specifies the number of groups identifying nodes to be reduced. If this value is set to zero,the entire model will be reduced. This value must be equal to or greater than zero and equal to or less than the number of offsets defined for the input array group_id.
INTEGER tolerance_type This value specifies the type of tolerance geometry that will be used to reduce nodes. All nodes that fit in the tolerance region will be reduced to a single node. A cubic tolerance geometry will be used if this value is set to 1 and a spherical tolerance geometry will be used if this value is set to 2.
REAL tolerance This value specifies the size of the tolerance region. This value must greater than zero.
LOGICAL verify This value specifies,when set to TRUE,that a popup form will be used to get input from the user to either save to the database or discard the reduction results. If this value is set to FALSE,the reduction results will be saved to the database without prompting from the user.
Output:
REAL updated_tolerance This value returns the size of the tolerance region,recalculated to prevent the collapse of element edges. The input value tolerance is used as the starting value for the algorithm used to calculate this value.
INTEGER segment_id This value returns the segment id for the graphics segment that needs to be cleared. This value will be set to -1 if the graphics segment has already been cleared.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_equiv_all_group3(group_names,num_groups,crg,tolerance_type,tolerance,verify,updated_tolerance,segment_id)
##########
Description:
This function will reduce all nodes that coexist at single points to single nodes. The nodes are identified through an array of group ids. This function is identical to the fem_equiv_all_group()function except for the addition of the input argument verify,which provides for user verification of the reduction process before the results are saved to the database and the use of group names instead of group ids.
Input:
STRING group_names[](num_groups)
This value specifies an array of group names identifying the nodes to be reduced. This value is ignored if the input value num_groups is set to zero.
INTEGER num_groups This value specifies the number of groups identifying nodes to be reduced. If this value is set to zero,the entire model will be reduced. This value must be equal to or greater than zero and equal to or less than the number of offsets defined for the input array group_names.
STRING crg This value specifies a string containing ids of group names identifying the nodes to be excluded from the reduction process.
STRING tolerance_type This value specifies the type of tolerance geometry that will be used to reduce nodes. All nodes that fit in the tolerance region will be reduced to a single node. A cubic tolerance geometry will be used if this value is set to 1 and a spherical tolerance geometry will be used if this value is set to 2.
INTEGER tolerance This value specifies the size of the tolerance region. This value must be greater than zero.
LOGICAL verify This value specifies,when set to TRUE,that a popup form will be used to get input from the user to either save to the database or discard the reduction results. If this value is set to FALSE,the reduction results will be saved to the database without prompting from the user.
Output:
REAL updated_tolerance This value returns the size of the tolerance region,recalculated to prevent the collapse of element edges. The input value tolerance is used as the starting value for the algorithm used to calculate this value.
INTEGER segment_id This value returns the segment id for the graphics segment that needs to be cleared. This value will be set to -1 if the graphics segment has already been cleared.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_equiv_list(node_select,tolerance_type,tolerance,updated_tolerance,segment_id)
##########
Description:
This function will reduce all selected nodes that coexist at a single point to a single node.
Input:
STRING node_select[] This value specifies a selection of node identifiers defining the nodes to be reduced.
INTEGER tolerance_type This value specifies the type of tolerance geometry that will be used to reduce nodes. All nodes that fit in the tolerance region will be reduced to a single node. A cubic tolerance geometry will be used if this value is set to 1 and a spherical tolerance geometry will be used if this value is set to 2.
REAL tolerance This value specifies the size of the tolerance region. This value must greater than zero.
Output:
REAL updated_tolerance This value returns the size of the tolerance region,recalculated to prevent the collapse of element edges. The input value tolerance is used as the starting value for the algorithm used to calculate this value.
INTEGER segment_id This value returns the segment id for the graphics segment that needs to be cleared. This value will be set to -1 if the graphics segment has already been cleared.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_equiv_list2(node_select,tolerance_type,tolerance,verify,updated_tolerance,segment_id)
##########
Description:
This function will reduce all selected nodes that coexist at a single point to a single node. This function is identical to the fem_equiv_list()function except for the addition of the input argument verify,which provides for user verification of the reduction process before the results are saved to the database.
Input:
STRING node_select[] This value specifies a selection of node identifiers defining the nodes to be reduced.
INTEGER tolerance_type This value specifies the type of tolerance geometry that will be used to reduce nodes. All nodes that fit in the tolerance region will be reduced to a single node. A cubic tolerance geometry will be used if this value is set to 1 and a spherical tolerance geometry will be used if this value is set to 2.
REAL tolerance This value specifies the size of the tolerance region. This value must greater than zero.
LOGICAL verify This value specifies,when set to TRUE,that a popup form will be used to get input from the user to either save to the database or discard the reduction results. If this value is set to FALSE,the reduction results will be saved to the database without prompting from the user.
Output:
REAL updated_tolerance This value returns the size of the tolerance region,recalculated to prevent the collapse of element edges. The input value tolerance is used as the starting value for the algorithm used to calculate this value.
INTEGER segment_id This value returns the segment id for the graphics segment that needs to be cleared. This value will be set to -1 if the graphics segment has already been cleared.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_equiv_list3(node_select,exclude_select,tolerance_type,tolerance,verify,updated_tolerance,segment_id)
##########
Description:
This function will reduce all selected nodes that coexist at a single point to a single node. This function is identical to the fem_equiv_list2()function except for the addition of the input argument exclude_select,which allows a selection of nodes to be excluded from the reduction process.
Input:
STRING node_select[] This value specifies a selection of node identifiers defining the nodes to be reduced.
STRING exclude_select[] This value specifies a selection of node identifiers defining the nodes to be excluded from the reduction process.
INTEGER tolerance_type This value specifies the type of tolerance geometry that will be used to reduce nodes. All nodes that fit in the tolerance region will be reduced to a single node. A cubic tolerance geometry will be used if this value is set to 1 and a spherical tolerance geometry will be used if this value is set to 2.
REAL tolerance This value specifies the size of the tolerance region. This value must greater than zero.
LOGICAL verify This value specifies,when set to TRUE,that a popup form will be used to get input from the user to either save to the database or discard the reduction results. If this value is set to FALSE,the reduction results will be saved to the database without prompting from the user.
Output:
REAL updated_tolerance This value returns the size of the tolerance region,recalculated to prevent the collapse of element edges. The input value tolerance is used as the starting value for the algorithm used to calculate this value.
INTEGER segment_id This value returns the segment id for the graphics segment that needs to be cleared. This value will be set to -1 if the graphics segment has already been cleared.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_equiv_list_display.plot(plot_option,entity_type,entity_selection)
##########
Description:
This function controls the display of FEM elements and nodes.
Input:
STRING plot_option[9] This value specifies the plot option. See the remarks below for a list of the value that can be used with this argument.
INTEGER entity_type This value specifies the entity type for which the display will be modified. This argument can have the following values: 0 = both nodes and elements,1 = nodes,and 2 = elements.
Output:
STRING entity_selection[VIRTUAL]
This value returns a description of the entities that have been modified by this function.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_equiv_preview(node_select,exclude_select,tolerance_type,tolerance,entity_type,updated_tolerance,segment_id,nodes_previewed,elements_previewed,nodes_reduced,elements_reduced)
##########
Description:
This function will provide a preview of what happens if the selected nodes that coexist at a single point are reduced to a single node. This function is similar to the fem_equiv_list3()function except that no nodes will be deleted; they will only be displayed and marked on the screen.
Input:
STRING node_select[] This value specifies a selection of node identifiers defining the nodes to be reduced.
STRING exclude_select[] This value specifies a selection of node identifiers defining the nodes to be excluded from the reduction process.
INTEGER tolerance_type This value specifies the type of tolerance geometry that will be used to reduce nodes. All nodes that fit in the tolerance region will be reduced to a single node. A cubic tolerance geometry will be used if this value is set to 1 and a spherical tolerance geometry will be used if this value is set to 2.
REAL tolerance This value specifies the size of the tolerance region. This value must greater than zero.
INTEGER entity_type This value specifies the entity type for which the display will be modified. This argument can have the following values: 0 = both nodes and elements,1 = nodes,and 2 = elements.
Output:
REAL updated_tolerance This value returns the size of the tolerance region,recalculated to prevent the collapse of element edges. The input value tolerance is used as the starting value for the algorithm used to calculate this value.
INTEGER segment_id This value returns the segment id for the graphics segment that needs to be cleared. This value will be set to -1 if the graphics segment has already been cleared.
STRING nodes_previewed[VIRTUAL]
This value returns a description of the nodes that have been previewed.
STRING elements_previewed[VIRTUAL]
This value returns a description of the elements that have been previewed.
STRING nodes_reduced[VIRTUAL]
This value returns a description of the nodes that have been reduced.
STRING elements_reduced[VIRTUAL]
This value returns a description of the elements that have been reduced.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
flds_steady_aerodyn_forceq_cre(vector_name,coord_label,xz_sym,xy_sym,mach_num,num_of_rbm,rbm_values,num_of_cntrl_devs,cntrl_dev_values,lbc_set_sf,force,moment,force_type)
##########
Description:
This function creates the Aerodynamic Force/Q vector.
Input:
STRING vector_name Name of the Force/Q vector
INTEGER coord_label The label of the coordinate frame
INTEGER xz_sym The label of the XZ Symmetry
INTEGER xy_sym The label of the XY Symmetry
REAL mach_num The Mach number
INTEGER num_of_rbm The number of Rigid Body Motions defined
REAL rbm_values()Array of all the defined Rigid Body Motion values
INTEGER num_of_cntrl_devs The number of Control Devices defined. This includes General Controllers and both the linear and nonlinear Control Surfaces.
REAL cntrl_dev_values()Array of all the defined Control Device values
REAL lbc_set_sf The Load.BC Set Scale Factor
INTEGER force The id of the Force field
INTEGER moment The id of the Moment field
STRING force_type Force Type: “Structural” or “Aero”
Output:
None.
---------------
flds_steady_aerodyn_forceq_get(vector_name,coord_label,xz_sym,xy_sym,mach_num,num_of_rbm,rbm_values,num_of_cntrl_devs,cntrl_dev_values,lbc_set_sf,force,moment,force_type)
##########
Description:
This function gets the data for the specified Aerodynamic Force/Q vector.
Input:
STRING vector_name Name of the Force/Q vector to get
Output:
INTEGER coord_label The label of the coordinate frame
INTEGER xz_sym The label of the XZ Symmetry
INTEGER xy_sym The label of the XY Symmetry
REAL mach_num The Mach number
INTEGER num_of_rbm The number of Rigid Body Motions defined
REAL rbm_values()Array of all the defined Rigid Body Motion values
INTEGER num_of_cntrl_devs The number of Control Devices defined. This includes General Controllers and both the linear and nonlinear Control Surfaces.
REAL cntrl_dev_values()Array of all the defined Control Device values
REAL lbc_set_sf The Load.BC Set Scale Factor
INTEGER force The id of the Force field
INTEGER moment The id of the Moment field
STRING force_type Force Type: “Structural” or “Aero”
---------------
flds_steady_aerodyn_forceq_mod(vector_name,coord_label,xz_sym,xy_sym,mach_num,num_of_rbm,rbm_values,num_of_cntrl_devs,cntrl_dev_values,lbc_set_sf,force,moment,force_type)
##########
Description:
This function modifies the specified Aerodynamic Force/Q vector.
Input:
STRING vector_name Name of the Force/Q vector to modify
INTEGER coord_label The label of the coordinate frame
INTEGER xz_sym The label of the XZ Symmetry
INTEGER xy_sym The label of the XY Symmetry
REAL mach_num The Mach number
INTEGER num_of_rbm The number of Rigid Body Motions defined
REAL rbm_values()Array of all the defined Rigid Body Motion values
INTEGER num_of_cntrl_devs The number of Control Devices defined. This includes General Controllers and both the linear and nonlinear Control Surfaces.
REAL cntrl_dev_values()Array of all the defined Control Device values
REAL lbc_set_sf The Load.BC Set Scale Factor
INTEGER force The id of the Force field
INTEGER moment The id of the Moment field
STRING force_type Force Type: “Structural” or “Aero”
Output:
None.
---------------
flds_steady_aerodyn_nwashq_cre(vector_name,coord_label,xz_sym,xy_sym,mach_num,num_of_rbm,rbm_values,num_of_cntrl_devs,cntrl_dev_values,lbc_set_sf,norm_wash)
##########
Description:
This function creates the Aerodynamic Normalwash/Q vector.
Input:
STRING vector_name Name of the Normalwash/Q vector
INTEGER coord_label The label of the coordinate frame
INTEGER xz_sym The label of the XZ Symmetry
INTEGER xy_sym The label of the XY Symmetry
REAL mach_num The Mach number
INTEGER num_of_rbm The number of Rigid Body Motions defined
REAL rbm_values()Array of all the defined Rigid Body Motion values
INTEGER num_of_cntrl_devs The number of Control Devices defined. This includes General Controllers and both the linear and nonlinear Control Surfaces.
REAL cntrl_dev_values()Array of all the defined Control Device values
REAL lbc_set_sf The Load.BC Set Scale Factor
INTEGER norm_wash The id of the Normalwash field
Output:
None.
---------------
flds_steady_aerodyn_nwashq_get(vector_name,coord_label,xz_sym,xy_sym,mach_num,num_of_rbm,rbm_values,num_of_cntrl_devs,cntrl_dev_values,lbc_set_sf,norm_wash)
##########
Description:
This function gets the data for the specified Aerodynamic Normalwash/Q vector.
Input:
STRING vector_name Name of the Normalwash/Q vector to get
Output:
INTEGER coord_label The label of the coordinate frame
INTEGER xz_sym The label of the XZ Symmetry
INTEGER xy_sym The label of the XY Symmetry
REAL mach_num The Mach number
INTEGER num_of_rbm The number of Rigid Body Motions defined
REAL rbm_values()Array of all the defined Rigid Body Motion values
INTEGER num_of_cntrl_devs The number of Control Devices defined. This includes General Controllers and both the linear and nonlinear Control Surfaces.
REAL cntrl_dev_values()Array of all the defined Control Device values
REAL lbc_set_sf The Load.BC Set Scale Factor
INTEGER norm_wash The id of the Normalwash field
---------------
flds_steady_aerodyn_nwashq_mod(vector_name,coord_label,xz_sym,xy_sym,mach_num,num_of_rbm,rbm_values,num_of_cntrl_devs,cntrl_dev_values,lbc_set_sf,norm_wash)
##########
Description:
This function modifies the specified Aerodynamic Normalwas/Q vector.
Input:
STRING vector_name Name of the Normalwash/Q vector to modify
INTEGER coord_label The label of the coordinate frame
INTEGER xz_sym The label of the XZ Symmetry
INTEGER xy_sym The label of the XY Symmetry
REAL mach_num The Mach number
INTEGER num_of_rbm The number of Rigid Body Motions defined
REAL rbm_values()Array of all the defined Rigid Body Motion values
INTEGER num_of_cntrl_devs The number of Control Devices defined. This includes General Controllers and both the linear and nonlinear Control Surfaces.
REAL cntrl_dev_values()Array of all the defined Control Device values
REAL lbc_set_sf The Load.BC Set Scale Factor
INTEGER norm_wash The id of the Normalwash field
Output:
None.
---------------
flds_steady_aerodyn_pressq_cre(vector_name,coord_label,xz_sym,xy_sym,mach_num,num_of_rbm,rbm_values,num_of_cntrl_devs,cntrl_dev_values,lbc_set_sf,top_pres,bot_pres,num_box)
##########
Description:
This function creates the Aerodynamic Pressure/Q vector.
Input:
STRING vector_name Name of the Pressure/Q vector
INTEGER coord_label The label of the coordinate frame
INTEGER xz_sym The label of the XZ Symmetry
INTEGER xy_sym The label of the XY Symmetry
REAL mach_num The Mach number
INTEGER num_of_rbm The number of Rigid Body Motions defined
REAL rbm_values()Array of all the defined Rigid Body Motion values
INTEGER num_of_cntrl_devs The number of Control Devices defined. This includes General Controllers and both the linear and nonlinear Control Surfaces.
REAL cntrl_dev_values()Array of all the defined Control Device values
REAL lbc_set_sf The Load.BC Set Scale Factor
INTEGER top_pres The id of the Top Surface Pressure field
INTEGER bot_pres The id of the Bottom/Delta Surface Pressure field
INTEGER num_box A flag identifying if both the Top and the Bottom Pressure
Output:
None.
---------------
flds_steady_aerodyn_pressq_get(vector_name,coord_label,xz_sym,xy_sym,mach_num,num_of_rbm,rbm_values,num_of_cntrl_devs,cntrl_dev_values,lbc_set_sf,top_pres,bot_pres,num_box)
##########
Description:
This function gets the data for the specified Aerodynamic Pressure/Q vector.
Input:
STRING vector_name Name of the Pressure/Q vector to get
Output:
INTEGER coord_label The label of the coordinate frame
INTEGER xz_sym The label of the XZ Symmetry
INTEGER xy_sym The label of the XY Symmetry
REAL mach_num The Mach number
INTEGER num_of_rbm The number of Rigid Body Motions defined
REAL rbm_values()Array of all the defined Rigid Body Motion values
INTEGER num_of_cntrl_devs The number of Control Devices defined. This includes General Controllers and both the linear and nonlinear Control Surfaces.
REAL cntrl_dev_values()Array of all the defined Control Device values
REAL lbc_set_sf The Load.BC Set Scale Factor
INTEGER top_pres The id of the Top Surface Pressure field
INTEGER bot_pres The id of the Bottom/Delta Surface Pressure field
INTEGER num_box A flag identifying if both the Top and the Bottom Pressure
---------------
flds_steady_aerodyn_pressq_mod(vector_name,coord_label,xz_sym,xy_sym,mach_num,num_of_rbm,rbm_values,num_of_cntrl_devs,cntrl_dev_values,lbc_set_sf,top_pres,bot_pres,num_box)
##########
Description:
This function modifies the specified Aerodynamic Pressure/Q vector.
Input:
STRING vector_name Name of the Pressure/Q vector to modify
INTEGER coord_label The label of the coordinate frame
INTEGER xz_sym The label of the XZ Symmetry
INTEGER xy_sym The label of the XY Symmetry
REAL mach_num The Mach number
INTEGER num_of_rbm The number of Rigid Body Motions defined
REAL rbm_values()Array of all the defined Rigid Body Motion values
INTEGER num_of_cntrl_devs The number of Control Devices defined. This includes General Controllers and both the linear and nonlinear Control Surfaces.
REAL cntrl_dev_values()Array of all the defined Control Device values
REAL lbc_set_sf The Load.BC Set Scale Factor
INTEGER top_pres The id of the Top Surface Pressure field
INTEGER bot_pres The id of the Bottom/Delta Surface Pressure field
INTEGER num_box A flag identifying if both the Top and the Bottom Pressure
Output:
None.
---------------
fem_disassoc_geo(nodes,elements,geo_list)
##########
Description:
This function will disassociate the FEM entities from the list of geometry in the input value geo_list.
Input:
LOGICAL nodes This value specifies,when set to TRUE,to disassociate the nodes of the elements.
LOGICAL elements This value specifies,when set to TRUE,to disassociate the elements.
STRING geo_list[VIRTUAL] This value specifies the list of geometry to disassociate FEM from.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_disassoc_ids(option,fem_list)
##########
Description:
This function will disassociate the FEM entities in the input value fem_list.
Input:
INTEGER option This value specifies an option to specify which FEM entities to disassociate.
STRING fem_list[VIRTUAL] This value specifies a list of FEM entities to disassociate.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_renum_elem_1(original_selection,new_selection,flag,created_selection)
##########
Description:
This function will renumber a selection of element identifiers in either a consecutive manner beginning with a starting element identifier or as directed by a selection of element identifiers.
Input:
STRING original_selection[] This value specifies a selection of element identifiers that will be renumbered.
STRING new_selection[] This value specifies a selection of element identifiers to which the original elements will be renumbered. If there is only one element identifier in the selection the original element identifiers will be renumbered in a consecutive manner. If more than one element identifier is provided,the identifiers in the input value original_selection will be renumbered to match the identifiers specified by this input value.
INTEGER flag When set to 2,this value specifies use of the new numbering control scheme. When set to 4,this value specifies use of the new id offset method.
Output:
STRING created_selection[VIRTUAL] This value returns a description of the renumbered element identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_renum_node_1(original_selection,new_selection,flag,created_selection)
##########
Description:
This function will renumber a selection of node identifiers in either a consecutive manner beginning with a starting node identifier or as directed by a selection of node identifiers.
Input:
STRING original_selection[] This value specifies a selection of node identifiers that will be renumbered.
STRING new_selection[] This value specifies a selection of node identifiers to which the original nodes will be renumbered. If there is only one node identifier in the selection the original node identifiers will be renumbered in a consecutive manner. If more than one node identifier is provided,the identifiers in the input value original_selection will be renumbered to match the identifiers specified by this input value.
INTEGER flag When set to 2,this value specifies use of the new numbering control scheme. When set to 4,this value specifies use of the new id offset method.
Output:
INTEGER created_selection[VIRTUAL] This value returns a description of the renumbered node identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_renum_conn(conn_list,new_id_list,flag,new_ids)
##########
Description:
This function will renumber a selection of connectors.
Input:
STRING conn_list List of connectors to renumber (e.g. CONN 2 3 5:10)
STRING new_id_list List of IDs to be assigned (e.g. “500”)
INTEGER flag Control options (6=offset)
Output:
STRING new_idsirtual string containing a list of new IDs (e.g. “Connector 502 503 505:510).	 This value returns a description of the renumbered node identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
•	 0 Success
---------------
fem_sweep_arc_1(sweep_elem_select,sweep_node_select,arc_angle,arc_coord_frame,axis_rotation,offset_angle,flag,entity_select,num_topologies,sweep_topologies,anly_coord_frame,ref_coord_frame,mesh_control_type,mesh_control,num_nodes,num_elements,nodes_created,elements_created)
##########
Description:
This function will create elements by using the arc sweep method.
Input:
STRING sweep_elem_select[] This value specifies a selection of element identifiers to be assigned to the newly created elements.
STRING sweep_node_select[] This value specifies a selection of node identifiers to be assigned to the newly created nodes.
STRING arc_angle[] This value specifies the range of the arc swept in degrees.
STRING arc_coord_frame[] This value specifies an identifier for the coordinate frame in which the axis of rotation is defined.
STRING axis_rotation[] This value specifies an identifier for the axis of rotation in the input value arc_coord_frame around which the arc sweep operation will take place.
STRING offset_angle[] This value specifies the offset angle in degrees between the location of the entities on which the sweep operation will take place and the location along the arc where the entities created by the sweep operation will be placed.
INTEGER flag This value specifies,when set to 1,that the original elements and nodes from which the sweep operation was made will be deleted. When set to 2 this value uses the new numbering control scheme.
STRING entity_select[] This value specifies a list of entities on which the sweep operation will take place.
INTEGER num_topologies This value specifies the number of sweep topology conversion pairs and should be set to the value 10.
STRING sweep_topologies[](num_topologies)This value specifies an array of selections of elements used to define the relationship between the types of entities on which the sweep operation will take place and the entities that the sweep operation will create from those entities. The offset into the array is used to define the type of entity from which the geometry will be extended and the value at that offset will define the entity created from the starting geometric type. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING anly_coord_frame[] This value specifies an identifier for the analysis coordinate frame.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
STRING mesh_control_type[] This value specifies the type of mesh control to be used with the arc sweep operation. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING mesh_control[](6)This value specifies mesh control parameters. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
Output:
INTEGER num_nodes This value returns the number of nodes created by the sweep operation.
INTEGER num_elements This value returns the number of elements created by the sweep operation.
STRING nodes_created[VIRTUAL] This value returns a description of the created nodes.
STRING elements_created[VIRTUAL] This value returns a description of the created elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_sweep_cylinder_radial_1(sweep_elem_select,sweep_node_select,cyl_coord_frame,axis_cylinder,radial_distance,offset_distance,flag,entity_select,num_topologies,sweep_topologies,anly_coord_frame,ref_coord_frame,mesh_control_type,mesh_control,num_nodes,num_elements,nodes_created,elements_created)
##########
Description:
This function will create elements by using the radial cylindrical sweep method. This operation will create entities by sweeping along a cylindrical radius that passes through the selected entities and is normal to the cylinder axis.
Input:
STRING sweep_elem_select[] This value specifies a selection of element identifiers to be assigned to the newly created elements.
STRING sweep_node_select[] This value specifies a selection of node identifiers to be assigned to the newly created nodes.
STRING cyl_coord_frame[] This value specifies an identifier for the coordinate frame in which the cylinder axis is defined.
STRING axis_cylinder[] This value specifies an identifier for the cylinder axis from which a cylindrical radius will be projected.
STRING radial_distance[] This value will specify the distance along the cylindrical radius where the created entities will be placed. This value must represent a real number greater than 0.
STRING offset_distance[] This value will specify an offset distance along the cylindrical radius between the entities on which the sweep operation will take place and the location along the cylindrical radius where the entities created by the sweep operation will be placed. This value must represent a real number equal to or greater than zero.
INTEGER flag This value specifies,when set to 1,that the original elements from which the sweep operation was made will be deleted. When set to 2 this value uses the new numbering control scheme.
STRING entity_select[] This value specifies a list of entities on which the sweep operation will take place.
INTEGER num_topologies This value specifies the number of sweep topology conversion pairs and should be set to the value 10.
STRING sweep_topologies[](num_topologies)This value specifies an array of selections of elements used to define the relationship between the types of entities on which the sweep operation will take place and the entities that the sweep operation will create from those entities. The offset into the array is used to define the type of entity from which the geometry will be extended and the value at that offset will define the entity created from the starting geometric type. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING anly_coord_frame[] This value specifies an identifier for the analysis coordinate frame.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
STRING mesh_control_type[] This value specifies the type of mesh control to be used with the arc sweep operation. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING mesh_control[](6)This value specifies mesh control parameters. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
Output:
INTEGER num_nodes This value returns the number of nodes created by the sweep operation.
INTEGER num_elements This value returns the number of elements created by the sweep operation.
STRING nodes_created[VIRTUAL] This value returns a description of the created nodes.
STRING elements_created[VIRTUAL] This value returns a description of the created elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_sweep_extrude_1(sweep_elem_select,sweep_node_select,vector_coord_frame,vector_direction,extrusion_distance,offset_distance,flag,entity_select,num_topologies,sweep_topologies,anly_coord_frame,ref_coord_frame,mesh_control_type,mesh_control,num_nodes,num_elements,nodes_created,elements_created)
##########
Description:
This function will create elements by using the extrude sweep method.
Input:
STRING sweep_elem_select[] This value specifies a selection of element identifiers to be assigned to the newly created elements.
STRING sweep_node_select[] This value specifies a selection of node identifiers to be assigned to the newly created nodes.
STRING vector_coord_frame[] This value specifies an identifier for the coordinate frame in which the axis of rotation is defined.
STRING vector_direction[] This value specifies a vector that defines the direction in which the extrusion operation will create new entities.
STRING extrusion_distance[] This value specifies the distance along the extrusion vector over which new entities will be created.
STRING offset_distance[] This value specifies the distance between the location of the entities on which the sweep operation will take place and the location along the extrusion vector where the entities created by the sweep operation will be placed.
INTEGER flag This value specifies,when set to 1,that the original elements from which the sweep operation was made will be deleted. When set to 2 this value uses the new numbering control scheme.
STRING entity_select[] This value specifies a list of entities on which the sweep operation will take place.
INTEGER num_topologies This value specifies the number of sweep topology conversion pairs and should be set to the value 10.
STRING sweep_topologies[](num_topologies)This value specifies an array of selections of elements used to define the relationship between the types of entities on which the sweep operation will take place and the entities that the sweep operation will create from those entities. The offset into the array is used to define the type of entity from which the geometry will be extended and the value at that offset will define the entity created from the starting geometric type. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING anly_coord_frame[] This value specifies an identifier for the analysis coordinate frame.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
STRING mesh_control_type[] This value specifies the type of mesh control to be used with the arc sweep operation. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING mesh_control[](6)This value specifies mesh control parameters. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
Output:
INTEGER num_nodes This value returns the number of nodes created by the sweep operation.
INTEGER num_elements This value returns the number of elements created by the sweep operation.
STRING nodes_created[VIRTUAL] This value returns a description of the created nodes.
STRING elements_created[VIRTUAL] This value returns a description of the created elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_sweep_glide_1(sweep_elem_select,sweep_node_select,glide_coord_frame,glide_type,glide_curve,glide_beginning,glide_end,reverse_glide,offset_glide,glide_parameter,glide_pnts_parametric,flag,entity_select,num_topologies,sweep_topologies,anly_coord_frame,ref_coord_frame,mesh_control_type,mesh_control,num_nodes,num_elements,nodes_created,elements_created)
##########
Description:
This function will create elements by using the glide sweep method.
Input:
STRING sweep_elem_select[] This value specifies a selection of element identifiers to be assigned to the newly created elements.
STRING sweep_node_select[] This value specifies a selection of node identifiers to be assigned to the newly created nodes.
STRING glide_coord_frame[] This value specifies an identifier for the coordinate frame in which the glide points are defined.
STRING glide_type[] This value specifies the type of glide operation that will take place. Currently only the case insensitive value “FIXED” is allowed.
STRING glide_curve[] This value specifies the curve used for the gliding offset,the glide direction tangent,and the glide frame origin.
STRING glide_beginning[] This value specifies a point that defines the beginning of the glide curve. This value is used to define an offset along the glide curve for the start of placement of entities created by the sweep operation.
STRING glide_end[] This value specifies a point that defines the end of the glide curve.
LOGICAL reverse_glide This value specifies,when set to TRUE,that the direction of the glide path along the glide curve be reversed.
LOGICAL offset_glide This value specifies,when set to TRUE,the use of an offset for the entities created along the glide curve by the sweep operation defined by either the input value glide_beginning or by the input value glide_end,depending on the input value reverse_glide.
LOGICAL glide_parameter This value specifies,when set to TRUE,that the glide operation will take place in the curve parameter space rather than the arc length space.
LOGICAL glide_pnts_parametric This value specifies,when set to TRUE,that the beginning and the end point for the glide curve are defined as curve parametric locations rather than as points in the global coordinate frame.
INTEGER flag This value specifies,when set to 1,that the original elements and nodes from which the sweep operation was made will be deleted. When set to 2 this value uses the new numbering control scheme.
STRING entity_select[] This value specifies a list of entities on which the sweep operation will take place.
INTEGER num_topologies This value specifies the number of sweep topology conversion pairs and should be set to the value 10.
STRING sweep_topologies[](num_topologies)This value specifies an array of selections of elements used to define the relationship between the types of entities on which the sweep operation will take place and the entities that the sweep operation will create from those entities. The offset into the array is used to define the type of entity from which the geometry will be extended and the value at that offset will define the entity created from the starting geometric type. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING anly_coord_frame[] This value specifies an identifier for the analysis coordinate frame.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
STRING mesh_control_type[] This value specifies the type of mesh control to be used with the arc sweep operation. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING mesh_control[](6)This value specifies mesh control parameters. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
Output:
INTEGER num_nodes This value returns the number of nodes created by the sweep operation.
INTEGER num_elements This value returns the number of elements created by the sweep operation.
STRING nodes_created[VIRTUAL] This value returns a description of the created nodes.
STRING elements_created[VIRTUAL] This value returns a description of the created elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_sweep_glide_guide_1(sweep_elem_select,sweep_node_select,glide_coord_frame,glide_curve,glide_beginning,glide_end,reverse_glide,offset_glide,glide_parameter,glide_pnts_parametric,flag,entity_select,guide_curve,guide_beginning,guide_end,reverse_guide,offset_guide,guide_parameter,guide_pnts_parameter,preserve_guide_axis,num_topologies,sweep_topologies,anly_coord_frame,ref_coord_frame,mesh_control_type,mesh_control,num_nodes,num_elements,nodes_created,elements_created)
##########
Description:
This function will create elements by using the glide-guide sweep method.
Input:
STRING sweep_elem_select[] This value specifies a selection of element identifiers to be assigned to the newly created elements.
STRING sweep_node_select[] This value specifies a selection of node identifiers to be assigned to the newly created nodes.
STRING glide_coord_frame[] This value specifies an identifier for the coordinate frame in which the glide points are defined.
STRING glide_curve[] This value specifies the curve used for the gliding offset,the glide direction tangent,and the glide frame origin.
STRING glide_beginning[] This value specifies a point that defines the beginning of the glide curve. This value is used to define an offset along the glide curve for the start of placement of entities created by the sweep operation.
STRING glide_end[] This value specifies a point that defines the end of the glide curve.
LOGICAL reverse_glide This value specifies,when set to TRUE,that the direction of the glide path along the glide curve be reversed.
LOGICAL offset_glide This value specifies,when set to TRUE,that the use of an offset for the entities created along the glide curve by the sweep operation be defined by either the input value glide_beginning or by the input value glide_end,depending on the input value reverse_glide.
LOGICAL glide_parameter This value specifies,when set to TRUE,that the glide operation will take place in the curve parameter space rather than the arc length space.
LOGICAL glide_pnts_parametric This value specifies,when set to TRUE,that the beginning and the end point for the glide curve are defined as curve parametric locations rather than as points in the global coordinate frame.
INTEGER flag This value specifies,when set to 1,that the original elements and nodes from which the sweep operation was made will be deleted. When set to 2 this value uses the new numbering control scheme.
STRING entity_select[] This value specifies a list of entities on which the sweep operation will take place.
STRING guide_curve[] This value specifies the curve used to guide the glide frame orientation as the sweep operation glides along the glide curve.
STRING guide_beginning[] This value specifies a point that defines the beginning of the guide curve.
STRING guide_end[] This value specifies a point that defines the end of the guide curve.
LOGICAL reverse_guide This value specifies,when set to TRUE,that the direction of the guide path along the guide curve be reversed.
LOGICAL offset_guide This value specifies,when set to TRUE,that the use of an offset for the entities created along the guide curve by the sweep operation be defined by either the input value guide_beginning or the input value guide_end.
LOGICAL guide_parameter This value specifies,when set to TRUE,that the guide operation will take place in the curve parameter space rather than the arc length space.
LOGICAL guide_pnts_parameter This value specifies,when set to TRUE,that the beginning and the end point for the guide curve are defined as curve parametric locations rather than as points in the global coordinate frame.
LOGICAL preserve_guide_axis This value specifies,when set to TRUE,that the guide curve reference direction rather than the glide curve tangent direction be used when rotating the glide frame orientation along the guide path.
INTEGER num_topologies This value specifies the number of sweep topology conversion pairs and should be set to the value 10.
STRING sweep_topologies[](num_topologies)This value specifies an array of selections of elements used to define the relationship between the types of entities on which the sweep operation will take place and the entities that the sweep operation will create from those entities. The offset into the array is used to define the type of entity from which the geometry will be extended and the value at that offset will define the entity created from the starting geometric type. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING anly_coord_frame[] This value specifies an identifier for the analysis coordinate frame.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
STRING mesh_control_type[] This value specifies the type of mesh control to be used with the arc sweep operation. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING mesh_control[](6)This value specifies mesh control parameters. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
Output:
INTEGER num_nodes This value returns the number of nodes created by the sweep operation.
INTEGER num_elements This value returns the number of elements created by the sweep operation.
STRING nodes_created[VIRTUAL] This value returns a description of the created nodes.
STRING elements_created[VIRTUAL] This value returns a description of the created elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_sweep_loft_1(sweep_elem_select,sweep_node_select,entity_select,top_elements,start_element,start_element_top,flag,auto_align,num_topologies,sweep_topologies,anly_coord_frame,ref_coord_frame,mesh_control_type,mesh_control,num_nodes,num_elements,nodes_created,elements_created)
##########
Description:
This function will create elements by using the loft sweep method.
Input:
STRING sweep_elem_select[] This value specifies a selection of element identifiers to be assigned to the newly created elements.
STRING sweep_node_select[] This value specifies a selection of node identifiers to be assigned to the newly created nodes.
STRING entity_select[] This value specifies a list of entities on which the sweep operation will take place.
STRING top_elements[] This value specifies a selection of element identifiers that define the top of the sweep operation.
STRING start_element[] This value specifies the starting element in the selection of entities on which the sweep operation will take place.
STRING start_element_top[] This value specifies the starting element in the selection of element identifiers that define the top of the sweep operation.
INTEGER flag This value specifies,when set to 1,that the original elements and nodes from which the sweep operation was made will be deleted. When set to 2 this value uses the new numbering control scheme.
LOGICAL auto_align This value specifies,when set to TRUE,that the starting elements specified by the input values start_element and start_element_top will be aligned.
INTEGER num_topologies This value specifies the number of sweep topology conversion pairs and should be set to the value 10.
STRING sweep_topologies[](num_topologies)This value specifies an array of selections of elements used to define the relationship between the types of entities on which the sweep operation will take place and the entities that the sweep operation will create from those entities. The offset into the array is used to define the type of entity from which the geometry will be extended and the value at that offset will define the entity created from the starting geometric type. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING anly_coord_frame[] This value specifies an identifier for the analysis coordinate frame.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
STRING mesh_control_type[] This value specifies the type of mesh control to be used with the arc sweep operation. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING mesh_control[](6)This value specifies mesh control parameters. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
Output:
INTEGER num_nodes This value returns the number of nodes created by the sweep operation.
INTEGER num_elements This value returns the number of elements created by the sweep operation.
STRING nodes_created[VIRTUAL] This value returns a description of the created nodes.
STRING elements_created[VIRTUAL] This value returns a description of the created elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_sweep_normal_1(sweep_elem_select,sweep_node_select,normal_distance,offset_distance,reverse_normal,flag,entity_select,num_topologies,sweep_topologies,anly_coord_frame,ref_coord_frame,mesh_control_type,mesh_control,num_nodes,num_elements,nodes_created,elements_created)
##########
Description:
This function will create elements by using the normal sweep method.
Input:
STRING sweep_elem_select[] This value specifies a selection of element identifiers to be assigned to the newly created elements.
STRING sweep_node_select[] This value specifies a selection of node identifiers to be assigned to the newly created nodes.
STRING normal_distance[] This value specifies the distance along the normal of each element selected for the sweep operation over which the sweep operation will create new elements.
STRING offset_distance[] This value specifies the distance between the location of the entities on which the sweep operation will take place and the location along the element normals where the entities created by the sweep operation will be placed.
LOGICAL reverse_normal This value specifies,when set to TRUE,that the normals used by the sweep operation be reversed.
INTEGER flag This value specifies,when set to 1,that the original elements and nodes from which the sweep operation was made will be deleted. When set to 2 this value uses the new numbering control scheme.
STRING entity_select[] This value specifies a list of entities on which the sweep operation will take place.
INTEGER num_topologies This value specifies the number of sweep topology conversion pairs and should be set to the value 10.
STRING sweep_topologies[](num_topologies)This value specifies an array of selections of elements used to define the relationship between the types of entities on which the sweep operation will take place and the entities that the sweep operation will create from those entities. The offset into the array is used to define the type of entity from which the geometry will be extended and the value at that offset will define the entity created from the starting geometric type. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING anly_coord_frame[] This value specifies an identifier for the analysis coordinate frame.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
STRING mesh_control_type[] This value specifies the type of mesh control to be used with the arc sweep operation. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING mesh_control[](6)This value specifies mesh control parameters. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
Output:
INTEGER num_nodes This value returns the number of nodes created by the sweep operation.
INTEGER num_elements This value returns the number of elements created by the sweep operation.
STRING nodes_created[VIRTUAL] This value returns a description of the created nodes.
STRING elements_created[VIRTUAL] This value returns a description of the created elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_sweep_normal_2(sweep_elem_select,sweep_node_select,normal_distance,offset_distance,reverse_normal,flag,ignore_geometry,entity_select,num_topologies,sweep_topologies,anly_coord_frame,ref_coord_frame,mesh_control_type,mesh_control,num_nodes,num_elements,nodes_created,elements_created)
##########
Description:
This function will create elements by using the normal sweep method.
Input:
STRING sweep_elem_select[] This value specifies a selection of element identifiers to be assigned to the newly created elements.
STRING sweep_node_select[] This value specifies a selection of node identifiers to be assigned to the newly created nodes.
STRING normal_distance[] This value specifies the distance along the normal of each element selected for the sweep operation over which the sweep operation will create new elements.
STRING offset_distance[] This value specifies the distance between the location of the entities on which the sweep operation will take place and the location along the element normals where the entities created by the sweep operation will be placed.
LOGICAL reverse_normal This value specifies,when set to TRUE,that the normals used by the sweep operation be reversed.
INTEGER flag This value specifies,when set to 1,that the original elements and nodes from which the sweep operation was made will be deleted. When set to 2 this value uses the new numbering control scheme.
LOGICAL ignore_geometry If this value is set to TRUE,the geometry is ignored.
STRING entity_select[] This value specifies a list of entities on which the sweep operation will take place.
INTEGER num_topologies This value specifies the number of sweep topology conversion pairs and should be set to the value 10.
STRING sweep_topologies[](num_topologies)This value specifies an array of selections of elements used to define the relationship between the types of entities on which the sweep operation will take place and the entities that the sweep operation will create from those entities. The offset into the array is used to define the type of entity from which the geometry will be extended and the value at that offset will define the entity created from the starting geometric type. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING anly_coord_frame[] This value specifies an identifier for the analysis coordinate frame.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
STRING mesh_control_type[] This value specifies the type of mesh control to be used with the arc sweep operation. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING mesh_control[](6)This value specifies mesh control parameters. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
Output:
INTEGER num_nodes This value returns the number of nodes created by the sweep operation.
INTEGER num_elements This value returns the number of elements created by the sweep operation.
STRING nodes_created[VIRTUAL] This value returns a description of the created nodes.
STRING elements_created[VIRTUAL] This value returns a description of the created elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_sweep_sphere_angle_1(sweep_elem_select,sweep_node_select,sphere_coord_frame,axis_spherical,sweep_angle,angle_offset,flag,entity_select,num_topologies,sweep_topologies,anly_coord_frame,ref_coord_frame,mesh_control_type,mesh_control,num_nodes,num_elements,nodes_created,elements_created)
##########
Description:
This function will create elements by using the spherical theta sweep method. This operation will create entities by sweeping a spherical radius that passes through the selected entities and is normal to the axis of the sphere through which the spherical radius is swept around the axis of the sphere.
Input:
STRING sweep_elem_select[] This value specifies a selection of element identifiers to be assigned to the newly created elements.
STRING sweep_node_select[] This value specifies a selection of node identifiers to be assigned to the newly created nodes.
STRING sphere_coord_frame[] This value specifies an identifier for the coordinate frame in which the spherical axis is defined.
STRING axis_spherical[] This value specifies an identifier for the spherical axis from which a spherical radius will be projected.
STRING sweep_angle[] This value specifies the angle to be swept by the spherical radius in degrees.
STRING angle_offset[] This value will specify an angle in degrees defining an offset along the spherical radius between the entities on which the sweep operation will take place and the location along the cylindrical radius where the entities created by the sweep operation will be placed.
INTEGER flag This value specifies,when set to 1,that the original elements and nodes from which the sweep operation was made will be deleted. When set to 2 this value uses the new numbering control scheme.
STRING entity_select[] This value specifies a list of entities on which the sweep operation will take place.
INTEGER num_topologies This value specifies the number of sweep topology conversion pairs and should be set to the value 10.
STRING sweep_topologies[](num_topologies)This value specifies an array of selections of elements used to define the relationship between the types of entities on which the sweep operation will take place and the entities that the sweep operation will create from those entities. The offset into the array is used to define the type of entity from which the geometry will be extended and the value at that offset will define the entity created from the starting geometric type. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING anly_coord_frame[] This value specifies an identifier for the analysis coordinate frame.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
STRING mesh_control_type[] This value specifies the type of mesh control to be used with the arc sweep operation. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING mesh_control[](6)This value specifies mesh control parameters. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
Output:
INTEGER num_nodes This value returns the number of nodes created by the sweep operation.
INTEGER num_elements This value returns the number of elements created by the sweep operation.
STRING nodes_created[VIRTUAL] This value returns a description of the created nodes.
STRING elements_created[VIRTUAL] This value returns a description of the created elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_sweep_sphere_radial_1(sweep_elem_select,sweep_node_select,sphere_coord_frame,sphere_center,radial_distance,offset_distance,flag,entity_select,num_topologies,sweep_topologies,anly_coord_frame,ref_coord_frame,mesh_control_type,mesh_control,num_nodes,num_elements,nodes_created,elements_created)
##########
Description:
This function will create elements by using the radial spherical method. This operation will create entities by sweeping along a spherical radius that passes from the center of a sphere and through the entities selected for this sweep operation.
Input:
STRING sweep_elem_select[] This value specifies a selection of element identifiers to be assigned to the newly created elements.
STRING sweep_node_select[] This value specifies a selection of node identifiers to be assigned to the newly created nodes.
STRING sphere_coord_frame[] This value specifies an identifier for the coordinate frame in which the sphere axis is defined.
STRING sphere_center[] This value specifies a point that will be used as the center of a sphere from which a spherical radius will be projected.
STRING radial_distance[] This value will specify the distance along the spherical radius where the created entities will be placed.
STRING offset_distance[] This value will specify an offset distance along the spherical radius between the entities on which the sweep operation will take place and the location along the spherical radius where the entities created by the sweep operation will be placed.
INTEGER flag This value specifies,when set to 1,that the original elements and nodes from which the sweep operation was made will be deleted. When set to 2 this value uses the new numbering control scheme.
STRING entity_select[] This value specifies a list of entities on which the sweep operation will take place.
INTEGER num_topologies This value specifies the number of sweep topology conversion pairs and should be set to the value 10.
STRING sweep_topologies[](num_topologies)This value specifies an array of selections of elements used to define the relationship between the types of entities on which the sweep operation will take place and the entities that the sweep operation will create from those entities. The offset into the array is used to define the type of entity from which the geometry will be extended and the value at that offset will define the entity created from the starting geometric type. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING anly_coord_frame[] This value specifies an identifier for the analysis coordinate frame.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
STRING mesh_control_type[] This value specifies the type of mesh control to be used with the arc sweep operation. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING mesh_control[](6)This value specifies mesh control parameters. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
Output:
INTEGER num_nodes This value returns the number of nodes created by the sweep operation.
INTEGER num_elements This value returns the number of elements created by the sweep operation.
STRING nodes_created[VIRTUAL] This value returns a description of the created nodes.
STRING elements_created[VIRTUAL] This value returns a description of the created elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_sweep_vector_field_1(sweep_elem_select,sweep_node_select,vector_field,field_scale_factor,offset_distance,reverse_field,normalize_field,flag,entity_select,num_topologies,sweep_topologies,anly_coord_frame,ref_coord_frame,mesh_control_type,mesh_control,num_nodes,num_elements,nodes_created,elements_created)
##########
Description:
This function will create elements by using the vector field sweep method.
Input:
STRING sweep_elem_select[] This value specifies a selection of element identifiers to be assigned to the newly created elements.
STRING sweep_node_select[] This value specifies a selection of node identifiers to be assigned to the newly created nodes.
STRING vector_field[] This value specifies the name of a vector field.
STRING field_scale_factor[] This value specifies a scaling factor to apply to the vector field.
STRING offset_distance[] This value will specify an offset distance between the entities on which the sweep operation will take place and the location where the entities created by the sweep operation will be placed.
LOGICAL reverse_field This value specifies,when set to TRUE,that the direction of the vectors in the vector field be reversed.
LOGICAL normalize_field This value specifies,when set to TRUE,that the vectors in the vector field be normalized. Normalizing the vectors in the vector field will allow magnitude of the sweep operation to be a function of the input value field_scale_factor only.
INTEGER flag This value specifies,when set to 1,that the original elements and nodes from which the sweep operation was made will be deleted. When set to 2 this value uses the new numbering control scheme.
STRING entity_select[] This value specifies a list of entities on which the sweep operation will take place.
INTEGER num_topologies This value specifies the number of sweep topology conversion pairs and should be set to the value 10.
STRING sweep_topologies[](num_topologies)This value specifies an array of selections of elements used to define the relationship between the types of entities on which the sweep operation will take place and the entities that the sweep operation will create from those entities. The offset into the array is used to define the type of entity from which the geometry will be extended and the value at that offset will define the entity created from the starting geometric type. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING anly_coord_frame[] This value specifies an identifier for the analysis coordinate frame.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
STRING mesh_control_type[] This value specifies the type of mesh control to be used with the arc sweep operation. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
STRING mesh_control[](6)This value specifies mesh control parameters. See the “Sweep Function Input Value Tables” at the end of this section for a list of values that can be used with this argument.
Output:
INTEGER num_nodes This value returns the number of nodes created by the sweep operation.
INTEGER num_elements This value returns the number of elements created by the sweep operation.
STRING nodes_created[VIRTUAL] This value returns a description of the created nodes.
STRING elements_created[VIRTUAL] This value returns a description of the created elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
flds_beam_spline_create(spline_name,spline_method,dimension,num_struc_nodes,struc_node_ids,aero_type,num_aero_elems,aero_elem_ids,bdy_surf_id,ref_cid,linear,x_rotation,y_rotation,z_rotation,xy_tflex,zy_tflex)
##########
Description:
This function creates the Beam Splines given the information available on the SPLINE5 card.
Input:
STRING spline_name This value specifies the name of the Spline.
INTEGER spline_method This value specifies the spline method. (1=GENERAL,2=DISPLACEMENT,3=FORCE)
INTEGER dimension This value specifies the dimension value. (1=1D,2=2D)
INTEGER num_struc_nodes This value specifies the number of Structural nodes specified.
INTEGER struc_node_ids()This value specifies the array of Structural node ids.
INTEGER aero_type This value specifies the type of the Aero data. (1=BODY,2=SURFACE)
INTEGER num_aero_elems This value specifies the number of Aero elements specified.
INTEGER aero_elem_ids()This value specifies the array of Aero element ids.
INTEGER bdy_surf_id This value specifies the ID of the Body/Surface that the selected Aero elements belong to.
INTEGER ref_cid,This value specifies the Reference CID value.
REAL linear This value specifies the Linear Attach Flexibility value.
REAL x_rotation This value specifies the X-Rotation value.
REAL y_rotation This value specifies the Y-Rotation value.
REAL z_rotation This value specifies the Z-Rotation value.
REAL xy_tflex This value specifies the XY Torsion Flexibility value.
REAL zy_tflex This value specifies the ZY Torsion Flexibility value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
3001003 %A% is an invalid Load Case Type. Must be Static or Time Dependent.
13000085 Cursor not open
13000117 The query specified has completed
14000001 LpGetHeapSpace: Allocated heapspace is exhausted
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter
14000014 LpSublistNext: Attempt to proceed past last sublist in current list
14000015 LpSublistNext: End of current list has been reached
14000201 Invalid output string specified for call
26001010 Load/BC Definition %A% does not exist.
26002010 Load/BC Name is blank. Input a Load/BC Name.
26002011 Load/BC Name %A% is too long. Input 31 characters or less.
26002121 %I% is an invalid number of application regions for the specified Load/BC definition.
26002134 The list %A% contains FEM or unknown GEOmetric entities. All the entities in the application region(s)must be GEOmetric.
26002135 The list %A% contains GEOmetric or unknown FEM entities. All the entities in the application region(s)must be FEM.
26002136 %A% is an invalid Geometry Filter. Must be Geometry or FEM.
26002200 There was no data input for this Load/BC Set.
26002201 %I% is an invalid number of input data fields for the specified Load/BC definition.
26006001 Database error encountered: %I%. Call PDA Hotline.
1 This is am internal status condition. There is no corresponding status message in the message database.
---------------
flds_beam_spline_modify(spline_name,new_spline_name,spline_method,dimension,num_struc_nodes,struc_node_ids,aero_type,num_aero_elems,aero_elem_ids,bdy_surf_id,ref_cid,linear,x_rotation,y_rotation,z_rotation,xy_tflex,zy_tflex)
##########
Description:
This function modifies the Beam Splines given the information available on the SPLINE5 card.
Input:
STRING spline_name This value specifies the name of the Spline.
STRING new_spline_name This value specifies the new Spline name.
INTEGER spline_method This value specifies the spline method. (1=GENERAL,2=DISPLACEMENT,3=FORCE)
INTEGER dimension This value specifies the dimension value. (1=1D,2=2D)
INTEGER num_struc_nodes This value specifies the number of Structural nodes specified.
INTEGER struc_node_ids()This value specifies the array of Structural node ids.
INTEGER aero_type This value specifies the type of the Aero data. (1=BODY,2=SURFACE)
INTEGER num_aero_elems This value specifies the number of Aero elements specified.
INTEGER aero_elem_ids()This value specifies the array of Aero element ids.
INTEGER bdy_surf_id This value specifies the ID of the Body/Surface that the selected Aero elements belong to.
INTEGER ref_cid,This value specifies the Reference CID value.
REAL linear This value specifies the Linear Attach Flexibility value.
REAL x_rotation This value specifies the X-Rotation value.
REAL y_rotation This value specifies the Y-Rotation value.
REAL z_rotation This value specifies the Z-Rotation value.
REAL xy_tflex This value specifies the XY Torsion Flexibility value.
REAL zy_tflex This value specifies the ZY Torsion Flexibility value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
3001003 %A% is an invalid Load Case Type. Must be Static or Time Dependent.
13000085 Cursor not open
13000103 No LBC was found
13000117 The query specified has completed
14000001 LpGetHeapSpace: Allocated heapspace is exhausted
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter
14000014 LpSublistNext: Attempt to proceed past last sublist in current list
14000015 LpSublistNext: End of current list has been reached
14000201 Invalid output string specified for call
26001010 Load/BC Definition %A% does not exist.
26002011 Load/BC Name %A% is too long. Input 31 characters or less.
26002030 %A% already exists. Modify not permitted.
26002121 %I% is an invalid number of application regions for the specified Load/BC definition.
26002134 The list %A% contains FEM or unknown GEOmetric entities. All the entities in the application region(s)must be GEOmetric.
26002135 The list %A% contains GEOmetric or unknown FEM entities. All the entities in the application region(s)must be FEM.
26002136 %A% is an invalid Geometry Filter. Must be Geometry or FEM.
26002200 There was no data input for this Load/BC Set.
26002201 %I% is an invalid number of input data fields for the specified Load/BC definition.
26002701 Load/BC set cannot be renamed to blank.
26002703 No existing Load/BC set is selected.
26006001 Database error encountered: %I%. Call PDA Hotline.
26006004 Dynamic memory allocation error encountered.
1 This is am internal status condition. There is no corresponding status message in the message database.
---------------
flds_elas_verify_aero_elems(type,num_elems,elem_ids,reg_id)
##########
Description:
This function verifies that the list of element ids are all Aero elements.
Input:
STRING type Type of element property sets to be allowed
INTEGER num_elems Number of elements to be verified
INTEGER elem_ids()Array listing the element ids to be verified
Output:
INTEGER reg_id The id of the region the selected Aero elements belong to
INTEGER. <Return Value> 0 = Success; 1=Failure
---------------
flds_spline_verify_disp(splines,case_name,subcase_name,primary_name,animate_active,three_on,num_frames)
##########
Description:
This function display the results of the Spline verification.
Input:
STRING splines()This value specifies the array of selected spline names.
STRING case_name This value specifies the structural load case name.
STRING subcase_name This value specifies the selected spline result condition.
STRING primary_name This value specifies the name of the result type. (Displacements or Eigenvectors)
LOGICAL animate_active TRUE: if the results are to be animated; FALSE otherwise.
LOGICAL three_on TRUE: if a 3D animation is to be done; FALSE otherwise.
INTEGER num_frames This value specifies the number of frames to show if animate_active
Output:
None.
---------------
flds_surf_spline_create(spline_name,spline_method,num_struc_nodes,struc_node_ids,num_aero_elems,aero_elem_ids,surf_id,linear_attach_flex,type,x_axis,y_axis)
##########
Description:
This function creates the Surface Splines given the information available on the SPLINE4 card.
Input:
STRING spline_name This value specifies the name of the Spline.
INTEGER spline_method This value specifies the spline method. (1=GENERAL,2=DISPLACEMENT,3=FORCE)
INTEGER num_struc_nodes This value specifies the number of Structural nodes specified.
INTEGER struc_node_ids()This value specifies the array of Structural node ids.
INTEGER num_aero_elems This value specifies the number of Aero elements specified.
INTEGER aero_elem_ids()This value specifies the array of Aero element ids.
INTEGER surf_id This value specifies the ID of the Surface that the selected Aero elements belong to.
REAL linear_attach_flex This value specifies the Linear Attach Flexibility value.
INTEGER type This value specifies the type. (1=HARDER_DESM,2=THIN_PLATE,3=FINITE_PLATE)
INTEGER x_axis This value specifies the number of X-axis elements.
INTEGER y_axis This value specifies the number of Y-axis elements.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
3001003 %A% is an invalid Load Case Type. Must be Static or Time Dependent.
13000085 Cursor not open
13000117 The query specified has completed
14000001 LpGetHeapSpace: Allocated heapspace is exhausted
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter
14000014 LpSublistNext: Attempt to proceed past last sublist in current list
14000015 LpSublistNext: End of current list has been reached
14000201 Invalid output string specified for call
26001010 Load/BC Definition %A% does not exist.
26002010 Load/BC Name is blank. Input a Load/BC Name.
26002011 Load/BC Name %A% is too long. Input 31 characters or less.
26002121 %I% is an invalid number of application regions for the specified Load/BC definition.
26002134 The list %A% contains FEM or unknown GEOmetric entities. All the entities in the application region(s)must be GEOmetric.
26002135 The list %A% contains GEOmetric or unknown FEM entities. All the entities in the application region(s)must be FEM.
26002136 %A% is an invalid Geometry Filter. Must be Geometry or FEM.
26002200 There was no data input for this Load/BC Set.
26002201 %I% is an invalid number of input data fields for the specified Load/BC definition.
26006001 Database error encountered: %I%. Call PDA Hotline.
1 This is am internal status condition. There is no corresponding status message in the message database.
---------------
flds_surf_spline_modify(spline_name,new_spline_name,spline_method,num_struc_nodes,struc_node_ids,num_aero_elems,aero_elem_ids,surf_id,linear_attach_flex,type,x_axis,y_axis)
##########
Description:
This function modifies the Surface Splines given the information available on the SPLINE4 card.
Input:
STRING spline_name This value specifies the name of the Spline.
STRING new_spline_name This value specifies the new Spline name.
INTEGER spline_method This value specifies the spline method. (1=GENERAL,2=DISPLACEMENT,3=FORCE)
INTEGER num_struc_nodes This value specifies the number of Structural nodes specified.
INTEGER struc_node_ids()This value specifies the array of Structural node ids.
INTEGER num_aero_elems This value specifies the number of Aero elements specified.
INTEGER aero_elem_ids()This value specifies the array of Aero element ids.
INTEGER surf_id This value specifies the ID of the Surface that the selected Aero elements belong to.
REAL linear_attach_flex This value specifies the Linear Attach Flexibility value.
INTEGER type This value specifies the type. (1=HARDER_DESM,2=THIN_PLATE,3=FINITE_PLATE)
INTEGER x_axis This value specifies the number of X-axis elements.
INTEGER y_axis This value specifies the number of Y-axis elements.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
3001003 %A% is an invalid Load Case Type. Must be Static or Time Dependent.
13000085 Cursor not open
13000103 No LBC was found
13000117 The query specified has completed
14000001 LpGetHeapSpace: Allocated heapspace is exhausted
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter
14000014 LpSublistNext: Attempt to proceed past last sublist in current list
14000015 LpSublistNext: End of current list has been reached
14000201 Invalid output string specified for call
26001010 Load/BC Definition %A% does not exist.
26002011 Load/BC Name %A% is too long. Input 31 characters or less.
26002030 %A% already exists. Modify not permitted.
26002121 %I% is an invalid number of application regions for the specified Load/BC definition.
26002134 The list %A% contains FEM or unknown GEOmetric entities. All the entities in the application region(s)must be GEOmetric.
26002135 The list %A% contains GEOmetric or unknown FEM entities. All the entities in the application region(s)must be FEM.
26002136 %A% is an invalid Geometry Filter. Must be Geometry or FEM.
26002200 There was no data input for this Load/BC Set.
26002201 %I% is an invalid number of input data fields for the specified Load/BC definition.
26002701 Load/BC set cannot be renamed to blank.
26002703 No existing Load/BC set is selected.
26006001 Database error encountered: %I%. Call PDA Hotline.
26006004 Dynamic memory allocation error encountered.
1 This is am internal status condition. There is no corresponding status message in the message database.
---------------
fem_transform_elems_mirror_1(new_eid_list,plane_list,offset,reverse_elems,flag,elem_list,created_nids,created_eids,deleted_nids,deleted_eids)
##########
Description:
This function will do a mirror translation on selected elements.
Input:
STRING new_eid_list[] This value specifies a selection of element identifiers to be assigned to the newly created elements.
STRING plane_list[] This value specifies an identifier for the plane around which the mirror transformation will be made.
REAL offset This value specifies an offset from the mirror transformation plane.
LOGICAL reverse_elems This value specifies,when set to TRUE,that the mirrored elements are to be reversed after mirror transformation has been done. Setting this value to TRUE will ensure that the jacobian values for solid elements will remain positive. Setting this value to FALSE may allow the creation of elements with negative jacobian values.
INTEGER flag This value specifies,when set to 1,that the original elements and nodes from which the sweep operation was made will be deleted. When set to 2 this value uses the new numbering control scheme and when set to 3,uses the new id offset method.
STRING elem_list[] This value specifies a list of elements to mirror.
Output:
STRING created_nids[VIRTUAL] This value returns a description of the created nodes.
STRING created_eids[VIRTUAL] This value returns a description of the created elements.
STRING deleted_nids[VIRTUAL] This value returns a description of the deleted nodes.
STRING deleted_eids[VIRTUAL] This value returns a description of the deleted elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_transform_elems_rotate_1(rotate_elem_select,axis_select,rotation_angle,offset_angle,ref_coord_frame,repeat_number,flag,element_select,nodes_created,elements_created,nodes_deleted,elements_deleted)
##########
Description:
This function will do a rotation translation on the input list of elements.
Input:
STRING rotate_elem_select[] This value specifies a selection of element identifiers to be assigned to the newly created elements.
STRING axis_select[] This value specifies an identifier for the axis around which the rotation translation will take place.
REAL rotation_angle This value specifies the angle of rotation in degrees.
REAL offset_angle This value specifies the offset angle for the rotation translation in degrees.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
INTEGER repeat_number This value specifies the number of times to repeat the rotation translation.
INTEGER flag This value specifies,when set to 1,that the original elements and nodes from which the sweep operation was made will be deleted. When set to 2 this value uses the new numbering control scheme and when set to 4,uses the new id offset method.
STRING element_select[] This value specifies a list of elements to rotate.
Output:
STRING nodes_created[VIRTUAL] This value returns a description of the created nodes.
STRING elements_created[VIRTUAL] This value returns a description of the created elements.
STRING nodes_deleted[VIRTUAL] This value returns a description of the deleted nodes.
STRING elements_deleted[VIRTUAL] This value returns a description of the deleted elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_transform_nodes_mirror_1(new_nid_list,plane_list,offset,flag,node_list,created_nids,deleted_ids)
##########
Description:
This function will do a mirror translation on the input list of nodes.
Input:
STRING new_nid_list[] This value specifies a selection of node identifiers to be assigned to the newly created nodes.
STRING plane_list[] This value specifies an identifier for the axis around which the mirror translation will take place.
REAL offset This value specifies an offset from the mirror transformation plane.
INTEGER flag This value specifies,when set to 1,that the original elements and nodes from which the sweep operation was made will be deleted. When set to 2 this value uses the new numbering control scheme and when set to 3,uses the new id offset method.
STRING node_list[] This value specifies a list of nodes to mirror.
Output:
STRING created_nids[VIRTUAL] This value returns a description of the created nodes.
STRING deleted_ids[VIRTUAL] This value returns a description of the deleted nodes.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_transform_nodes_rotate_1(rotate_node_select,axis_select,rotation_angle,offset_angle,ref_coord_frame,repeat_number,flag,node_select,nodes_created,nodes_deleted)
##########
Description:
This function will do a rotation translation on the input list of nodes.
Input:
STRING rotate_node_select[] This value specifies a selection of node identifiers to be assigned to the newly created nodes.
STRING axis_select[] This value specifies an identifier for the axis around which the rotation translation will take place.
REAL rotation_angle This value specifies the angle of rotation in degrees.
REAL offset_angle This value specifies the offset angle for the rotation translation in degrees.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
INTEGER repeat_number This value specifies the number of times to repeat the rotation translation.
INTEGER flag This value specifies,when set to 1,that the original elements and nodes from which the sweep operation was made will be deleted. When set to 2 this value uses the new numbering control scheme and when set to 4,uses the new id offset method.
STRING node_select[] This value specifies a list of elements to rotate.
Output:
STRING nodes_created[VIRTUAL] This value returns a description of the created nodes.
STRING nodes_deleted[VIRTUAL] This value returns a description of the deleted nodes.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_translate_nodes_1(trans_node_select,vector_select,ref_coord_frame,repeat_number,transform_type,delete_parents,node_select,nodes_created,nodes_deleted)
##########
Description:
This function will do a translation operation on the input list of nodes.
Input:
STRING trans_node_select[] This value specifies a selection of node identifiers to be assigned to the newly created nodes.
STRING vector_select[] This value specifies an identifier for the vector describing the direction and distance used for the translation operation.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
INTEGER repeat_number This value specifies the number of times to repeat the translation operation.
LOGICAL transform_type This value specifies,when set to TRUE,that the local coordinate system will used to interpret the input value vector_select. If this value is set to FALSE it will be assumed that the input value vector_select specifies a vector in cartesian coordinates.
INTEGER flag This value specifies,when set to 1,that the original elements and nodes from which the sweep operation was made will be deleted. When set to 2 this value uses the new numbering control scheme and when set to 4,uses the new id offset method.
STRING node_select[] This value specifies a list of nodes to translate.
Output:
STRING nodes_created[VIRTUAL] This value returns a description of the created nodes.
STRING nodes_deleted[VIRTUAL] This value returns a description of the deleted nodes.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_translate_nodes_2(trans_node_select,vector_select,vector_magnitude,reverse_dir,ref_coord_frame,repeat_number,transform_type,delete_parents,node_select,nodes_created,nodes_deleted)
##########
Description:
This function will do a translation operation on the input list of nodes.
Input:
STRING assigned_ids[] This value specifies a selection of node identifiers to be assigned to the newly created nodes. Default "#" (Next available id)
STRING vector_select[] This value specifies an identifier for the vector describing the direction and distance used for the translation operation. Default "<1 0 0>"
REAL magnitude The distance to translate in the specified vector direction. Default is the magnitude of the direction vector,e.g. 1.
LOGICAL reverse_dir This value specifies,when set to TRUE,to translate in the negative direction of the translation vector. If FALSE,in the positive direction. Default is FALSE
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame. Default is "Coord 0".
INTEGER repeat_number This value specifies the number of times to repeat the translation operation. Default is 1
LOGICAL transform_type This value specifies,when set to TRUE,that the local coordinate system will be used to interpret the input value vector_select. If this value is set to FALSE,it will be assumed that the input value vector_select specifies a vector in cartesian coordinates. Default is FALSE.
INTEGER flag This value specifies,when set to 1,that the original nodes from which the transform operation was made will be deleted. When set to 2 this value uses the new numbering control scheme and when set to 4,uses the new id offset method. Default is 2
STRING node_select[] This value specifies a list of nodes to translate.
Output:
STRING nodes_created[VIRTUAL] This value returns a description of the created nodes.
STRING nodes_deleted[VIRTUAL] This value returns a description of the deleted nodes.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_translate_elems_1(trans_elem_select,vector_select,ref_coord_frame,repeat_number,transform_type,flag,elem_select,nodes_created,elements_created,nodes_deleted,elements_deleted)
##########
Description:
This function will do a translation operation on the input list of elements.
Input:
STRING trans_elem_select[] This value specifies a selection of element identifiers to be assigned to the newly created elements.
STRING vector_select[] This value specifies an identifier for the vector describing the direction and distance used for the translation operation.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
INTEGER repeat_number This value specifies the number of times to repeat the translation operation.
LOGICAL transform_type This value specifies,when set to TRUE,that the local coordinate system will used to interpret the input value vector_select. If this value is set to FALSE it will be assumed that the input value vector_select specifies a vector in cartesian coordinates.
INTEGER flag This value specifies,when set to 1,that the original elements and nodes from which the sweep operation was made will be deleted. When set to 2 this value uses the new numbering control scheme and when set to 4,uses the new id offset method.
STRING elem_select[] This value specifies a list of elements to translate.
Output:
STRING nodes_created[VIRTUAL] This value returns a description of the created nodes.
STRING elements_created[VIRTUAL] This value returns a description of the created elements.
STRING nodes_deleted[VIRTUAL] This value returns a description of the deleted nodes.
STRING elements_deleted[VIRTUAL] This value returns a description of the deleted elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
fem_translate_elems_2(trans_elem_select,vector_select,vector_magnitude,reverse_dir,ref_coord_frame,repeat_number,transform_type,flag,elem_select,nodes_created,elements_created,nodes_deleted,elements_deleted)
##########
Description:
This function will do a translation operation on the input list of elements.
Input:
STRING trans_elem_select[] This value specifies a selection of element identifiers to be assigned to the newly created elements.
STRING vector_select[] This value specifies an identifier for the vector direction used for the translation operation.
REAL vector_magnitude This value specifies an identifier for the vector magnitude used for the translation operation.
LOGICAL reverse_dir This value specifies,when set to TRUE,that the vector direction will be reversed. If this vale is set to FALSE,vector direction will not be reversed.
STRING ref_coord_frame[] This value specifies an identifier for the reference coordinate frame.
INTEGER repeat_number This value specifies the number of times to repeat the translation operation.
LOGICAL transform_type This value specifies,when set to TRUE,that the local coordinate system will be used to interpret the input value vector_select. If this value is set to FALSE,it will be assumed that the input value vector_select specifies a vector in cartesian coordinates.
INTEGER flag This value specifies,when set to 1,that the original elements and nodes from which the sweep operation was made will be deleted. When set to 2 this value uses the new numbering control scheme and when set to 4,uses the new id offset method.
STRING elem_select[] This value specifies a list of elements to translate.
Output:
STRING nodes_created[VIRTUAL] This value returns a description of the created nodes.
STRING elements_created[VIRTUAL] This value returns a description of the created elements.
STRING nodes_deleted[VIRTUAL] This value returns a description of the deleted nodes.
STRING elements_deleted[VIRTUAL] This value returns a description of the deleted elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
flds_lb_export_loads(rc_ids,load_set_list,output_file,write_nodes)
##########
Description:
This function writes forces cards from specified data source.
Input:
INTEGER rc_ids()This value specifies the result case definition arrray: res_ids(i,1)= Loadcase Id res_ids(i,2)= Subcase Id res_ids(i,3)= Primary Result Id res_ids(i,4)= Secondary Result Id res_ids(i,5)= Layer Id
STRING load_set_list This value specifies the list of load set ids.
STRING output_file This value specifies the output file name.
LOGICAL write_nodes TRUE: GRID cards will be written; FALSE otherwise.
Output:
None.
---------------
load_tools_calc.plot_runloads(num_regions_p,region_names_p,output_cf_pick,comp_plot_p,lbc_values_num_p,lbc_values_p,case_values_num_p,case_values_p,force_results,moment_results,conv_values_p,integ_axis_p,minval_value_p,maxval_value_p,eval_pts_p,mult_curve_p,prev_created_p,file_name_p)
##########
Description:
This function plots the running loads.
Input: :
num_regions_p INTEGER Number of selected regions (-1=Region Chain,0=Selected Entities,n=no. of regions)
region_names_p[]()STRING Names of the selected regions or region chain,or picklist of entities
output_cf_pick[] STRING Coord frame if entities selected
comp_plot_p()LOGICAL Components to plot
lbc_values_num_p INTEGER Number of LBCs selected
lbc_values_p[]()STRING Names of the LBCs selected
case_values_num_p INTEGER Number of loadcases selected
case_values_p[]()STRING Names of the loadcases selected
force_results()INTEGER Force results selected
moment_results()INTEGER Moment results selected
conv_values_p[] STRING Names of the algorithms
integ_axis_p[] STRING Whether range is MANUAL or AUTO.
minval_value_p REAL Minimum range value specified.
maxval_value_p REAL Maximum range value specified.
eval_pts_p INTEGER Number of evaluation points
mult_curve_p[] STRING "Multiple curve plotting" option
prev_created_p[] STRING "Previously created" option
file_name_p[] STRING Output text file name
Output:
None.
---------------
load_tools_calc.plot_loadsum(unum_regions,regions,lbc_values_num,lbc_values,case_values_num,case_values,force_results,moment_results,comp_sum,algorithm,ref_pnt,output_cf_pick,sum_method)
##########
Description:
This function plots the sum of loads.
Input:
unum_regions INTEGER Number of entities (-1=Entire Model,0=Selected Entities,n=no. of regions)
regions[]()STRING Entities (picklist or regions for n!= 0)
lbc_values_num INTEGER Number of lbcs selected
lbc_values[]()STRING Names of lbcs selected
case_values_num INTEGER Number of loadcases selected
case_values[]()STRING Names of loadcases selected
force_results()INTEGER Force results selected
moment_results()INTEGER Moment results selected
comp_sum()LOGICAL Components to sum (1-6)
algorithm[] STRING Pressure algorithms selected
ref_pnt[] STRING Reference point for sum (picklist)
output_cf_pick[] STRING Coordinate frame (picklist)
sum_method[] STRING Summation side: given or opposite plane
Output:
None.
---------------
Load_tools_calc.create_equiv_vector(lcase,storage_lcase,output_cf_pick,app_entities,ref_pnt)
##########
Description:
This function performs load summation calculations and saves in load cases
Input:
lcase STRING Load case to create equiv vectors for
storage_lcase STRING Load case in which to store equiv vectors
output_cf_pick STRING Coord frame for equivalent vectors
app_entities STRING Entity picklist to consider for summation
ref_pnt STRING Point about which to sum loads
Output:
None.
---------------
load_tools_region.create(name,cid,groups,num_groups)
##########
Description:
This function creates a new user data instance of a region.
Input:
Name STRING[] Name of region
cid INTEGER Coord frame id
groups STRING[]()Groups for region
num_groups INTEGER Number of groups for region
Output:
None.
---------------
load_tools_region.modify(old_name,new_name,cid,groups,num_groups)
##########
Description:
This function modifies a region in the database. If the region is referenced by a region chain,the chain is also updated.
Input:
old_name STRING[] Current region name
new_name STRING[] Desired region name
cid INTEGER Coord frame id
groups STRING[]()Group names for region
num_groups INTEGER Number of groups for region
Output:
None.
---------------
load_tools_region.delete(names)
##########
Description:
This function deletes a user data instance of a region.
Input:
names STRING[]()regions to delete
Output:
None.
---------------
load_tools_chain.create(name,regions,num_regions)
##########
Description:
This function creates a new region chain.
Input:
name STRING[] Name of instance for chain
regions STRING[]()Regions comprising the chain
num_regions INTEGER Number of region comprising the chain
Output:
None.
---------------
load_tools_chain.modify(old_name,new_name,regions,num_regions)
##########
Description:
This function enables you to modify a region chain stored in the database. Any of the defining data (including name)may be modified.
Input:
old_name STRING[] Existing chain name
new_name STRING[] Desired chain name
regions STRING[]()Regions for chain
num_regions INTEGER Number of regions for chain
Output:
None.
---------------
load_tools_chain.delete(names)
##########
Description:
This function deletes a region chain.
Input:
names STRING[]()Name of chain.
Output:
None.
---------------
AAI.html_calls(pclcalls)
##########
Description:
This function will execute the function or functions described by the string argument pclcalls. This call is typically listed on an HREF anchor of HTML dialog packets. This function will parse the argument supplied into the indicated PCL function calls with their arguments,and then make the calls.
Input:
STRING pclcalls[ ] This value specifies the PCL functions and all parameters for those functions. The format is given in the Remarks section below.
Output:
Error Conditions:
None.
---------------
AAI.get_step1id(step1id)
##########
Description:
This function will return the ID of the first analysis step. A separate,special XML drive page exists for the first analysis step. This function reads that page and searches for the stepid tag.
Input: Output:
STRING step1id[4] This value returns the ID found in the step tag.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AAI.allsteps_display()
##########
Description:
This function will search for the <defsteps> tag on an XML page. It reads the 4 character ID and 36 character definition of steps for all analysis steps. It obtains the step completion indications from the STATE TABLE. It calls the AAUI.mainpanel_include_steps function to cause a display of the steps on the Main Panel.
Input:
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AAI.init_step_dialog()
##########
Description:
This function will read the XML solution sequence page and follow the automated link rules to select the correct initial dialog for a selected step. This function is called by the user interface model in response to a user selecting an analysis step.
Input:
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AAI.step_help_doc()
##########
Description:
This function will display the supplemental HTML help document associated with the current operational analysis step,if one is specified,by launching the MSC Acumen BROWSER application.
Input:
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None
---------------
AAI.next_dialog(filename,filestep,dialog_id)
##########
Description:
This function will read the XML page file,extract the HTML dialog called for,and feed it to the UI Dialog Box HTML widget. The dialog is selected by direct reference to the page “filename”,the step tag ID on that page file “filestep”,and the dialog tag ID within the step tag “dialog_id”. No automated link rules are followed to get to the dialog.
Input:
STRING filename[128] This value specifies the name of the XML file. If the first character is a ‘/’,it is a full path,otherwise it is a relative path from the AdvisorLIB environment variable path.
STRING filestep[4] This value specifies the step ID.
STRING dialog_id[8] This value specifies the dialog ID.
Output:
INTEGER <Return Value> his function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AAI.dynamic_next_dialog(htmlstring,filename,filestep,dialog_id)
##########
Description:
This function will find and display HTML dialog and handle function calls associated with the referenced <dialog> tag. In addition,this call appends the HTML contained in the “htmlstring” argument to the front of the any HTML found in the referenced “drive page” dialog. The <HTML> </HTML> tags from the two sources are consolidated into one set bounding the total constructed dialog. This call enables the dynamic construction and display of HTML dialog from automation functions. The dialog may present information that was obtained through recent computations. To use double quotes,“,within a PCL string that is being passed,two double quotes ,““,are used and will be converted to one double quote within the string. See example below.
Input:
STRING htmlstring[ ] This value specifies dynamically generated HTML data to append in the front of any fixed HTML contained in the referenced <dialog> tag.
STRING filename[128] This value specifies the name of the XML file. If the first character is a ‘/’,it is a full path,otherwise it is a relative path from the AdvisorLIB environment variable path.
STRING filestep[4] This value specifies the step ID.
STRING dialog_id[8] This value specifies the dialog ID.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None
---------------
AAI.queued_dialog()
##########
Description:
This function will display the next dialog HTML packet in the UI form Dialog Box associated with the quedlg argument for the current dialog.
Input: Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AAI.queued_msg()
##########
Description:
This function will display an error condition warning dialog HTML packet in the UI form Dialog Box. It is called when user inputs to the Inputs Box result in an error return value.
Input:
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AAI.queued_ftn()
##########
Description:
This function will execute optional supplemental PCL function calls as requested through the queftn argument in the dialog tag.
Input:
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AAI.initiate_ftn()
##########
Description:
This function will execute optional supplemental PCL function calls as requested through the initftn argument in the dialog tag.
Input:
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AAI.exit_ftn()
##########
Description:
This function will execute optional supplemental PCL function calls as requested through the exitftn argument in the dialog tag.
Input:
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
db_set_elem_verification_parms(<analy_code_name>,<test_id>,<threshold>)
##########
Description:
Input:
CHARACTER STRING <analy_code_name> The name of the new analysis code.
INTEGER <test_id> The ID of the particular element verification test. The meaning of these IDs are: 1 = aspect ratio,triangular elements 2 = skew,triangular elements 3 = aspect ratio,quadrilateral elements 4 = skew,quadrilateral elements 5 = warp,quadrilateral elements 6 = taper,quadrilateral elements 7 = aspect ratio,tetrahedral elements 8 = face skew,tetrahedral elements 9 = collapse,tetrahedral elements 10 = edge angle,tetrahedral elements 11 = aspect ratio,pentahedral elements 12 = face skew,pentahedral elements 13 = face taper,pentahedral elements 14 = face warp,pentahedral elements 15 = twist,pentahedral elements 16 = edge angle,pentahedral elements 17 = face skew,hexahedral elements 18 = face warp,hexahedral elements 19 = face taper,hexahedral elements 20 = edge angle hexahedral elements
21 = aspect ratio,hexahedral elements 22 = twist,hexahedral elements 23 = mid-side node normal offset,all elements 24 = mid-side node tangent offset,all elements 52 = Nastran tria skew 54 = Nastran quad skew 55 = Nastran quad warp 56 = Nastran quad taper 57 = Nastran tet aspect 61 = Nastran wedge aspect 64 = Nastran wedge face warp 68 = Nastran hex face warp 71 = Nastran hex aspect
REAL <threshold> Maximum acceptable value for the specified test. The threshold values for warp,skew,twist,face warp,face skew and edge angle should be in degrees.
Output:
INTEGER <Return Value> Status return value.
Error Conditions:
None.
---------------
analysis_main.set_display_flags(<job_frame_display>,<button_frame_display>,<separator_display>,<apply_button_display>)
##########
Input:
None.
Output:
LOGICAL <job_frame_display> A flag specifying whether the job name / job description frame should be displayed (TRUE)or not (FALSE).
LOGICAL <button_frame_display> A flag specifying whether the button frame should be displayed (TRUE)or not (FALSE).
LOGICAL <separator_display> A flag specifying whether the separator widget should be displayed (TRUE)or not (FALSE).
LOGICAL <apply_button_display> A flag specifying whether the Apply button should be displayed (TRUE)or not (FALSE).
Error Conditions:
None.
---------------
analysis_main.dont_commit_on_apply()
##########
Input:
None.
Output:
LOGICAL <job_frame_display> A flag specifying whether the job name / job description frame should be displayed (TRUE)or not (FALSE).
LOGICAL <button_frame_display> A flag specifying whether the button frame should be displayed (TRUE)or not (FALSE).
LOGICAL <separator_display> A flag specifying whether the separator widget should be displayed (TRUE)or not (FALSE).
LOGICAL <apply_button_display> A flag specifying whether the Apply button should be displayed (TRUE)or not (FALSE).
Error Conditions:
None.
---------------
analysis_main.dont_update_on_apply()
---------------
analysis_main.disable_jobname_and_description()
---------------
analysis_main.set_jobname_blank()
---------------
analysis_main.load_job_name_dbox()
##########
Input:
STRING <job_name> The name of the job to be loaded in the job name databox.
Output:
None.
Error Conditions:
None.
---------------
analysis_main.set_jobname_current()
---------------
analysis_main.refresh_jobname_listbox()
---------------
analysis_main.button_class_closed(<associated_class>)
##########
Input:
STRING <associated_class> The name of the class whose form is being closed.
Output:
None.
Error Conditions:
None.
---------------
analysis_main.get_analysis_menu_items(<item_orders>,<item_labels>)
##########
Input:
None.
Output:
INTEGER ARRAY <item_orders> A 3 element vector containing the order of the current action in the list of valid actions,the order of the current object in the list of objects valid for the chosen action,and the order of the current method in the list of methods valid for the chosen action-object selection. As an example,let us look at the case where the valid objects under “Import” are “Model,” “Results” and “Both” and there are no methods. If the object-method selection is “Import” - “Both” “ “,the <items> would be [2,3,0].
STRING ARRAY <item_labels> A 3 element vector of strings containing the names of the currently chosen action-object-method. In the above example,<item_labels> would be [“Import,” “Both,” “ “]. The maximum length of each string is 31 characters.
Error Conditions:
None.
---------------
analysis_main.get_job_name_and_desc(<job_name>,<job_description>)
##########
Input:
None.
Output:
STRING <job_name> The name of the currently selected job. The maximum length of this string is 31 characters.
STRING <job_description> The description of the currently selected job. The maximum length of this string is 256 characters.
Error Conditions:
None.
---------------
analysis_main.get_current_job_info(<job_name>,<job_description>,<job_id>,<parameter_set_id>,<job_status>)
##########
Input:
None.
Output:
STRING <job_name> The name of the currently selected job. The maximum length of this string is 31 characters.
STRING <job_description> The description of the currently selected job. The maximum length of this string is 256 characters.
INTEGER <job_id> The ID of the current job.
INTEGER <parameter_set_id> The ID of the parameter set associated with this job.
INTEGER <job_status> The status of the current job.
Error Conditions:
None.
---------------
analysis_main.get_code_and_type(<analysis_code_name>,<analysis_code_id>,<analysis_type_name>,<analysis_type_id>)
##########
Input:
None.
Output:
STRING <analysis_code_name> The name of the current analysis code. This string has a maximum of 31 characters.
INTEGER <analysis_code_id> The ID of the current analysis code.
STRING <analysis_type_name> The name of the current analysis type. This string has a maximum of 31 characters.
INTEGER <analysis_type_id> The ID of the current analysis type.
Error Conditions:
None.
---------------
analysis_main.get_file_suffixes(<model_suffix>,<results_suffix>)
##########
Input:
None.
Output:
STRING <model_suffix> The user defined model file suffix of the current analysis code. The maximum length of this string is 4 characters.
STRING <results_suffix> The user defined results file suffix of the current analysis code. The maximum length of this string is 4 characters.
Error Conditions:
None.
---------------
analysis_main.get_panel_info(<form_id>,<first_y_location>,<job_frame_id>,<button_frame_id>,<separator_id>,<apply_button_id>)
##########
Input:
None.
Output:
widget <form_id> The ID of the main Analysis form.
REAL <first_y_location> The Y position on the main Analysis form of the first widget following the Analysis Code / Analysis Type text box.
widget <job_frame_id> The ID of the job name / job description frame.
widget <button_frame_id> The ID of the button frame.
widget <separator_id> The ID of the separator widget.
widget <apply_button_id> The ID of the apply button.
Error Conditions:
None.
---------------
db_create_mpc_type_def(<type_id>,<type_name>,<geom_flag>,<coord_flag>,<const_flag>,<const_label>,<sequen_flag>,<depend_coeff_flag>,<depend_dof_flag>,<max_depend_terms>,<min_depend_terms>,<dofs_per_depend>,<nodes_per_depend>,<indep_coeff_flag>,<indep_dof_flag>,<max_indep_terms>,<min_indep_terms>,<dofs_per_indep>,<nodes_per_indep>)
##########
Description:
Input:
INTEGER <type_id> The ID to be used in referencing this MPC type. This ID must be unique with respect to all previously defined MPC type IDs.
CHARACTER STRING <type_name> The name of this MPC type.
LOGICAL <geom_flag> A flag specifying whether this MPC type references geometry or nodes: TRUE = references geometry. FALSE = references nodes.
LOGICAL <coord_flag> A flag specifying whether this MPC type references a coordinate frame or not: TRUE = references coordinate frame. FALSE = does not reference frame.
LOGICAL <const_flag> A flag specifying whether this MPC type has a constant term or not: TRUE = has constant term. FALSE = does not have constant term.
CHARACTER STRING <const_label> The label to be used for the constant term.
LOGICAL <sequen_flag> A flag specifying whether the order of term. definition should be maintained or not: TRUE = maintain order. FALSE = ignore order.
LOGICAL <depend_coeff_flag> A flag specifying whether the dependent terms have multiplicative constants assigned to them or not: TRUE = have multiplicative constants. FALSE = do not have constants.
LOGICAL <depend_dof_flag> A flag specifying whether the dependent terms have explicitly or implicitly specified degrees-of-freedom: TRUE = degrees-of-freedom explicitly defined. FALSE = implicit degrees-of-freedom.
INTEGER <max_depend_terms> The maximum number of dependent terms allowed. Zero if there is no limit.
INTEGER <min_depend_terms> The minimum number of dependent terms allowed.
INTEGER <dofs_per_depend> The maximum number of degrees-of-freedom that can be associated with a dependent term.
INTEGER <nodes_per_depend> The number of nodes to be associated with each dependent term. Zero if there is no definite number.
LOGICAL <indep_coeff_flag> A flag specifying whether the independent terms have multiplicative constants assigned to them or not: TRUE = have multiplicative constants. FALSE = do not have constants.
LOGICAL <indep_dof_flag> A flag specifying whether the independent terms have explicitly or implicitly specified degrees-of-freedom: TRUE = degrees-of-freedom explicitly defined. FALSE = implicit degrees-of-freedom.
INTEGER <max_indep_terms> The maximum number of independent terms allowed. Zero if there is no limit.
INTEGER <min_indep_terms> The minimum number of independent terms allowed.
INTEGER <dofs_per_indep> The maximum number of degrees-of-freedom that can be associated with an independent term.
INTEGER <nodes_per_indep> The number of nodes to be associated with each independent term. Zero if there is no definite number.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_add_general_field_func(<analysis_code_id>,<object>,<sub_type>,<function_name>)
##########
Description:
Input:
INTEGER <analysis_code_id> The analysis code ID.
INTEGER <object> The object type ID.
STRING[31] <sub_type> String displayed in the sub-type menu.
STRING[31] <function_name> Name of the Function.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if successful.
Error Conditions:
None.
---------------
db_count_general_field_func(anal_code_id,)
##########
Description:
Counts the number of functions in the field general functions relation for given input parameters.
Input:
INTEGER anal_code_id Analysis Code ID.
INTEGER object Object type ID: 0 for Spatial,1 for Material,2 for Non Spatial
CHARACTER[31] sub_type Sub-type string.
Output:
INTEGER count Number of functions.
INTEGER <Return Value> = 0,success else error code.
Error Conditions:
Numerous.
---------------
db_get_general_field_func(anal_code_id,)
##########
Description:
Retrieves the function names in the field general functions relation for given input parameters.
Input:
INTEGER anal_code_id Analysis code ID.
INTEGER <object> Object type ID: 0 for Spatial,1 for Material,2 for Non Spatial.
CHARACTER[31] <sub_type> Sub-type string.
INTEGER count Number of functions.
Output:
CHARACTER[31]()names Function names.
INTEGER <Return Value> = 0,success else error code.
Error Conditions:
Numerous.
---------------
fields_genrl_inp_data.form_up(“<function_name>”,FALSE)
##########
Input:
STRING[31] <function_name> Name of the function PCL class.
Output:
None.
Error Conditions:
None.
---------------
fields_genrl_inp_data.write_term_data(<argument_string>)
##########
Input:
STRING[VIRTUAL] <argument_string> String composed by the custom form PCL.
Output:
None.
Error Conditions:
None.
---------------
fields_genrl_inp_data.pass_ind_var_ids(spatial_vars,other_vars)
##########
Input:
INTEGER(3)<spatial_vars> Array of spatial variable IDs.
INTEGER(6)<other_vars> Array of non-spatial variable IDs.
Output:
None.
Error Conditions:
None.
---------------
fields_genrl_inp_data.get_data(<name>,<data>,<term_id>)
##########
Input:
None.
Output:
STRING[31] <name> Function name.
STRING[VIRTUAL] <data> Character string data for the current term id.
INTEGER <term_id> Next term id available.
Error Conditions:
None.
---------------
db_create_lbc_type_defn(<load_name>,<analy_type_id>,<applic_type>,<glob_flag>,<coord_flag>,<graph_sym>,<scal_vect>,<null_vect>,<num_analy_codes>,<analy_code_ids>,<def_color>,<color_box>,<anchor>,<load_id>)
##########
Description:
Input:
CHARACTER STRING <load_name> The name of the new load type,e.g.,“Temperature.”
INTEGER <analy_type_id> Flag specifying the analysis type: 1 = Structural. 2 = Thermal. 3 = Fluid Dynamics.
INTEGER <applic_type> Flag specifying the effect of this load type: 0 = Body Load. 1 = Boundary Load.
INTEGER <glob_flag> Flag specifying whether the load has global application or not: 0 = Only application region affected. 1 = Global load: affects everything.
INTEGER <coord_flag> Flag specifying whether the load can be oriented in a given local frame or not: 0 = No alternate coordinate frame orientation allowed. 1 = Alternate coordinate frame orientation accepted. -1 = Local
INTEGER <graph_sym> Flag specifying what graphic symbol should be used for this load type. See Table 6‑1.
INTEGER <scal_vect> Flag specifying the data form of the load: 0 = scalar. 1= vector.
INTEGER <null_vect> Flag specifying whether blank components of a vector load are to be interpreted as zeroes (as with forces)or nulls (as with displacements): 0 = interpret blank components as zeroes. 1 = interpret blank components as nulls.
INTEGER <num_analy_codes> No longer used. Input zero.
INTEGER ARRAY <analy_code_ids> No longer used. Input an array of none zero [0].
INTEGER <def_color> Flag specifying the default color to be used for this load type. See Table 6‑2.
INTEGER <color_box> The number of the color box to be used to modify the load type color. Must range from 601 to 640 and be unique for a given analysis code. See Table 6‑3 for IDs used by Patran
INTEGER <anchor> Flag which specifies the anchor style for vector load types: 1= anchor at base. 2 = anchor at tip. 3 = anchor at middle.
INTEGER <load_id> Load type IDs must be unique with respect to all other load type IDs previously defined. Load IDs 1-100 are currently being used by Patran. It is likely that IDs up to 1000 will be used for future Patran requirements. It is advisable that customers defining custom loads and boundary condition definitions use load IDs >1000. The load IDs currently being used by Patran are listed in Table 6‑4.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_app_region_defn(<load_id>,<region_label>)
##########
Description:
Input:
INTEGER <load_id> The ID of the load type of interest.
CHARACTER STRING <region_label> The name of the application region,typically simply “Application Region”.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_elem_lbc_var_defn(<load_id>,<variability>,<elem_dim>,<data_label>)
##########
Description:
Input:
INTEGER <load_id> The ID of the load type of interest.
INTEGER <variability> The variability of the input load: 2 = uniform across the element body,element face or element edge. 3 = varying across the element body,element face or element edge.
INTEGER <elem_dim> Dimensionality of the valid element types: 1 = line elements. 2 = surface elements. 3 = solid elements.
CHARACTER STRING <data_label> The label used to describe the data input such as “Top Pressure” or “Bottom Pressure”.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_nodal_lbc_var_defn(<load_id>,<data_label>)
##########
Description:
Input:
INTEGER <load_id> The ID of the load type of interest.
CHARACTER STRING <data_label> The label used to describe the data input such as “Force (F1 F2 F3)” or “Temperature”.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_add_lbc_type_for_ac(<load_id>,<data_label>)
##########
Description:
Input:
INTEGER <analy_code_id> The ID of the new analysis code as described under db_create_analysis_code,477.
INTEGER <load_type_id> The ID of the load type to be associated with the new analysis code. See db_create_lbc_type_defn,577 (argument <load_id>,579 for more details.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_add_lbc_c_and_t_for_ac(<analy_code_id>,<load_type_id>,<target_elem_flag>,<input_data_pcl>,<app_reg_data_pcl>)
##########
Description:
Input:
INTEGER <analy_code_id> The ID of the analysis code as described under db_create_analysis_code,477.
INTEGER <load_type_id> The ID of the load type to be associated with the new analysis code. See db_create_lbc_type_defn,577 (argument <load_id>,579 for more details.
INTEGER <target_elem_flag> Flag specifying whether the Target Element menu should be displayed. 0 = don’t display. 1 = display.
STRING[31] <input_data_pcl> Name of non-standard (custom)input data form PCL class. (See Custom Data and Application Region Sub-Forms,481.)
STRING[31] <app_reg_data_pcl> Name of non-standard (custom)application region form PCL class. (See Custom Data and Application Region Sub-Forms,481.)
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_add_lbc_defn_for_ac(<analy_code_id>,<load_id>,<count>,<categories>)
##########
Description:
Input:
INTEGER <analy_code_id> The ID of the analysis code as described under db_create_analysis_code,477.
INTEGER <load_id> The ID of the load type to be associated with the analysis code.
INTEGER <count> The number of valid categories. This should always be set to 3.
INTEGER(3)<categories> An array of up to 3 valid categories. The elements may be set to the following values: 1 = Nodal. 2 = Element Uniform. 3 = Element Variable. If 3 categories are not used,the remaining elements should be set to zero.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
lbc_defn_create.lbc_defn(<load_name>,<option_name>,<analy_type_id>,<applic_type>,<glob_flag>,<coord_flag>,<scal_or_vect>,<null_flag>,<def_color>,<color_box>,<n_app_region>,<appl_reg_labels>,<no_data_flag>,<input_data_pcl>,<app_reg_data_pcl>,<target_elem_flag>,<dyn_data_form>,<acid_mod>,<equiv_flag>,<load_id>)
##########
Input:
STRING[31] <load_name> The name of the new load type,e.g.,“Temperature.”
STRING[31] <option_name> The option name associated to the new load type. This name is optional. A blank string specifies no options. If a name is specified,an “Option:” menu will be added to the appropriate LBC forms. If two or more load types are defined with the same load_name,the load_name will only appear once in the LBC form “Object:” menu. The “Option:” menu is used to choose between them. If the option_name is blank,the load_name will have its own entry in the “Object:” menu.
INTEGER <analy_type_id> Flag specifying the analysis type: 1 = Structural. 2 = Thermal. 3 = Fluid Dynamics.
INTEGER <applic_type> Flag specifying the effect of this load type: 0 = Body Load. 1 = Boundary Load.
INTEGER <glob_flag> Flag specifying whether the load has global application or not: 0 = Only application region affected. 1 = Global load: affects everything.
INTEGER <coord_flag> Flag specifying whether the load can be oriented in a given local frame or not: 0 = No alternate coordinate frame orientation allowed. 1 = Alternate coordinate frame orientation accepted. -1 = Use local entity coordinate frame.
INTEGER <scal_or_vect> Flag specifying the data form of the load: 0 = scalar. 1= vector. 2= combined scalar and vector.
INTEGER <null_flag> No longer used. Input zero.
INTEGER <def_color> Flag specifying the default color to be used for this load type. Refer to Table 6‑2 for color definitions.
INTEGER <color_box> The number of the color box to be used to modify the load type color. Must range from 601 to 640 and be unique within an analysis type. Refer to Table 6‑3 for color box IDs currently used by Patran.
INTEGER <n_app_region> The number of application regions for this load type.
STRING[31]()<appl_reg_labels> Array of napp application region labels.
INTEGER <no_data_flag> Flag specifying whether data input is required. If data input is not required,a blank variable label must be specified in a call to lbc_defn_create.lbc_var_defn 0= input data is required. 1= input data is not required.
STRING[31] <input_data_pcl> Name of non-standard (custom)input data form PCL class. See Custom Data and Application Region Sub-Forms,481.		Note:db_add_lbc_c_and_t_for_ac,583.
STRING[31] <app_reg_data_pcl> Name of non-standard (custom)application region form PCL class. See Custom Data and Application Region Sub-Forms 		Note:db_add_lbc_c_and_t_for_ac,583.
INTEGER <target_elem_flag> Flag specifying whether the Target Element menu should be displayed. This flag only applies if non-standard (custom)forms are used. Both input_data_pcl and app_reg_data_pcl must be non-blank. 0 = don’t display. 1 = display. 		Note: db_add_lbc_c_and_t_for_ac,583.
INTEGER <dyn_data_form> Flag specifying whether to use a double sized input data form for dynamic load cases. 0 = use single width. 1 = use double width.
INTEGER <acid_mod> Flag specifying whether this load type has the potential to modify the analysis coordinate frame of a node. 0 = cannot modify. 1 = can modify.
INTEGER <equiv_flag> Flag specifying whether to prevent equivalencing nodes between application regions. Only applies if there is more than one application region 0 = don’t equivalence. 1 = equivalence.
INTEGER <load_id> The ID of this load type. This ID must be unique with respect to all other load type IDs previously defined. It is recommended that you use ids >1000. The following load type ids are reserved: Generic: 1-50 Thermal: 51-70 Patran TEAM: 71-90 Fluid Dynamics: 91-100
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
lbc_defn_create.lbc_var_defn(load_id,category,targ_elem_dim,variable_label,variable_id,display_order,data_type,scalar_or_vector,null_type,normal_direction,graph_symbol,connect_label,anchor,conflict_resolution,display_style,evaluation_location)
##########
Description:
This function will assign input data variable definitions to a load type.
Input:
INTEGER load_id This value specifies the load type identifier. This identifier must reference an existing load type.
INTEGER category This value specifies the type of entities at which the loads and boundary conditions will be evaluated. This value can be set to 1 for nodal entities,2 for uniform element entities,or 3 for variable element entities.
INTEGER targ_elem_dim This value specifies the dimensionality of the element to which the load and boundary condition will be applied. This value can be set to 1 for one dimension,2 for two dimensions,or 3 for three dimensions. When the input value category is set to 1 for nodal entities,this value is not used because the dimensionality for nodes is undefined and this input value should be set to 0.
STRING variable_label [31] This value specifies the text that will be associated with the input value variable_id. This text will be used to label the display of the information associated with the input value variable_id. If input data is not specified for this load type then this value must be an empty string.
INTEGER variable_id This value specifies the identifier for the variables associated with this load type. This identifier must be unique within each load type.
INTEGER display_order This value specifies the order in which variables associated with this load type would be displayed in a data box. This value can range from 1 to the number of variables associated with the identifier specified by the input variable variable_id.
INTEGER data_type This value specifies the data type for the variables associated with the input value variable_id. This value can be set to 1 for integers,3 for real or field values evaluated by the loads and boundary conditions,5 for a node identifier,or 7 for a field that is not evaluated by the loads and boundary conditions.
INTEGER scalar_or_vector This value specifies when set to 0 that the data type is a scalar value or when set to 1 that the data type is a vector value. This value is used only if the input argument data_type is set to 3 for real or field values evaluated by the loads and boundary conditions.
INTEGER null_type This value specifies,when set to 0,that blank components of a vector load are to be interpreted as zeros,as with forces. When this value is set to 1,blank components of a vector load will be interpreted as nulls,as with displacements.
INTEGER normal_direction This value specifies,when set to 0 that a local normal is not used. When this value is set to 1,the positive direction for a local normal vector will be into the body. When this value is set to 2,the positive direction for a local normal will be out of the body.
INTEGER graph_symbol(3)This value specifies the graphic symbols to be used for the variable assigned to the load type. The first array element specifies the symbol for the first application region,the second element the symbol for the second application region,and the third element is reserved for future use. The second element is not used unless two application regions are specified. Refer to Table 6‑1 for the definitions of the graphic symbols that can be used with this value.
INTEGER connect_label(4)This value specifies the label used to connect the application regions. This value applies to load types with multiple application regions only. The first array element can be set to 0 to specify that no connection is displayed between the application regions or 1 to specify that a solid line is displayed connecting the application regions with the label specified in the second array element of this input value. The second array element can be set to 2 to specify that a label is not displayed,3 to specify that the load and boundary condition set name is used as a label,or 7 to indicate that the variable field name is to be used as a label. The third array element should always be set to 0 and is reserved for future use. The fourth array element is reserved for future use.
INTEGER)anchor(3)This value specifies the anchor style for vectors. The first array element specifies the anchor style for the first application region. The second array element specifies the anchor style for the second application region. The third array element is reserved for future use. The following anchor style values are available: 1 to anchor at the vector base,2 to anchor at the vector tip,and 3 to anchor at the middle of the vector.
INTEGER conflict_resolution This value specifies,when set to 0,that variable conflicts will not be resolved. Setting this value to 1 will allow variable conflicts to be resolved.
INTEGER display_style(3)This value specifies the display style that will be used to display the values specified with the input argument graph_symbol. The display style controls the use of symbols and labels plotted with the variable definitions. This value can be used to specify the use of the loads and boundary condition set name or field name that can be displayed as a label. The first array element specifies the display style for the first application region. The second array element specifies the display style for the second application region and is used only if two application regions are specified. The third array element is reserved for future use. The following display style values can be used: 0 for no display,1 for a display with markers with standard or variable quantity labels,2 for a display with no marker labels,3 for a display with markers with loads and boundary condition set name labels,4 for a display with labels with no markers,5 for a display with a graphics symbol at the node with the node id,6 for a display with markers with constrained degree of freedom and coordinate frame id labels,or 7 for a display with markers with field name labels. A display style value of 5 can be used with an input value data_type that specifies node identifiers only. A display style value of 6 can be used with a null_type input value of 1 only.
INTEGER evaluation_location This value specifies the application regions at which entity fields will be evaluated. This value is used only with load types that specify multiple application regions. The following values can be used: 0 to evaluate the entity fields in all application regions,1 to evaluate the entity fields in the first application region,or 2 to evaluate the entity fields in the second application region.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
Remarks:
This function should be called only for new load types. Existing load types will already have an input data definition assigned.
---------------
lbc_defn_create.valid_targets(<load_id>,<category>,<type_count>,<node_flags>,<zero_d_flags>,<one_d_flags>,<two_d_flags>,<three_d_flags>,<n_app_region>,<app_region_ids>,<geo_datatypes>,<fem_datatypes>)
##########
Input:
INTEGER <load_id> The ID of this load type. This ID must have been previously defined.
INTEGER <category> Specifies what type of entities the LBC will eventually be evaluated at. 1 = Nodal. 2 = Element Uniform. 3 = Element Variable.
INTEGER <type_count> Number of sets of valid target types. Specify a value of 1 for load types with 1 application region. For two application regions specify 6.
LOGICAL(6)<node_flags> Flags for nodal targets. See Comments:,593.
LOGICAL(6)<zero_d_flags> Flags for 0D element targets. See Comments:,593.
LOGICAL(6)<one_d_flags> Flags for 1D element targets. See Comments:,593.
LOGICAL(6)<two_d_flags> Flags for 2D element targets. See Comments:,593.
LOGICAL(6)<three_d_flags> Flags for 3D element targets. See Comments:,593.
INTEGER <n_app_region> The number of application regions for this load type.
INTEGER()<app_region_ids> Application region ids. Usually 1 for app region 1 and 2 for app region 2.
STRING[31]()<geo_datatypes> Geometric select datatypes. Valid strings are: “SURFACE_EDGE” “GEO_NODAL” “GEO_BEAM” “GEO_SHELL” “GEO_SOLID” “GEO_SHELL_BNDRY” “GEO_SOLID_BNDRY” “GEO_BEAM_BNDRY” “CURVE_SIDE” “CURVE_VERTEX” “SURFACE_EDGE” “SURFACE_SIDE” “GEO_SHELL_SIDE_BNDRY”
STRING[31]()<fem_datatypes> FEM select datatypes. Valid strings are: “ELEM_EDGE_2D” “FEM_NODAL” “BEAMELEM” “ELEM2D” “ELEM3D” “FEM_SHELL_BNDRY” “FEM_SOLID_BNDRY” “FEM_BEAM_BNDRY” “BEAM_SIDE” “BEAM_VERTEX” “ELEM_EDGE_2D” “ELEM_2D_SIDE” “FEM_SHELL_SIDE_BNDRY”
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_matl_category(<analy_code_id>,<cat_id>,<cat_name>,<dir_code>)
##########
Description:
Input:
INTEGER <analy_code_id> The ID of the new analysis code. Analysis code IDs are described in Adding A New Analysis Preference,476.
INTEGER <cat_id> The ID to be used for referencing this material category. This ID must be unique with respect to all material category IDs previously defined in this analysis code but can and should be duplicates of material category IDs used in other analysis codes.
CHARACTER STRING <cat_name> The analysis code specific name of this material category.
INTEGER <dir_code> A code specifying the directionality of this material category. Material directionality codes are described in Material Directionalities,494.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_valid_mtl_categories(<analy_code_id>,<analy_type_id>,<cat_ids>,<num_cats>)
##########
Description:
Input:
INTEGER <analy_code_id> The ID of the new analysis code. Analysis code IDs are described in Adding A New Analysis Preference,476.
INTEGER <analy_type_id> The ID of the analysis type. Analysis type IDs are described in Adding A New Analysis Preference,476.
INTEGER ARRAY <cat_ids> The <num_cats> IDs of all the material categories valid for this analysis code.
INTEGER <num_cats> The number of material categories valid for this analysis code not including Composite which is automatically associated with all analysis codes.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_constitutive_model(<analy_code_id>,<model_id>,<model_name>,<lin_code>)
##########
Description:
Input:
INTEGER <analy_code_id> The ID of the new analysis code. Analysis code IDs are described in Adding A New Analysis Preference,476.
INTEGER <model_id> The ID to be used for referencing this material model. This ID must be unique with respect to all material model IDs previously defined in this analysis code but can and should be duplicates of material model IDs used in other analysis codes.
CHARACTER STRING <model_name> The analysis code specific name of this material model.
INTEGER <lin_code> A code specifying the linearity of this material model. Material linearity codes are described in Material Linearities,494.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_valid_const_models(<analy_code_id>,<analy_type_id>,<cat_id>,<model_ids>,<num_models>)
##########
Description:
Input:
INTEGER <analy_code_id> The ID of the new analysis code. Analysis code IDs are described in Adding A New Analysis Preference,476.
INTEGER <analy_type_id> The ID of the analysis type. Analysis type IDs are described in Adding A New Analysis Preference .
INTEGER <cat_id> The material category ID as described in Material Categories,551.
INTEGER ARRAY <model_ids> The <num_models> IDs of all the material models associated with this material category.
INTEGER <num_models> The number of material models valid for this material category.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_mtl_magics_defn(<analy_code_id>,<analy_type_id>,<opt_cat_id>,<opt_cat_name>)
##########
Description:
Input:
INTEGER <analy_code_id> The ID of the new analysis code. Analysis code IDs are described in Adding A New Analysis Preference,476.
INTEGER <analy_type_id> The ID of the analysis type. Analysis type IDs are described in Adding A New Analysis Preference .
INTEGER <opt_cat_id> The ID to be used for referencing this material option category. This ID must be unique with respect to all material option category IDs previously defined in this analysis code but can and should be duplicates of material option category IDs used in other analysis codes.
CHARACTER STRING <opt_cat_name> The analysis code specific name for this material option category.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_mtl_magics_options(<analy_code_id>,<opt_id>,<opt_name>)
##########
Description:
Input:
INTEGER <analy_code_id> The ID of the new analysis code. Analysis code IDs are described in Adding A New Analysis Preference,476.
INTEGER <opt_id> The ID to be used for referencing this material option. This ID must be unique with respect to all material option IDs previously defined in this analysis code but can and should be duplicate of material option IDs used in other analysis codes.
CHARACTER STRING <opt_name> The analysis code specific name for this material option.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_mtl_allowable_magics(<analy_code_id>,<cat_id>,<opt_cat_id>,<opt_ids>,<num_opts>)
##########
Description:
Input:
INTEGER <analy_code_id> The ID of the new analysis code. Analysis code IDs are described in Adding A New Analysis Preference,476.
INTEGER <cat_id> The ID of the Material Categories,551.
INTEGER <opt_cat_id> The ID of the material option category.
INTEGER ARRAY <opt_ids> The <num_opts> IDs of all the material options grouped under this material option category.
INTEGER <num_opts> The number of material options grouped under this material option category.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_mtl_magics(<analy_code_id>,<analy_type_id>,<cat_id>,<model_id>,<opt_cat_ids>,<num_opt_cats>)
##########
Description:
Input:
INTEGER <analy_code_id> The ID of the new analysis code. Analysis code IDs are described in Adding A New Analysis Preference,476.
INTEGER <analy_type_id> The ID of the analysis type. Analysis type IDs are described in Adding A New Analysis Preference
INTEGER <cat_id> The ID of the material category. See Material Categories,551.
INTEGER <model_id> The ID of the material model. See Material Models,554.
INTEGER ARRAY <opt_cat_ids> The <num_opt_cats> IDs of the material option categories to be associated with this material model under this material category.
INTEGER <num_opt_cats> The number of material option categories to be associated with this material model under this material category.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_matl_prop_defn(<word_id>,<word_name>)
##########
Description:
Input:
INTEGER <word_id> The ID used to reference this material property word. This ID must be unique with respect to all previously defined material property word IDs. Users and third-parties should define IDs in the range 20000 to 29999 to avoid conflicts with MSC-defined IDs.
CHARACTER STRING <word_name> The generic name of this material property word.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_matl_prop_alias(<analy_code_id>,<analy_type_id>,<cat_id>,<model_id>,<word_id>,<word_name>,<table_type>)
##########
Description:
Input:
INTEGER <analy_code_id> The ID of the new analysis code. Analysis code IDs are described in Adding A New Analysis Preference,476.
INTEGER <analy_type_id> The ID of the analysis type. Analysis type IDs are described in Adding A New Analysis Preference
INTEGER <cat_id> The ID of the material category. See Material Categories,551.
INTEGER <model_id> The ID of the material model. See Material Models,554.
INTEGER <word_id> The generic ID of the material word.
CHARACTER STRING <word_name> The analysis code specific name of the material word.
INTEGER <table_type> A flag specifying which type of fields can be referenced by this material word. The meaning of this flag is as follows: 0 = No type of field allowed. 1 = Stress dependent field allowed. 2 = Strain dependent field allowed. 3 = Strain dependent or strain and temperature dependent fields allowed. 4 = Temperature dependent fields allowed.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_allowable_matl_prop(<analy_code_id>,<analy_type_id>,<cat_id>,<model_id>,<opt_ids>,<word_ids>,<num_words>)
##########
Description:
Input:
INTEGER <analy_code_id> The ID of the new analysis code. Analysis code IDs are described in Adding A New Analysis Preference,476.
INTEGER <analy_type_id> The ID of the analysis type. Analysis type IDs are described in Adding A New Analysis Preference
INTEGER <cat_id> The ID of the material category. See Material Categories,551.
INTEGER <model_id> The ID of the material model. See Material Models,554.
INTEGER ARRAY <opt_ids> The IDs of the five material option choices for the possible five material option categories related to this material model under this material category by db_create_mtl_magics,561. This array is blank filed and in the same order as the material option categories defined by db_create_mtl_magicsMaterial Options and Material Option Categories,556.
INTEGER ARRAY <word_ids> The <num_words> IDs of the material words which are valid for this specified combination of material category,material model and material options. See Material Property Words,562 for more information.
INTEGER <num_words> The number of material words valid for the specified combination of material category,material model and material options. Zero signifies that this specified combination of material options is invalid.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_degree_of_freedom(<dof_id>,<dof_name>)
##########
Description:
Input:
INTEGER <dof_id> The ID for referencing the degree-of-freedom. This ID must be unique with respect to all previously defined degree-of-freedom IDs.
CHARACTER STRING <dof_name> The name of the degree-of-freedom.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_dof_set(<dof_set_id>,<dof_set_name>,<num_dofs>,<dof_ids>)
##########
Description:
Input:
INTEGER <dof_set_id> The ID used to reference the degree-of-freedom set. This ID must be unique with respect to all previously defined degree-of-freedom set IDs.
CHARACTER STRING <dof_set_name> The name of the degree-of-freedom set.
INTEGER <num_dofs> The number of degrees-of-freedom in this set.
INTEGER ARRAY <dof_ids> The <num_dofs> IDs of the degrees-of-freedom making up this set.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_matl_lin(<lin_id>,<lin_name>)
##########
Description:
Input:
INTEGER <lin_id> The ID used to reference the material linearity. This is must be unique with respect to all previously defined material linearities.
CHARACTER STRING <lin_name> The name of the material linearity.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_matl_dir(<dir_id>,<dir_name>)
##########
Description:
Input:
INTEGER <dir_id> The ID used to reference the material directionality. This ID must be unique with respect to all previously defined material directionality IDs.
CHARACTER STRING <dir_name> The name of the material directionality.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_laminate_opt(<lam_id>,<lam_name>)
##########
Description:
Input:
INTEGER <lam_id> The ID used to reference the laminate option. This ID must be unique with respect to all previously defined laminate option IDs.
CHARACTER STRING <lam_name> The name of the laminate option.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_condense_opt(<condense_id>,<condense_name>)
##########
Description:
Input:
INTEGER <condense_id> The ID used to reference the element condensation option. Must be unique with respect to all previously defined element condensation option IDs. Users and third-parties should define IDs in the range 20000 to 29999 to avoid conflicts with MSC-defined IDs
CHARACTER STRING <condense_name> The name of the element condensation option.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_formulation_opt(<form_id>,<form_name>)
##########
Description:
Input:
INTEGER <form_id> The ID used to reference the element formulation option. This ID must be unique with respect to all previously defined element formulation option IDs. Users and third-parties should define IDs in the range 20000 to 29999 to avoid conflicts with MSC-defined IDs.
CHARACTER STRING <form_name> The name of the element formulation option.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_geometric_opt(<geom_id>,<geom_name>)
##########
Description:
Input:
INTEGER <geom_id> The ID used to reference the element geometric option. This ID must be unique with respect to all previously defined element geometric option IDs.
CHARACTER STRING <geom_name> The name of the element geometric option. Users and third-parties should define IDs in the range 20000 to 29999 to avoid conflicts with MSC-defined IDs.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_element_type(<type_id>,<type_name>)
##########
Description:
Input:
INTEGER <type_id> The ID used to reference the generic element type. This ID must be unique with respect to all previously defined generic element type IDs. Users and third-parties should define IDs in the range 20000 to 29999 to avoid conflicts with MSC-defined IDs.
CHARACTER STRING <type_name> The name of the generic element type.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_selected_etype_wc(<analy_type_id>,<analy_code_id>,<geom_id>,<condense_id>,<form_id>,<lam_id>,<topo_code>,<dof_set_id>,<mat_lin_id>,<mat_dir_id>,<type_id>,<config_code>)
##########
Description:
Input:
INTEGER <analy_type_id> The ID of the analysis type.
INTEGER <analy_code_id> The ID of the analysis code.
INTEGER <geom_id> The ID of the element geometric option.
INTEGER <condense_id> The ID of the element condensation option.
INTEGER <form_id> The ID of the element formulation option.
INTEGER <lam_id> The ID of the laminate option.
INTEGER <topo_code> The appropriate element topology code. These codes can be determined from the functions described in Patran Element Topology Codes,670.
INTEGER <dof_set_id> The ID of the degree-of-freedom set.
INTEGER <mat_lin_id> The material linearity code.
INTEGER <mat_dir_id> The material directionality code.
INTEGER <type_id> The generic element type ID.
INTEGER <config_code> The PATRAN 2.5 configuration code to be used for elements of this type when writing out a PATRAN 2.5 neutral file. Zero if the PATRAN 2.5 neutral file is not to be used as a mode of model data communication.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
elementprops_def_create.make_elem_summary()
##########
Input:
None.
Output:
INTEGER <return_status>
Error Conditions:
None.
---------------
db_create_phys_prop_defn(<prop_id>,<prop_name>)
##########
Description:
Input:
INTEGER <prop_id> The ID of the property word. This ID must be unique with respect to all previously defined property words.
STRING <prop_name> The generic name of the property word.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_selected_prop_set(<analy_type_id>,<analy_code_id>,<geom_id>,<condense_id>,<form_id>,<lam_id>,<topo_code>,<dof_set_id>,<set_id>)
##########
Description:
Input:
INTEGER <analy_type_id> The ID of the analysis type.
INTEGER <analy_code_id> The ID of the analysis code.
INTEGER <geom_id> The ID of the element geometric option.
INTEGER <condense_id> The ID of the element condensation option.
INTEGER <form_id> The ID of the element formulation option.
INTEGER <lam_id> The ID of the laminate option.
INTEGER <topo_code> The topology code for this type of element. These codes can be determined from the functions described in Patran Element Topology Codes,670.
INTEGER <dof_set_id> The ID of the appropriate degree-of-freedom set.
INTEGER <set_id> The ID of the property set to be associated with the element type defined by all the above generic element attributes.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_allowable_phys_prop(<analy_code_id>,<word_id>,<word_name>,<required_flag>,<allow_types>,<default_type>,<dummy_arg>,<accept_int>,<accept_real>,<accept_char>)
##########
Description:
Input:
INTEGER <analy_code_id> The analysis code ID.
INTEGER <word_id> The ID of the property word.
CHARACTER STRING <word_name> The analysis code specific name of the property word.
INTEGER <required_flag> Flag specifying whether this property word is required or optional: 0 = optional 1 = required by analysis code
INTEGER ARRAY <allow_types> Array of 10 flags specifying what the allowable data types for this property word are. This array is zero filled,(e.g.,[1,4,0,0,0,0,0,0,0,0]). The meaning of the flags are: 0 = no more valid data types 1 = real scalar 2 = real vector 3 = integer 4 = character string 5 = material reference 6 = real or integer list 7 = real nodal field 8 = node reference 9 = coordinate frame reference
INTEGER <default_type> Flag specifying the default data type. The meaning of these flags are the same as above.
INTEGER <dummy_arg> This argument is no longer meaningful. In previous releases this argument was used to define the PATRAN 2.5 neutral file order of the property word being defined. Now,the PATRAN 2.5 neutral file order of the property words of a property set should be defined using the <nf_order>db_create_pp_set_defn_wnord,537 function.
CHARACTER STRING <accept_int> PCL string expressing the valid range for any integer input. This string can be any valid PCL logical expression with “prop” used as the keyword. For example,if the value has to be from one to five <accept_int> would be “prop > 0 && prop <= 5.” A blank string implies that all values are valid.
CHARACTER STRING <accept_real> PCL string expressing the valid range for any real data input. This string can be any valid PCL logical expression with “prop” used as the keyword for scalar real words. and “prop1”,“prop2” and “prop3” used as the keywords for each component of a real vector. For example,if the real value must be positive and greater than zero,“prop > 0” could be used. A blank string implies that all values are valid.
CHARACTER STRING <accept_char> string inputs. This string can be a list of valid choices separated by commas with “*” signifying that any other input is also valid. For example,if the string must be one of “Tom,” “Dick” or “Harry” then <accept_char> would be “Tom,Dick,Harry”. Whereas,if the string could be “One,” “Two” or “Three” and any other user input,<accept_char> would be “One,Two,Three,*”. A blank string implies that all user input is valid.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_pp_set_defn_wnord(<set_id>,<set_name>,<num_prop_words>,<prop_word_ids>,<nf_order>)
##########
Description:
Input:
INTEGER <set_id> The ID used for referencing this property set. This ID must be unique with respect to all previously defined property set IDs. Users and third-parties should define IDs in the range 20000 to 29999 to avoid conflicts with MSC-defined IDs.
CHARACTER STRING <set_name> The name of this property set.
INTEGER <num_prop_words> The number of property words belonging to this property set.
INTEGER ARRAY <prop_word_ids> An array containing the <num_prop_words> property word IDs of all the property words belonging to this property set.
INTEGER ARRAY <nf_order> An array containing the word order for all the <num_prop_words> property words assigned to this property set. For example,if a property set has three property words which are to be listed consecutively in Packet 4 of the neutral file,the <nf_order> array would be [1,2,3]. If the PATRAN 2.5 neutral file is not going to be used as a mode of model communication,this array can be filled with zeroes or negative ones,e.g.,[0,0,0] or [-1,-1,-1].If the neutral file order flag is zero for a property word,the property word will be written in the order it is defined in the property set. If you wish a particular property word not to be written to the neutral file,set the corresponding neutral file order flag to -1. For example,if in the example above you don’t want the first word to be written to the neutral file but want the second and third word to be written to the neutral file in consecutive order,the neutral file order array would be [-1,1,2].
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_analysis_code(<analy_code_id>,<analy_code_name>,<model_suffix>,<results_suffix>,<num_analy_types>,<analy_type_ids>,<def_analy_type>)
##########
Description:
Input:
INTEGER <analy_code_id> The ID for referencing the analysis code. This ID must be unique with respect to all previously defined analysis code IDs. Users and third parties should define analysis code IDs in the range 20000 to 29999.
CHARACTER STRING <analy_code_name> The name of the analysis code.
CHARACTER STRING <model_suffix> Suffix to be added to the analysis code input file.
CHARACTER STRING <results_suffix> Suffix to be added to the analysis code results file.
INTEGER <num_analy_types> The number of analysis types valid for this analysis code.
INTEGER ARRAY <analy_type_ids> The <num_analy_types> analysis types IDs valid for this analysis code.
INTEGER <def_analy_type> The analysis type ID of the default analysis type.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_create_analysis_code(<analy_code_id>,<analy_code_name>,<model_suffix>,<results_suffix>,<num_analy_types>,<analy_type_ids>,<def_analy_type>)
##########
Description:
Input:
INTEGER <analy_code_id> The ID for referencing the analysis code. This ID must be unique with respect to all previously defined analysis code IDs. Users and third parties should define analysis code IDs in the range 20000 to 29999.
CHARACTER STRING <analy_code_name> The name of the analysis code.
CHARACTER STRING <model_suffix> Suffix to be added to the analysis code input file.
CHARACTER STRING <results_suffix> Suffix to be added to the analysis code results file.
INTEGER <num_analy_types> The number of analysis types valid for this analysis code.
INTEGER ARRAY <analy_type_ids> The <num_analy_types> analysis types IDs valid for this analysis code.
INTEGER <def_analy_type> The analysis type ID of the default analysis type.
Output:
INTEGER <Return Value> Status return value. The value will be 0 if the routine is successful.
Error Conditions:
None.
---------------
db_get_default_anal_code(<analysis_code_name>)
##########
Description:
Input:
None
Output:
STRING[31] <analysis_code_name> Analysis code name.
Error Conditions:
None.
---------------
db_get_anal_code_id(<analysis_code_name>,<analysis_code_id>)
##########
Description:
Input:
STRING[31] <analysis_code_name> Analysis code name.
Output:
INTEGER <analysis_code_id> Analysis code ID.
Error Conditions:
None.
---------------
uil_pref_analysis.set_analysis_pref(<analy_code_name>,<analy_type_name>,<input_file_suffix>,<output_file_suffix>)
##########
Input:
CHARACTER STRING <analy_code_name> The name of the analysis code to be set as the default. This name can be no more than 31 characters.
CHARACTER STRING <analy_type_name> The name of the analysis type to be set as the default for the chosen analysis code. This name can be no more than 31 characters.
CHARACTER STRING <input_file_suffix> The default file suffix for the input files of the chosen analysis code. This suffix can be no more than 4 characters.
CHARACTER STRING <output_file_suffix> The default file suffix for the output files of the chosen analysis code. This suffix can be no more than 4 characters.
Output:
None.
Error Conditions:
None.
---------------
Input_disabled()
##########
Description:
Called by loadsbcs_create class to determine if the data input form for the current (object,method,target)should be accessible.
Variable declarations (optional):
LOGICAL flag True: Enable the Input Data button. False: Disable the Input Data button.
Preference call:
lbc_input.set_input_disable(flag)
Error Conditions:
None.
---------------
set_cur_data()
##########
Description:
When an existing LBC set is selected from the listbox on the Create panel of the Loads/Boundary Conditions form,the values for the widgets which are to be displayed in this sub-form are set with the given values.
Variable declarations:
REAL lbc_sf Loads/BC Set Scale Factor.
STRING[LBC_DATA_LEN]	 cid_data Coordinate Frame.
INTEGER num_data Number of databoxes on the Input Data form.
INTEGER(NUM_LBC_INP_FLDS)data_id Internal Ids corresponding to the databoxes.
STRING[LBC_DATA_LEN](NUM_LBC_INP_FLDS)	 stat_data Values from static databoxes.
STRING[LBC_DATA_LEN](NUM_LBC_INP_FLDS)dyn_data Values from dynamic databoxes.
Preference call:
lbc_input.get_cur_data(lbc_sf,cid_data,num_data,data_id,stat_id,dyn_id)
Error Conditions:
None.
---------------
get_data()
##########
Description:
Used to transfer data from the data input sub-form to the loadsbcs_create class when creating a new set.
Variable declarations:
REAL lbc_sf Loads/BC Set Scale Factor.
STRING[LBC_DATA_LEN]	 cid_data Coordinate Frame.
INTEGER num_data Number of databoxes on the Input Data form.
INTEGER(NUM_LBC_INP_FLDS)data_id Internal Ids corresponding to the databoxes.
STRING[LBC_DATA_LEN](NUM_LBC_INP_FLDS)	 stat_data Values from static databoxes.
STRING[LBC_DATA_LEN](NUM_LBC_INP_FLDS)dyn_data Values from dynamic databoxes.
Preference call:
lbc_input.set_data(lbc_sf,cid_data,num_data,data_id,stat_id,dyn_id)
Error Conditions:
None.
---------------
get_mem()
##########
Description:
Allocate memory for any classwide virtual arrays.
Variable declarations:
INTEGER stat Return status of success or failure (0: success; -1: error)
Preference call:
lbc_input.set_status(stat)
Error Conditions:
None.
---------------
get_geo_index()
##########
Description:
Called by the loadsbcs_create class when an existing set is selected from the listbox. Given the selected set’s geometry string,this function returns the internal index for its application region’s geometry filter.
Variable declarations:
STRING geometry_str[31} Real Geometry Group string: LBC_GEOMETRY_STR LBC_FEM_STR
INTEGER geo_index Geometry Group internal index 1: Geometry 2: FEM
Preference call:
geometry_str = lbc_select.get_geo_group_str()
lbc_select.set_geo_index(geo_index)
Error Conditions:
None.
---------------
set_cur_data()
##########
Description:
When an existing LBC set is selected from the listbox on the Create panel of the Loads/Boundary Conditions form,the values for the widgets which are to be displayed in this sub-form are set by changing the values with the given data.
Variable declarations:
INTEGER grp Geometry Group.
INTEGER num_list Number of application region lists.
STRING[VIRTUAL](VIRTUAL)app_list Application region lists.
INTEGER couple Coupling option.
INTEGER order Ordering option.
Preference call:
lbc_select.get_cur_data(grp,num_list,app_list)
lbc_select.get_cur_2_app_data(couple,order)
Error Conditions:
None.
---------------
get_data()
##########
Description:
Used to transfer data from the Select Application Region sub-form to the loadsbcs_create class when creating a new set.
Variable declarations:
INTEGER result Return status of success or failure. (0: success; -1: error)
INTEGER num_ar Number of application region.
INTEGER(2)ar_id Application Region ids.
STRING[VIRTUAL] app_list1 Application Region list 1 of entities.
STRING[VIRTUAL] app_list2 Application Region list 2 of entities.
STRING geo_fltr[31] Geometry filter which restricts entities which can be selected.
INTEGER couple Coupling option.
INTEGER order Ordering option.
Preference call:
lbc_select.set_status(result)
lbc_select.set_data(num_ar,ar_id,app_list1,app_list2,geo_fltr)
lbc_select.set_2_app_data(couple,order)
Error Conditions:
None.
---------------
get_mem()
##########
Description:
Allocate memory for any classwide virtual arrays.
Variable declarations:
INTEGER stat Return status of success or failure. 0: success; -1: error)
Preference call:
lbc_select.set_status(stat)
Error Conditions:
None.
---------------
sys_class_get(class_name,)
##########
Description:
This function will return the value of a classwide variable from a class of PCL functions.
Input:
STRING class_name[32] This value specifies the name of the PCL function class from which the variable value will be retrieved.
STRING variable_name[32] This value specifies the name of the variable which will have its value retrieved.
Output:
DYNAMIC_ILRSW <Return Value> This function returns the value from the specified variable which is a member of the specified class.
Error Conditions:
None.
---------------
ge_get_midsurface_thickness(p3_label,thickness)
##########
Description:
This function will return the thickness attribute value of a parasolid midsurface.
Input:
INTEGER p3_label This value specifies the external patran surface label of the midsurface.
Output:
REAL thickness This value returns the value of the thickness attribute attached to the parasolid midsurface.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
sgm_get_curve_length(curve_id,length)
##########
Description:
This function gets the curve length for a curve.
Input:
INTEGER curve_id This values specifies the curve id
Output:
REAL length This value returns the curve length.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
---------------
sgm_get_solid_volume(solid_id,volume)
##########
Description:
This function gets the solid volume for a solid.
Input:
INTEGER solid_id This values specifies the solid id
Output:
REAL volume This value returns the solid volume.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
---------------
sgm_get_surface_area(surface_id,area)
##########
Description:
This function gets the surface area for a surface.
Input:
INTEGER surface_id This values specifies the surface id
Output:
REAL area This value returns the surface area.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
---------------
sgm_intersect_curves(curve1,curve2,distance,u1,u2,xyz1,xyz2)
##########
Description:
This function calculates the minimum distance between two curves.
Input:
REAL curve1()This value specifies the data for the first curve.
REAL curve2()This value specifies the data for the second curve.
Output:
REAL distance This value returns the minimum distance between the two curves.
REAL u1 This value returns the parametric location of the minimum distance point,relative to the first curve.
REAL u2 This value returns the parametric location of the minimum distance point,relative to the second curve.
REAL xyz1(3)This value returns he model space location of the minimum distance point,relative to the first curve.
REAL xyz2(3)This value returns the model space location of the minimum distance point,relative to the second curve.
INTEGER <Return Value> This function can return any value and the value returned has no meaning.
Error Conditions:
None.
---------------
sgm_nearest_point_on_surface(point,surface,u,v,xyz)
##########
Description:
This function will find the point on a surface that is nearest to a specified point.
Input:
REAL point(3)This value specifies the model space location of the point near the surface.
REAL surface()This value specifies the surface.
Output:
REAL u This value returns one coordinate of the parametric location of the point on the surface nearest to the specified point.
REAL v This value returns the other coordinate of the parametric location of the point on the surface nearest to the specified point.
REAL xyz(4,3)This argument returns the model space location,derivatives,and normal of the point on the surface nearest to the specified point.
INTEGER <Return Value> This function can return any value and the value returned has no meaning.
Error Conditions:
None.
##########
Description:
This function concatenates substrings from the list processor string according to entity type keyword. List processor functionaliy is not envoqued (the strings is not interpreted).
Input:
STRING in_list[] This value specifies the list processor string of entities.
STRING keyword[] This value specifies the keyword for extracting entity substrings. Ex: “Point”,“Curve”,“Surface”,“Solid”,“Node”,Element”,“MPC”.
INTEGER case_sensitive This value specifies 0 (FALSE)not to be case sensitive,1 (TRUE)otherwise.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
ui_file_create(parent,callback,x,y,width,num_rows,filter_label,filter_mask,dirs_label,files_label,selection_label,selection,ok_label,filterbutton_label,cancel_label)
##########
Description:
This function will create a file selection form.
Input:
WIDGET parent_id This value specifies a widget identifier for the parent widget of this form.
STRING callback_func[] This value specifies the name of the PCL function that will be called for an event representing a form event. This call back function must be a member of the class in which this widget is created.
REAL x_location This value specifies the x axis location of the file widget in pixels relative to the upper left corner of the parent widget.
REAL y_location This value specifies the y axis location of the file widget in pixels relative to the upper left corner of the parent widget.
REAL width This value specifies the width of the widget in pixels,excluding the border.
INTEGER number_rows This value specifies the number of rows that will be displayed in files and directory list boxes of the form.
STRING filter_label[] This value specifies the title used on the form to describe the filter data box.
STRING filter_mask[] This value specifies the path and filter mask that determines which files will be displayed in the file list box.
STRING directory_label[] This value specifies the text used on the form to describe the directory data box.
STRING files_label[] This value specifies the text used on the form to describe the files data box.
STRING selection_label[] This value specifies the text used on the form to describe the selection data box.
STRING file_name[] This value specifies a file name to be displayed in the selection data box. If the file name specified is listed in the file list box the file list box entry will be highlighted.
STRING ok_label[] This value specifies the text used to label the “OK” button.
STRING filterbutton_label[] This value specifies the text used to label the “Filter” button.
STRING cancel_label[] This value specifies the text used to label the “Cancel” button.
Output:
WIDGET <Return Value> This function returns avalid form widget identifier when executed successfully and a value on WIDGET_NULL to indicate a change an error.
Error Conditions:
None.
##########
Input: Value Name Corresponding ui_wid_set()Parameter Name
callback_function NAME
x_location X
y_location Y
width WIDTH
number_rows None available.
filter_label[] FILTERLABEL
filter_mask[] DIRECTORY and FILTER
directory_label[] None available.
files_label[] FILESLABEL
selection_label[] FILENAMELABEL
file_name[] FILENAME
ok_label[] OKBUTTONLABEL
filterbutton_label[] FILTERBUTTONLABEL
cancel_label[] CANCELBUTTONLABEL
---------------
ui_wid_set(widget_id,parameter_name,parameter_value)
##########
Description:
This function will set a widget parameter value.
Input:
WIDGET widget_id This value specifies the identifier of the widget that will be modified.
STRING parameter_name[] This value specifies the name of the paramter to be modified. See below for more information.
DYNAMIC_ILRS parameter_value This value specifies the array of flags used to identify the specific entity types to be exported. See the remarks below for more information.
Output:
LOGICAL <Return Value> This function returns a value of TRUE when executed successfully and a non TRUE value to indicate a change in status or an error.
Error Conditions:
This function may return a nonzero value if an error occurs.
---------------
lbc_defn_create.lbc_var_defn(load_id,category,targ_elem_dim,variable_label,variable_id,display_order,data_type,scalar_or_vector,null_type,normal_direction,graph_symbol,connect_label,anchor,conflict_resolution,display_style,evaluation_location)
##########
Description:
This function will assign input data variable definitions to a load type.
Input:
INTEGER load_id This value specifies the load type identifier. This identifier must reference an existing load type.
INTEGER category This value specifies the type of entities at which the loads and boundary conditions will be evaluated. This value can be set to 1 for nodal entities,2 for uniform element entities,or 3 for variable element entities.
INTEGER targ_elem_dim This value specifies the dimensionality of the element to which the load and boundary condition will be applied. This value can be set to 1 for one dimension,2 for two dimensions,or 3 for three dimensions. When the input value category is set to 1 for nodal entities,this value is not used because the dimensionality for nodes is undefined and this input value should be set to 0.
STRING variable_label [31] This value specifies the text that will be associated with the input value variable_id. This text will be used to label the display of the information associated with the input value variable_id. If input data is not specified for this load type then this value must be an empty string.
INTEGER variable_id This value specifies the identifier for the variables associated with this load type. This identifier must be unique within each load type.
INTEGER display_order This value specifies the order in which variables associated with this load type would be displayed in a data box. This value can range from 1 to the number of variables associated with the identifier specified by the input variable variable_id.
INTEGER data_type This value specifies the data type for the variables associated with the input value variable_id. This value can be set to 1 for integers,3 for real or field values evaluated by the loads and boundary conditions,5 for a node identifier,or 7 for a field that is not evaluated by the loads and boundary conditions.
INTEGER scalar_or_vector This value specifies when set to 0 that the data type is a scalar value or when set to 1 that the data type is a vector value. This value is used only if the input argument data_type is set to 3 for real or field values evaluated by the loads and boundary conditions.
INTEGER null_type This value specifies,when set to 0,that blank components of a vector load are to be interpreted as zeros,as with forces. When this value is set to 1,blank components of a vector load will be interpreted as nulls,as with displacements.
INTEGER normal_direction This value specifies,when set to 0 that a local normal is not used. When this value is set to 1,the positive direction for a local normal vector will be into the body. When this value is set to 2,the positive direction for a local normal will be out of the body.
INTEGER graph_symbol(3)This value specifies the graphic symbols to be used for the variable assigned to the load type. The first array element specifies the symbol for the first application region,the second element the symbol for the second application region,and the third element is reserved for future use. The second element is not used unless two application regions are specified. Refer to Table 6‑1 for the definitions of the graphic symbols that can be used with this value.
INTEGER connect_label(4)This value specifies the label used to connect the application regions. This value applies to load types with multiple application regions only. The first array element can be set to 0 to specify that no connection is displayed between the application regions or 1 to specify that a solid line is displayed connecting the application regions with the label specified in the second array element of this input value. The second array element can be set to 2 to specify that a label is not displayed,3 to specify that the load and boundary condition set name is used as a label,or 7 to indicate that the variable field name is to be used as a label. The third array element should always be set to 0 and is reserved for future use. The fourth array element is reserved for future use.
INTEGER)anchor(3)This value specifies the anchor style for vectors. The first array element specifies the anchor style for the first application region. The second array element specifies the anchor style for the second application region. The third array element is reserved for future use. The following anchor style values are available: 1 to anchor at the vector base,2 to anchor at the vector tip,and 3 to anchor at the middle of the vector.
INTEGER conflict_resolution This value specifies,when set to 0,that variable conflicts will not be resolved. Setting this value to 1 will allow variable conflicts to be resolved.
INTEGER display_style(3)This value specifies the display style that will be used to display the values specified with the input argument graph_symbol. The display style controls the use of symbols and labels plotted with the variable definitions. This value can be used to specify the use of the loads and boundary condition set name or field name that can be displayed as a label. The first array element specifies the display style for the first application region. The second array element specifies the display style for the second application region and is used only if two application regions are specified. The third array element is reserved for future use. The following display style values can be used: 0 for no display,1 for a display with markers with standard or variable quantity labels,2 for a display with no marker labels,3 for a display with markers with loads and boundary condition set name labels,4 for a display with labels with no markers,5 for a display with a graphics symbol at the node with the node id,6 for a display with markers with constrained degree of freedom and coordinate frame id labels,or 7 for a display with markers with field name labels. A display style value of 5 can be used with an input value data_type that specifies node identifiers only. A display style value of 6 can be used with a null_type input value of 1 only.
INTEGER evaluation_location This value specifies the application regions at which entity fields will be evaluated. This value is used only with load types that specify multiple application regions. The following values can be used: 0 to evaluate the entity fields in all application regions,1 to evaluate the entity fields in the first application region,or 2 to evaluate the entity fields in the second application region.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
Remarks:
This function should be called only for new load types. Existing load types will already have an input data definition assigned.
---------------
asm_delete_coord(coord_list,deleted_coords)
##########
Description:
This function deletes a set of coordinate frames from the database and the graphics window.
Input:
STRING coord_list[] This value specifies the labels of the coordinate frames to be deleted.
Output:
STRING deleted_coords[] This value returns the labels of the coordinate frames deleted.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000143 Unable to delete Global Coordinate Frame.
1000025 Error attempting to allocate virtual memory.
---------------
asm_delete_curve(curve_list,deleted_curves)
##########
Description:
This function deletes a set of curves from the database and the graphics window.
Input:
STRING curve_list[] This value specifies the labels of the curves to be deleted.
Output:
STRING deleted_curves[] This value returns the labels of the curves deleted.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000236 The curve to delete does not exist in the database and may be a geometry construct. Delete operation not allowed on geometry constructs.
---------------
asm_delete_grid(point_list,deleted_points)
##########
Description:
This function deletes a set of points from the database and the graphics window.
Input:
STRING point_list[] This value specifies the labels of the points to be deleted.
Output:
STRING deleted_points[] This value returns the labels of the points deleted.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000235 The point to delete does not exist in the database and may be a geometry construct. Delete operation not allowed on geometry constructs.
---------------
asm_delete_hpat(hypat_list,deleted_hypats)
##########
Description:
This function deletes a set of hyperpatches from the database and the graphics window.
Input:
STRING hypat_list[] This value specifies the labels of the hyperpatches to be deleted.
Output:
STRING deleted_hypats[] This value returns the labels of the solids deleted.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000238 The solid to delete does not exist in the database and may be a geometry construct. Delete operation not allowed on geometry constructs.
---------------
asm_delete_line(line_list,deleted_lines)
##########
Description:
This function deletes a set of lines from the database and the graphics window.
Input:
STRING line_list[] This value specifies the labels of the lines to be deleted.
Output:
STRING deleted_lines[] This value returns the labels of the lines deleted.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000236 The curve to delete does not exist in the database and may be a geometry construct. Delete operation not allowed on geometry constructs.
---------------
asm_delete_patch(patch_list,deleted_patches)
##########
Description:
This function deletes a set of patches from the database and the graphics window.
Input:
STRING patch_list[] This value specifies the labels of patches to be deleted.
Output:
STRING deleted_patches[] This value returns the labels of the patches deleted.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000237 The surface to delete does not exist in the database and may be a geometry construct. Delete operation not allowed on geometry constructs.
---------------
asm_delete_plane(plane_list,deleted_planes)
##########
Description:
This function deletes a set of planes from the database and the graphics window.
Input:
STRING plane_list[] This value specifies the labels of the planes to be deleted.
Output:
STRING deleted_planes[] This value returns the labels of the planes deleted.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000243 The plane to delete does not exist in the database and may be a geometry construct. Delete operation not allowed on geometry constructs.
---------------
asm_delete_point(point_list,deleted_points)
##########
Description:
This function deletes a set of points from the database and the graphics window.
Input:
STRING point_list[] This value specifies the labels of the points to be deleted.
Output:
STRING deleted_points[] This value returns the labels of the points deleted.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000235 The point to delete does not exist in the database and may be a geometry construct. Delete operation not allowed on geometry constructs.
---------------
asm_delete_solid(solid_list,deleted_solids)
##########
Description:
This function deletes a set of solids from the database and the graphics window.
Input:
STRING solid_list[] This value specifies the labels of the solids to be deleted.
Output:
STRING deleted_solids[] This value returns the labels of the solids deleted.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000238 The solid to delete does not exist in the database and may be a geometry construct. Delete operation not allowed on geometry constructs.
---------------
asm_delete_surface(surface_list,deleted_surfaces)
##########
Description:
This function deletes a set of surfaces from the database and the graphics window.
Input:
STRING surface_list[] This value specifies the labels of the surfaces to be deleted.
Output:
STRING deleted_surfaces[] This value returns the labels of the surfaces deleted.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000237 The surface to delete does not exist in the database and may be a geometry construct. Delete operation not allowed on geometry constructs.
---------------
asm_delete_vector(vector_list,deleted_vectors)
##########
Description:
This function deletes a set of vectors from the database and the graphics window.
Input:
STRING vector_list[] This value specifies the labels of the vectors to be deleted.
Output:
STRING deleted_vectors[] This value returns the labels of the vectors deleted.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000246 The vector to delete does not exist in the database and may be a geometry construct. Delete operation not allowed on geometry constructs.
##########
Input:
CHARACTER STRING <load_name> The external name used to reference this load.
INTEGER <application_type> The internal ID of the load of interest.1 = load applied to nodes2 = load applied to elements and constant over the element3 = load applied to elements and varying over the element
INTEGER <load_type> The ID of the load type of this load. See Table 6‑4 for the load ID’s currently being used by Patran.
INTEGER <elem_dimension> The dimensionality of the loaded elements:1 = line element2 = surface element3 = solid element
INTEGER <dynamic_flag> A flag specifying whether this load is constant with respect to time or frequency (0)or varies with respect to time or frequency (1).
INTEGER <coord_id> The ID of the coordinate frame along which the loads are acting. -1 if acting in the global system or not appropriate for this load.
Output:
INTEGER <load_id> The internal ID assigned to this load by Patran.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
##########
Input:
INTEGER <load_id> The internal ID of the load of interest.
INTEGER <num_variables> The number of load variables defined for this load.
INTEGER ARRAY <variable_ids> The IDs of the <num_variables> load variables defined for this load. See db_create_nodal_lbc_var_defn,581 and db_create_elem_lbc_var_defn,580 for details about the load variable IDs.
REAL ARRAY <real_values> The real scalar values for each of the <num_variables> load variables.
INTEGER ARRAY <spatial_fields> The spatially varying field references for each of the <num_variables> load variables. Zero signifies that there is no spatial variance in the load.
INTEGER ARRAY <dynamic_fields> The <num_variables> dynamic field references for all the load variables. Zero implies that the corresponding load variable is constant with respect to time or frequency.
REAL ARRAY <scale_factors> The <num_variables> scale factors to be applied to each of the load variables.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
##########
Input:
INTEGER <load_id> The internal ID of the load of interest.
INTEGER <num_variables> The number of load variables defined for this load.
INTEGER ARRAY <variable_ids> The IDs of the <num_variables> load variables defined for this load. See db_create_nodal_lbc_var_defn,581 and db_create_elem_lbc_var_defn,580 for details about the load variable IDs.
REAL ARRAY <real_values> The values for the 3 components for each of the <num_variables> load variables. If a corresponding spatial field reference exists,this value is meaningless.
INTEGER ARRAY <spatial_fields> The spatially varying field references for the 3 components for each of the <num_variables> load variables. Zero signifies that there is no spatial variance in the load and the corresponding <real_values> value should be used. If a spatial reference exists,the corresponding <real_values> value should be ignored.
INTEGER ARRAY <dynamic_fields> The dynamic field references for the 3 components for each of the <num_variables> load variables. Zero implies that the corresponding load variable vector component is constant with respect to time or frequency.
INTEGER ARRAY <null_flags> The null component flags for the 3 components for each of the <num_variables> load variables. -1 means that no data was filled in for that vector component,whereas 0 means that data was input for the corresponding vector component.
REAL ARRAY <scale_factors> The <num_variables> scale factors to be applied to each of the load variables.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
##########
Input:
INTEGER <load_id> The internal ID of the load of interest.
INTEGER <num_variables> The number of load variables defined for this load.
INTEGER ARRAY <variable_ids> The IDs of the <num_variables> load variables defined for this load. See db_create_nodal_lbc_var_defn,581 and db_create_elem_lbc_var_defn,580 for details about the load variable IDs.
REAL ARRAY <real_values> The real scalar values for each of the <num_variables> load variables. These values are meaningless if spatial field references exist.
INTEGER ARRAY <spatial_fields> The spatially varying field references for each of the <num_variables> load variables. Zero signifies that there is no spatial variance in the load and the corresponding <real_values> value should be used. If there is a spatial field reference,the corresponding <real_values> should be ignored.
REAL ARRAY <scale_factors> The <num_variables> scale factors to be applied to each of the load variables.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
asm_edit_curve_blend(curve_ids,weights,curve_list,delete_original,created_ids)
##########
Description:
This function will create parametric cubic curves from a set of curves,enforcing the first derivative continuity across the boundaries of the curves.
Input:
STRING curve_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING weights[] This value specifies the weighting factors of one curve relative to another. This value must be greater than zero. A value of 1.0 will cause all curves to have an equal weight. A value greater than 1.0 will allow the slope of a curve at the beginning of the list of curves specified by the input value curve_list to dominate the slope of the created curves. A value less than 1.0 will allow the slope of a curve at the end of the list of curves specified by the input value curve_list to dominate the slope of the created curves.
STRING curve_list[] This value specifies the list of curves to blend.
LOGICAL delete_original This value is set to TRUE if the original curves are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000574 There must be at least two curves as input to Blend. The invalid value input was %A%.
1000575 Line %I% with vertices %I% and %I% cannot blend with Line %I% with vertices %I% and %I%.
1000576 One of the curves input to blend has a vector length of zero. Unable to blend curves.
1000587 Unable to merge with a circular curve.
2001070 Unable to acquire %I% words of virtual memory.
38000003 No blob provided.
38000117 An attempt to approximate a general curve with a single Parametric Cubic failed.
38000450 Unable to calculate a point on the curve.
---------------
asm_edit_curve_merge(curve_ids,curve_list,num_curves,geo_tolerance,num_iterations,delete_original,created_ids)
##########
Description:
This function will create parametric cubic curves from a set of curves by merging the original curves.
Input:
STRING curve_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING curve_list[] This value specifies the list of original curves to merge.
INTEGER num_curves This value specifies the number of curves to create from the existing set of curves.
REAL geo_tolerance This value specifies the geometric tolerance used to test for convergence. The default value is 0.005.
INTEGER num_iterations This value specifies the maximum number of times to iterate during the numerical approximation. The default value is 0.
LOGICAL delete_original This value is set to TRUE if the original curves are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000517 The Line Construct parameter %A% was reset from the invalid input value of %I% to the default value of %I%.
1000025 Error attempting to allocate virtual memory.
1000500 There must be at least one line as input. The invalid value input was %I%.
1000503 It is not possible to order the curves from head to tail.
1000516 The points are all within tolerance of one another. A zero length line will not be produced.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_edit_solid_blend(solid_ids,weights,solid_list,delete_original,created_ids)
##########
Description:
This function will create parametric tricubic solids from a set of solids,enforcing the first derivative continuity across the boundaries of the solids.
Input:
STRING solid_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING weights[] This value specifies the weighting factors of one solid relative to another. This value must be greater than zero. A value of 1.0 will cause all solids to have an equal weight. A value greater than 1.0 will allow the slope of a solid at the beginning of the list of solids specified by the input value solid_list to dominate the slope of the created solids. A value less than 1.0 will allow the slope of a solid at the end of the list of solids specified by the input value solid_list to dominate the slope of the created solids.
STRING solid_list[] This value specifies the list of solids to blend.
LOGICAL delete_original This value is set to TRUE if the original solids are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000910 Hpat %I% with vertices %I%,%I%,%I%,%I%,%I%,%I%,%I%,and %I% cannot blend with Hpat %I% with vertices %I%,%I%,%I%,%I%,%I%,%I%,%I%,and %I%.
1000911 There must be at least two hpats as input to Blend. The invalid value input was %A%.
2001070 Unable to acquire %I% words of virtual memory.
38000119 An attempt to approximate a general solid with a single Parametric TriCubic failed.
38000122 Invalid format conversion flag specified for solid conversion.
38000434 The solid type used for this Action,Object,Method function is invalid. It must be of a type that when created,has the default color of Blue.
38000452 Unable to calculate a point on the solid.
---------------
asm_edit_surface_blend(surface_ids,edge_list,weights,surface_list,delete_original,created_ids)
##########
Description:
This function will create parametric bicubic surfaces from a set of surfaces,enforcing the first derivative continuity across the boundaries of the surfaces.
Input:
STRING surface_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING edge_list[] This value specifies the list of surface edges to be assigned a weighting factor.
STRING weights[] This value specifies the weighting factors of one surface relative to another. This value must be greater than zero. A value of 1.0 will cause all surfaces to have an equal weight. A value greater than 1.0 will allow the slope of a surface at the beginning of the list of surfaces specified by the input value surface_list to dominate the slope of the created surfaces. A value less than 1.0 will allow the slope of a surface at the end of the list of surfaces specified by the input value surface_list to dominate the slope of the created surfaces.
STRING surface_list[] This value specifies the list of original surfaces to blend.
LOGICAL delete_original This value is set to TRUE if the original surfaces are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000025 Error attempting to allocate virtual memory.
1000722 There must be at least two surfaces as input to Blend. The invalid value input was %A%.
2001070 Unable to acquire %I% words of virtual memory.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
---------------
asm_edit_hpat_blend(hpat_ids,weights,hpat_list,delete_original,created_ids)
##########
Description:
This function will create hyperpatches from an existing set of hyperpatches,enforcing the first derivative continuity across the boundaries of the solids.
Input:
STRING hpat_ids[] This value specifies the hyperpatch ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of hyperpatch IDs.
STRING weights[] This value specifies the weighting factors of one hyperpatch relative to another. This value must be greater than zero. A value of 1.0 will cause all hyperpatches to have an equal weight. A value greater than 1.0 will allow the slope of a hyperpatch at the beginning of the list of hyperpatches specified by the input value hpat_list to dominate the slope of the created hyperpatches. A value less than 1.0 will allow the slope of a hyperpatch at the end of the list of hyperpatches specified by the input value hpat_list to dominate the slope of the created hyperpatches.
STRING hpat_list[] This value specifies the list of hyperpatches to blend.
LOGICAL delete_original This value is set to TRUE if the original hyperpatches are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000910 Hpat %I% with vertices %I%,%I%,%I%,%I%,%I%,%I%,%I%,and %I% cannot blend with Hpat %I% with vertices %I%,%I%,%I%,%I%,%I%,%I%,%I%,and %I%.
1000911 There must be at least two hpats as input to Blend. The invalid value input was %A%.
2001070 Unable to acquire %I% words of virtual memory.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
---------------
asm_edit_hpat_break(hpat_ids,break_type,break_entity_list,param_pos,delete_original,solid_list,created_ids)
##########
Description:
This function will create hyperpatches from an existing set of hyperpatches by breaking the original hyperpatches at a parametric position,point or node,curve,or surface.
Input:
STRING hpat_ids[] This value specifies the hyperpatch ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of hyperpatch IDs.
INTEGER break_type This value specifies the type of entity used to define the break: 0 = parametric position,1 = point or node,2 = curve,and 3 = surface.
STRING break_entity_list[] This value specifies the list of entities used to define the break.
REAL param_pos(3)This value specifies the parametric positions that define the break position if the input value break_type is set to 0.
LOGICAL delete_original This value is set to TRUE if the original hyperpatches are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING solid_list[] This value specifies the list of hyperpatches to break.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
1000909 Unable to break the solid.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000015 LpSublistNext: End of current list has been reached.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38000452 Unable to calculate a point on the solid.
---------------
asm_edit_hpat_reverse(hpat_list,reversed_labels)
##########
Description:
This function reverses the connectivity and relocates the parametric origin of a set of hyperpatches.
Input:
STRING hpat_list[] This value specifies the list of original hyperpatches to reverse.
Output:
STRING reversed_labels[] This value returns the reversed ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_edit_line_blend(line_ids,weights,line_list,delete_original,created_ids)
##########
Description:
This function will create lines from an existing set of lines,enforcing the first derivative continuity across the boundaries of the lines.
Input:
STRING line_ids[] This value specifies the line ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of line IDs.
STRING weights[] This value specifies the weighting factors of one line relative to another. This value must be greater than zero. A value of 1.0 will cause all lines to have an equal weight. A value greater than 1.0 will allow the slope of a line at the beginning of the list of lines specified by the input value line_list to dominate the slope of the created lines. A value less than 1.0 will allow the slope of a line at the end of the list of lines specified by the input value line_list to dominate the slope of the created lines.
STRING line_list[] This value specifies the list of lines to blend.
LOGICAL delete_original This value is set to TRUE if the original lines are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000574 There must be at least two curves as input to Blend. The invalid value input was %A%.
1000575 Line %I% with vertices %I% and %I% cannot blend with Line %I% with vertices %I% and %I%.
1000576 One of the curves input to blend has a vector length of zero. Unable to blend curves.
1000587 Unable to merge with a circular curve.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_edit_line_merge(line_ids,line_list,num_lines,geo_tolerance,num_iterations,delete_original,created_ids)
##########
Description:
This function will create lines from an existing set of lines by merging the original lines.
Input:
STRING line_ids[] This value specifies the line ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of line IDs.
STRING line_list[] This value specifies the list of original lines to merge.
INTEGER num_lines This value specifies the number of lines to create from the existing set of lines.
REAL geo_tolerance This value specifies the geometric tolerance used to test for convergence. The default value is 0.005.
INTEGER num_iterations This value specifies the maximum number of times to iterate during the numerical approximation. The default value is 0.
LOGICAL delete_original This value is set to TRUE if the original lines are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000517 The Line Construct parameter %A% was reset from the invalid input value of %I% to the default value of %I%.
1000025 Error attempting to allocate virtual memory.
1000500 There must be at least one line as input. The invalid value input was %I%.
1000503 It is not possible to order the curves from head to tail.
1000516 The points are all within tolerance of one another. A zero length line will not be produced.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_edit_patch_blend(patch_ids,edge_list,weights,patch_list,delete_original,created_ids)
##########
Description:
This function will create patches from an existing set of patches,enforcing the first derivative continuity across the boundaries of the patches.
Input:
STRING patch_ids[] This value specifies the patch ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of patch IDs.
STRING edge_list[] This value specifies the list of patch edges to be assigned a weighting factor.
STRING weights[] This value specifies the weighting factors of one patch edged relative to another. This value must be greater than zero. A value of 1.0 will cause all patch edges to have an equal weight. A value greater than 1.0 will allow the slope of a edged of a patch from the beginning of the list of patches specified by the input value patch_list to dominate the slope of the edges of the created patches. A value less than 1.0 will allow the slope of an edge at the end of the list of patches specified by the input value patch_list to dominate the slope of the edges of the created patches.
STRING patch_list[] This value specifies the list of patches to blend.
LOGICAL delete_original This value is set to TRUE if the original patches are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000722 There must be at least two surfaces as input to Blend. The invalid value input was %A%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_edit_patch_break(patch_ids,break_type,break_entity_list,param_pos,delete_original,patch_list,created_ids)
##########
Description:
This function will create patches from an existing set of patches by breaking the original patches at a parametric position,point or node,curve,or surface.
Input:
STRING patch_ids[] This value specifies the patch ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of patch IDs.
INTEGER break_type This value specifies the type of entity used to define the break: 0 = parametric position,1 = point or node,2 = curve,and 3 = surface.
STRING break_entity_list[] This value specifies the list of entities used to define the break.
REAL param_pos(2)This value specifies the parametric positions that define the break position if the input value break_type is set to 0.
LOGICAL delete_original This value is set to TRUE if the original patches are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING patch_list[] This value specifies the list of original patches to break.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
1000706 The specified surfaces do not intersect.
1000709 Unable to intersect the curves being used to construct a patch. The curves must form a closed region and must be in a circular order.
1000713 Unable to break the patch.
1000714 An error occurred while manifolding on a surface.
1000715 Designated point not on the patch.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
ge_edit_entity_refit(output_ids,refit_tol,delorg,solid_list,edit_ids)
##########
Description:
This function will refit Patran solids to a Parasolid representation.
Input:
STRING output_ids[] This value specifies the entityID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of entity IDs.
REAL refit_tol This value specifies the tolerance to be used to refit the solid.
LOGICAL delorg This value specifies whether or not to delete the original Patran solid after the refit.
STRING solid_list[] This value specifies the Patran solids to refit.
Output:
STRING edit_ids[VIRTUAL] This value returns a description of the refit identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
ge_edit_solid_blend(radius,entity_type,entity_list,created_labels)
##########
Description:
This function will create a constant radius edge blend on an edge(s)of a solid
Input:
REAL radius This value specifies the constant radius of the edge blend
INTEGER entity_type This value specifies the type of the input entities (1 - Edge,2 - Face,3 - Solid).
STRING entity_list[VIRTUAL] This value specifies the list of entities to create the edge blend.
Output:
STRING created_labels[VIRTUAL] This value returns a description of the created surface identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
ge_edit_solid_chamfer(first_size,angle,entity_type,entity_list,created_labels)
##########
Description:
This function will create a constant angle chamfer type edge blend on an edge(s)of a solid
Input:
REAL first_size This value specifies the size of the chamfer on the first surface.
REAL angle This value specifies the size of the chamfer on the other surface.
INTEGER entity_type This value specifies the type of the input entities (1 - Edge,2 - Face,3 - Solid).
STRING entity_list[VIRTUAL] This value specifies the list of input entities to create the chamfer.
Output:
STRING created_labels[VIRTUAL] This value returns a description of the created surface identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
ge_edit_solid_disassemble(solid_list,convert_surfaces,delorg,edit_ids)
##########
Description:
This function will disassemble B-rep Solids into their constituent surfaces.
Input:
STRING solid_list[] This value specifies the B-rep Solids to disassemble.
LOGICAL convert_surfaces This value specifies whether or not to convert the constituent surfaces into simply trimmed(green)surfaces. Green surfaces are used to create TriParametric Solids(blue).
LOGICAL delorg This value specifies whether or not to delete the original Patran solid after the disassemble.
Output:
STRING edit_ids[VIRTUAL] This value returns a description of the surface identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
ge_edit_solid_imprint_solid(imprinting_solid,imprinted_solid,edited_labels)
##########
Description:
This function will imprint the selected solid bodies on solid bodies.
Input:
STRING imprinting_solid[] This value specifies the list of imprinting solids.
STRING imprinted_solid[] The value specifies the target solid bodies for imprinting.
Output:
STRING edited_labels[VIRTUAL] This value returns a description of the edited solid identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
ge_edit_solid_refit_v1(output_ids,refit_type,udensity,vdensity,wdensity,refit_tol,delorg,solid_list,edit_ids)
##########
Description:
This function will refit Solids to TriCubicNet or TriParametric geometric representation. If the solid is of type B-rep,then it must have only five or six faces.
Input:
STRING output_ids[] This value specifies the entityID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of entity IDs.
INTEGER refit_type This value specifies the type of solid to refit into: 1 = TriCubicNet 2 = TriParametric
INTEGER udensity This value specifies the internal density in the parametric u direction for the number of tri-cubic solids to create in the TriCubicNet Solid. (Used if refit_type = 1)
INTEGER vdensity This value specifies the internal density in the parametric v direction for the number of tri-cubic solids to create in the TriCubicNet Solid. (Used if refit_type = 1)
INTEGER wdensity This value specifies the internal density in the parametric w direction for the number of tri-cubic solids to create in the TriCubicNet Solid. (Used if refit_type = 1)
REAL refit_tol This value specifies the tolerance to be used to refit the solid. (Used if refit_type = 2)
LOGICAL delorg This value specifies whether or not to delete the original Patran solid after the refit.
STRING solid_list[] This value specifies the Patran solids to refit.
Output:
STRING edit_ids[VIRTUAL] This value returns a description of the refit identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
ge_edit_solid_shelling(thickness,face_list,created_labels)
##########
Description:
This function will hollow a solid by shelling the selected faces.
Input:
REAL thickness This value specifies the thickness for shelling.
STRING face_list[VIRTUAL] This value specifies the list of faces to shell.
Output:
STRING created_labels[VIRTUAL] This value returns a description of the created surafce identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
ge_edit_surface_trim_edge(surface,edge,delete_sliver,edited_labels)
##########
Description:
This function will trim an existing surface using one of its edges and optionally remove the remaining sliver surface.
Input:
STRING surface[] This value specifies the surface to trim.
STRING edge[] This value specifies the edge to use for trimming the surface.
LOGICAL delete_sliver This value specifies whether or not to delete the sliver surface remaining after the trim.
Output:
STRING edited_labels[VIRTUAL] This value returns a description of the edited surface identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
ge_solid_break_by_plane(output_ids,solid_list,plane_list,delete_orig,created_ids)
##########
Description:
This function breaks solids by planes.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING solid_list[] This value specifies the list of the solids to be broken.
STRING plane_list[] This value specifies the list of the planes which will break the solids.
INTEGER delete_orig This value is set to TRUE if the original solids are to be deleted. 0=Retain original geometry1=Delete original geometry
Output:
STRING created_ids[] This value returns the created solids ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
38001214 Unable to break the solid because failed to break one or more its faces. Slightly move the splitting plane or surface and break the solid again.
38001217 Unable to break %A%. Errors occurred in breaking its faces. Check the intersections of the solid faces with the splitting plane/surface. Then check if all faces,which the plane or surface intersects,can be broken.
---------------
sgm_edit_brep_break_plane(solid_list,plane_list,delete_flag,created_ids)
##########
Description:
This function breaks a set of solids with a set of planes.
Input:
STRING solid_list[] This value specifies the list of the solids to be broken.
STRING plane_list[] This value specifies the list of the planes which will break the solids.
LOGICAL delete_flag This value is set to TRUE if the original solids are to be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
38001214 Unable to break the solid because failed to break one or more its faces. Slightly move the splitting plane or surface and break the solid again.
38001217 Unable to break %A%. Errors occurred in breaking its faces. Check the intersections of the solid faces with the splitting plane/surface. Then check if all faces,which the plane or surface intersects,can be broken.
---------------
sgm_edit_brep_break_plane_v1(output_ids,solid_list,plane_list,delete_orig,created_ids)
##########
Description:
This function breaks a set of solids with a set of planes.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING solid_list[] This value specifies the list of the solids to be broken.
STRING plane_list[] This value specifies the list of the planes which will break the solids.
LOGICAL delete_orig This value is set to TRUE if the original solids are to be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
38001214 Unable to break the solid because failed to break one or more its faces. Slightly move the splitting plane or surface and break the solid again.
38001217 Unable to break %A%. Errors occurred in breaking its faces. Check the intersections of the solid faces with the splitting plane/surface. Then check if all faces,which the plane or surface intersects,can be broken.
---------------
sgm_edit_brep_break_surface(solid_list,surface_list,delete_flag,created_ids)
##########
Description:
This function breaks a solid with a surface.
Input:
STRING solid_list[] This value specifies the list of the solids to be broken.
STRING surface_list[] This value specifies the list of the surfaces which will break the solids.
LOGICAL delete_flag This value is set to TRUE if the original solids are to be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
38001214 Unable to break the solid because failed to break one or more its faces. Slightly move the splitting plane or surface and break the solid again.
38001217 Unable to break %A%. Errors occurred in breaking its faces. Check the intersections of the solid faces with the splitting plane/surface. Then check if all faces,which the plane or surface intersects,can be broken.
---------------
sgm_edit_brep_break_surface_v1(output_ids,solid_list,surface_list,delete_orig,created_ids)
##########
Description:
This function breaks a set of solids with a set of surfaces.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING solid_list[] This value specifies the list of the solids to be broken.
STRING surface_list[] This value specifies the list of the surfaces which will break the solids.
LOGICAL delete_orig This value is set to TRUE if the original solids are to be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
38001214 Unable to break the solid because failed to break one or more its faces. Slightly move the splitting plane or surface and break the solid again.
38001217 Unable to break %A%. Errors occurred in breaking its faces. Check the intersections of the solid faces with the splitting plane/surface. Then check if all faces,which the plane or surface intersects,can be broken.
---------------
sgm_edit_curve_break_parametric(curve_ids,curve_position,curve_list,delete_original,created_ids)
##########
Description:
This function creates curves by breaking a set of curves at an arbitrary intermediate position.
Input:
STRING curve_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
REAL curve_position This value specifies the parametric position along the curve of the break point.
STRING curve_list[] This value specifies the list of curves to break.
LOGICAL delete_original This value is set to TRUE if the original curves are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
2001070 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_curve_break_plane(curve_ids,plane_list,curve_list,delete_flag,created_ids)
##########
Description:
This function breaks a set of curves with a set of planes.
Input:
STRING curve_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING plane_list[] This value specifies the list of the planes which will break the curves.
STRING curve_list[] This value specifies the list of the curves which is to be broken.
LOGICAL delete_flag This value is set to TRUE if the original curves are to be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
38001214 Unable to break the solid because failed to break one or more its faces. Slightly move the splitting plane or surface and break the solid again.
38001217 Unable to break %A%. Errors occurred in breaking its faces. Check the intersections of the solid faces with the splitting plane/surface. Then check if all faces,which the plane or surface intersects,can be broken.
---------------
sgm_edit_curve_break_point(curve_ids,point_list,curve_list,delete_original,created_ids)
##########
Description:
This function creates a set of curves by breaking a set of curves at a set of points.
Input:
STRING curve_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING point_list[] This value specifies the list of points on the curve to specify the break point.
STRING curve_list[] This value specifies the list of curves to break.
LOGICAL delete_original This value is set to TRUE if the original curves are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
2001070 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_curve_disassemble(curve_list,delete_original)
##########
Description:
This function creates curves by disassembling a set of chain curve.
Input:
STRING curve_list[] This value specifies the list of chain curves to disassemble.
LOGICAL delete_original This value is set to TRUE if the original chains are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
38000471 Curve %I% is not a chain.
1000201 %A% is not a recognized syntax for a Curve List.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000470 Unable to load the curve into the database.
38000805 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_curve_extend_1curve(curve_ids,extend_type,length_type,curve_length,curve_extend_point,created_ids)
##########
Description:
This function will create curves by extension of a set of curves by either creating straight curves which start at the beginning or end of an existing curve and moves in a tangential direction from the end of the curve for a specified distance or by reparameterizing existing curves starting at the beginning or end of a curve and continuing for a specified distance.
Input:
STRING curve_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER extend_type This value specifies the curve type to create from extending the original curves: 1 = straight curve,and 2 = continuous curvature curve.
INTEGER length_type This value specifies the curve length type if the input value extend_type is set to 2: 1= added curve length,and 2 = percent of total length of original curve.
REAL curve_length This value specifies the length to extend the curves
STRING curve_extend_point[] This value specifies the original curves to extend and the points on the curves defining which end of the curves to extend.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000568 Error evaluating curve for extending. Unable to extend the original curve.
1000569 The curve trying to extend has a tangent of length zero. Unable to extend curve.
1000570 The extended curve length of %G% is invalid. Input length value greater than zero.
2001070 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_curve_extend_1curve_v1(curve_ids,extend_type,length_type,curve_length,curve_extend_point,created_ids)
##########
Description:
This function will extend curves by starting at the beginning or end of an existing curve and moving in a tangential direction from the beginning or end of the curve for a specified distance or by reparameterizing existing curves starting at the beginning or end of a curve and continuing for a specified distance.
Input:
STRING curve_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER extend_type This value specifies the curve type to create from extending the original curves: 1 = straight curve,and 2 = continuous curvature curve.
INTEGER length_type This value specifies the curve length type if the input value extend_type is set to 2: 1= added curve length,and 2 = percent of total length of original curve.
REAL curve_length This value specifies the length to extend the curves
STRING curve_extend_point[] This value specifies the original curves to extend and the points on the curves defining which end of the curves to extend.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000568 Error evaluating curve for extending. Unable to extend the original curve.
1000569 The curve trying to extend has a tangent of length zero. Unable to extend curve.
1000570 The extended curve length of %G% is invalid. Input length value greater than zero.
2001070 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_curve_extend_2curve(curve_ids,curve1_list,curve2_list,created_ids)
##########
Description:
This function extends two sets of curves to their points of intersection.
Input:
STRING curve_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING curve1_list[] This value specifies the first curve list to extend to an intersection point.
STRING curve2_list[] This value specifies the second curve list to extend to an intersection point.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000559 The intersection point of the pair of curves to extend is within geometric tolerance(%G%)of both curves. The original curves were not extended.
1000555 The two curves are collinear so an intersection point cannot be calculated.
1000556 The two curves are not coplanar so an intersection point cannot be calculated.
1000568 Error evaluating curve for extending. Unable to extend the original curve.
2001070 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_curve_extend_2curve_v1(curve_ids,curve1_list,curve2_list,created_ids)
##########
Description:
This function extends a set of curves to their points of intersection.
Input:
STRING curve_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING curve1_list[] This value specifies the first curve list to extend to an intersection point.
STRING curve2_list[] This value specifies the second curve list to extend to an intersection point.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000568 Error evaluating curve for extending. Unable to extend the original curve.
2001070 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_curve_extend_circle(curve_ids,curve_extend_point,delete_original,created_ids)
##########
Description:
This function extends an existing set of curves by creating a full circle from a point on the curve at the start,end,or an interior point.
Input:
STRING curve_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs. These identifier values will be used only if the original curves being extended are topological edges.
STRING curve_extend_point[] This value specifies the original curves to be extended along with the points on the curves at which the circle will be created.
LOGICAL delete_original This value is set to TRUE if the original curves are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
38000439 The selected curve %I% has no center of curvature. The curve can not be extended into a full circle.
38000003 No blob provided.
38000413 Zero length plane normal vector.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_curve_extend_points(curve_ids,curve_list,point_list,created_ids)
##########
Description:
This function extends a set of existing curves by adding extra points at one end of a curve and refitting the curve to that point.
Input:
STRING curve_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs (only used if the original curve to extend is a topological edge).
STRING curve_list[] This value specifies the set of curves to extend.
STRING point_list[] This value specifies the points to add to ends of the curves being extended.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_curve_extend_tocurve(curve_ids,curvepoint_list,curve_list,break,delete_original,created_ids)
##########
Description:
This function will extend a curve to the point of intersection of another curve with an option to break the intersecting curve at the point of intersection.
Input:
STRING curve_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING curvepoint_list This value specifies the curve to extend and the end of the curve to extend from.
STRING curve_list This value specifies the intersecting curve to extend to.
LOGICAL break This value specifies whether or not to break the intersecting curve at the point of intersection.
LOGICAL delete_original This value specifies whether or not the original intersecting curve is to be deleted after the extend operation.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000568 Error evaluating curve for extending. Unable to extend the original curve.
1000569 The curve trying to extend has a tangent of length zero. Unable to extend curve.
2001070 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_curve_merge(curve_ids,curve_list,num_curves,merge_tolerance,delete_original,created_ids)
##########
Description:
This function will create curves by merging a set of curves.
Input:
STRING curve_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING curve_list[] This value specifies the original curves to merge.
INTEGER num_curves This value specifies the number of curves to create.
REAL merge_tolerance This value specifies the geometric tolerance used to determine the point distribution along the new curves and the accuracy of the merge process.
LOGICAL delete_original This value is set to TRUE if the original curves are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000500 There must be at least one line as input. The invalid value input was %I%.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000467 Curves to be chained are not contiguous due to a gap of %G%. The point of discontinuity has been marked.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_curve_refit(curve_ids,curve_list,refit_method,refit_tolerance,num_curves,delete_original,created_ids)
##########
Description:
This function will create piecwise cubic spline curves by refitting a set of curves.
Input:
STRING curve_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING curve_list[] This value specifies the list of curves to be refitted.
INTEGER refit_method This value specifies the refit method: 1 = tolerance based,and 2 = num_curves uniformly distributed cubic spline segments using arc length parameterization.
REAL refit_tolerance This value specifies the refit tolerance to use if the input value refit_method is set to 1.
INTEGER num_curves This value specifies the number of spline segments to create if the input value refit_method is set to 2.
LOGICAL delete_original This value is set to TRUE if the original curves are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000201 %A% is not a recognized syntax for a Curve List.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000805 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_curve_reverse(reverse_mesh,curve_list,reversed_ids)
##########
Description:
This function will reverse the direction of a set of curves and optionally,any associated finite element model entities.
Input:
LOGICAL reverse_mesh This value is set to TRUE if any associated finite element model entities are to be reversed with the curve. If this value is set to FALSE,any associated finite element model entities will not be reversed.
STRING curve_list[] This value specifies the list of curves to reverse.
Output:
STRING reversed_ids[] This value returns the reversed ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000025 Error attempting to allocate virtual memory.
2001070 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_curve_trim_parametric(curve_position,curve_trim_point,trimmed_ids)
##########
Description:
This function trims a set of curves at a defined parametric position,followed by the removal of the unwanted portion of the original curves.
Input:
REAL curve_position This value specifies the parametric position along the curve to specify the trim point.
STRING curve_trim_point[] This value specifies the original curve to trim and the point on the curve defining which end of the curve to discard.
Output:
STRING trimmed_ids[] This value returns the trimmed ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
1000565 The curve to trim is an edge,and trimming edges is not allowed.
2001070 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_curve_trim_point(trim_point,curve_trim_point,trimmed_ids)
##########
Description:
This function trims a set of curves at defined intersection points,followed by the removal of the unwanted portion of the original curves.
Input:
STRING trim_point[] This value specifies the point on the curve to specify the trim point.
STRING curve_trim_point[] This value specifies the original curve to trim and the point on the curve defining which end of the curve to discard.
Output:
STRING trimmed_ids[] This value returns the trimmed ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000565 The curve to trim is an edge,and trimming edges is not allowed.
2001070 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_solid_break_v1(solid_ids,break_type,break_entity_list,param_pos,delete_original,solid_list,created_ids)
##########
Description:
This function creates a set of solids from an existing set of solids by breaking the original solids at a parametric position,point or node,curve,or surface.
Input:
STRING solid_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
INTEGER break_type This value specifies the type of entity used to define the break: 1 = parametric position,2 = point or node,3 = curve,and 4 = surface. Curves,surfaces and solids will both be approximated to parametric cubics and then the solid will be broken.
STRING break_entity_list[] This value specifies the list of entities used to define the break.
REAL param_pos(3)This value specifies the parametric positions that define the break position if the input value break_type is set to 1.
LOGICAL delete_original This value is set to TRUE if the original solids are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING solid_list[] This value specifies the list of original solids to break.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
2001070 Unable to acquire %I% words of virtual memory.
38000117 An attempt to approximate a general curve with a single Parametric Cubic failed.
38000118 An attempt to approximate a general surface with a single Parametric BiCubic failed.
38000119 An attempt to approximate a general solid with a single Parametric TriCubic failed.
38000121 Invalid format conversion flag specified for surface conversion.
38000122 Invalid format conversion flag specified for solid conversion.
38000434 The solid type used for this Action,Object,Method function is invalid. It must be of a type that when created,has the default color of Blue.
38000436 Specified Break Method value of %I% is invalid. Valid values are 1-4.
38000452 Unable to calculate a point on the solid.
38000496 Unable to break Solid %I%.
38000497 Unable to break a solid with the specified parametric position values of %G%,%G%,and %G%.
38000499 Unable to break a solid with the calculated parametric position values of %G%,%G%,and %G% from the point coordinates of %G%,%G%,and %G%.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_solid_break_v2(solid_ids,break_type,break_entity_list,param_pos,delete_original,solid_list,created_ids)
##########
Description:
This function creates a set of solids from an existing set of solids by breaking the original solids at a parametric position,point or node,curve,or surface.
Input:
STRING solid_ids[] This value specifies the solid ID list. If this value is set to an empty string or to "#",the function will automatically allocate and assign a sequential list of solid IDs.
INTEGER break_type This value specifies the type of entity used to define the break: 1 = parametric position,2 = point or node,3 = curve,and 4 = surface. Curves,surfaces and solids will both be approximated to parametric cubics and then the solid will be broken.
STRING break_entity_list[] This value specifies the list of entities used to define the break.
REAL param_pos(3)This value specifies the parametric positions that define the break position if the input value break_type is set to 1.
LOGICAL delete_original This value is set to TRUE if the original solids are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING solid_list[] This value specifies the list of original solids to break.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
2001070 Unable to acquire %I% words of virtual memory.
38000117 An attempt to approximate a general curve with a single Parametric Cubic failed.
38000118 An attempt to approximate a general surface with a single Parametric BiCubic failed.
38000119 An attempt to approximate a general solid with a single Parametric TriCubic failed.
38000121 Invalid format conversion flag specified for surface conversion.
38000122 Invalid format conversion flag specified for solid conversion.
38000434 The solid type used for this Action,Object,Method function is invalid. It must be of a type that when created,has the default color of Blue.
38000436 Specified Break Method value of %I% is invalid. Valid values are 1-4.
38000452 Unable to calculate a point on the solid.
38000496 Unable to break Solid %I%.
38000497 Unable to break a solid with the specified parametric position values of %G%,%G%,and %G%.
38000499 Unable to break a solid with the calculated parametric position values of %G%,%G%,and %G% from the point coordinates of %G%,%G%,and %G%.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_solid_disassemble(solid_list,delete_original,created_labels)
##########
Description:
This function disassembles a set of solids into subordinate surface faces.
Input:
STRING solid_list[] This value specifies the solid list.
LOGICAL delete_original This value is set to TRUE if the original solids are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
STRING created_labels[] This value returns the a list of the labels for the created entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000025 Error attempting to allocate virtual memory.
8107002 Last command aborted.
---------------
sgm_edit_solid_refit_hp(output_ids,nu,nv,nw,delete_orig,solid_list,created_ids)
##########
Description:
This function will refit a parameterized solid into a tricubic network solid.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
INTEGER nu This value specifies the number of tricubic solids to create in the u parametric direction.
INTEGER nv This value specifies the number of tricubic solids to create in the v parametric direction.
INTEGER nw This value specifies the number of tricubic solids to create in the w parametric direction.
LOGICAL delete_orig If this value is TRUE,it will delete the original solid after the refit operation.
STRING solid_list[] This value specifies the solids to refit.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
38000845 Unable to acquire %I% words of virtual memory.
38000434 The solid type used for this Action,Object,Method function is invalid. It must be of a type that when created,has the default colour of Blue.
38000148 The 3 hyperpatch densities must be positive integers!
---------------
sgm_edit_solid_refit(output_ids,nu,nv,nw,solid_list,delete_orig,created_ids)
##########
Description:
This function will refit a 5 or 6 sided solid into a tricubic network solid.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
INTEGER nu This value specifies the number of tricubic solids to create in the u parametric direction.
INTEGER nv This value specifies the number of tricubic solids to create in the v parametric direction.
INTEGER nw This value specifies the number of tricubic solids to create in the w parametric direction.
STRING solid_list[] This value specifies the solids to refit.
LOGICAL delete_orig If this value is TRUE,it will delete the original solid after the refit operation.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
38000845 Unable to acquire %I% words of virtual memory.
38000697 This operation cannot be completed. Please verify that the inputs are valid.
38000698 Solid %I% could not be refit.
38001322 Solid %I% has a face with more than four edges and hence cannot be refit into a TriParametric Solid.
---------------
sgm_edit_solid_refit_v1(output_ids,tolerance,solid_type,delete_orig,solid_list,created_ids)
##########
Description:
This function will refit a 5 or 6 sided solid into a tricubic network solid.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
REAL tolerance This value specifies the refit tolerance.
LOGICAL solid_type If this value is TRUE,it will create individual tricubic solids,otherwise,it will create one triparametric network solid.
LOGICAL delete_orig If this value is TRUE,it will delete the original solid after the refit operation.
STRING solid_list[] This value specifies the solids to refit.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
38000845 Unable to acquire %I% words of virtual memory.
38000697 This operation cannot be completed. Please verify that the inputs are valid.
38000698 Solid %I% could not be refit.
38001322 Solid %I% has a face with more than four edges and hence cannot be refit into a TriParametric Solid.
38000652 Solid %I% cannot be refit to within the specified tolerance.
38000653 Solid %I% cannot be refit within a maximum allowable space of 200000 words.
38000654 Solid %I% cannot be refit into less than 1000 hyperpatches for the specified tolerance.
---------------
sgm_edit_solid_reverse(solid_list,reversed_ids)
##########
Description:
This function will reverse the parameterization of a parameterized solid.
Input:
STRING solid_list[] This value specifies the solids to reverse.
Output:
STRING reversed_ids[] This value returns the reversed ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_surface_add_hole(edit_option,radius,loop_check,vector_list,point_list,curve_list,surface,edited_labels)
##########
Description:
This function will add a hole to a surface by providing either a center point,a center point and a projection vector,or a closed,chained curve in which to create the hole from.
Input:
INTEGER edit_option This value specifies the option for adding a hole where: 1 = a circular hole is defined in the tangent plane of the manifolded center point. 2 = a circular hole is defined in the plane of the provided vector and vector-projectd onto the surface. 3 = input curves are manifolded to the surface.
REAL radius Hole radius (if edit_option is either 1 or 2)
LOGICAL loop_check Check if provided loops interfere with each other or with existing loops of the surface being edited.
STRING vector_list[] This value specifies a selection of vector identifiers which will be used as the projection vector for locating the center of the circular hole on the surface (if edit_option is 2).
STRING point_list[] This value specifies a selection of points used to define the center point of the circular hole on the surface (if edit_option is 1 or 2).
STRING curve_list[] This value specifies a selection of closed,chained curves used to define the hole in the surface (if edit_option is 3).
STRING surface[] This value specifies a single surface used to define which surface to add a hole to.
STRING edited_labels[VIRTUAL] This value returns a description of the edited surface identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
---------------
sgm_edit_surface_add_fillet(radius,point_list,surface,created_ids)
##########
Description:
This function will edit a surface by adding a fillet at a given vertex. The topological effect of this is to add an edge while eliminating the input vertex.
Input:
REAL radius This value specifies the fillet radius.
STRING point_list[] This value specifies the point list defining the location to create the fillet.
STRING surface[] This value specifies a single surface to add a fillet to.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
38000845 Unable to acquire %I% words of virtual memory.
38000696 Surface %A% is either a composite trimmed surface or a tessellated surface and,as such,is not supported by this application.
38000482 This application only works with one surface at a time. Subsequent selected surfaces will be ignored.
38000672 A fillet of radius %G% could not be added at %A%.
1000572 The fillet curve has a zero radius. The fillet cannot be created.
---------------
sgm_edit_surface_add_vertex(point_list,surface,edited_labels)
##########
Description:
This function will add a vertex to a surface by providing a list of points to add to the surface.
Input:
STRING point_list[] This value specifies a selection of points to be used to add vertices to a surface.
STRING surface[] This value specifies a surface to be used to add a vertex to.
STRING edited_labels[VIRTUAL] This value returns a description of the edited surface identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
---------------
sgm_edit_surface_break(surface_ids,surface,delete_original,break_method,iuv,uv,point1,point2,curve,created_ids)
##########
Description:
This function creates a set of surfaces from an existing set of surfaces by breaking the original surfaces at an isoparametric break,two points on opposing boundaries,or a manifold curve intersecting opposing boundaries.
Input:
STRING surface_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING surface[] This value specifies the surfaces to break.
LOGICAL delete_original This value is set to TRUE if the original surfaces are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
INTEGER break_method This value specifies the method used to define the break: 1= isoparametric break,2= two points on opposing boundaries,and 3 = manifold curve intersecting opposing boundaries.
INTEGER iuv This value specifies the iuv value if the input value break_method is equal to 1: 1 = U held constant,and 2 = V held constant.
REAL uv This value specifies a constant value if the input value break_method is equal to 1.
STRING point1[] This value specifies the first break point if the input value break_method is equal to 2.
STRING point2[] This value specifies the second break point if the input value break_method is equal to 2.
STRING curve[] This value specifies the manifold curve if the input value break_method is equal to 3.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
38000404 Unable to break Surface %I%. The Surface to break must be of a type different from Composite Trimmed Surface.
38000405 Unable to break Surface %I%.
38000428 This application only works with one curve per surface at a time. Please adjust the input accordingly.
38000429 This application only works with two points per surface at a time. Please adjust the input accordingly.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_surface_break_v1(surface_ids,surface_list,delete_original,break_type,iuv,uv,point1_list,point2_list,break_entity_list,created_ids)
##########
Description:
This function creates a set of surfaces from an existing set of surfaces by breaking the original surfaces at a parametric position,point or node,curve,or surface.
Input:
STRING surface_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING surface_list[] This value specifies the list of original surfaces to break.
LOGICAL delete_original This value is set to TRUE if the original surfaces are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
INTEGER break_type This value specifies the type of entity used to define the break: 1 = parametric position,2 = point or node,3 = curve,and 4 = surface.
INTEGER iuv This value specifies the iuv value if the input value break_type is set to 1: 1 = U held constant,and 2 = V held constant.
REAL uv This value specifies a constant value if the input value break_type is set to 1.
STRING point1_list[] This value specifies the first break point if the input value break_type is set to 2.
STRING point2_list[] This value specifies the second break point if the input value break_type is set to 2.
STRING break_entity_list[] This value specifies the list of curve or surface entities used to define the break.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
38000404 Unable to break Surface %I%. The Surface to break must be of a type different from Composite Trimmed Surface.
38000405 Unable to break Surface %I%.
38000428 This application only works with one curve per surface at a time. Please adjust the input accordingly.
38000429 This application only works with two points per surface at a time. Please adjust the input accordingly.
38000435 This application only works with one surface per surface at a time. Please adjust the input accordingly.
38000436 Specified Break Method value of %I% is invalid. Valid values are 1-4.
38000444 The break curve can only intersect the outer boundary of the surface exactly twice.
38000845 Unable to acquire %I% words of virtual memory.
38001221 This functionality is not supported for parasolid surfaces for V6.
---------------
sgm_edit_surface_break_plane(surface_ids,surface_list,plane_list,delete_flag,created_ids)
##########
Description:
This function breaks a set of surfaces with a set of planes.
Input:
STRING surface_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING surface_list[] This value specifies the list of the surfaces which are to be broken.
STRING plane_list[] This value specifies the list of the planes which will break the surface.
LOGICAL delete_flag This value is set to TRUE if the original surfaces are to be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
---------------
sgm_edit_surface_disassemble(surface_list,delete_original)
##########
Description:
This function disassembles a trimmed surface into its parent surface and edge curves.
Input:
STRING surface_list[] This value specifies the trimmed surface list.
LOGICAL delete_original This value is set to TRUE if the original trimmed surfaces are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000468 Surface %I% is not a general trimmed surface.
38000805 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_surface_disassemble_v1(surface_list,delete_original,extract_types)
##########
Description:
This function disassembles a Trimmed Surface into its constituent entities.
Input:
STRING surface_list[] This value specifies the list of trimmed surfaces to be disassembled.
LOGICAL delete_original This value is set to TRUE if the original trimmed surface is to be deleted after it is disassembled.
LOGICAL extract_types This value is set to TRUE if only the parent surface is to be stored in the database,otherwise both the parent surface and the edge curves are loaded in the database after the disassemble.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
38000659 %A% is not a General Trimmed Surface.
38000469 Failed to create a spline representation of an edge.
---------------
sgm_edit_surface_edge_add(retain_long,curve_list,surface,created_ids)
##########
Description:
This function will edit a surface by adding some new edges,possibly modifying the existing topology.
Input:
LOGICAL retain_long This value specifies the user preference referring to the ambiguity present in breaking a loop with a curve. = .TRUE. - keep the longest part = .FALSE. - keep the shortest part
STRING curve_list[] This value specifies the curves to be used to add edge(s).
STRING surface[] This value specifies a single surface to add an edge to.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
38000845 Unable to acquire %I% words of virtual memory.
38000696 Surface %A% is either a composite trimmed surface or a tessellated surface and,as such,is not supported by this application.
38000482 This application only works with one surface at a time. Subsequent selected surfaces will be ignored.
38000708 This geometric operation has failed for an undetermined reason.
38001232 The curves provided for the surface edges are not contiguous due to a gap of %G%. Either rebuild the curves to eliminate the gap or change the model tolerance to exceed the gap dimension.
---------------
sgm_edit_surface_edge_match(edit_option,surface_list,entity_list,refresh_surfaces,edited_ids)
##########
Description:
This function edits surface topology.
Input:
INTEGER edit_option This value specifies the type of edit to perform: .=1; surface-point where one surface will be edited by one or more points on the edges of the surface. =2; surface-surface where pairs of surfaces wil be edited by comparing closest edges.
STRING surface_list[] This value specifies the list of surfaces to be edited.
STRING entity_list[] This value specifies the list of either points or surfaces which will be used to edit the surfaces in the surface list.
LOGICAL refresh This value is set to TRUE if the surfaces are to be erased when they become congruent,otherwise FALSE.
Output:
STRING edited_ids[] This value returns the edited ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is "%A%".\nUnable to process request.
38000053 No valid geometric entities of type %A% were used as input. Unable to process request.
38001102 Unable to edit geometry. Illegal Edit Option.
38000451 Unable to calculate a point on the surface.
38001501 %A% may not be editable since %A%.
---------------
sgm_edit_surface_edge_rep(edge,curve_list,surface,created_ids)
##########
Description:
This function will edit a surface by replacing an existing edge with one or more new edges.
Input:
STRING edge[] This value specifies the edge to be replaced (only one edge will be processed)
STRING curve_list[] This value specifies the curves to be used as replacement edge(s).
STRING surface[] This value specifies a single surface to replace an edge from.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
38000845 Unable to acquire %I% words of virtual memory.
38000696 Surface %A% is either a composite trimmed surface or a tessellated surface and,as such,is not supported by this application.
38000482 This application only works with one surface at a time. Subsequent selected surfaces will be ignored.
38000673 No edges could be removed. Please check your input.
38000708 This geometric operation has failed for an undetermined reason.
38000700 Edit/edge/replace will only work on one edge at a time. You have selected %I% curves. Only the first curve will be processed.
38001232 The curves provided for the surface edges are not contiguous due to a gap of %G%. Either rebuild the curves to eliminate the gap or change the model tolerance to exceed the gap dimension.
38000702 The replacement curve(s)are not compatible with the selected edge to be replace,e.g. the selected edge is closed and the replacement curves are not. Please verify that your inputs are valid for this simple edge replacement.
---------------
sgm_edit_surface_extend(surface_ids,method,surface,edge1,edge2,entity,edited_ids)
##########
Description:
This function will extend a surface to the line of intersection of a point,curve,surface,plane,or extend two surfaces to their point of intersection. Trimmed Surfaces are not supported.
Input:
STRING surface_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
INTEGER method This value specifies the extend method,where 1 = extend to a surface and only the “surface to extend” is modified. 2 = extend two surfaces to their line of intersection. 3 = extend to a surface,break the intersecting surface at the line of intersection to create two new surfaces,and do not delete the original intersecting surface. 4 = extend to a surface,break the intersecting surface at the line of intersection to create two new surfaces,and delete the original intersecting surface. 5 = extend to a plane. 6 = extend to a curve. 7 = extend to a point.
STRING surface[] This value specifies the surface to extend.
STRING edge1[] This value specifies the edge of the surface to start the extension from.
STRING edge2[] This value specifies the edge of the second surface to start the extension from. (Used for method=2)
STRING entity[] This value specifies the entity to extend the surface to,where the entity will be a point,curve,surface,or plane.
Output:
STRING created_ids[] This value returns the edited ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000687 No intersections found between %A% and %A%. Please try a different extend option.
38000688 More than one intersection found between %A% and %A%. Please try a different extend option.
38000689 Unable to extend %A% to %A%. Please try a different extend option.
2001070 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_surface_extend_uvl(uvmin_max,length,surface_list,edge_list,edited_ids)
##########
Description:
This function extends a surface by: 1. Specifying a percentage of the original length to extend in the u-min,u-max,v-min,or v-max directions. 2. Specifying a fixed length to extend the surface starting at a specified surface edge. Trimmed Surfaces are not supported.
Input:
REAL uvmin_max[4] This value specifies the percentage to extend in the u-min,u-max,v-min,v-max directions of the surface. Valid values are in the range of -99 to +100.
REAL length This value specifies the fixed length to extend the surface. (Used only when the edge_list is non-blank)
STRING surface_list[] This value specifies the surfaces to extend.
STRING edge_list[] This value specifies the surface edge to extend from. (Used only when specifying a fixed length)
Output:
STRING edited_ids[] This value returns the edited ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000690 An attempt to extend %A% beyond the closure limit of 360 degrees is not allowed.
38000691 The value entered is outside the allowed range: [-99 to +100]
2001070 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_surface_refit(curve_ids,refit_to_nurbs,refit_tolerance,delete_original,surface_list,created_ids)
##########
Description:
This function refits a set of surfaces into a nurbs surface or a bicubic surface network.
Input:
STRING curve_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
LOGICAL refit_to_nurbs This value is set to TRUE if the surface is to be refit to nurbs surface,or to FALSE if the surface is to be refit to bicubic surface network.
REAL refit_tolerance This value specifies the refit tolerance.
LOGICAL delete_original This value is set to TRUE if the original surfaces are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING surface_list[] This value specifies the list of surfaces to refit.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000152 Selection not a surface -- ID=%I% Type=%I%.
38000153 Surface ID %I% refitted to %A%,but not loaded to database!
38000154 Surface labeled %I% is already a %A%.
38000151 At least one surface must be selected!
---------------
sgm_edit_surface_remove_edge(remove_option,min_el,curve_list,trimmed_surface,created_ids)
##########
Description:
This function will edit a Trimmed Surface by removing an edge.
Input:
INTEGER remove_option This value specifies the removal option: = 1 - User-supplied edges = 2 - Remove edges whose length is < min_el.
REAL min_el This value specifies the minimum edge length to consider when removing edges.
STRING curve_list[] This value specifies the edge curves of the Trimmed Surface.
STRING trimmed_surface[] This value specifies a single trimmed surface to remove an edge from.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
38000845 Unable to acquire %I% words of virtual memory.
38000696 Surface %A% is either a composite trimmed surface or a tessellated surface and,as such,is not supported by this application.
38000482 This application only works with one surface at a time. Subsequent selected surfaces will be ignored.
38000673 No edges could be removed. Please check your input.
---------------
sgm_edit_surface_remove_hole(curve_list,trimmed_surface,edited_labels)
##########
Description:
This function will remove a hole from a Trimmed Surface by providing an edge curve which represents a hole in a Trimmed Surface and a Trimmed Surface to remove the hole from.
Input:
STRING curve_list[] This value specifies a selection of edge-curves used to define the hole in the surface.
STRING trimmed_surface[] This value specifies a single Trimmed Surface used to define which Trimmed Surface to remove a hole from.
STRING edited_labels[VIRTUAL] This value returns a description of the edited Trimmed Surface identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
---------------
sgm_edit_surface_remove_hole_v1(output_ids,curve_list,trimmed_surface,fill_hole,created_ids)
##########
Description:
This function will remove a hole from a Trimmed Surface by providing an edge curve which represents a hole in a Trimmed Surface and a Trimmed Surface to remove the hole from.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING curve_list[] This value specifies a selection of edge-curves used to define the hole in the surface.
STRING trimmed_surface[] This value specifies a single Trimmed Surface to remove a hole from.
LOGICAL fill_hole This value is set to TRUE if a surface is to be created to fill the hole,otherwise simply removes the hole.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
38000845 Unable to acquire %I% words of virtual memory.
38000659 No INNER loops or holes were selected from the trimmed surface selected. Try again.
---------------
sgm_edit_surface_remove_vertex(vertex_list,delete_point,edited_labels)
##########
Description:
This function will remove a vertex from a Trimmed Surface by providing a list of vertices to remove from the Trimmed Surface.
Input:
STRING vertex_list[] This value specifies a selection of vertices used to specify which vertices to remove from the associated Trimmed Surface(s).
LOGICAL delete_point This value specifies whether or not to delete points that are associated to the vertex to be removed which are not volatile to the Trimmed Surface.
STRING edited_labels[VIRTUAL] This value returns a description of the edited surface identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
---------------
sgm_edit_surface_remove_vrtx_v1(vertex_list,surface_list,delete_point,edited_labels)
##########
Description:
This function will remove a vertex from a Trimmed Surface by providing a list of vertices to remove from the Trimmed Surface. If the surface list is blank,ALL surfaces that use the vertices to define topology will be edited,otherwise,only the specified surfaces will be edited.
Input:
STRING vertex_list[] This value specifies a selection of vertices used to specify which vertices to remove from the associated Trimmed Surface(s).
STRING surface_list[] This value specifies a selection of trimmed surfaces used to specify which trimmed surfaces to remove vertices from.
LOGICAL delete_point This value specifies whether or not to delete points that are associated to the vertex to be removed which are not volatile to the Trimmed Surface.
STRING edited_labels[VIRTUAL] This value returns a description of the edited surface identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
---------------
sgm_edit_surface_remove_vrtx_v1(vertex_list,surface_list,delete_point,edited_labels)
##########
Description:
This function will remove a vertex from a Trimmed Surface by providing a list of vertices to remove from the Trimmed Surface. If the surface list is blank,ALL surfaces that use the vertices to define topology will be edited,otherwise,only the specified surfaces will be edited.
Input:
STRING vertex_list[] This value specifies a selection of vertices used to specify which vertices to remove from the associated Trimmed Surface(s).
STRING surface_list[] This value specifies a selection of trimmed surfaces used to specify which trimmed surfaces to remove vertices from.
LOGICAL delete_point This value specifies whether or not to delete points that are associated to the vertex to be removed which are not volatile to the Trimmed Surface.
STRING edited_labels[VIRTUAL] This value returns a description of the edited surface identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
---------------
sgm_edit_surface_reverse(reverse_mesh,surface_list,reversed_ids)
##########
Description:
This function reverses the normal of a set of surfaces and optionally,its associated finite element model mesh.
Input:
LOGICAL reverse_mesh This value is set to TRUE if the associated finite element model mesh is to have its normals reversed with the surface. If this value is set to FALSE,the finite element model mesh normals will not be reversed.
STRING surface_list[] This value specifies the list of surfaces to reverse.
Output:
STRING reversed_ids[] This value returns the reversed ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000025 Error attempting to allocate virtual memory.
2001070 Unable to acquire %I% words of virtual memory.
---------------
sgm_edit_surface_sew(surface_list,sewed_ids)
##########
Description:
This function will sew surfaces with share common edges to make them topologically congruent.
Input:
STRING surface_list[] This value specifies the surfaces to be sewn together.
Output:
STRING sewed_ids[] This value returns the sewed ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
38000845 Unable to acquire %I% words of virtual memory.
38001501 %A% may not be editable since %A%.
---------------
sgm_edit_surface_sew2(surface_list,merge_edges,premerge_vertices,sew_nonmanifold,delete_gap_surfaces,sewed_ids)
##########
Description:
This function will sew surfaces with share common edges to make them topologically congruent.
Input:
STRING surface_list[] This value specifies the surfaces to be sewn together.
LOGICAL merge_edges If this value is TRUE,it will to force gap merging,else FALSE to just break T’s.
LOGICAL premerge_vertices If this value is TRUE,it will equivalence vertices prior to closing gaps.
LOGICAL sew_nonmanifold If this value is TRUE,it will perform non-manifold sewing,else FALSE for only manifold sewing.
LOGICAL delete_gap_surfaces If this value is TRUE,it will delete gap surfaces.
Output:
STRING sewed_ids[] This value returns the sewed ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
38000845 Unable to acquire %I% words of virtual memory.
38001501 %A% may not be editable since %A%.
---------------
sgm_edit_surface_subtract(output_ids,surface_b,surface_a,created_ids)
##########
Description:
This function will edit a surface by subtracting surface “a” from surface “b” (b-a).
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING surface_b[] This value specifies the surface to be subtract from.
STRING surface_a[] This value specifies the surface to subtract from surface “b”.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
38000845 Unable to acquire %I% words of virtual memory.
38001232 Edit/surface/subtract has failed. It may be that topology encountered is beyond the scope of the current implementation. Please try an alternate strategy to achieve the desired result.
---------------
asm_transform_cord_rotate(output_labels,axis,angle,offset,coord_frame,num_repeat,delete_original,coord_list,created_labels)
##########
Description:
This function creates coordinate frames by rotating a set of coordinate frames around an axis in a reference coordinate frame.
Input:
STRING output_labels[] This value specifies the labels of the coordinate frames to be created.
STRING axis[] This value specifies the axis of rotation.
REAL angle This value specifies the angle of rotation in degrees.
REAL offset This value specifies the offset angle between the coordinate frame and the beginning of the angle of rotation in degrees.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_repeat This value specifies the number of times to repeat this transformation operation on each created coordinate frame.
LOGICAL delete_original This value is set to TRUE if the original coordinate frames are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING coord_list[] This value specifies the list of coordinate frames to be rotated.
Output:
STRING created_labels[] This value returns the labels of the coordinate frames created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
1000064 Overwrite of existing entity not permitted.
1000211 The length of the Axis equals zero.
1000216 Unable to properly process the output labels.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_transform_cord_translate(output_labels,delta,coord_frame,num_repeat,delete_original,coord_list,created_labels)
##########
Description:
This function creates coordinate frames by translating a set of coordinate frames in a reference coordinate frame.
Input:
STRING output_labels[] This value specifies the labels of the coordinate frames to be created.
STRING delta[] This value specifies the translation vector.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_repeat This value specifies the number of translations for each coordinate frame.
LOGICAL delete_original This value is set to TRUE if the original coordinate frames are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING coord_list[] This value specifies the list of coordinate frames to be translated.
Output:
STRING created_labels[] This value returns the labels of the coordinate frames created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
1000064 Overwrite of existing entity not permitted.
1000216 Unable to properly process the output labels.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_transform_cord_translate_1(output_labels,delta,magnitude,reverse_direction,coord_frame,num_repeat,delete_original,coord_list,created_labels)
##########
Description:
This function creates coordinate frames by translating a set of coordinate frames in a reference coordinate frame.
Input:
STRING output_labels[] This value specifies the labels of the coordinate frames to be created.
STRING delta[] This value specifies the direction vector.
REAL magnitude This value specifies the vector magnitude.
LOGICAL reverse_direction This value is set to TRUE if the direction vector is to be reversed. If this value is set to FALSE,the direction vector will not be reversed.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_repeat This value specifies the number of translations for each coordinate frame.
LOGICAL delete_original This value is set to TRUE if the original coordinate frames are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING coord_list[] This value specifies the list of coordinate frames to be translated.
Output:
STRING created_labels[] This value returns the labels of the coordinate frames created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
1000064 Overwrite of existing entity not permitted.
1000216 Unable to properly process the output labels.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_transform_curve_vsum(curve_ids,origin_1,origin_2,scales_1,scales_2,curve_list1,curve_list2,created_ids)
##########
Description:
This function creates parametric cubic curves by performing vector sums of the coordinate locations of two sets of curves.
Input:
STRING curve_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING origin_1[] This value specifies the origin of the vectors for the first set of curves.
STRING origin_2[] This value specifies the origin of the vectors for the second set of curves.
REAL scales_1(3)This value specifies the factor to be used to scale the first set of curve vectors.
REAL scales_2(3)This value specifies the factor to be used to scale the second set of curve vectors.
STRING curve_list1[] This value specifies the first curve list.
STRING curve_list2[] This value specifies the second curve list.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_transform_grid_mcord(point_labels,coord_frame_1,coord_frame_2,delete_original,point_list,created_labels)
##########
Description:
This function creates points by translating a set of points from one coordinate frame to a second coordinate frame. The points created will have the same parametric locations relative to the new coordinate frame that they had to the original coordinate frame.
Input:
STRING point_labels[] This value specifies the labels of the points to be created.
STRING coord_frame_1[] This value specifies the coordinate frame from which the set of points will be translated.
STRING coord_frame_2[] This value specifies the coordinate frame to which the points will be translated.
LOGICAL delete_original This value is set to TRUE if the original points are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING point_list[] This value specifies the list of points to be translated.
Output:
STRING created_labels[] This value returns the labels of the points created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_transform_grid_mirror(point_labels,plane,offset,delete_original,point_list,created_labels)
##########
Description:
This function will create points by mirroring a set of points.
Input:
STRING point_labels[] This value specifies the labels of the points to be created.
STRING plane[] This value specifies the mirror plane.
REAL offset This value specifies the final offset from the mirror plane.
LOGICAL delete_original This value is set to TRUE if the original points are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING point_list[] This value specifies the list of points to be mirrored.
Output:
STRING created_labels[] This value returns the labels of the points created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_transform_grid_mscale(point_labels,coord_frame,origin,translation,rotation_matrix,delete_original,point_list,created_labels)
##########
Description:
This function creates points by simultaneously translating,scaling,rotating,and warping a set of points.
Input:
STRING point_labels[] This value specifies the labels of the points to be created.
STRING coord_frame[] This value specifies the reference coordinate frame.
STRING origin[] This value specifies the origin for the transformation.
STRING translation[] This value specifies a translation vector defining the direction and distance of a translation operation. This value will be used only if a translation operation has been specified with the input value rotation_matrix.
REAL rotation_matrix(3,3)This value specifies the translation,scaling,rotation,and warp operations to be done on the set of points. See the remarks below for more information.
LOGICAL delete_original This value is set to TRUE if the original points are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING point_list[] This value specifies the list of points to be transformed.
Output:
STRING created_labels[] This value returns the labels of the points created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_transform_grid_mscale2(point_labels,coord_frame,origin,translation,columns,delete_original,point_list,created_labels)
##########
Description:
This function creates points by simultaneously translating,scaling,rotating,and warping a set of points.
Input:
STRING point_labels[] This value specifies the labels of the points to be created.
STRING coord_frame[] This value specifies the reference coordinate frame.
STRING origin[] This value specifies the origin for the transformation.
STRING translation[] This value specifies a translation vector defining the direction and distance of a translation operation. This value will be used only if a translation operation has been specified with the input value rotation_matrix.
STRING columns[](3)This value specifies the translation,scaling,rotation,and warp operations to be done on the set of points. The three strings represent the three column vectors which combine to create the rotation matrix.
LOGICAL delete_original This value is set to TRUE if the original points are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING point_list[] This value specifies the list of points to be transformed.
Output:
STRING created_labels[] This value returns the labels of the points created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve cannot be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface cannot be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_transform_grid_pivot(point_labels,pivot_point_1,pivot_point_2,pivot_point_3,delete_original,point_list,created_labels)
##########
Description:
This function creates points by pivoting them around a point from one point to another.
Input:
STRING point_labels[] This value specifies the labels of the points to be created.
STRING pivot_point_1[] This value specifies the pivot point.
STRING pivot_point_2[] This value specifies the point which defines the beginning of the pivot operation.
STRING pivot_point_3[] This value specifies the pivot which defines the end of the pivot operation.
LOGICAL delete_original This value is set to TRUE if the original points are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING point_list[] This value specifies the list of points to be pivoted.
Output:
STRING created_labels[] This value returns the labels of the points created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000211 The length of the Axis equals zero.
1000302 The three points specified are nearly collinear.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_transform_grid_position(point_labels,point_1,point_2,point_3,point_4,point_5,point_6,delete_original,point_list,created_labels)
##########
Description:
This function creates points by translating and rotating a set of points.
Input:
STRING point_labels[] This value specifies the labels of the points to be created.
STRING point_1[] This value specifies the first point describing the location and orientation from which the set of points will be transformed.
STRING point_2[] This value specifies the second point describing the location and orientation from which the set of points will be transformed.
STRING point_3[] This value specifies the third point describing the location and orientation from which the set of points will be transformed.
STRING point_4[] This value specifies the first point describing the location and orientation to which the set of points will be transformed.
STRING point_5[] This value specifies the second point describing the location and orientation to which the set of points will be transformed.
STRING point_6[] This value specifies the third point describing the location and orientation to which the set of points will be transformed.
LOGICAL delete_original This value is set to TRUE if the original points are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING point_list[] This value specifies the list of points to be transformed.
Output:
STRING created_labels[] This value returns the labels of the points created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000211 The length of the Axis equals zero.
1000302 The three points specified are nearly collinear.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_transform_grid_rotate(point_labels,axis,angle,offset,coord_frame,num_repeat,delete_original,point_list,created_labels)
##########
Description:
This function creates points by rotating a set of points around an axis.
Input:
STRING point_labels[] This value specifies the labels of the points to be created.
STRING axis[] This value specifies the axis of rotation.
REAL angle This value specifies the angle of rotation in degrees.
REAL offset This value specifies the offset angle between the point and the beginning of the angle of rotation in degrees.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_repeat This value specifies the number of rotations for each point.
LOGICAL delete_original This value is set to TRUE if the original points are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING point_list[] This value specifies the list of points to be rotated.
Output:
STRING created_labels[] This value returns the labels of the grids created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
1000211 The length of the Axis equals zero.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_transform_grid_scale(point_labels,origin,scale,coord_frame,num_repeat,trans_type,delete_original,point_list,created_labels)
##########
Description:
This function creates points by scaling a set of points.
Input:
STRING point_labels[] This value specifies the labels of the points to be created.
STRING origin[] This value specifies the origin for the scaling operation. It is interpreted in the local coordinate system as cartesian or curvilinear depending on the value of the input value trans_type.
REAL scale(3)This value specifies three scaling values. It is interpreted in the local coordinate system as cartesian or curvilinear depending on the value of the input value trans_type.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_repeat This value specifies the number of scaling operations to be done for each point.
LOGICAL trans_type This value is set to TRUE if the transformation is to be done using a curvlinear coordinate frame or to FALSE to use a cartesian coordinate frame.
LOGICAL delete_original This value is set to TRUE if the original points are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING point_list[] This value specifies the list of points to be scaled.
Output:
STRING created_labels[] This value returns the labels of the points created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_transform_grid_translate(point_labels,delta,coord_frame,num_repeat,trans_type,delete_original,point_list,created_labels)
##########
Description:
This function creates points by translating a set of points.
Input:
STRING point_labels[] This value specifies the labels of the points to be created.
STRING delta[] This value specifies the translation vector. It is interpreted in the local coordinate system as cartesian or curvilinear depending on the value of the input value trans_type.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_repeat This value specifies the number of translations for each point.
LOGICAL trans_type This value is set to TRUE if the transformation is to be done using a curvlinear coordinate frame or to FALSE to use a cartesian coordinate frame.
LOGICAL delete_original This value is set to TRUE if the original points are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING point_list[] This value specifies the list of points to be translated.
Output:
STRING created_labels[] This value returns the labels of the points created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_transform_grid_translate_1(point_labels,delta,magnitude,reverse_direction,coord_frame,num_repeat,trans_type,delete_original,point_list,created_labels)
##########
Description:
This function creates points by translating a set of points.
Input:
STRING point_labels[] This value specifies the labels of the points to be created.
STRING delta[] This value specifies the direction vector. It is interpreted in the local coordinate system as cartesian or curvilinear depending on the value of the input value trans_type.
REAL magnitude This value specifies the vector magnitude.
LOGICAL reverse_direction This value is set to TRUE if the direction vector is to be reversed. If this value is set to FALSE,the direction vector is not reversed. ???
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_repeat This value specifies the number of translations for each point.
LOGICAL trans_type This value is set to TRUE if the transformation is to be done using a curvlinear coordinate frame or to FALSE to use a cartesian coordinate frame.
LOGICAL delete_original This value is set to TRUE if the original points are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING point_list[] This value specifies the list of points to be translated.
Output:
STRING created_labels[] This value returns the labels of the points created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_transform_grid_vsum(point_labels,origin_1,origin_2,scales_1,scales_2,point_list1,point_list2,created_labels)
##########
Description:
This function creates points by performing vector sums of the coordinate locations of two sets of points.
Input:
STRING point_labels[] This value specifies the labels of the points to be created.
STRING origin_1[] This value specifies the origin of the vectors for the first set of points.
STRING origin_2[] This value specifies the origin of the vectors for the second set of points.
REAL scales_1(3)This value specifies the factor to be used to scale the first set of point vectors.
REAL scales_2(3)This value specifies the factor to be used to scale the second set of point vectors.
STRING point_list1[] This value specifies the first point list.
STRING point_list2[] This value specifies the second point list.
Output:
STRING created_labels[] This value returns the labels of the points created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_transform_line_mirror(line_labels,plane,offset,reverse,delete_original,line_list,created_labels)
##########
Description:
This function will create lines by mirroring a set of lines.
Input:
STRING line_labels[] This value specifies the labels of the lines to be created.
STRING plane[] This value specifies the mirror plane.
REAL offset This value specifies the final offset from the mirror plane.
LOGICAL reverse This value is set to TRUE if the new line is to be reversed such that its parametric direction will match that of the original line.
LOGICAL delete_original This value is set to TRUE if the original lines are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING line_list[] This value specifies the list of lines to be mirrored.
Output:
STRING created_labels[] This value returns the labels of the lines created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000052 %A% %I% is not an ASM Entity and was not written to the Patran Neutral File.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_transform_patch_mirror(patch_labels,plane,offset,reverse,delete_original,patch_list,created_labels)
##########
Description:
This function will create patches by mirroring a set of patches.
Input:
STRING patch_labels[] This value specifies the labels of the patches to be created.
STRING plane[] This value specifies the mirror plane.
REAL offset This value specifies the offset distance from the mirror plane.
LOGICAL reverse This value is set to TRUE if the new patch is to be reversed such that its normal will match that of the original patch. If this value is set to FALSE,the normal will not be reversed.
LOGICAL delete_original This value is set to TRUE if the original patches are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING patch_list[] This value specifies the list of patches to be mirrored.
Output:
STRING created_labels[] This value returns the labels of the patches created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000052 %A% %I% is not an ASM Entity and was not written to the Patran Neutral File.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
ge_transform_mcord(entity_labels,entity_type,coord_frame_1,coord_frame_2,delete_original,entity_list,created_labels)
##########
Description:
This function creates entities by translating a set of entities from one coordinate frame to a second coordinate frame. The entities created will have the same parametric locations relative to the new coordinate frame that they had to the original coordinate frame. Use this function for Parasolid
Input:
STRING entity_labels[] This value specifies the labels of the entities to be created.
STRING entity_type[] This value specifies the type of entity. This value can be set to: “point”,“curve”,“surface”,“solid”,“plane”,or “vector”.
STRING coord_frame_1[] This value specifies the coordinate frame from which the set of entities will be translated.
STRING coord_frame_2[] This value specifies the coordinate frame to which the entities will be translated.
LOGICAL delete_original This value is set to TRUE if the original entities are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING entity_list[] This value specifies the list of entities to be transformed.
Output:
STRING created_labels[] This value returns the labels of the entities created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000015 LpSublistNext: End of current list has been reached.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38001209 An invalid geometric entity type was used as input. Unable to process request.
---------------
ge_transform_mirror(entity_labels,entity_type,plane,offset,reverse,delete_original,entity_list,created_labels)
##########
Description:
This function will create entities by mirroring a set of entities. Use this function for Parasolid
Input:
STRING entity_labels[] This value specifies the labels of the entities to be created.
STRING entity_type[] This value specifies the type of entity. This value can be set to: “point”,“curve”,“surface”,“solid”,“plane”,or “vector”.
STRING plane[] This value specifies the mirror plane.
REAL offset This value specifies the offset distance from the mirror plane.
LOGICAL reverse This value is set to TRUE if the new entities are to be reversed. If this value is set to FALSE,the entities will not be reversed.
LOGICAL delete_original This value is set to TRUE if the original entities are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING entity_list[] This value specifies the list of entities to be mirrored.
Output:
STRING created_labels[] This value returns the labels of the entities created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000015 LpSublistNext: End of current list has been reached.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38001209 An invalid geometric entity type was used as input. Unable to process request.
---------------
ge_transform_pivot(entity_labels,entity_type,pivot_point_1,pivot_point_2,pivot_point_3,delete_original,entity_list,created_labels)
##########
Description:
This function creates entities by pivoting them around a point from one point to another. Use this function for Parasolid
Input:
STRING entity_labels[] This value specifies the labels of the entities to be created.
STRING entity_type[] This value specifies the type of entity. This value can be set to: “point”,“curve”,“surface”,“solid”,“plane”,or “vector”.
STRING pivot_point_1[] This value specifies the pivot point.
STRING pivot_point_2[] This value specifies the point which defines the beginning of the pivot operation.
STRING pivot_point_3[] This value specifies the pivot which defines the end of the pivot operation.
LOGICAL delete_original This value is set to TRUE if the original entities are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING entity_list[] This value specifies the list of entities to be pivoted.
Output:
STRING created_labels[] This value returns the labels of the entities created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
1000211 The length of the Axis equals zero.
1000302 The three points specified are nearly collinear.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000015 LpSublistNext: End of current list has been reached.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38001209 An invalid geometric entity type was used as input. Unable to process request.
---------------
ge_transform_position(entity_labels,entity_type,point_1,point_2,point_3,point_4,point_5,point_6,delete_original,entity_list,created_labels)
##########
Description:
This function creates entities by translating and rotating a set of entities. Use this function for Parasolid
Input:
STRING entity_labels[] This value specifies the labels of the entities to be created.
STRING entity_type[] This value specifies the type of entity. This value can be set to: “point”,“curve”,“surface”,“solid”,“plane”,or “vector”.
STRING point_1[] This value specifies the first point describing the location and orientation from which the set of entities will be transformed.
STRING point_2[] This value specifies the second point describing the location and orientation from which the set of entities will be transformed.
STRING point_3[] This value specifies the third point describing the location and orientation from which the set of entities will be transformed.
STRING point_4[] This value specifies the first point describing the location and orientation to which the set of entities will be transformed.
STRING point_5[] This value specifies the second point describing the location and orientation to which the set of entities will be transformed.
STRING point_6[] This value specifies the third point describing the location and orientation to which the set of entities will be transformed.
LOGICAL delete_original This value is set to TRUE if the original entities are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING entity_list[] This value specifies the list of entities to be transformed.
Output:
STRING created_labels[] This value returns the labels of the entities created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
1000211 The length of the Axis equals zero.
1000302 The three points specified are nearly collinear.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000015 LpSublistNext: End of current list has been reached.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38001209 An invalid geometric entity type was used as input. Unable to process request.
---------------
ge_transform_rotate(entity_labels,entity_type,axis,angle,offset,coord_frame,num_repeat,delete_original,entity_list,created_labels)
##########
Description:
This function creates entities by rotating a set of entities around an axis in a reference coordinate frame. Use this function for Parasolid
Input:
STRING entity_labels[] This value specifies the labels of the entities to be created.
STRING entity_type[] This value specifies the type of entity. This value can be set to: “point”,“curve”,“surface”,“solid”,“plane”,or “vector”.
STRING axis[] This value specifies the axis of rotation.
REAL angle This value specifies the angle of rotation in degrees.
REAL offset This value specifies the offset angle between the entity and the beginning of the angle of rotation in degrees.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_repeat This value specifies the number of times to repeat this transformation operation on each created entity.
LOGICAL delete_original This value is set to TRUE if the original entities are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING entity_list[] This value specifies the list of entities to be rotated.
Output:
STRING created_labels[] This value returns the labels of the entities created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000015 LpSublistNext: End of current list has been reached.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38001209 An invalid geometric entity type was used as input. Unable to process request.
---------------
ge_transform_scale(entity_labels,entity_type,scale,origin,coord_frame,num_repeat,delete_original,entity_list,created_labels)
##########
Description:
This function creates entities by scaling a set of entities. Use this function for Parasolid
Input:
STRING entity_labels[] This value specifies the labels of the entities to be created.
STRING entity_type[] This value specifies the type of entity. This value can be set to: “point”,“curve”,“surface”,“solid”,“plane”,or “vector”.
REAL scale(3)This value specifies three scaling values.
STRING origin[] This value specifies the origin for the scaling operation.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_repeat This value specifies the number of scaling operations to be done for each point.
LOGICAL delete_original This value is set to TRUE if the original entities are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING entity_list[] This value specifies the list of entities to be scaled.
Output:
STRING created_labels[] This value returns the labels of the entities created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000015 LpSublistNext: End of current list has been reached.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38001209 An invalid geometric entity type was used as input. Unable to process request.
---------------
ge_transform_solid_mscale(solid_labels,entity_type,coord_frame,origin,translation,rotation_matrix,delete_original,solid_list,created_labels)
##########
Description:
This function creates solids by simultaneously translating,scaling,rotating,and warping a set of solids. Use this function for Parasolid
Input:
STRING solid_labels[] This value specifies the labels of the solids to be created.
STRING entity_type[] This value specifies the type of entity. This value can be set to: “solid”.
STRING coord_frame[] This value specifies the reference coordinate frame.
STRING origin[] This value specifies the origin for the transformation.
STRING translation[] This value specifies a translation vector defining the direction and distance of a translation operation. This value will be used only if a translation operation has been specified with the input value rotation_matrix.
STRING rotation_matrix[](3)This value specifies the translation,scaling,rotation,and warp operations to be done on the set of solids. See the remarks below for more information.
LOGICAL delete_original This value is set to TRUE if the original solids are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING solid_list[] This value specifies the list of solids to be transformed.
Output:
STRING created_labels[] This value returns the labels of the solids created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
ge_transform_translate(entity_labels,entity_type,delta,coord_frame,num_repeat,delete_original,entity_list,created_labels)
##########
Description:
This function creates entities by translating a set of entities. This function is to be used for Parasolid
Input:
STRING entity_labels[] This value specifies the labels of the entities to be created.
STRING entity_type[] This value specifies the type of entity. This value can be set to: “point”,“curve”,“surface”,“solid”,“plane”,or “vector”.
STRING delta[] This value specifies the translation vector.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_repeat This value specifies the number of translations for each entity.
LOGICAL delete_original This value is set to TRUE if the original entities are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING entity_list[] This value specifies the list of entities to be translated.
Output:
STRING created_labels[] This value returns the labels of the entities created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38001209 An invalid geometric entity type was used as input. Unable to process request.
---------------
ge_transform_translate_v1(entity_labels,entity_type,delta,magnitude,reverse_direction,coord_frame,num_repeat,delete_original,entity_list,created_labels)
##########
Description:
This function creates entities by translating a set of entities. This function is to be used for Parasolid
Input:
STRING entity_labels[] This value specifies the labels of the entities to be created.
STRING entity_type[] This value specifies the type of entity. This value can be set to: “point”,“curve”,“surface”,“solid”,“plane”,or “vector”.
STRING delta[] This value specifies the direction vector.
REAL magnitude This value specifies the vector magnitude.
LOGICAL reverse_direction This value is set to TRUE if the direction vector is to be reversed. If this value is set to FALSE,the direction vector will not be reversed.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_repeat This value specifies the number of translations for each entity.
LOGICAL delete_original This value is set to TRUE if the original entities are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING entity_list[] This value specifies the list of entities to be translated.
Output:
STRING created_labels[] This value returns the labels of the entities created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38001209 An invalid geometric entity type was used as input. Unable to process request.
---------------
sgm_transform_mcord(entity_labels,entity_type,coord_frame_1,coord_frame_2,delete_original,entity_list,created_labels)
##########
Description:
This function creates entities by translating a set of entities from one coordinate frame to a second coordinate frame. The entities created will have the same parametric locations relative to the new coordinate frame that they had to the original coordinate frame.
Input:
STRING entity_labels[] This value specifies the labels of the entities to be created.
STRING entity_type[] This value specifies the type of entity. This value can be set to: “point”,“curve”,“surface”,“solid”,“plane”,or “vector”.
STRING coord_frame_1[] This value specifies the coordinate frame from which the set of entities will be translated.
STRING coord_frame_2[] This value specifies the coordinate frame to which the entities will be translated.
LOGICAL delete_original This value is set to TRUE if the original entities are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING entity_list[] This value specifies the list of entities to be transformed.
Output:
STRING created_labels[] This value returns the labels of the entities created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000015 LpSublistNext: End of current list has been reached.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38001209 An invalid geometric entity type was used as input. Unable to process request.
---------------
sgm_transform_mirror(entity_labels,entity_type,plane,offset,reverse,delete_original,entity_list,created_labels)
##########
Description:
This function will create entities by mirroring a set of entities.
Input:
STRING entity_labels[] This value specifies the labels of the entities to be created.
STRING entity_type[] This value specifies the type of entity. This value can be set to: “point”,“curve”,“surface”,“solid”,“plane”,or “vector”.
STRING plane[] This value specifies the mirror plane.
REAL offset This value specifies the offset distance from the mirror plane.
LOGICAL reverse This value is set to TRUE if the new entities are to be reversed. If this value is set to FALSE,the entities will not be reversed.
LOGICAL delete_original This value is set to TRUE if the original entities are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING entity_list[] This value specifies the list of entities to be mirrored.
Output:
STRING created_labels[] This value returns the labels of the entities created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000015 LpSublistNext: End of current list has been reached.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38001209 An invalid geometric entity type was used as input. Unable to process request.
---------------
sgm_transform_pivot(entity_labels,entity_type,pivot_point_1,pivot_point_2,pivot_point_3,delete_original,entity_list,created_labels)
##########
Description:
This function creates entities by pivoting them around a point from one point to another.
Input:
STRING entity_labels[] This value specifies the labels of the entities to be created.
STRING entity_type[] This value specifies the type of entity. This value can be set to: “point”,“curve”,“surface”,“solid”,“plane”,or “vector”.
STRING pivot_point_1[] This value specifies the pivot point.
STRING pivot_point_2[] This value specifies the point which defines the beginning of the pivot operation.
STRING pivot_point_3[] This value specifies the pivot which defines the end of the pivot operation.
LOGICAL delete_original This value is set to TRUE if the original entities are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING entity_list[] This value specifies the list of entities to be pivoted.
Output:
STRING created_labels[] This value returns the labels of the entities created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
1000211 The length of the Axis equals zero.
1000302 The three points specified are nearly collinear.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000015 LpSublistNext: End of current list has been reached.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38001209 An invalid geometric entity type was used as input. Unable to process request.
---------------
sgm_transform_position(entity_labels,entity_type,point_1,point_2,point_3,point_4,point_5,point_6,delete_original,entity_list,created_labels)
##########
Description:
This function creates points by translating and rotating a set of entities.
Input:
STRING entity_labels[] This value specifies the labels of the entities to be created.
STRING entity_type[] This value specifies the type of entity. This value can be set to: “point”,“curve”,“surface”,“solid”,“plane”,or “vector”.
STRING point_1[] This value specifies the first point describing the location and orientation from which the set of entities will be transformed.
STRING point_2[] This value specifies the second point describing the location and orientation from which the set of entities will be transformed.
STRING point_3[] This value specifies the third point describing the location and orientation from which the set of entities will be transformed.
STRING point_4[] This value specifies the first point describing the location and orientation to which the set of entities will be transformed.
STRING point_5[] This value specifies the second point describing the location and orientation to which the set of entities will be transformed.
STRING point_6[] This value specifies the third point describing the location and orientation to which the set of entities will be transformed.
LOGICAL delete_original This value is set to TRUE if the original entities are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING entity_list[] This value specifies the list of entities to be transformed.
Output:
STRING created_labels[] This value returns the labels of the entities created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
1000211 The length of the Axis equals zero.
1000302 The three points specified are nearly collinear.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000015 LpSublistNext: End of current list has been reached.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38001209 An invalid geometric entity type was used as input. Unable to process request.
---------------
sgm_transform_rotate(entity_labels,entity_type,axis,angle,offset,coord_frame,num_repeat,delete_original,entity_list,created_labels)
##########
Description:
This function creates entities by rotating a set of entities around an axis in a reference coordinate frame.
Input:
STRING entity_labels[] This value specifies the labels of the entities to be created.
STRING entity_type[] This value specifies the type of entity. This value can be set to: “point”,“curve”,“surface”,“solid”,“plane”,or “vector”.
STRING axis[] This value specifies the axis of rotation.
REAL angle This value specifies the angle of rotation in degrees.
REAL offset This value specifies the offset angle between the entity and the beginning of the angle of rotation in degrees.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_repeat This value specifies the number of times to repeat this transformation operation on each created entity.
LOGICAL delete_original This value is set to TRUE if the original entities are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING entity_list[] This value specifies the list of entities to be rotated.
Output:
STRING created_labels[] This value returns the labels of the entities created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000015 LpSublistNext: End of current list has been reached.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38001209 An invalid geometric entity type was used as input. Unable to process request.
---------------
sgm_transform_scale(entity_labels,entity_type,scale,origin,coord_frame,num_repeat,delete_original,entity_list,created_labels)
##########
Description:
This function creates entities by scaling a set of entities.
Input:
STRING entity_labels[] This value specifies the labels of the entities to be created.
STRING entity_type[] This value specifies the type of entity. This value can be set to: “point”,“curve”,“surface”,“solid”,“plane”,or “vector”.
REAL scale(3)This value specifies three scaling values.
STRING origin[] This value specifies the origin for the scaling operation.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_repeat This value specifies the number of scaling operations to be done for each point.
LOGICAL delete_original This value is set to TRUE if the original entities are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING entity_list[] This value specifies the list of entities to be scaled.
Output:
STRING created_labels[] This value returns the labels of the entities created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000015 LpSublistNext: End of current list has been reached.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38001209 An invalid geometric entity type was used as input. Unable to process request.
---------------
asm_transform_solid_vsum(solid_ids,origin_1,origin_2,scales_1,scales_2,solid_list1,solid_list2,created_ids)
##########
Description:
This function creates a parametric tricubic solid by performing vector sums of two existing sets of solids.
Input:
STRING solid_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING origin_1[] This value specifies the origin of the vectors for the first set of solids.
STRING origin_2[] This value specifies the origin of the vectors for the second set of solids.
REAL scales_1(3)This value specifies the factor to be used to scale the first set of solid vectors.
REAL scales_2(3)This value specifies the factor to be used to scale the second set of solid vectors.
STRING solid_list1[] This value specifies the first solid list.
STRING solid_list2[] This value specifies the second solid list.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38000452 Unable to calculate a point on the solid.
---------------
asm_transform_surface_vsum(surface_ids,origin_1,origin_2,scales_1,scales_2,surface_list1,surface_list2,created_ids)
##########
Description:
This function creates a parametric bicubic surface by performing vector sums of two existing sets of surfaces.
Input:
STRING surface_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING origin_1[] This value specifies the origin of the vectors for the first set of surfaces.
STRING origin_2[] This value specifies the origin of the vectors for the second set of surfaces.
REAL scales_1(3)This value specifies the factor to be used to scale the first set of surface vectors.
REAL scales_2(3)This value specifies the factor to be used to scale the second set of surface vectors.
STRING surface_list1[] This value specifies the first surface list.
STRING surface_list2[] This value specifies the second surface list.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
---------------
sgm_transform_translate(entity_labels,entity_type,delta,coord_frame,num_repeat,delete_original,entity_list,created_labels)
##########
Description:
This function creates entities by translating a set of entities.
Input:
STRING entity_labels[] This value specifies the labels of the entities to be created.
STRING entity_type[] This value specifies the type of entity. This value can be set to: “point”,“curve”,“surface”,“solid”,“plane”,or “vector”.
STRING delta[] This value specifies the translation vector.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_repeat This value specifies the number of translations for each entity.
LOGICAL delete_original This value is set to TRUE if the original entities are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING entity_list[] This value specifies the list of entities to be translated.
Output:
STRING created_labels[] This value returns the labels of the entities created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38001209 An invalid geometric entity type was used as input. Unable to process request.
---------------
sgm_transform_translate_v1(entity_labels,entity_type,delta,magnitude,reverse_direction,coord_frame,num_repeat,delete_original,entity_list,created_labels)
##########
Description:
This function creates entities by translating a set of entities.
Input:
STRING entity_labels[] This value specifies the labels of the entities to be created.
STRING entity_type[] This value specifies the type of entity. This value can be set to: “point”,“curve”,“surface”,“solid”,“plane”,or “vector”.
STRING delta[] This value specifies the direction vector.
REAL magnitude This value specifies the vector magnitude.
LOGICAL reverse_direction This value is set to TRUE if the direction vector will be reversed. If this value is set to FALSE,the direction vector will not be reversed.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_repeat This value specifies the number of translations for each entity.
LOGICAL delete_original This value is set to TRUE if the original entities are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
STRING entity_list[] This value specifies the list of entities to be translated.
Output:
STRING created_labels[] This value returns the labels of the entities created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
2011004 The Repeat Count must be greater than 0.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000003 LpSublistType: No sublist filter bits are set on invocation.
14000004 LpSublistType: I am being invoked with a NULL list.
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR.
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable.
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable.
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable.
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable.
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38001209 An invalid geometric entity type was used as input. Unable to process request.
---------------
sgm_verify_surface_boundary(surface_list,verify_tolerance,verify_type)
##########
Description:
This function will verify a list of surfaces for the existence of free edges between adjacent surfaces.
Input:
STRING surface_list[] This value specifies the surface list.
REAL verify_tolerance This value specifies the tolerance used to determine existence of free edges between adjacent surfaces.
INTEGER verify_type This value specifies the verification type: 1 =the surface edge topology in the database will be used to check for free edges,and 2 = the surface edges will be extracted from adjacent surface boundaries and will be geometrically compared within the value defined by the input value verify tolerance to determine if free edges exist.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000491 There are no free surface edges.
38000054 Free edges and/or non-manifold edges exist. Free edges may be due to edges not matching directly or a missing face. Non-manifold edges are due to more than two surfaces connecting at the same edges. Edges are highlighted and marked with primary markers for free edges and secondary markers for non-manifold edges.
1000025 Error attempting to allocate virtual memory.
38000484 There must be at least two surfaces in the surface list. The number input was %I%.
38000485 The verification tolerance value of %G% must be less than or equal to the Geometric Modeling Tolerance value of %G%.
---------------
sgm_verify_surface_duplicates(delete_surfaces,delete_high)
##########
Description:
Check the entire database for duplicate surfaces and optionally delete them.
Input:
LOGICAL delete_surfaces This value specifies,when set to TRUE,that any duplicate surfaces will be deleted. When this value is set to FALSE,duplicate surfaces will not be deleted.
LOGICAL delete_high This value specifies,when set to TRUE,that the surfaces with the higher identifier values will be deleted from sets of duplicate surfaces. If this value is set to FALSE,the duplicate surfaces with the lower identifier values will be deleted from sets of duplicate surfaces. Duplicate surfaces will be deleted only when the input value delete_surfaces is set to TRUE.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
asm_sweep_hpat_arc(hpat_labels,axis,angle,offset,coord_frame,num_hpats,surface_list,created_labels)
##########
Description:
This function creates hyperpatches arcing about a set of surfaces.
Input:
STRING hpat_labels[] This value specifies the labels of the hyperpatches to be created.
STRING axis[] This value specifies the axis of rotation.
REAL angle This value specifies the total angle to sweep each surface in degrees.
REAL offset This value specifies the initial offset angle in degrees.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_hpats This value specifies the number of hyperpatches to be created for each surface.
STRING surface_list[] This value specifies the list of surfaces from which hyperpatches will be created.
Output:
STRING created_labels[] This value returns the labels of the created hyperpatches.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000210 Angle of rotation for a parametric entity is greater than 180 degrees.
1000211 The length of the Axis equals zero.
1000242 Rotation is approximately parallel to the surface.
1000901 Zero length vector in Hpat %I% construction.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_sweep_hpat_extrude(hpat_labels,delta,scale_u,scale_v,angle,origin,coord_frame,num_hpats,surface_list,created_labels)
##########
Description:
This function creates hyperpatches by extruding a set of surfaces along a vector while simultaneously scaling and rotating the created hyperpatches.
Input:
STRING hpat_labels[] This value specifies the labels of the hyperpatches to be created.
STRING delta[] This value specifies the translation vector along which the extrusion will occur and its magnitude.
REAL scale_u This value specifies the scaling factor to be used to scale the surface as it is extruded in the u direction.
REAL scale_v This value specifies the scaling factor to be used to scale the surface as it is extruded in the v direction.
REAL angle This value specifies the angle to rotate the hyperpatch around the translation vector during extrusion in degrees.
STRING origin[] This value specifies the point to be used as the origin for the extrusion operation.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_hpats This value specifies the number of hyperpatches to be created for each surface.
STRING surface_list[] This value specifies the list of surfaces to be extruded.
Output:
STRING created_labels[] This value returns the labels of the created hyperpatches.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000211 The length of the Axis equals zero.
1000241 Unable to extrude hyperpatch because the surface is too degenerate.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_sweep_hpat_glide(hpat_labels,scale,glide_option,director_curves,base_surfaces,created_labels)
##########
Description:
This function creates hyperpatches by gliding a set of base surfaces along a set of director curves.
Input:
STRING hpat_labels[] This value specifies the labels of the hyperpatches to be created.
REAL scale This value specifies the scaling factor.
INTEGER glide_option This value specifies the glide option to use: 0 = normal project glide option,and 1 = fixed logic option.
STRING director_curves[] This value specifies the list of curves along which the base surface will be swept.
STRING base_surfaces[] This value specifies the list of surfaces that will be swept along the director curves to form the hyperpatches.
Output:
STRING created_labels[] This value returns the labels of the hyperpatches created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000225 Unable to do glide option.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_sweep_hpat_normal(hpat_labels,thickness1,thickness2,thickness3,thickness4,num_hypats,normal_rev_direction,surface_list,created_labels)
##########
Description:
This function creates hyperpatches normal to the specified list of curves.
Input:
STRING hpat_labels[] This value specifies the labels of the hyperpatches to be created.
STRING thickness1[] This value specifies either the constant thickness or the first thickness.
STRING thickness2[] This value is set to NULL if the input value “thickness1” specifies a constant thickness,otherwise it is the second thickness.
STRING thickness3[] This value is set to NULL if the input value “thickness1” specifies a constant thickness,otherwise it is the third thickness.
STRING thickness4[] This value is set to NULL if the input value “thickness1” specifies a constant thickness,otherwise it is the fourth thickness.
INTEGER num_hypats This value specifies the number of surfaces to be created for each curve.
LOGICAL normal_rev_direction This value is set to TRUE if the normal is to be flipped or reversed.
STRING surface_list[] This value specifies the list of surfaces to be swept using the normal option.
Output:
STRING created_labels[] This value returns the labels of the created hyperpatches.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000712 Unable to compute the tangent and normal vectors due to a non-removable degeneracy or a singularity.
1000901 Zero length vector in Hpat %I% construction.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
16000301 Blank string encountered.
16000302 %A% does not contain enough arguments,looking for %I% arguments.
16000303 %A% has too many arguments,looking for %I% arguments.
16000305 %A% is not a real.
---------------
asm_sweep_line_arc(line_labels,axis,angle,offset,coord_frame,num_lines,point_list,created_labels)
##########
Description:
This function creates lines arcing about the specified list of points.
Input:
STRING line_labels[] This value specifies the labels of the lines to be created.
STRING axis[] This value specifies the axis of rotation.
REAL angle This value specifies the total angle to sweep each point in degrees.
REAL offset This value specifies the initial offset angle in degrees.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_lines This value specifies the number of lines that will be created for each point.
STRING point_list[] This value specifies the list of points to be swept.
Output:
STRING created_labels[] This value returns the labels of the lines created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000040 Duplicate %A% was not created at users request.
1000210 Angle of rotation for a parametric entity is greater than 180 degrees.
1000211 The length of the Axis equals zero.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
---------------
asm_sweep_line_involute(line_labels,axis,option,scalar1,scalar2,num_lines,coord_frame,point_list,created_labels)
##########
Description:
This function creates lines from a set of points using the involute sweep operation.
Input:
STRING line_labels[] This value specifies the labels of the lines to be created.
STRING axis[] This value specifies the axis of rotation.
INTEGER option This value specifies the option to use in creating the involute. If the input value option is set to 1 then the radii method is used,otherwise the angle method is used.
REAL scalar1 This value specifies a scalar value used in one of two ways depending on the input value option. If the angle method is used,this value specifies the angle to unwind the line. If the radii method is used,this value specifies the base radius of the bobbin.
REAL scalar2 This value specifies a scalar value depending on the value of “option”. If the angle method is used,this is the starting angle of the line. If the radii method is used,this is the stop radius of the line.
INTEGER num_lines This value specifies the number of lines to create for each point.
STRING coord_frame[] This value specifies the reference coordinate frame.
STRING point_list[] This value specifies the list of points to be swept.
Output:
STRING created_labels[] This value returns the labels of the lines created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000211 The length of the Axis equals zero.
1000226 The angle which the involute traverses must be positive.
1000227 The starting angle of the involute must be positive.
1000228 The radius of the base circle must be positive.
1000229 The stop radius of the involute must be larger than the base radius.
1000230 The point is inside the base circle.
1000231 The point is outside the stop radius of the involute.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_sweep_patch_arc(patch_labels,axis,angle,offset,coord_frame,num_patches,curve_list,created_labels)
##########
Description:
This function creates patches arcing about the specified list of curves.
Input:
STRING patch_labels[] This value specifies the labels of the patches to be created.
STRING axis[] This value specifies the axis of rotation.
REAL angle This value specifies the total angle to sweep each point in degrees.
REAL offset This value specifies the initial offset angle in degrees.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_patches This value specifies the number of patches to create for each curve.
STRING curve_list[] This value specifies the list of curves to be swept.
Output:
STRING created_labels[] This value returns the labels of the patches created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000040 Duplicate %A% was not created at users request.
1000210 Angle of rotation for a parametric entity is greater than 180 degrees.
1000211 The length of the Axis equals zero.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
---------------
asm_sweep_patch_extrude(patch_labels,delta,scale,angle,origin,coord_frame,num_patches,curve_list,created_labels)
##########
Description:
This function creates patches by extruding curves.
Input:
STRING patch_labels[] This value specifies the labels of the patches to be created.
STRING delta[] This value specifies the translation vector along which the extrusion will occur and its magnitude.
REAL scale This value specifies the scaling factor.
REAL angle This value specifies the angle to rotate the curve around the translation vector during extrusion.
STRING origin[] This value specifies the point to be used as origin of the extrusion.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_patches This value specifies the number of patches to create for each curve.
STRING curve_list[] This value specifies the list of curves to be extruded.
Output:
STRING created_labels[] This value returns the labels of the patches created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000211 The length of the Axis equals zero.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_sweep_patch_glide(patch_labels,scale,glide_option,director_curves,base_curve,created_labels)
##########
Description:
This function creates patches by gliding a set of base curves along a set of director curves.
Input:
STRING patch_labels[] This value specifies the labels of the patches to be created.
REAL scale This value specifies the scaling factor.
INTEGER glide_option This value specifies the glide option to use: 0 = normal project glide option,and 1 = fixed logic option.
STRING director_curves[] This value specifies the list of curves along which the base curve will be swept.
STRING base_curve[] This value specifies the list of curves that will be swept along the director curves to form the patches.
Output:
STRING created_labels[] This value returns the labels of the patches created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000225 Unable to do glide option.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
---------------
asm_sweep_patch_normal(patch_labels,thickness1,thickness2,origin,num_patches,normal_rev_direction,curve_list,created_labels)
##########
Description:
This function creates patches normal to the specified list of curves.
Input:
STRING patch_labels[] This value specifies the labels of the patches to be created.
STRING thickness1[] This value specifies either the constant thickness or the first thickness.
STRING thickness2[] This value is set to NULL if the input value “thickness1” specifies a constant thickness,otherwise it is the second thickness.
STRING origin[] This value specifies the point to be used as origin of the normal vector.
INTEGER num_patches This value specifies the number of patches to be created for each curve in the input list.
LOGICAL normal_rev_direction This value is set to TRUE if the normal is to be flipped or reversed.
STRING curve_list[] This value specifies the list of curves to be swept using the normal option.
Output:
STRING created_labels[] This value returns the labels of the patches created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000211 The length of the Axis equals zero.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
16000301 Blank string encountered.
16000302 %A% does not contain enough arguments,looking for %I% arguments.
16000303 %A% has too many arguments,looking for %I% arguments.
16000305 %A% is not a real.
---------------
sgm_renumber(renum_option,entity_type,new_selection,original_selection,created_selection)
##########
Description:
This function will renumber a selection of point,curve,surface,solid,plane,or vector identifiers in either a consecutive manner beginning with a starting point,curve,surface,solid,plane,or vector identifier or as directed by a selection of point,curve,surface,solid,plane,or vector identifiers.
Input:
INTEGER renum_option This value specifies the option for processing the new_selection where: 1 = Starting ID(s)2 = Offset ID
STRING entity_type This value specifies which geometric entity type to renumber. Valid values include: point curve surface solid plane vector
STRING new_selection[] This value specifies a selection of point,curve,surface,solid,plane,or vector identifiers to which the original points,curves,surfaces,solids,planes,or vectors will be renumbered. If there is only one identifier in the selection the original identifiers will be renumbered in a consecutive manner. If more than one identifier is provided,the identifiers in the input value original_selection will be renumbered to match the identifiers specified by this input value.
STRING original_selection[] This value specifies a selection of point,curve,surface,solid,plane,or vector identifiers that will be renumbered.
Output:
STRING created_selection[VIRTUAL] This value returns a description of the renumbered point,curve,surface,or solid identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
sgm_disassociate_point(point_list,entity_list)
##########
Description:
This function deletes all associations from a set of points.
Input:
STRING point_list[] This value specifies a set of point labels from which all associations will be removed.
Output:
STRING entity_list[] This value returns a list of the disassociated entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is %A%. Unable to process request.
---------------
sgm_disassociate_curve(curve_list,entity_list)
##########
Description:
This function deletes all associations from a set of curves.
Input:
STRING curve_list[] This value specifies a set of curve labels from which all associations will be removed.
Output:
STRING entity_list[] This value returns a list of the disassociated entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is %A%. Unable to process request.
---------------
sgm_disassociate_surface(surface_list,entity_list)
##########
Description:
This function deletes all point and curve associations from a set of surfaces.
Input:
STRING surface_list[] This value specifies a set of surface labels from which all associations will be removed.
Output:
STRING entity_list[] This value returns a list of the disassociated entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is %A%. Unable to process request.
---------------
sgm_assoc_element_curve_v1(element_list,geo_list,flag)
##########
Description:
This function will associate finite element mesh beam elements to geometric curves.
Input:
STRING element_list[] This value specifies the list of elements to be used for associating to the selected list of curves.
STRING geo_list[] This value specifies the list of geometry to which the elements will be associated.
INTEGER flag This value specifies the actions the finite element association should accomplish.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
sgm_assoc_element_point_v1(element_list,geo_list,flag)
##########
Description:
This function will associate finite element mesh point elements to geometric points.
Input:
STRING element_list[] This value specifies the list of elements to be used for associating to the selected list of points.
STRING geo_list[] This value specifies the list of geometry to which the elements will be associated.
INTEGER flag This value specifies the actions the finite element association should accomplish.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
sgm_assoc_element_solid_v1(element_list,geo_list,flag)
##########
Description:
This function will associate finite element mesh solid elements to geometric solids.
Input:
STRING element_list[] This value specifies the list of elements to be used for associating to the selected list of solids.
STRING geo_list[] This value specifies the list of geometry to which the elements will be associated.
INTEGER flag This value specifies the actions the finite element association should accomplish.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
sgm_assoc_element_surface_v1(element_list,geo_list,flag)
##########
Description:
This function will associate finite element mesh surface elements to geometric surfaces.
Input:
STRING element_list[] This value specifies the list of elements to be used for associating to the selected list of surfaces.
STRING geo_list[] This value specifies the list of geometry to which the elements will be associated.
INTEGER flag This value specifies the actions the finite element association should accomplish.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
sgm_associate_point_curve(point_list,curve_list,joined_list)
##########
Description:
This function associates a set of points to a set of curves.
Input:
STRING point_list[] This value specifies a list of point labels to be associated with curves.
STRING curve_list[] This value specifies a list of curve labels to which points will be associated.
Output:
STRING joined_list[] This value returns a list of joined entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is %A%. Unable to process request.
38000931 Failed to associate the point(s)or curve(s).
---------------
sgm_associate_point_surface(point_list,surface_list,joined_list)
##########
Description:
This function associates a set of points to a set of surfaces.
Input:
STRING point_list[] This value specifies a list of point labels to be associated with surfaces.
STRING surface_list[] This value specifies a list of surface labels to which points will be associated.
Output:
STRING joined_list[] This value returns a list of joined entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is %A%. Unable to process request.
38000931 Failed to associate the point(s)or curve(s).
---------------
sgm_associate_curve_curve(curve_list1,curve_list2,joined_list)
##########
Description:
This function associates a set of curves to another set of curves.
Input:
STRING curve_list1[] This value specifies a list of curve labels to be associated with curves.
STRING curve_list2[] This value specifies a list of curve labels to which curves will be associated.
Output:
STRING joined_list[] This value returns a list of joined entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is %A%. Unable to process request.
38000931 Failed to associate the point(s)or curve(s).
---------------
sgm_associate_curve_surface(curve_list,surface_list,joined_list)
##########
Description:
This function associates a set of curves to a set of surfaces.
Input:
STRING curve_list[] This value specifies a list of curve labels to be associated with surfaces.
STRING surface_list[] This value specifies a list of surface labels to which curves will be associated.
Output:
STRING joined_list[] This value returns a list of joined entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is %A%. Unable to process request.
38000931 Failed to associate the point(s)or curve(s).
---------------
sgm_disassemble_chain(chain_list,delete_original)
##########
Description:
This function disassembles a set of chains into constituent curves.
Input:
STRING chain_list[] This value specifies the set of chains to be disassembled.
LOGICAL delete_original This value is set to TRUE if the original chains are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000201 %A% is not a recognized syntax for a Curve List.
38000470 Unable to load the curve into the database.
38000471 Curve %I% is not a chain.
38000805 Unable to acquire %I% words of virtual memory.
---------------
sgm_disassemble_tsurf(surface_list,delete_original)
##########
Description:
This function disassembles a set of trimmed surfaces into parent surfaces and edge curves.
Input:
STRING surface_list[] This value specifies the set of trimmed surfaces.
LOGICAL delete_original This value is set to TRUE if the original trimmed surfaces are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000468 Surface %I% is not a general trimmed surface.
38000805 Unable to acquire %I% words of virtual memory.
---------------
sgm_disassemble_solid(solid_list,delete_original,created_labels)
##########
Description:
This function disassembles a set of solids into subordinate surface faces.
Input:
STRING solid_list[] This value specifies the list of solids to be disassembled.
LOGICAL delete_original This value is set to TRUE if the original solids are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
STRING created_labels[] This value returns the a list of the labels for the created entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
8107002 Last command aborted.
---------------
asm_const_coord_3point(output_labels,coord_frame,coordtype,point1,point2,point3,created_labels)
##########
Description:
This function creates a coordinate system from three specified points.
Input:
STRING output_labels[] This value specifies the labels of the coordinate frame to be created.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER coordtype This value specifies the type of coordinate frame: 1 = rectangular,2 = cylindrical,and 3 = spherical.
STRING point1[] This value specifies the origin of the new coordinate frame.
STRING point2[] This value specifies a point on the Z axis of the new coordinate frame.
STRING point3[] This value specifies a point on the X-Z plane of the new coordinate frame.
Output:
STRING created_labels[VIRTUAL] This value returns the labels of the created coordinate frame.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000064 Overwrite of existing entity not permitted.
1000211 The length of the Axis equals zero.
1000216 Unable to properly process the output labels.
1000302 The three points specified are nearly collinear.
---------------
asm_const_coord_axis(output_labels,plane,coord_frame,coordtype,point1,point2,point3,created_labels)
##########
Description:
This function creates coordinate systems from points on the reference coordinate frame.
Input:
STRING output_labels[] This value specifies the labels of the coordinate frames to be created.
STRING plane[2] This value specifies which principle plane is defined by Axis 1 and Axis 2: “XY”: Axis 1 = X-axis and Axis 2 = Y-axis; “YZ”: Axis 1 = Y-axis and Axis 2 = Z-axis; “XZ”: Axis 1 = X-axis and Axis 2 = Z-axis.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER coordtype This value specifies the type of coordinate frame: 1 = rectangular,2 = cylindrical,and 3 = spherical.
STRING point1[] This value specifies a point on axis one.
STRING point2[] This value specifies a point on axis two.
STRING point3[] This value specifies a point on axis three.
Output:
STRING created_labels[VIRTUAL] This value returns the labels of the coordinate frame created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000064 Overwrite of existing entity not permitted.
1000211 The length of the Axis equals zero.
1000216 Unable to properly process the output labels.
1000302 The three points specified are nearly collinear.
---------------
asm_const_coord_euler(output_labels,axis1,axis2,axis3,angle1,angle2,angle3,coord_frame,coordtype,point1,created_labels)
##########
Description:
This function creates a coordinate system from an origin and three eular angles.
Input:
STRING output_labels[] This value specifies the labels of the coordinate frame to be created.
INTEGER axis1 This value specifies the principal axis for the first rotation.
INTEGER axis2 This value specifies the principal axis for the second rotation.
INTEGER axis3 This value specifies the principal axis for the third rotation.
REAL angle1 This value specifies the angle of the first rotation.
REAL angle2 This value specifies the angle of the second rotation.
REAL angle3 This value specifies the angle of the third rotation.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER coordtype This value specifies the type of coordinate frame: 1 = rectangular,2 = cylindrical,and 3 = spherical.
STRING point1[] This value specifies the origin of the new coordinate frame.
Output:
STRING created_labels[VIRTUAL] This value returns the labels of the coordinate frame created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000001 Point %I% does not exist. Unable to continue.
1000025 Error attempting to allocate virtual memory.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is %A%. Unable to process request.
1000064 Overwrite of existing entity not permitted.
1000216 Unable to properly process the output labels.
1000232 The entity label value of %I% is invalid. Database assigning next highest available label.
---------------
asm_const_coord_normal(output_labels,surface,coordtype,point,created_labels)
##########
Description:
This function creates a rectangular coordinate system normal to a surface at a specified point.
Input:
STRING output_labels[] This value specifies the labels of the coordinate frame to be created.
STRING surface[] This value specifies the reference surface.
INTEGER coordtype This value specifies the type of coordinate frame: 1 = rectangular,2 = cylindrical,and 3 = spherical.
STRING point[] This value specifies a point or set of points that lie on,or close to,the surface.
Output:
STRING created_labels[VIRTUAL] This value returns the labels of the coordinate frame created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000001 Point %I% does not exist. Unable to continue.
1000005 Patch %I% does not exist. Unable to continue.
1000025 Error attempting to allocate virtual memory.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is %A%. Unable to process request.
1000064 Overwrite of existing entity not permitted.
1000211 The length of the Axis equals zero.
1000216 Unable to properly process the output labels.
1000232 The entity label value of %I% is invalid. Database assigning next highest available label.
1000302 The three points specified are nearly collinear.
1000712 Unable to compute the tangent and normal vectors due to a non-removable degeneracy or a singularity.
---------------
asm_const_coord_normal_v1(output_labels,surface,coordtype,point,xaxis,created_labels)
##########
Description:
This function creates a rectangular coordinate system normal to a surface at a specified point. The x-axis may coincide with the u or v parametric direction of the surface.
Input:
STRING output_labels[] This value specifies the labels of the coordinate frame to be created.
STRING surface[] This value specifies the reference surface.
INTEGER coordtype This value specifies the type of coordinate frame: 1 = rectangular,2 = cylindrical,and 3 = spherical.
STRING point[] This value specifies a point or set of points that lie on,or close to,the surface.
LOGICAL xaxis This value specifies whether the x-axis coincides with the u-direction of the surface. (=True if yes,=False if coincides with v-direction).
Output:
STRING created_labels[VIRTUAL] This value returns the labels of the coordinate frame created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000001 Point %I% does not exist. Unable to continue.
1000005 Patch %I% does not exist. Unable to continue.
1000025 Error attempting to allocate virtual memory.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is %A%. Unable to process request.
1000064 Overwrite of existing entity not permitted.
1000211 The length of the Axis equals zero.
1000216 Unable to properly process the output labels.
1000232 The entity label value of %I% is invalid. Database assigning next highest available label.
1000302 The three points specified are nearly collinear.
1000712 Unable to compute the tangent and normal vectors due to a non-removable degeneracy or a singularity.
---------------
asm_const_curve_2d_arc2point(output_ids,num_curves,arc_angle,plane_list,center_point_list,start_point_list,end_point_list,created_ids)
##########
Description:
This function contructs circular arcs in a two-dimensional space,defined by a set of construction planes,center point,a starting point,and an ending point.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER num_curves This value specifies the number of curves per arc to create.
INTEGER arc_angle This value specifies the arc angle to use: 1 = minimum arc angle,and 2 = maximum arc angle.
STRING plane_list[] This value specifies the list of planes in which to construct the arcs.
STRING center_point_list[] This value specifies the list of points defining the center point of the circular arc.
STRING start_point_list[] This value specifies the list of points defining the starting point of the circular arc.
STRING end_point_list[] This value specifies the list of points defining the ending point of the circular arc.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000578 The number of Curves per Arc must be greater than or equal to one. The invalid value input was %I%.
38000413 Zero length plane normal vector.
38000424 The center point and start point define a zero radius.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_curve_2d_arc3point(output_ids,num_curves,create_center,plane_list,start_list,mid_list,end_list,created_ids)
##########
Description:
This function creates an arc-shaped or parametric cubic curve in two dimensional space,defined by a start point,midpoint,and an end point.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER num_curves This value specifies the number of curves per arc to create.
LOGICAL create_center This value is set to TRUE if a point is to be created at the center of the arc.
STRING plane_list[] This value specifies the construction plane of the arc.
STRING start_list[] This value specifies the start point of the arc.
STRING mid_list[] This value specifies the midpoint of the arc.
STRING end_list[] This value specifies the end point of the arc.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000578 The number of Curves per Arc must be greater than or equal to one. The invalid value input was %I%.
38000413 Zero length plane normal vector.
38000423 The three points specified are nearly collinear.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_curve_2d_circle(output_ids,num_curves,radius_method,radius,plane_list,radius_point_list,center_point_list,created_ids)
##########
Description:
This function creates a circular-shaped or parametric cubic curve in two-dimensional space,defined by a center point and a radius.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER num_curves This value specifies the number of curves per circle to create.
INTEGER radius_method This value specifies the method used to define a radius: 1 = scalar radius value,and 2 = point location.
REAL radius This value specifies the radius of the circle if the input value radius_method is set to 1.
STRING plane_list[] This value specifies the list of planes in which to construct the arcs.
STRING radius_point_list[] This value specifies the list of points defining the radius of the circle if the input value radius_method is set to 2.
STRING center_point_list[] This value specifies the list of points defining the center point of the circle.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000579 The number of Curves per Circle must be greater than or equal to two. The invalid value input was %I%.
38000413 Zero length plane normal vector.
38000425 The Circle radius must be greater than zero. Invalid value input was %G%.
38000426 The center point and start point define a zero radius.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_curve_2d_circle_v2(output_ids,num_curves,radius_method,radius,plane_list,radius_point_list,center_point_list,project_points,created_ids)
##########
Description:
This function creates n circular-shaped or parametric cubic curves in two-dimensional space,defined by a center point and a radius.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER num_curves This value specifies the number of curves per circle to create.
INTEGER radius_method This value specifies the method used to define a radius: 1 = scalar radius value,and 2 = point location.
REAL radius This value specifies the radius of the circle if the input value radius_method is set to 1.
STRING plane_list[] This value specifies the list of planes in which to construct the arcs.
STRING radius_point_list[] This value specifies the list of points defining the radius of the circle if the input value radius_method is set to 2.
STRING center_point_list[] This value specifies the list of points defining the center point of the circle.
LOGICAL project_points This value specifies,when set to TRUE,that the center points be projected onto the plane. When this value is set to FALSE,the construction plane will be translated to the center point location and will still be parallel to the original plane.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000579 The number of Curves per Circle must be greater than or equal to two. The invalid value input was %I%.
38000413 Zero length plane normal vector.
38000425 The Circle radius must be greater than zero. Invalid value input was %G%.
38000426 The center point and start point define a zero radius.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_curve_arc3point(output_ids,num_curves,create_center,start_list,mid_list,end_list,created_ids)
##########
Description:
This function creates an arc-shaped or parametric cubic curve defined by a start point,midpoint,and an end point.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER num_curves This value specifies the number of curves per arc to create.
LOGICAL create_center This value is set to TRUE if a point is to be created at the center of the arc.
STRING start_list[] This value specifies the start point of the curve.
STRING mid_list[] This value specifies the midpoint of the curve.
STRING end_list[] This value specifies the end point of the curve.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000302 The three points specified are nearly collinear.
1000501 An attempt to create an Arc through %G% degrees will not be honored (Max=180). Increase the number of lines.
1000578 The number of Curves per Arc must be greater than or equal to one. The invalid value input was %I%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_curve_bspline(output_ids,num_curves,point_list,order,interpolate,param_method,closed,created_ids)
##########
Description:
This function creates a piecewise cubic curve from a set of points.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER num_curves This value specifies the number of curves to create.
STRING point_list[] This value specifies the point list.
INTEGER order This value specifies the order of the B-spline.
LOGICAL interpolate This value is set to TRUE if the curve is to be interpolated,and FALSE if the curve is to be approximated.
INTEGER param_method This value specifies the parameterization method: 1 = chordal arc length,2 = modified chordal arc length,and 3 = uniform.
LOGICAL closed This value is set to TRUE if the curve is to be close.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
38000472 The number of points selected must be greater or equal to the order of the B-spline curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_curve_extract(output_ids,surface_list,direction,param_pos,created_ids)
##########
Description:
This function creates a parametric cubic curve on a surface by extracting a curve from a given surface at a specified position and in a specified parametric direction.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING surface_list[] This value specifies the surface list.
INTEGER direction This value specifies the parametric direction to create the curve in: 1 = constant U direction,and 2 = constant V direction.
REAL param_pos This value specifies the parametric position in the given direction from which to extract the curve.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000433 A Zero length curve would have been created had the process continued. Modify application input and try again.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
1000518 Specified Parametric Direction value of %I% is invalid. Valid values are 1 and 2.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_curve_extract_edge(output_ids,edge_list,created_ids)
##########
Description:
This function creates a parametric cubic curve on a surface by extracting a curve from a given edge of a surface or solid.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING edge_list[] This value specifies the edge list.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is %A%. Unable to process request.
1000003 Line %I% does not exist. Unable to continue.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_curve_intersect(output_ids,method,surface1_list,surface2_list,num_curves,fit_tolerance,int_tolerance,created_ids)
##########
Description:
This function creates a parametric cubic curve from the intersection of two surfaces or a plane and a surface.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER method This value specifies the intersection method: 1 = surface/surface intersection,and 2 = plane/surface intersection.
STRING surface1_list[] This value specifies the first surface list if the input value method is set to 1,and the plane list if the input value method is set to 2.
STRING surface2_list[] This value specifies the second surface list.
INTEGER num_curves This value specifies the number of curves per intersection to create.
REAL fit_tolerance This value specifies a tolerance parameter to be used as a curve fit tolerance.
REAL int_tolerance This value specifies a tolerance parameter for determining the density of intersection points generated.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000535 No intersections found between surface(s)%A% and surface(s)%A%.
38000413 Zero length plane normal vector.
38000414 Invalid curve intersection method. Must be 1 or 2. Try again.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_curve_intersect_plane(output_ids,length,plane1_list,plane2_list,created_ids)
##########
Description:
This function constructs finite length cubic lines from the intersection of two planes.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
REAL length This value specifies the length of the created lines.
STRING plane_list[] This value specifies the list of planes to be compared for intersection with the planes given in the input value plane2_list.
STRING plane2_list[] This value specifies the list of planes to be compared for intersection with the planes provided by the input value plane1_list.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000535 No intersections found between plane(s)%A% and plane(s)%A%.
38000003 No blob provided.
38000413 Zero length plane normal vector.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_curve_intersect_2pln(output_ids,length,plane1_list,plane2_list,plane3_list,created_ids)
##########
Description:
This function constructs finite length cubic lines from the intersection of two planes with an option to define the starting point of the line at a specified point where the three input planes intersect.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
REAL length This values specifies the length of the line.
STRING plane1_list[] This value specifies the list of planes to be compared for intersection with the planes given in the input value plane2_list.
STRING plane2_list[] This value specifies the list of planes to be compared for intersection with the planes provided by the input value plane1_list.
STRING plane3_list[] This value specifies the list of planes to be compared for intersection with the planes provided by the input value plane1_list and plane2_list. This creates the intersection point for the start point of the line.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000535 No intersections found between plane(s)%A% and plane(s)%A%.
38000003 No blob provided.
38000413 Zero length plane normal vector.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_curve_involute(output_ids,axis,option,scalar1,scalar2,num_curves,coord_frame,point,created_ids)
##########
Description:
This function creates a parametric cubic curve defined as the unwinding of an imaginary string from a circular bobbin.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING axis[] This value specifies the axis of the involute curve.
INTEGER option This value specifies the option to use in creating the involute. If option = 1 the radii method is used,otherwise the angle method is used.
REAL scalar1 This value specifies a scalar value depending on the value of option. If the angle method is used,this is the angle to unwind the curve. If the radii method is used,this is the base radius of the bobbin.
REAL scalar2 This value specifies a scalar value depending on the value of option. If the angle method is used,this is the starting angle of the curve. If the radii method is used,this is the stop radius of the curve.
INTEGER num_curves This value specifies the number of curves to create for each point.
STRING coord_frame[] This value specifies the reference coordinate frame.
STRING point[] This value specifies the list of points to be swept.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is %A%. Unable to process request.
1000211 The length of the Axis equals zero.
1000226 The angle which the involute traverses must be positive.
1000227 The starting angle of the involute must be positive.
1000228 The radius of the base circle must be positive.
1000229 The stop radius of the involute must be larger than the base radius.
1000230 The point is inside the base circle.
1000231 The point is outside the stop radius of the involute.
---------------
asm_const_curve_loft(output_ids,num_curves,slope_control,point_list,slope_list1,slope_list2,created_ids)
##########
Description:
This function create a piecewise cubic curve from a set of points with optional endpoint slope control.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER num_curves This value specifies the number of curves to create.
LOGICAL slope_control This value is set to TRUE if the endpoint slope control is to be enforced.
STRING point_list[] This value specifies the point list.
STRING slope_list1[] This value specifies the vectors defining the initial slope.
STRING slope_list2[] This value specifies the vectors defining the final slope.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000472 The number of points selected must be greater or equal to the order of the B-spline curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_curve_manifold_2point(output_ids,surface_list,point1_list,point2_list,num_curves,fit_tolerance,created_ids)
##########
Description:
This function creates a parametric cubic curve on a surface between two points.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING surface_list[] This value specifies the list of surfaces to manifold the curve onto.
STRING point1_list[] This value specifies the list of points defining the start point of the curve on a surface.
STRING point2_list[] This value specifies the list of points defining the end point of the curve on a surface.
INTEGER num_curves This value specifies the number of curves per manifold to create. If this value is set to 0,then the number of curves created will be based on the projection tolerance.
REAL fit_tolerance This value specifies a tolerance parameter which will be used here as a curve fit tolerance. The manifold will be approximated by a tolerance-based cubic spline.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000489 Unable to create a curve manifolded to the surface between the two input points.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_curve_manifold_npoint(output_ids,surface,point_list,num_curves,fit_tolerance,created_ids)
##########
Description:
This function creates a spline or parametric cubic curve through a specified number of points manifolded onto a surface.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING surface[] This value specifies the surface to manifold the curve onto.
STRING point_list[] This value specifies the list of points through which the spline curve will be fitted.
INTEGER num_curves This value specifies the number of curves per manifold to create. If this value is set to 0,then the number of curves created will be based on the projection tolerance.
REAL fit_tolerance This value specifies a tolerance parameter which will be used here as a curve fit tolerance. The manifold will be approximated by a tolerance-based cubic spline.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000301 There must be at least two points as input. The invalid value input was %A%.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000489 Unable to create a curve manifolded to the surface between the two input points.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_curve_project(output_ids,curve_list,surface_list,delete_original,method,vector,coord_frame,num_curves,projection_tolerance,created_ids)
##########
Description:
This function creates a parametric cubic curve from the projection of curves onto surfaces.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING curve_list[] This value specifies the curve list to project.
STRING surface_list[] This value specifies the surface list to project onto.
LOGICAL delete_original This value is set to TRUE if the original curves to project are to be deleted after the projection. If this value is set to FALSE,the original entities will not be deleted.
INTEGER method This value specifies the projection method: 1 = the curve to be projected lies in a plane and it is desired to project the curve normal to this plane,2 = the direction of projection is normal to the surface at the point of closest approach,3 = the direction of projection is given by a vector,and 4 = the direction of projection is the view vector.
STRING vector[] This value specifies the projection vector.
STRING coord_frame[] This value specifies the coordinate frame ID for the projection vector.
INTEGER num_curves This value specifies the number of curves per projection to create. If this value is set to 0,then the number of curves created will be based on the projection tolerance.
REAL projection_tolerance This value specifies a tolerance parameter determining the density of intersection points generated.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000412 Negating the View Vector coordinates and trying again...
38000415 Skipping zero length Curve %I%.
1000540 The projection vector has zero length.
38000488 Unable to manifold the curve(s)to the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_curve_revolve(output_ids,axis,angle,offset,coord_frame,point,created_ids)
##########
Description:
This function creates an arc shaped parametric cubic curve by revolving about a point.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING axis[] This value specifies the axis of rotation.
REAL angle This value specifies the total angle to revolve each point.
REAL offset This value specifies the initial offset angle.
STRING coord_frame[] This value specifies the reference coordinate frame.
STRING point[] This value specifies the list of points to be revolved.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000040 Duplicate %A% was not created at users request.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is %A%. Unable to process request.
1000064 Overwrite of existing entity not permitted.
1000210 Angle of rotation for a parametric entity is greater than 180 degrees.
1000211 The length of the Axis equals zero.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
---------------
asm_const_grid_arccenter(output_ids,curve_list,created_ids)
##########
Description:
This function creates a point at the center of curvature of a curve.
Input:
STRING output_ids[] This value specifies the point ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of point IDs.
STRING curve_list[] This value specifies the curve which the center of curvature will be calculated from to create the point.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000201 %A% is not a recognized syntax for a Curve List.
1000581 The selected curve %I% has no center of curvature. A point was not created.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_grid_extract(output_ids,curve_list,param_pos,created_ids)
##########
Description:
This function constructs points by extracting a point from a curve at a specified parametric position.
Input:
STRING output_ids[] This value specifies the point ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of point IDs.
STRING curve_list[] This value specifies the list of curves from which to extract points.
REAL param_pos This value specifies the parametric position along a curve from which to extract a point.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_grid_extract_v1(output_ids,curve_list,parametric_pos,param_method,created_ids)
##########
Description:
This function constructs points by extracting a point from a curve at a specified parametric position and specifying a parameterization method for the input curve.
Input:
STRING output_ids[] This value specifies the point ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of point IDs.
STRING curve_list[] This value specifies the list of curves from which to extract points.
REAL parametric_pos This value specifies the parametric position along a curve from which to extract a point.
INTEGER param_method This value specifies the parameterization method for input curve: 1 = equal relative arc length,and 2 = equal relative parametric values.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000507 Specified Parameterization Method value of %I% is invalid. Valid values are 1 and 2.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_grid_extract_surface(output_ids,uloc,vloc,surface_list,created_ids)
##########
Description:
This function constructs points by extracting a point from a surface at a specified u,v parametric location.
Input:
STRING output_ids[] This value specifies the point ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of point IDs.
REAL uloc This value specifies the u-parametric position from which to extract a point.
REAL vloc This value specifies v-parametric position from which to extract a point.
STRING surface_list[] This value specifies the list of surfaces from which to extract points.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_grid_extract_surf_par(output_ids,npu,npv,uvmin_max,surface_list,created_ids)
##########
Description:
This function constructs points by extracting n points from a surface within a u,v min/max grid.
Input:
STRING output_ids[] This value specifies the point ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of point IDs.
INTEGER npu This value specifies the number of points to create in the u-direction.
INTEGER npv This value specifies the number of points to create in the v-direction.
REAL uvmin_max(4)This value specifies the uv min/max parametric values which define the bounds in which to extract the points,where: uvmin_max(1)= minimum u-value. uvmin_max(2)= maximum u-value. uvmin_max(3)= minimum v-value. uvmin_max(4)= maximum v-value.
STRING surface_list[] This value specifies the surface list to extract from.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000313 The number of points to extract must be greater than one in both directions.
1000312 The MIN/MAX values are improper. They must lie in the unit interval.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_grid_extract_surf_pts(output_ids,npu,npv,point1_list,point2_list,surface_list,created_ids)
##########
Description:
This function constructs points by extracting n points from a surface within a grid defined by a diagonal of two points.
Input:
STRING output_ids[] This value specifies the point ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of point IDs.
INTEGER npu This value specifies the number of points to create in the u-direction.
INTEGER npv This value specifies the numbe of points to create in the v-direction.
STRING point1_list[] This value specifies the first point used to define the diagonal for the bounds of the grid of points.
STRING point2_list[] This value specifies the second point used to define the diagonal for the bounds of the grid of points.
STRING surface_list[] This value specifies the surface list to extract from.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000313 The number of points to extract must be greater than one in both directions.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_grid_interp_curve(output_ids,curve_list,space_ratio,num_points,created_ids)
##########
Description:
This function constructs points by interpolating along a curve.
Input:
STRING output_ids[] This value specifies the point ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of point IDs.
STRING curve_list[] This value specifies the curve list to interpolate.
REAL space_ratio This value specifies the point spacing ratio which is the distance defined by the input value num_points to the end point,divided by the distance defined by the start point to the second point.
INTEGER num_points This value specifies the number of interior points to create.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000300 There must be at least one point as input. The invalid value input was %I%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_grid_interp_curve_v1(output_ids,curve_list,space_ratio,num_points,param_method,created_ids)
##########
Description:
This function constructs points by interpolating along a curve and specifying a parameterization method for the input curve.
Input:
STRING output_ids[] This value specifies the point ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of point IDs.
STRING curve_list[] This value specifies the curve list to interpolate.
REAL space_ratio This value specifies the point spacing ratio which is the distance defined by the input value num_points to the end point,divided by the distance defined by the start point to the second point.
INTEGER num_points This value specifies the number of interior points to create.
INTEGER param_method This value specifies the parameterization method for the input curve: 1 = equal relative arc length,and 2 = equal relative parametric values.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000300 There must be at least one point as input. The invalid value input was %I%.
1000507 Specified Parameterization Method value of %I% is invalid. Valid values are 1 and 2.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_grid_interp_point(output_ids,point1_list,point2_list,space_ratio,num_points,created_ids)
##########
Description:
This function constructs points by interpolating between two existing points.
Input:
STRING output_ids[] This value specifies the point ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of point IDs.
STRING point1_list[] This value specifies the first point list to interpolate.
STRING point2_list[] This value specifies the second point list to interpolate.
REAL space_ratio This value specifies the point spacing ratio which is the distance defined by input value num_points to the end point,divided by the distance defined by the start point to the second point.
INTEGER num_points This value specifies the number of interior points to create.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000300 There must be at least one point as input. The invalid value input was %I%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_grid_interp_point_man(output_ids,point1_list,point2_list,surface_list,space_ratio,num_points,created_ids)
##########
Description:
This function creates points by interpolating between two existing points with the results manifolded to a surface.
Input:
STRING output_ids[] This value specifies the point ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of point IDs.
STRING point1_list[] This value specifies the first point list.
STRING point2_list[] This value specifies the second point list.
STRING surface_list[] This value specifies the surface list to manifold the points to.
REAL space_ratio This value specifies the point spacing ratio which is the distance defined by input value num_points to the end point,divided by the distance defined by the start point to the second point.
REAL num_points This value specifies the number of interior points to create.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000300 There must be at least one point as input. The invalid value input was %I%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_grid_intersect(output_ids,curve1_list,curve2_list,created_ids)
##########
Description:
This function creates a point from the intersection of two curves.
Input:
STRING output_ids[] This value specifies the point ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of point IDs.
STRING curve1_list[] This value specifies the first curve list.
STRING curve2_list[] This value specifies the second curve list.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000580 The two input curves do not intersect within tolerance of %G%. The minimum distance is %G%. A point of closest approach on each input curve was provided.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_grid_intersect_plo_cv(output_ids,curve_list,plane_list,offset,created_ids)
##########
Description:
This function creates a point from the intersection of a curve and a plane with an optional plane offset distance.
Input:
STRING output_ids[] This value specifies the point ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of point IDs.
STRING curve_list[] This value specifies the curve list.
STRING plane_list[] This value specifies the plane list.
REAL offset This value specifies the plane offset distance.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000311 No intersections found between %A% and %A%.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_grid_intersect_plo_vc(output_ids,vector_list,plane_list,offset,created_ids)
##########
Description:
This function creates a point from the intersection of a vector and a plane with an optional plane offset distance.
Input:
STRING output_ids[] This value specifies the point ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of point IDs.
STRING vector_list[] This value specifies the vector list.
STRING plane_list[] This value specifies the plane list.
REAL offset This value specifies the plane offset distance.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000311 No intersections found between %A% and %A%.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_grid_offset(output_ids,distance,point_list,curvepoint_list,created_ids)
##########
Description:
This function creates a point on an existing curve at an offset distance from an existing point on the same curve.
Input:
STRING output_ids[] This value specifies the point ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of point IDs.
REAL distance This value specifies the offset distance along the curve.
STRING point_list[] This value specifies the reference point on a curve list.
STRING curvepoint_list[] This value specifies the curve to create the point on and the point on the curve which indicates the end of the curve closest to the new point to be created.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000582 The curve %I% has zero length.
1000583 Unable to create point on curve. Check input data for validity.
1000584 Invalid Distance value of %G% was input. Distance value must be between %G% and %G%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_grid_pierce(output_ids,curve_list,surface_list,created_ids)
##########
Description:
This function constructs points at the intersection(s)of a curve with a surface.
Input:
STRING output_ids[] This value specifies the point ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of point IDs.
STRING curve_list[] This value specifies the curve list which intersects with the surfaces in the surface list.
STRING surface_list[] This value specifies the surface list with which the curves in the curve list intersect.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000541 No intersections found between projected curve(s)%A% onto surface(s)%A%.
2001070 Unable to acquire %I% words of virtual memory.
38000450 Unable to calculate a point on the curve.
---------------
asm_const_grid_project_v1(output_ids,point_list,surface_list,etype,delete_orig,project_method,vector,coord_frame,created_ids)
##########
Description:
This function will create points by projecting other points to a surface.
Input:
STRING output_ids[] This value specifies the point ID list. If this value is set to an empty string or to “#”,the function will automatically 			allocate and assign a sequential list of point ID’s.
STRING point_list[] This value specifies the point list.
STRING surface_list[] This value specifies the surface list.
INTEGER etype This value specifies the geometry type to which the points will be projected. Set this value to 1 to project the points to surfaces. Set this value to 2 to project the points to planes.
LOGICAL delete_orig This value specifies,when set to TRUE that the original projected points are to be deleted. If this value is set to FALSE,the original projected points will not be deleted.
INTEGER project_method This value specifies the method of defining the projection vector. Set this value to 1 to project points along a normal to the surface. Set this value to 2 to project points along a vector. Set this value to 3 to project points along the view vector.
STRING vector[] This value specifies the rectangular coordinate projection vector. This value is used only if the input value project_method is set to 2.
Output:
STRING created_ids[VIRTUAL] This value returns id values for the projected points.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000541 The projection vector has zero length.
38000450 Unable to acquire %I% words of virtual memory.
---------------
asm_const_grid_xyz(output_ids,coordinates_list,coord_frame,created_ids)
##########
Description:
This function constructs points based on their reference coordinate frame coordinates.
Input:
STRING output_ids[] This value specifies the point ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of point IDs.
STRING coordinates_list[] This value specifies the reference coordinate frame coordinates of a point.
STRING coord_frame[] This value specifies the reference coordinate frame in which to create the point. The default coordinate frame is coordinate frame 0.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_hpat_2surface(output_ids,surface1_list,surface2_list,manifold_type,manifold_id,auto_align,created_ids)
##########
Description:
This function constructs hyperpatches from one surface to another,optionally lying within a manifold solid.
Input:
STRING output_ids[] This value specifies the hyperpatch ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of hyperpatch IDs.
STRING surface1_list[] This value specifies the first set of surfaces for the start of each hyperpatch.
STRING surface2_list[] This value specifies the second set of surfaces for the end of each hyperpatch.
INTEGER manifold_type This value specifies the type of manifold entity: 0 = no manifold,and 3 = solid manifold entity.
STRING manifold_id[] This value specifies the manifold entity.
LOGICAL auto_align This value specifies,when set to TRUE,that the surfaces used to construct the hyperpatch should be automatically aligned.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000900 Specified Manifold Entity Type value of %I% is invalid. Valid values are 0 and 3.
1000901 Zero length vector in Hpat %I% construction.
1000905 An error occurred during the manifold operation for manifold solid %A%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_hpat_3surface(output_ids,surface1_list,surface2_list,surface3_list,param_pos,auto_align,created_ids)
##########
Description:
This function constructs hyperpatches which pass through three surfaces and one interior parametric position.
Input:
STRING output_ids[] This value specifies the hyperpatch ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of hyperpatch IDs.
STRING surface1_list[] This value specifies the first set of surfaces for the start of each hyperpatch.
STRING surface2_list[] This value specifies the second set of surfaces for the middle of each hyperpatch.
STRING surface3_list[] This value specifies the third set of surfaces for the end of each hyperpatch.
REAL param_pos This value specifies the value of the parametric position of the middle surface. The default value is 0.5.
LOGICAL auto_align This value specifies,when set to TRUE,that the surfaces used to construct the hyperpatch should be automatically aligned.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
1000902 Unable to create an hpat with the specified parametric position value of %G%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_hpat_4surface(output_ids,surface1_list,surface2_list,surface3_list,surface4_list,param_pos1,param_pos2,auto_align,created_ids)
##########
Description:
This function constructs hyperpatches which pass through four surfaces and two interior parametric positions.
Input:
STRING output_ids[] This value specifies the hyperpatch ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of hyperpatch IDs.
STRING surface1_list[] This value specifies the first set of surfaces for the start of each hyperpatch.
STRING surface2_list[] This value specifies the second set of surfaces for the 1/3 point of each hyperpatch.
STRING surface3_list[] This value specifies the third set of surfaces for the 2/3 point of each hyperpatch.
STRING surface4_list[] This value specifies the fourth set of surfaces for the end of each hyperpatch.
REAL param_pos1 This value specifies the value of the parametric position of the one third interior surface. The default value is 0.333.
REAL param_pos2 This value specifies the value of the parametric position of the two thirds interior surface. The default value is 0.667.
LOGICAL auto_align This value specifies,when set to TRUE,that the surfaces used to construct the hyperpatch should be automatically aligned.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
1000903 Unable to create an hpat with the specified parametric position values of %G% and %G%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_hpat_face(output_ids,surface1_list,surface2_list,surface3_list,surface4_list,surface5_list,surface6_list,created_ids)
##########
Description:
This function constructs hyperpatches from six surfaces forming their exterior faces. The surfaces can be in any order and have any parametric orientation,but they must define a valid exterior face of an hyperpatch.
Input:
STRING output_ids[] This value specifies the hyperpatch ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of hyperpatch IDs.
STRING surface1_list[] This value specifies the first set of surfaces defining face 1 of each hyperpatch.
STRING surface2_list[] This value specifies the second set of surfaces defining face 2 of each hyperpatch.
STRING surface3_list[] This value specifies the third set of surfaces defining face 3 of each hyperpatch.
STRING surface4_list[] This value specifies the fourth set of surfaces defining face 4 of each hyperpatch.
STRING surface5_list[] This value specifies the fifth set of surfaces defining face 5 of each hyperpatch.
STRING surface6_list[] This value specifies the sixth set of surfaces defining face 6 of each hyperpatch.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000906 The surfaces are not correctly positioned to form a hpat.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_hpat_vertex(output_ids,point1_list,point2_list,point3_list,point4_list,point5_list,point6_list,point7_list,point8_list,created_ids)
##########
Description:
This function constructs trilinear hyperpatches from eight points. The points should be previously defined and specified in the normal hyperpatch connectivity order.
Input:
STRING output_ids[] This value specifies the hyperpatch ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of hyperpatch IDs.
STRING point1_list[] This value specifies the first set of points defining vertex 1 of each hyperpatch.
STRING point2_list[] This value specifies the second set of points defining vertex 2 of each hyperpatch.
STRING point3_list[] This value specifies the third set of points defining vertex 3 of each hyperpatch.
STRING point4_list[] This value specifies the fourth set of points defining vertex 4 of each hyperpatch.
STRING point5_list[] This value specifies the fifth set of points defining vertex 5 of each hyperpatch.
STRING point6_list[] This value specifies the sixth set of points defining vertex 6 of each hyperpatch.
STRING point7_list[] This value specifies the seventh set of points defining vertex 7 of each hyperpatch
STRING point8_list[] This value specifies the eighth set of points defining vertex 8 of each hyperpatch.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000901 Zero length vector in Hpat %I% construction.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_hpat_xyz(output_ids,solid_length,solid_origin,coord_frame,created_ids)
##########
Description:
This function constructs solids based on their X,Y,Z cartesian dimensions and origin.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING solid_length[] This value specifies the length of the hyperpatch in X,Y,Z respectively.
STRING solid_origin[] This value specifies the X,Y,Z coordinates of the origin of the solid respectively.
STRING coord_frame[] This value specifies the reference coordinate frame in which to create the solid. The default coordinate frame is coordinate frame 0.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000901 Zero length vector in Hpat %I% construction.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_line_2point(output_ids,point1_list,point2_list,manifold_type,manifold_id,num_interp,num_lines,created_ids)
##########
Description:
This function constructs lines by ruling between two sets of points and within an manifold entity.
Input:
STRING output_ids[] This value specifies the line ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of line IDs.
STRING point1_list[] This value specifies the first set of points for the start of each line.
STRING point2_list[] This value specifies the second set of points for the end of each line.
INTEGER manifold_type This value specifies the type of manifold entity: 0 = no manifold,1 = line manifold entity,2 = surface manifold entity,and 3 = solid manifold entity.
STRING manifold_id[] This value specifies the manifold entity.
INTEGER num_interp This value specifies the number of points to define the manifolding interpolation mesh through which is fitted though the number of lines defined by the input value num_lines.
INTEGER num_lines This value specifies the number of lines to create per manifold.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000511 Specified Manifold Entity Type value of %I% is invalid. Valid values are 0,1,2,and 3.
1000554 An error occurred during the manifold operation for manifold curve %A%.
1000710 An error occurred during the manifold operation for manifold surface %A%.
1000905 An error occurred during the manifold operation for manifold solid %A%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_line_3point(output_ids,point1_list,point2_list,point3_list,param_method,param_pos,created_ids)
##########
Description:
This function constructs lines which pass through three sets of points and an interior parametric position.
Input:
STRING output_ids[] This value specifies the line ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of line IDs.
STRING point1_list[] This value specifies the first set of points for the start of each line.
STRING point2_list[] This value specifies the second set of points for the middle of each line.
STRING point3_list[] This value specifies the third set of points for the end of each line.
INTEGER param_method This value specifies the parameterization method used to parameterize the line: 1 = parametric position of midpoint,and 2 = chord length parameterization.
REAL param_pos This value specifies the value of the parametric position of the middle point if the input value param_method is set to 1. The default value is 0.5.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000507 Specified Parameterization Method value of %I% is invalid. Valid values are 1 and 2.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
1000509 Unable to create a line with the specified parametric position value of %G%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_line_4point(output_ids,point1_list,point2_list,point3_list,point4_list,param_method,param_pos1,param_pos2,created_ids)
##########
Description:
This function constructs lines which pass through four sets of points and two interior parametric positions.
Input:
STRING output_ids[] This value specifies the line ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of line IDs.
STRING point1_list[] This value specifies the first set of points for the start of each line.
STRING point2_list[] This value specifies the second set of points for the 1/3 point of each line.
STRING point3_list[] This value specifies the third set of points for the 2/3 point of each line.
STRING point4_list[] This value specifies the fourth set of points for the end of each line.
INTEGER param_method This value specifies the parameterization method used to parameterize the line: 1 = parametric position of midpoint,and 2 = chord length parameterization.
REAL param_pos1 This value specifies the value of the parametric position of the one third interior point if the input value param_method is set to 1. The default value is 0.333.
REAL param_pos2 This value specifies the value of the parametric position of the two thirds interior point if the input value param_method is set to 1. The default value is 0.667.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000507 Specified Parameterization Method value of %I% is invalid. Valid values are 1 and 2.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
1000510 Unable to create a line with the specified parametric position values of %G% and %G%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_line_arc3point(output_ids,num_lparc,point1_list,point2_list,point3_list,created_ids)
##########
Description:
This function creates arcs through three sets of points.
Input:
STRING output_ids[] This value specifies the line ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of line IDs.
INTEGER num_lparc This value specifies the number of lines to create per arc.
STRING point1_list[] This value specifies the list of points defining the start of an arc.
STRING point2_list[] This value specifies the list of points defining the midpoint of an arc.
STRING point3_list[] This value specifies the list of points defining the end of an arc.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000302 The three points specified are nearly collinear.
1000500 There must be at least one line as input. The invalid value input was %I%.
1000501 An attempt to create an Arc through %G% degrees will not be honored (Max=180). Increase the number of lines.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_line_conic(output_ids,coord_frame,rho,point1_list,point2_list,point3_list,created_ids)
##########
Description:
This function constructs a conic section such as a hyperbola,parabola,ellipse,or circular arc.
Input:
STRING output_ids[] This value specifies the line ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of line IDs.
STRING coord_frame[] This value specifies the reference coordinate frame in which the construction point,defined by the input value point1_list,is to be interpreted. The default coordinate frame is coordinate frame 0.
REAL rho This value specifies the relative altitude value for the conic section: Ellipse when 0.0 < rho < 0.5,Parabola when rho = 0.5,Hyperbola when 0.5 < rho < 1.0.
STRING point1_list[] This value specifies the list of construction points,which,in conjunction with the start and end points of the conic section,define the plane and tangency of the conic section.
STRING point2_list[] This value specifies the list of points defining the start of the conic section.
STRING point3_list[] This value specifies the list of points defining the end of the conic section.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_line_extract(output_ids,surface_list,line_direction,param_pos,created_ids)
##########
Description:
This function constructs lines by extracting lines from a set of surfaces at a specified position and in a specified parametric direction.
Input:
STRING output_ids[] This value specifies the line ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of line IDs.
STRING surface_list[] This value specifies the list of surfaces from which lines are extracted.
INTEGER line_direction This value specifies the parametric direction in which to create the line: 1 = C1 direction,and 2 = C2 direction.
REAL param_pos This value specifies the value of the parametric position in the given parametric direction from which to extract the line.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000433 A Zero length curve would have been created had the process continued. Modify application input and try again.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
1000518 Specified Parametric Direction value of %I% is invalid. Valid values are 1 and 2.
2001070 Unable to acquire %I% words of virtual memory.
38000637 Cannot access geometry definition for %A%.
---------------
asm_const_line_fillet(output_ids,num_fillet,radius,fil_tolerance,trim_original,point1_list,point2_list,created_ids)
##########
Description:
This function constructs a fillet of a specified radius between any two lines.
Input:
STRING output_ids[] This value specifies the line ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of line IDs.
INTEGER num_fillet This value specifies the number of lines to create per fillet.
REAL radius This value specifies the fillet radius.
REAL fil_tolerance This value specifies the fillet geometric tolerance.
LOGICAL trim_original This value is set to TRUE if the original line is to be trimmed after the fillet is created.
STRING point1_list[] This value specifies the first fillet location list.
STRING point2_list[] This value specifies the second fillet location list.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000500 There must be at least one line as input. The invalid value input was %I%.
1000557 The fillet radius value is unacceptable. The radius value of %G% must be greater than the fillet tolerance value of %G%.
1000558 The fillet line with radius %G% cannot be created between the two input curves.
1000571 The fillet curve has a zero angle of rotation. The fillet cannot be created.
1000572 The fillet curve has a zero radius. The fillet cannot be created.
2001070 Unable to acquire %I% words of virtual memory.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
---------------
asm_const_line_fit(output_ids,point_list,num_lines,geo_tolerance,num_iterations,created_ids)
##########
Description:
This function creates a set of lines which together define a best fit to an arbitrary number of points.
Input:
STRING output_ids[] This value specifies the line ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of line IDs.
STRING point_list[] This value specifies the ordered list of points to which the lines are to be fit.
INTEGER num_lines This value specifies the number of lines to fit through the points in the point list.
REAL geo_tolerance This value specifies a geometric tolerance used to test for convergence during the parametric least squares numerical approximation. The default value is 0.005.
INTEGER num_iterations This value defines the maximum number of times to iterate during the parametric least squares numerical approximation. The default value is 0.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000517 The Line Construct parameter %A% was reset from the invalid input value of %I% to the default value of %I%.
1000025 Error attempting to allocate virtual memory.
1000301 There must be at least two points as input. The invalid value input was %A%.
1000500 There must be at least one line as input. The invalid value input was %I%.
1000516 The points are all within tolerance of one another. A zero length line will not be produced.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_line_intersect(output_ids,surface1_list,surface2_list,curves_per_int,geo_tolerance,flat_tolerance,int_tolerance,created_ids)
##########
Description:
This function creates curves which at the intersection between two sets of surfaces.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING surface1_list[] This value specifies the list of surfaces to be compared for intersection with the surfaces in the input value surface2_list.
STRING surface2_list[] This value specifies the list of surfaces to be compared for intersection with the surfaces in the input value surface1_list.
INTEGER curves_per_int This value specifies the number of curves to be created per intersection.
REAL geo_tolerance This value specifies the maximum deviation tolerance used during the creation of curves per intersection curve.
REAL flat_tolerance This value specifies a tolerance parameter. Surfaces in the input list are recursively subdivided until they are planar within this tolerance. The default is 20*geo_tolerance.
REAL int_tolerance This value specifies a tolerance parameter. The algorithm creates all points along the projected curve so that the maximum distance lies between them is the distance defined by this value. The default is 10*geo_tolerance.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000025 Error attempting to allocate virtual memory.
1000527 The number of lines per intersection must be greater than or equal to zero. The invalid value input was %I%.
1000532 A Virtual File Access error has occurred.
1000533 An error has occurred during the surface/surface intersection algorithm. Probable cause is degenerate geometry.
1000534 The intersection points are all within tolerance of one another. A zero length line will not be produced.
1000535 No intersections found between surface(s)%A% and surface(s)%A%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_line_normal(output_ids,point_list,line_list,created_ids)
##########
Description:
This function constructs lines which pass through a point perpendicular to set of lines.
Input:
STRING output_ids[] This value specifies the line ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of line IDs.
STRING point_list[] This value specifies the list of points from which the perpendicular lines will be constructed.
STRING line_list[] This value specifies the list of lines to which the perpendicular lines will be constructed.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_line_project(output_ids,line_list,surface_list,delete_original,project_method,vector,coord_frame,num_lines,geo_tolerance,flat_tolerance,int_tolerance,created_ids)
##########
Description:
This function constructs lines by projecting lines along a plane normal or vector onto a set of surfaces.
Input:
STRING output_ids[] This value specifies the line ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of line IDs.
STRING line_list[] This value specifies the list of lines to project onto the list of surfaces.
STRING surface_list[] This value specifies the list of surfaces onto which the lines are to be projected.
LOGICAL delete_original This value is set to TRUE if the original lines to project are to be deleted after the projection. If this value is set to FALSE,the original entities will not be deleted.
INTEGER project_method This value specifies the method of defining the projection vector: 1 = the lines to be projected lie in a plane and it is desirable to project the lines normal to this plane,and 2 = the direction of projection is to be given by a vector.
STRING vector[] This value specifies the projection vector if the input value project_method is set to 2.
STRING coord_frame[] This value specifies the coordinate frame ID number for the projection vector.
INTEGER num_lines This value specifies the number of lines to be created per projection.
REAL geo_tolerance This value specifies the maximum deviation tolerance used during the creation of the lines per projection vector.
REAL flat_tolerance This value specifies a tolerance parameter. Surfaces in the input list are recursively subdivided until they are planar within this tolerance. The default is 20*geo_tolerance.
REAL int_tolerance This value specifies a tolerance parameter. The algorithm creates all points along the projected line so that the maximum distance lies between them is the distance defined by this value. The default is 10*geo_tolerance.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000541 No intersections found between projected curve(s)%A% onto surface(s)%A%.
1000025 Error attempting to allocate virtual memory.
1000532 A Virtual File Access error has occurred.
1000537 The number of lines per projection must be greater than or equal to zero. The invalid value input was %I%.
1000538 An error has occurred during the curve/surface projection algorithm. Probable cause is degenerate geometry.
1000539 The points created to approximate the projection line are all within tolerance (%G%). Try making the Max. Deviation Tolerance on the Project Tolerances form larger and try again.
1000541 No intersections found between projected curve(s)%A% onto surface(s)%A%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_line_project_v1(output_ids,line_list,surface_list,delete_original,project_method,vector,coord_frame,projection_tolerance,created_ids)
##########
Description:
This function constructs lines by projecting lines along a plane normal or vector onto a set of surfaces.
Input:
STRING output_ids[] This value specifies the line ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of line IDs.
STRING line_list[] This value specifies the list of lines to project onto the list of surfaces.
STRING surface_list[] This value specifies the list of surfaces onto which the lines are to be projected.
LOGICAL delete_original This value is set to TRUE if the original lines to project are to be deleted after the projection. If this value is set to FALSE,the original entities will not be deleted.
INTEGER project_method This value specifies the method of defining the projection vector: 1 = the lines to be projected lie in a plane and it is desired to project the lines normal to this plane,2 = the direction of projection is normal to the surface at the point of closest approach,and 3 = the direction of projection is to be given by a vector.
STRING vector[] This value specifies the projection vector if the input value project_method is set to 3.
STRING coord_frame[] This value specifies the coordinate frame ID number for the projection vector.
REAL projection_tolerance This value specifies a tolerance parameter. The algorithm creates all lines along the projected surface so that the maximum distance lies between them is the distance defined by this value.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000412 Negating the View Vector coordinates and trying again...
38000415 Skipping zero length Curve %I%.
1000540 The projection vector has zero length.
38000488 Unable to manifold the curve(s)to the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_line_pwl(output_ids,point_list,created_ids)
##########
Description:
This function constructs a piecewise linear set of lines between a list of points.
Input:
STRING output_ids[] This value specifies the line ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of line IDs.
STRING point_list[] This value specifies the ordered list of points defining the piecewise linear lines.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000301 There must be at least two points as input. The invalid value input was %A%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_line_spline(output_ids,point_list,end_flag,created_ids)
##########
Description:
This function constructs a piecewise cubic spline which passes through at least three points. Boundary conditions at the two ends are controllable by the user.
Input:
STRING output_ids[] This value specifies the line ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of line IDs.
STRING point_list[] This value specifies the ordered list of points defining the breakpoints of the cubic spline segments.
INTEGER end_flag This value defines the spline boundary conditions at the two ends: 0 = zero second derivative,and 1 = a 0.5 scale of the internal second derivative.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000520 There must be at least two lines input for a Spline Line. The invalid value input was %I%.
1000521 There must be at least three points input for a Spline Line. The invalid value input was %A%.
1000523 The number of points (%I%)is insufficient for the Number of Spline Segments (%I%)to create. There must be at least one more point than the number of segments.
1000524 Duplicate points on Spline Line.
1000525 The points used to create the Spline Line are too close.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_line_tancurve(output_ids,line1_list,line2_list,trim_original,created_ids)
##########
Description:
This function constructs tangents between two sets of lines with a parametric direction common to that of the first set of lines.
Input:
STRING output_ids[] This value specifies the line ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of line IDs.
STRING line1_list[] This value specifies the first set of lines from which tangential lines are created.
STRING line2_list[] This value specifies the second set of lines from which tangential lines are created.
LOGICAL trim_original This value is set to TRUE if the original line is to be trimmed after the tangent is created.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000551 The curve is straight and has no tangent.
1000552 The two curves are not coplanar so a tangent cannot be calculated.
1000553 Unable to find tangent from the first curve to the second curve from the given start points.
1000563 The curve is not planar,therefore,a tangent cannot be calculated.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_line_tanpoint(output_ids,curve_list,point_list,closest_only,trim_original,created_ids)
##########
Description:
This function constructs tangential lines between sets of points and lines with the parametric direction of the tangents being common to the lines.
Input:
STRING output_ids[] This value specifies the line ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of line IDs.
STRING line_list[] This value specifies the list of lines to which the tangential lines are created.
STRING point_list[] This value specifies the list of points from which the tangential lines are created.
LOGICAL closest_only This value is set to TRUE if the closest tangent is the only tangent to be created if multiple tangents exist.
LOGICAL trim_original This value is set to TRUE if the original line is to be trimmed after the tangent is created.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000548 The curve is straight,therefore,a tangent cannot be calculated.
1000549 The curve and point are not coplanar,therefore,a tangent cannot be calculated.
1000550 There is not a tangent which connects the point with the curve.
1000563 The curve is not planar,therefore,a tangent cannot be calculated.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_line_xyz(output_ids,line_length,line_origin,coord_frame,created_ids)
##########
Description:
This function constructs lines based on their X,Y,Z cartesian dimensions and origin.
Input:
STRING output_ids[] This value specifies the line ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of line IDs.
STRING line_length[] This value specifies the length of the line in the X,Y,and Z axes.
STRING line_origin[] This value specifies the X,Y,and Z coordinates of the origin of the line.
STRING coord_frame[] This value specifies the reference coordinate frame in which to create the point. The default coordinate system used is coordinate frame 0.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_patch_2curve(output_ids,curve1_list,curve2_list,manifold_type,manifold_id,ruled_form,auto_align,created_ids)
##########
Description:
This function constructs patches from one set of curves to another,optionally lying within a manifold surface or solid.
Input:
STRING output_ids[] This value specifies the patch ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of patch IDs.
STRING curve1_list[] This value specifies the first set of curves from which each patch is started.
STRING curve2_list[] This value specifies the second set of curves defining the end of each patch.
INTEGER manifold_type This value specifies the type of manifold entity: 0 = no manifold,2 = surface manifold entity,and 3 = solid manifold entity.
STRING manifold_id[] This value specifies the manifold entity.
INTEGER ruled_form This value specifies the ruled patch parameterization form: 0 = equal relative arc length,and1 = equal relative parameter values.
LOGICAL auto_align This value specifies,when set to TRUE,will designate that the curves used to construct the patch should be automatically aligned.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000573 Curve %I% does not have the required Company of Origin (PDA Engineering)to construct a Line using the %A% Option. Unable to continue.
1000702 Specified Manifold Entity Type value of %I% is invalid. Valid values are 0,2,and 3.
1000710 An error occurred during the manifold operation for manifold surface %A%.
1000905 An error occurred during the manifold operation for manifold solid %A%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_patch_2curve_v1(output_ids,curve1_list,curve2_list,manifold_type,manifold_id,auto_align,created_ids)
##########
Description:
This function constructs patches from one set of curves to another,optionally lying within a manifold surface or solid.
Input:
STRING output_ids[] This value specifies the patch ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of patch IDs.
STRING curve1_list[] This value specifies the first set of curves from which each patch is started.
STRING curve2_list[] This value specifies the second set of curves defining the end of each patch.
INTEGER manifold_type This value specifies the type of manifold entity: 0 = no manifold,2 = surface manifold entity,and 3 = solid manifold entity.
STRING manifold_id[] This value specifies the manifold entity.
LOGICAL auto_align This value specifies,when set to TRUE,that the curves used to construct the patch should be automatically aligned.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000702 Specified Manifold Entity Type value of %I% is invalid. Valid values are 0,2,and 3.
1000710 An error occurred during the manifold operation for manifold surface %A%.
1000905 An error occurred during the manifold operation for manifold solid %A%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_patch_3curve(output_ids,curve1_list,curve2_list,curve3_list,param_pos,auto_align,created_ids)
##########
Description:
This function constructs patches which pass through three sets of curves and an interior parametric position.
Input:
STRING output_ids[] This value specifies the patch ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of patch IDs.
STRING curve1_list[] This value specifies the first set of curves from which each patch is started.
STRING curve2_list[] This value specifies the second set of curves defining a midpoint on each patch.
STRING curve3_list[] This value specifies the third set of curves defining the end of each patch.
REAL param_pos This value specifies the value of the parametric position of the middle curve. The default value is 0.5.
LOGICAL auto_align This value specifies,when set to TRUE,that the curves used to construct the patch should be automatically aligned.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
1000703 Unable to create a patch with the specified parametric position value of %G%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_patch_4curve(output_ids,curve1_list,curve2_list,curve3_list,curve4_list,param_pos1,param_pos2,auto_align,created_ids)
##########
Description:
This function constructs patches which pass through four sets of curves and two interior parametric positions.
Input:
STRING output_ids[] This value specifies the patch ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of patch IDs.
STRING curve1_list[] This value specifies the first set of curves from which each patch is started.
STRING curve2_list[] This value specifies the second set of curves defining the first midpoint on each patch.
STRING curve3_list[] This value specifies the third set of curves defining the second midpoint on each patch.
STRING curve4_list[] This value specifies the fourth set of curves defining the end of each patch.
REAL param_pos1 This value specifies the value of the parametric position at the one third interior curve. The default value is 0.333.
REAL param_pos2 This value specifies the value of the parametric position at the two thirds interior curve. The default value is 0.667.
LOGICAL auto_align This value specifies,when set to TRUE,that the curves used to construct the patch should be automatically aligned.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
1000704 Unable to create a patch with the specified parametric position values of %G% and %G%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_patch_edge(output_ids,curve1_list,curve2_list,curve3_list,curve4_list,manifold_type,manifold_id,created_ids)
##########
Description:
This function constructs patches from four bounding curves,and optionally lying within a manifold surface or solid.
Input:
STRING output_ids[] This value specifies the patch ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of patch IDs.
STRING curve1_list[] This value specifies a set of curves defining the first edge of each patch.
STRING curve2_list[] This value specifies a set of curves defining the second edge of each patch.
STRING curve3_list[] This value specifies a set of curves defining the third edge of each patch.
STRING curve4_list[] This value specifies a set of curves defining the fourth edge of each patch.
INTEGER manifold_type This value specifies the type of manifold entity: 0 = no manifold,2 = surface manifold entity,and 3 = solid manifold entity.
STRING manifold_id[] This value specifies the manifold entity.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000702 Specified Manifold Entity Type value of %I% is invalid. Valid values are 0,2,and 3.
1000709 Unable to intersect the curves being used to construct a patch. The curves must form a closed region and must be in a circular order.
1000710 An error occurred during the manifold operation for manifold surface %A%.
1000905 An error occurred during the manifold operation for manifold solid %A%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_patch_extract(output_ids,hpat_list,param_plane,param_pos,created_ids)
##########
Description:
This function constructs patches by extracting patches from hyperpatches at a specified parametric position and in a specified parametric direction.
Input:
STRING output_ids[] This value specifies the patch ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of patch IDs.
STRING hpat_list[] This value specifies the list of hyperpatches to extract patches from.
INTEGER param_plane This value specifies the constant parametric plane in which to create the patch: 1 = constant C1 plane,2 = constant C2 plane,and 3 = constant C3 plane.
REAL param_pos This value specifies the parametric position in the given parametric plane from which to extract the patch.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
1000705 Specified Parametric Plane value of %I% is invalid. Valid values are 1,2,and 3.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_patch_fillet(output_ids,radius1,radius2,fil_tolerance,trim_original,point1_list,point2_list,created_ids)
##########
Description:
This function constructs a fillet patch with a specified radii between any two patches.
Input:
STRING output_ids[] This value specifies the patch ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of patch IDs.
REAL radius1 This value specifies the fillet radius.
REAL radius2 This value specifies the second radius for a varying radius fillet that is created with the first edge beginning at a radius defined by the input value radius1 and gradually varying to match the input value radius2 at the opposite edge.
REAL fil_tolerance This value specifies the fillet geometric tolerance.
LOGICAL trim_original This value is set to TRUE if the original patch is to be trimmed after the fillet is created.
STRING point1_list[] This value specifies the first set of locations for the fillets on a set of patches.
STRING point2_list[] This value specifies the second set of locations for the fillets on a set of patches.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000025 Error attempting to allocate virtual memory.
1000557 The fillet radius value is unacceptable. The radius value of %G% must be greater than the fillet tolerance value of %G%.
38000003 No blob provided.
38000118 An attempt to approximate a general surface with a single Parametric BiCubic failed.
38000121 Invalid format conversion flag specified for surface conversion.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_patch_match(output_ids,patch_list1,patch_list2,delete_original,created_ids)
##########
Description:
This function constructs patches with common boundaries or matching edges from patches with two consecutive common vertices but unmatched edges. The input patches need not have matching parametric orientations.
Input:
STRING output_ids[] This value specifies the patch ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of patch IDs.
STRING patch_list1[] This value specifies the list of patches to which the new patches will be matched.
STRING patch_list2[] This value specifies the list of patches to match with the patches in the first patch list.
LOGICAL delete_original This value is set to TRUE if the original patches are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000025 Error attempting to allocate virtual memory.
1000711 The surface corners cannot match with the patch corners.
38000003 No blob provided.
38000118 An attempt to approximate a general surface with a single Parametric BiCubic failed.
38000121 Invalid format conversion flag specified for surface conversion.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_patch_vertex(output_ids,point1_list,point2_list,point3_list,point4_list,manifold_type,manifold_id,created_ids)
##########
Description:
This function constructs quadrilateral patches formed by four vertex points and are optionally lying within a manifold surface or solid.
Input:
STRING output_ids[] This value specifies the patch ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of patch IDs.
STRING point1_list[] This value specifies the set of points defining the first vertex of each patch.
STRING point2_list[] This value specifies the set of points defining the second vertex of each patch.
STRING point3_list[] This value specifies the set of points defining the third vertex of each patch.
STRING point4_list[] This value specifies the set of points defining the fourth vertex of each patch.
INTEGER manifold_type This value specifies the type of manifold entity: 0 = no manifold,2 = surface manifold entity,and 3 = solid manifold entity.
STRING manifold_id[] This value specifies the manifold entity.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000702 Specified Manifold Entity Type value of %I% is invalid. Valid values are 0,2,and 3.
1000710 An error occurred during the manifold operation for manifold surface %A%.
1000905 An error occurred during the manifold operation for manifold solid %A%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_patch_xyz(output_ids,patch_length,patch_origin,coord_frame,created_ids)
##########
Description:
This function constructs patches based on dimensions and an origin point in a cartesian coordinate system.
Input:
STRING output_ids[] This value specifies the patch ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of patch IDs.
STRING patch_length[] This value specifies the length of the patch in yjr X,Y,snf Z axes,respectively.
STRING patch_origin[] This value specifies the X,Y,and Z coordinates of the origin of the patch,respectively.
STRING coord_frame[] This value specifies the reference coordinate frame in which to create the patch. The default coordinate frame is coordinate frame 0.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
2001070 Unable to acquire %I% words of virtual memory.
---------------
asm_const_solid_5face(output_ids,surface1_list,surface2_list,surface3_list,surface4_list,surface5_list,created_ids)
##########
Description:
This function creates parametric tricubic or wedge shaped solids from sets of five surfaces defining their exterior faces. The surfaces can be in any order and have any parametric orientation but they must define a valid exterior face of a solid.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING surface1_list[] This value specifies the set of surfaces defining the first face of each solid.
STRING surface2_list[] This value specifies the set of surfaces defining the second face of each solid.
STRING surface3_list[] This value specifies the set of surfaces defining the third face of each solid.
STRING surface4_list[] This value specifies the set of surfaces defining the forth face of each solid.
STRING surface5_list[] This value specifies the set of surfaces defining the fifth face of each solid.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000906 The surfaces are not correctly positioned to form a hpat.
38000118 An attempt to approximate a general surface with a single Parametric BiCubic failed.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_solid_6face(output_ids,surface1_list,surface2_list,surface3_list,surface4_list,surface5_list,surface6_list,created_ids)
##########
Description:
This function creates parametric tricubic or wedge shaped solids from sets of six surfaces defining their exterior faces. The surfaces can be in any order and have any parametric orientation but they must define a valid exterior face of a solid.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING surface1_list[] This value specifies the set of surfaces defining the first face of each solid.
STRING surface2_list[] This value specifies the set of surfaces defining the second face of each solid.
STRING surface3_list[] This value specifies the set of surfaces defining the third face of each solid.
STRING surface4_list[] This value specifies the set of surfaces defining the forth face of each solid.
STRING surface5_list[] This value specifies the set of surfaces defining the fifth face of each solid.
STRING surface6_list[] This value specifies the set of surfaces defining the sixth face of each solid.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000906 The surfaces are not correctly positioned to form a hpat.
38000118 An attempt to approximate a general surface with a single Parametric BiCubic failed.
38000121 Invalid format conversion flag specified for surface conversion.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_solid_extrude(output_ids,delta,scale,angle,origin,coord_frame,num_solids,surface_list,created_ids)
##########
Description:
This function creates parametric tricubic or wedge shaped solids by moving surfaces through space along a defined axis with the option of scaling and rotating simultaneously.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING delta[] This value specifies a translation vector defining the direction and magnitude of the extrusion operation.
REAL scale This value specifies the scaling factor.
REAL angle This value specifies the angle to rotate the surface around the translation vector during the extrusion operation.
STRING origin[] This value specifies the point of origin from which the extrusion operation will take place.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_solids This value specifies the number of solids to create for each surface.
STRING surface_list[] This value specifies the list of surfaces to be extruded.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000211 The length of the Axis equals zero.
1000241 Unable to extrude hyperpatch because the surface is too degenerate.
38000118 An attempt to approximate a general surface with a single Parametric BiCubic failed.
38000121 Invalid format conversion flag specified for surface conversion.
38000427 The surface type used for this Action,Object,Method function is invalid. It must be of a type that when created,has the default color of Green.
---------------
asm_const_solid_glide(output_ids,scale,glide_option,director_surface,base_surface,created_ids)
##########
Description:
This function creates parametric tricubic or wedge shaped solids by revolving surfaces about an axis of rotation.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
REAL scale This value specifies the scaling factor.
INTEGER glide_option This value specifies the glide option to use: 0 = normal project glide option,and 1 = fixed logic option.
STRING director_surface[] This value specifies the list of surfaces along which the base surface will be swept.
STRING base_surface[] This value specifies the list of surfaces that will be swept along the director surfaces to form the solids.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000225 Unable to do glide option.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000015 LpSublistNext: End of current list has been reached.
38000117 An attempt to approximate a general curve with a single Parametric Cubic failed.
38000118 An attempt to approximate a general surface with a single Parametric BiCubic failed.
38000121 Invalid format conversion flag specified for surface conversion.
---------------
asm_const_solid_normal(output_ids,thickness1,thickness2,thickness3,thickness4,num_solids,normal_rev_direction,surface_list,created_ids)
##########
Description:
This function creates parametric tricubic or wedge shaped solids which are defined by a set of base surfaces and an offset from those surfaces in the direction of the curvature. The offset may be constant or a linear taper.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING thickness1[] This value specifies the constant thickness or the first thickness at u=0; v=0.
STRING thickness2[] This value is set to NULL if the input value thickness1 is set to constant thickness,otherwise it is the second thickness at u=0; v=1.
STRING thickness3[] This value is set to NULL if he input value thickness1 is set to constant thickness,otherwise it is the third thickness at u=1; v=1.
STRING thickness4[] This value is set to NULL if he input value thickness1 is set to constant thickness,otherwise it is the fourth thickness at u=1; v=0.
INTEGER num_solids This value specifies the number of solids to be created from each surface.
LOGICAL normal_rev_direction This value is set to TRUE if the normal is to be flipped or reversed.
STRING surface_list[] This value specifies the list of surfaces to be swept using the normal option.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000712 Unable to compute the tangent and normal vectors due to a non-removable degeneracy or a singularity.
1000901 Zero length vector in Hpat %I% construction.
16000301 Blank string encountered.
16000302 %A% does not contain enough arguments,looking for %I% arguments.
16000303 %A% has too many arguments,looking for %I% arguments.
16000305 %A% is not a real.
38000118 An attempt to approximate a general surface with a single Parametric BiCubic failed.
38000121 Invalid format conversion flag specified for surface conversion.
38000427 The surface type used for this Action,Object,Method function is invalid. It must be of a type that when created,has the default color of Green.
---------------
asm_const_solid_revolve(output_ids,axis,angle,offset,coord_frame,num_solids,surface_list,created_ids)
##########
Description:
This function creates parametric tricubic or wedge shaped solids by revolving surfaces about an axis of rotation.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING axis[] This value specifies the axis of rotation.
REAL angle This value specifies the total angle to revolve each surface in degrees.
REAL offset This value specifies the initial offset angle in degrees.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_solids This value specifies the number of solids to create for each surface.
STRING surface_list[] This value specifies the list of surfaces to be revolved.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000210 Angle of rotation for a parametric entity is greater than 180 degrees.
1000211 The length of the Axis equals zero.
1000242 Rotation is approximately parallel to the surface.
1000901 Zero length vector in Hpat %I% construction.
38000118 An attempt to approximate a general surface with a single Parametric BiCubic failed.
38000121 Invalid format conversion flag specified for surface conversion.
38000427 The surface type used for this Action,Object,Method function is invalid. It must be of a type that when created,has the default color of Green.
---------------
asm_const_solid_2surface(output_ids,auto_align,surface1_list,surface2_list,created_ids)
##########
Description:
This function creates parametric tricubic or wedge shaped solids from one set of surfaces to another.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
LOGICAL auto_align This value specifies,when set to TRUE,that the surfaces used to construct the solid should be automatically aligned.
STRING surface1_list[] This value specifies the first set of surfaces for the start of each solid.
STRING surface2_list[] This value specifies the second set of surfaces for the end of each solid.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000901 Zero length vector in Hpat %I% construction.
38000118 An attempt to approximate a general surface with a single Parametric BiCubic failed.
38000121 Invalid format conversion flag specified for surface conversion.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_solid_3surface(output_ids,auto_align,param_method,surface1_list,surface2_list,surface3_list,created_ids)
##########
Description:
This function creates parametric tricubic or wedge shaped solids from three sets of surfaces.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
LOGICAL auto_align This value specifies,when set to TRUE,that the surfaces used to construct the solid should be automatically aligned.
INTEGER param_method This value specifies the parameterization method to use: 1 = chord length parameterization,and 2 = uniform parameterization.
STRING surface1_list[] This value specifies the first list of surfaces.
STRING surface2_list[] This value specifies the second list of surfaces.
STRING surface3_list[] This value specifies the third list of surfaces.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000507 Specified Parameterization Method value of %I% is invalid. Valid values are 1 and 2.
1000902 Unable to create an hpat with the specified parametric position value of %G%.
38000118 An attempt to approximate a general surface with a single Parametric BiCubic failed.
38000121 Invalid format conversion flag specified for surface conversion.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_solid_4surface(output_ids,auto_align,param_method,surface1_list,surface2_list,surface3_list,surface4_list,created_ids)
##########
Description:
This function creates parametric tricubic or wedge shaped solids from four sets of surfaces.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
LOGICAL auto_align This value specifies,when set to TRUE,that the surfaces used to construct the solid should be automatically aligned.
INTEGER param_method This value specifies the parameterization method to use: 1 = chord length parameterization,and 2 = uniform parameterization.
STRING surface1_list[] This value specifies the first list of surfaces.
STRING surface2_list[] This value specifies the second list of surfaces.
STRING surface3_list[] This value specifies the third list of surfaces.
STRING surface4_list[] This value specifies the fourth list of surfaces.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000507 Specified Parameterization Method value of %I% is invalid. Valid values are 1 and 2.
1000903 Unable to create an hpat with the specified parametric position values of %G% and %G%.
38000118 An attempt to approximate a general surface with a single Parametric BiCubic failed.
38000121 Invalid format conversion flag specified for surface conversion.
38000452 Unable to calculate a point on the solid.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_solid_nsurface(output_ids,auto_align,param_method,surface_list,created_ids)
##########
Description:
This function creates parametric tricubic or wedge shaped solids which pass through a specified set of surfaces.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
LOGICAL auto_align This value specifies,when set to TRUE,that the surfaces used to construct the solid should be automatically aligned.
INTEGER param_method This value specifies the parameterization method to use: 1 = chord Length parameterization,and 2 = uniform parameterization.
STRING surface_list[] This value specifies the list of surfaces.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000507 Specified Parameterization Method value of %I% is invalid. Valid values are 1 and 2.
38000119 An attempt to approximate a general solid with a single Parametric TriCubic failed.
38000122 Invalid format conversion flag specified for solid conversion.
38000452 Unable to calculate a point on the solid.
38000493 The Surface interpolating Solid builder failed to create the evaluator table. Solid was not created.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_surface_2curve(output_ids,curve1_list,curve2_list,created_ids)
##########
Description:
This function creates parametric bicubic surfaces from two sets of curves.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING curve1_list[] This value specifies the first set of ruling curves.
STRING curve2_list[] This value specifies the second set of ruling curves.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000117 An attempt to approximate a general curve with a single Parametric Cubic failed.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000494 The Curve interpolating Surface builder failed to create the evaluator table. Surface was not created.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_surface_3curve(output_ids,param_method,curve1_list,curve2_list,curve3_list,created_ids)
##########
Description:
This function creates parametric bicubic surfaces from three sets of curves.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
INTEGER param_method This value specifies the surface parameterization method: 1 = chord length parameterization,and 2 = uniform parameterization.
STRING curve1_list[] This value specifies the first set of curves.
STRING curve2_list[] This value specifies the second set of curves.
STRING curve3_list[] This value specifies the third set of curves.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000025 Error attempting to allocate virtual memory.
1000507 Specified Parameterization Method value of %I% is invalid. Valid values are 1 and 2.
38000003 No blob provided.
38000117 An attempt to approximate a general curve with a single Parametric Cubic failed.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000494 The Curve interpolating Surface builder failed to create the evaluator table. Surface was not created.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_surface_4curve(output_ids,param_method,curve1_list,curve2_list,curve3_list,curve4_list,created_ids)
##########
Description:
This function creates parametric bicubic surfaces from four sets of curves.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
INTEGER param_method This value specifies the surface parameterization method: 1 = chord length parameterization,and 2 = uniform parameterization.
STRING curve1_list[] This value specifies the first set of curves.
STRING curve2_list[] This value specifies the second set of curves.
STRING curve3_list[] This value specifies the third set of curves.
STRING curve4_list[] This value specifies the fourth set of curves.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000025 Error attempting to allocate virtual memory.
1000507 Specified Parameterization Method value of %I% is invalid. Valid values are 1 and 2.
38000003 No blob provided.
38000117 An attempt to approximate a general curve with a single Parametric Cubic failed.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_surface_ncurve(output_ids,param_method,curve_list,created_ids)
##########
Description:
This function creates parametric bicubic surfaces from a specified set of curves.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
INTEGER param_method This value specifies the surface parameterization method: 1 = chord length parameterization,and 2 = uniform parameterization.
STRING curve_list[] This value specifies the list of curves.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000025 Error attempting to allocate virtual memory.
1000507 Specified Parameterization Method value of %I% is invalid. Valid values are 1 and 2.
38000003 No blob provided.
38000118 An attempt to approximate a general surface with a single Parametric BiCubic failed.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000494 The Curve interpolating Surface builder failed to create the evaluator table. Surface was not created.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_surface_3edge(output_ids,curve1_list,curve2_list,curve3_list,created_ids)
##########
Description:
This function creates parametric bicubic surfaces from three sets of curves defining the boundaries of the surfaces.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING curve1_list[] This value specifies the first set of curves.
STRING curve2_list[] This value specifies the second set of curves.
STRING curve3_list[] This value specifies the third set of curves.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000025 Error attempting to allocate virtual memory.
1000709 Unable to intersect the curves being used to construct a patch. The curves must form a closed region and must be in a circular order.
38000003 No blob provided.
38000117 An attempt to approximate a general curve with a single Parametric Cubic failed.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_surface_4edge(output_ids,curve1_list,curve2_list,curve3_list,curve4_list,created_ids)
##########
Description:
This function creates parametric bicubic surfaces from four sets of curves defining the boundaries of the surfaces.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING curve1_list[] This value specifies the first set of curves.
STRING curve2_list[] This value specifies the second set of curves.
STRING curve3_list[] This value specifies the third set of curves.
STRING curve4_list[] This value specifies the fourth set of curves.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000025 Error attempting to allocate virtual memory.
1000709 Unable to intersect the curves being used to construct a patch. The curves must form a closed region and must be in a circular order.
38000003 No blob provided.
38000117 An attempt to approximate a general curve with a single Parametric Cubic failed.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_surface_extract(output_ids,solid_list,param_plane,param_pos,created_ids)
##########
Description:
This function creates parametric bicubic surfaces by extracting surfaces from solids at specified parametric positions and in specified parametric directions.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING solid_list[] This value specifies the list of solids from which to extract surfaces.
INTEGER param_plane This value specifies the constant parametric plane in which to create the surface: 1 = constant U plane,2 = constant V plane,and 3 = constant W plane.
REAL param_pos This value specifies the parametric position in the given parametric plane from which to extract the surfaces.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000025 Error attempting to allocate virtual memory.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
1000705 Specified Parametric Plane value of %I% is invalid. Valid values are 1,2,and 3.
38000003 No blob provided.
38000434 The solid type used for this Action,Object,Method function is invalid. It must be of a type that when created,has the default color of Blue.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_surface_extract_face(output_ids,face_list,created_ids)
##########
Description:
This function creates parametric bicubic surfaces by extracting surfaces from the faces of solids.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING face_list[] This value specifies the list of solid faces from which to extract surfaces.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
asm_const_surface_extrude(output_ids,delta,scale,angle,origin,coord_frame,num_surfaces,curve_list,created_ids)
##########
Description:
This function creates parametric bicubic surfaces by moving curves through space along a defined axis with the option of simultaneously scaling and rotating the extruded surfaces.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING delta[] This value specifies a translation vector defining the direction and magnitude of the extrusion operation.
REAL scale This value specifies the scaling factor.
REAL angle This value specifies the angle to rotate the curve around the translation vector during extrusion.
STRING origin[] This value specifies the point of origin of the extrusion.
STRING coord_frame[] This value specifies the reference coordinate frame.
INTEGER num_surfaces This value specifies the number of surfaces to create for each curve.
STRING curve_list[] This value specifies the list of curves to be extruded.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000211 The length of the Axis equals zero.
38000003 No blob provided.
38000117 An attempt to approximate a general curve with a single Parametric Cubic failed.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
---------------
asm_const_surface_glide(output_ids,scale,glide_option,director_curve,base_curve,created_ids)
##########
Description:
This function creates parametric bicubic surfaces by moving base curves along a path defined by a set of director curves translated to the origin of the base curves.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
REAL scale This value specifies the scaling factor.
INTEGER glide_option This value specifies the glide option to use: 0 = normal project glide option,and 1 = fixed logic option.
STRING director_curve[] This value specifies the list of curves along which the base curve will be swept.
STRING base_curve[] This value specifies the list of curves that will be swept along the director curves to form the surfaces.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000225 Unable to do glide option.
14000014 LpSublistNext: Attempt to proceed past last sublist in current list.
14000015 LpSublistNext: End of current list has been reached.
38000117 An attempt to approximate a general curve with a single Parametric Cubic failed.
---------------
asm_const_surface_normal(output_ids,thickness1,thickness2,origin,num_surfaces,normal_rev_direction,curve_list,created_ids)
##########
Description:
This function creates parametric bicubic surfaces defined by a set of base curves and an offset from those curves in the direction of the curvature. The offset may be constant or a linear taper.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING thickness1[] This value specifies the constant thickness or the first thickness at u=0; v=0.
STRING thickness2[] This value is set to NULL if the input value thickness1 is set to constant thickness,otherwise it is the second thickness at u=0; v=1.
STRING origin[] This value specifies the point to be used as origin of the normal vector.
INTEGER num_surfaces This value specifies the number of surfaces to be created from each curve.
LOGICAL normal_rev_direction This value is set to TRUE if the normal is to be flipped or reversed.
STRING curve_list[] This value specifies the list of curves to be swept using the normal option.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000211 The length of the Axis equals zero.
16000301 Blank string encountered.
16000302 %A% does not contain enough arguments,looking for %I% arguments.
16000303 %A% has too many arguments,looking for %I% arguments.
16000305 %A% is not a real.
38000117 An attempt to approximate a general curve with a single Parametric Cubic failed.
---------------
asm_const_surface_revolve(output_ids,axis,angle,offset,coord_frame,curve_list,created_ids)
##########
Description:
This function creates parametric bicubic surfaces by revolving curves about an axis of rotation.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING axis[] This value specifies the axis of rotation.
REAL angle This value specifies the total angle to revolve each curve.
REAL offset This value specifies the initial offset angle in degrees.
STRING coord_frame[] This value specifies the reference coordinate frame.
STRING curve_list[] This value specifies the list of curves to be revolved.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000210 Angle of rotation for a parametric entity is greater than 180 degrees.
1000211 The length of the Axis equals zero.
38000003 No blob provided.
38000117 An attempt to approximate a general curve with a single Parametric Cubic failed.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
---------------
asm_const_surface_vertex(output_ids,point1_list,point2_list,point3_list,point4_list,created_ids)
##########
Description:
This function creates parametric bicubic surfaces which are the quadrilaterals formed by four sets of vertex points.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING point1_list[] This value specifies the first set of points defining vertex 1 of each surface.
STRING point2_list[] This value specifies the second set of points defining vertex 2 of each surface.
STRING point3_list[] This value specifies the third set of points defining vertex 3 of each surface.
STRING point4_list[] This value specifies the fourth set of points defining vertex 4 of each surface.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
ge_boolean_operation(output_ids,boolean_type,target_solid,tool_solids,created_labels)
##########
Description:
This function will perform boolean operations on the target solid with the list of tool solids. The tool solids will be deleted after the operation.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
INTEGER boolean_type This value specifies the boolean operation type (1 - add,2 - subtract,3 - intersect).
STRING target_solids[] This value specifies a single solid to participate the boolean operation as the target body.
STRING tool_solids[VIRTUAL] This value specifies a list of tool solids for the boolean operation. They will be deleted automatically after the operation.
Output:
STRING created_labels[VIRTUAL] This value returns a description of the created solid identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
ge_const_solid_block(output_ids,x_length,y_length,z_length,boolean_type,target_solid,ref_coord,base_origin,created_labels)
##########
Description:
This function will create a solid block by providing a base origin,x length,y length,z,length,and a reference coordinate frame. It also provides an option to perform boolean operation with the input target solid using the created block as the tool solid.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING x_length[] This value specifies the length of the block along the x-axis of the reference coordinate frame.
STRING y_length[] This value specifies the length of the block along the y-axis of the reference coordinate frame
STRING z_length[] This value specifies the length of the block along the z-axis of the reference coordinate frame
INTEGER boolean_type This value specifies the boolean operation type (0 - no boolean operation,1 - add,2 - subtract,3 - intersect).
STRING target_solid[] This value specifies a single solid to participate the boolean operation as the target body if boolean_type is not 0.
STRING ref_coord[] The value specifies a reference coordinate frame to orient the block. The default is Coord. 0.
STRING base_origin[] The value specifies the base origin of the block.
Output:
STRING created_labels[VIRTUAL] This value returns a description of the created solid identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
ge_const_solid_cone(output_ids,height,base_radius,top_radius,thickness,boolean_type,target_solid,ref_coord,base_center,axis,created_labels)
##########
Description:
This function will create a solid cone by providing a height,base radius,top radius,base center,axis,an optional thickness,and an optional reference coordinate frame. It also provides an option to perform boolean operation with the input target solid using the created cone as the tool solid.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING height[] This value specifies the height of the cone along its axis.
STRING base_radius[] This value specifies the base radius of the cone.
STRING top_radius[] This value specifies the top radius of the cone.
STRING thickness[] This value specifies the thickness to created a hollow cone. The default value is 0.0(meaning no hollowing).
INTEGER boolean_type This value specifies the boolean operation type (0 - no boolean operation,1 - add,2 - subtract,3 - intersect).
STRING target_solid[] This value specifies a single solid to participate the boolean operation as the target body if boolean_type is not 0.
STRING ref_coord[] This value specifies an optional reference coordinate frame to orient the cone. The default is Coord. 0.
STRING base_center[] This value specifies the base center of the cone.
STRING axis[] This value specifies the axis of the cone.
Output:
STRING created_labels[VIRTUAL] This value returns a description of the created solid identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
ge_const_solid_cylinder(output_ids,height,radius,thickness,boolean_type,target_solid,ref_coord,base_center,axis,created_labels)
##########
Description:
This function will create a solid cylinder by providing a height,radius,base center,axis,an optional thickness,and an optional reference coordinate frame. It also provides an option to perform boolean operation with the input target solid using the created cylinder as the tool solid.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING height[] This value specifies the height of the cylinder along its axis.
STRING radius[] This value specifies the radius of the cylinder.
STRING thickness[] This value specifies the thickness to created a hollow cylinder. The default value is 0.0(meaning no hollowing).
INTEGER boolean_type This value specifies the boolean operation type (0 - no boolean operation,1 - add,2 - subtract,3 - intersect).
STRING target_solid[] This value specifies a single solid to participate the boolean operation as the target body if boolean_type is not 0.
STRING ref_coord[] This value specifies an optional reference coordinate frame to orient the cylinder. The default is Coord. 0.
STRING base_center[] This value specifies the base center of the cylinder.
STRING axis[] This value specifies the axis of the cylinder.
Output:
STRING created_labels[VIRTUAL] This value returns a description of the created solid identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
ge_const_solid_sphere(output_ids,radius,boolean_type,target_solid,ref_coord,center,axis,created_labels)
##########
Description:
This function will create a solid sphere by providing a radius,center point,axis,and an optional reference coordinate frame. It also provides an option to perform boolean operation with the input target solid using the created sphere as the tool solid.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING radius[] This value specifies the radius of the sphere.
INTEGER boolean_type This value specifies the boolean operation type (0 - no boolean operation,1 - add,2 - subtract,3 - intersect).
STRING target_solid[] This value specifies a single solid to participate the boolean operation as the target body if boolean_type is not 0.
STRING ref_coord[] This value specifies an optional reference coordinate frame to orient the sphere. The default is Coord. 0.
STRING center[] This value specifies the center of the sphere.
STRING axis[] This value specifies the axis of the sphere.
Output:
STRING created_labels[VIRTUAL] This value returns a description of the created solid identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
ge_const_solid_extrude(output_ids,delta,scale,angle,origin,coord_frame,surface_list,created_ids)
##########
Description:
This function creates solids by moving a surface through space along a defined axis while simultaneously scaling and rotating the created solids. Use this function to create Parasolid
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING delta[] This value specifies a translation vector defining the direction and magnitude of the extrusion operation.
REAL scale This value specifies the scaling factor.
REAL angle This value specifies the angle to rotate the surface around the translation vector during extrusion.
STRING origin[] This value specifies the point of origin of the extrusion.
STRING coord_frame[] This value specifies the reference coordinate frame.
STRING surface_list[] This value specifies the list of surfaces to be extruded.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000040 Duplicate %A% was not created at users request.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38000003 No blob provided.
38000409 The Sweep Extrude Solid builder failed to create the evaluator table. Solid was not created.
38000452 Unable to calculate a point on the solid.
38000845 Unable to acquire %I% words of virtual memory.
---------------
ge_const_solid_revolve(output_ids,axis,angle,offset,coord_frame,surface_list,created_ids)
##########
Description:
This function creates a solid of revolution by revolving a set of surfaces about an axis of rotation. Use this function to create Parasolid
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING axis[] This value specifies the axis of rotation.
REAL angle This value specifies the total angle to revolve each surface in degrees.
REAL offset This value specifies the initial offset angle in degrees.
STRING coord_frame[] This value specifies the reference coordinate frame.
STRING surface_list[] This value specifies the list of surfaces to be revolved.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000040 Duplicate %A% was not created at users request.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38000003 No blob provided.
38000407 The Sweep Arc Solid builder failed to create the evaluator table. Solid was not created.
38000452 Unable to calculate a point on the solid.
38000492 Zero length vector in Solid %I% construction.
38000845 Unable to acquire %I% words of virtual memory.
---------------
ge_const_solid_torus(output_ids,major_radius,minor_radius,boolean_type,target_solid,ref_coord,center,axis,created_labels)
##########
Description:
This function will create a solid torus by providing a major radius,minor radius,center,axis,and an optional reference coordinate frame. It also provides an option to perform boolean operation with the input target solid using the created torus as the tool solid.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING major_radius[] This value specifies the major radius of the torus.
STRING minor-radius[] This value specifies the minor radius of the torus.
STRING thickness[] This value specifies the thickness to created a hollow torus. The default value is 0.0(meaning no hollowing).
INTEGER boolean_type This value specifies the boolean operation type (0 - no boolean operation,1 - add,2 - subtract,3 - intersect).
STRING target_solid[] This value specifies a single solid to participate the boolean operation as the target body if boolean_type is not 0.
STRING ref_coord[] This value specifies a reference coordinate frame to orient the torus. The default is Coord. 0.
STRING center[] This value specifies the center of the torus.
STRING axis[] This values specifies the axis of the torus.
Output:
STRING created_labels[VIRTUAL] This value returns a description of the created solid identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
ge_const_surface_midsurface(output_ids,midsurf_option,max_thickness,solid_list,surface1_list,surface2_list,created_labels)
##########
Description:
This function will create a midsurface from a solid or a pair of surfaces.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
INTEGER midsurf_option This value specifies the edit option used to edit the midsurface. Valid values are 1 thru 3,where: 1 = midsurface will be created automatically from a solid 2= midsurface will be created from a pair of surfaces and trimmed to the bounds of the parent surfaces or solid faces. 3= midsurface will be created from a pair of surfaces and not trimmed to the bounds of the parent surfaces or solid faces.
REAL max_thickness This value specifies the maximum thickness the solid face pairs can be apart in order to calculate a midsurface between (wall thickness)
STRING solid_list[] This value specifies the list of solids to create the midsurface from.
STRING surface1_list[] This value specifies the first surface/face of a pair to create the midsurface from.
STRING surface2_list[] This value specifies the second surface/face of a pair to create the midsurface from.
Output:
STRING created_labels[VIRTUAL] This value returns a description of the created midsurface identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
sgm_const_curve_2d_arc3point_v1(output_ids,create_center,plane_list,start_list,mid_list,end_list,created_ids)
##########
Description:
This function creates circular arcs in two dimensional space,defined by starting points,midpoints,and end points.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
LOGICAL create_center This value is set to TRUE if a point is to be created at the center of the arc.
STRING plane_list[] This value specifies the construction plane of the arc.
STRING start_list[] This value specifies the start point of the arc.
STRING mid_list[] This value specifies the midpoint of the arc.
STRING end_list[] This value specifies the end point of the arc.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
38000003 No blob provided.
38000413 Zero length plane normal vector.
38000423 The three points specified are nearly collinear.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_2d_arc3point_v2(output_ids,create_center,plane_list,start_list,mid_list,end_list,project_points,created_ids)
##########
Description:
This function creates circular arcs in two dimensional space,defined by starting points,midpoints,and end points.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
LOGICAL create_center This value is set to TRUE if a point is to be created at the center of the arc.
STRING plane_list[] This value specifies the construction plane of the arc.
STRING start_list[] This value specifies the start point of the arc.
STRING mid_list[] This value specifies the midpoint of the arc.
STRING end_list[] This value specifies the end point of the arc.
LOGICAL project_points This value specifies,when set to TRUE,that the starting points are to be projected onto the plane. When this value is set to FALSE the construction plane will be translated to the starting point location but will still be parallel to the original plane.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
38000003 No blob provided.
38000413 Zero length plane normal vector.
38000423 The three points specified are nearly collinear.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_arc3point(output_ids,create_center,start_list,mid_list,end_list,created_ids)
##########
Description:
This function creates circular arcs defined by start points,midpoints,and end points.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
LOGICAL create_center This value is set to TRUE if a point is to be created at the center of the arc.
STRING start_list[] This value specifies the start point of an arc.
STRING mid_list[] This value specifies the midpoint of an arc.
STRING end_list[] This value specifies the end point of an arc.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
38000003 No blob provided.
38000423 The three points specified are nearly collinear.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_bspline(output_ids,point_list,order,interpolate,param_method,closed,created_ids)
##########
Description:
This function creates B-spline curves from sets of points.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING point_list[] This value specifies the point list.
INTEGER order This value specifies the order of the B-spline curves.
LOGICAL interpolate This value is set to TRUE if the curve is to be interpolated,or to FALSE if the curve is to be approximated.
INTEGER param_method This value specifies the parameterization method: 1 = chordal arc length,2 = modified chordal arc length,and 3 = uniform.
LOGICAL closed This value is set to TRUE if the curve is to be a closed curve.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000472 The number of points selected must be greater or equal to the order of the B-spline curve.
38000475 The maximum number of points used to construct a nurbs curve is currently limited to 1000.
---------------
sgm_const_curve_extract(output_ids,surface_list,direction,param_pos,created_ids)
##########
Description:
This function constructs curves on surfaces by extraction from a set of surfaces at a set of positions in a specified parametric direction.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING surface_list[] This value specifies the surface list from which the curves will be extracted.
INTEGER direction This value specifies the parametric direction to create the curve in: 1 = C1 direction,and 2 = C2 direction.
REAL param_pos This value specifies the parametric position in the given direction from which to extract the curve.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
38000433 A Zero length curve would have been created had the process continued. Modify application input and try again.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
1000518 Specified Parametric Direction value of %I% is invalid. Valid values are 1 and 2.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_extract_edge(output_ids,edge_list,created_ids)
##########
Description:
This function creates curves by extraction from edges of surfaces or solids.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING edge_list[] This value specifies the list of edges from which the curves are extracted.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is %A%. Unable to process request.
1000003 Line %I% does not exist. Unable to continue.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_fillet(output_ids,radius,trim_original,point1_list,point2_list,created_ids)
##########
Description:
This function constructs a fillet of a specified radius between any two co-planar curves.
Input:
STRING output_ids[] This value specifies the line ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of line IDs.
REAL radius This value specifies the fillet radius.
LOGICAL trim_original This value is set to TRUE if the original line is to be trimmed after the fillet is created.
STRING point1_list[] This value specifies the first fillet location list.
STRING point2_list[] This value specifies the second fillet location list.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000500 There must be at least one line as input. The invalid value input was %I%.
1000557 The fillet radius value is unacceptable. The radius value of %G% must be greater than the fillet tolerance value of %G%.
1000558 The fillet line with radius %G% cannot be created between the two input curves.
1000571 The fillet curve has a zero angle of rotation. The fillet cannot be created.
1000572 The fillet curve has a zero radius. The fillet cannot be created.
2001070 Unable to acquire %I% words of virtual memory.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
---------------
sgm_const_curve_involute(output_ids,axis,option,scalar1,scalar2,coord_frame,point,created_ids)
##########
Description:
This function creates a true involute curve defined as the unwinding of an imaginary string from a circular bobbin.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING axis[] This value specifies the axis of the involute curve.
INTEGER option This value specifies the option to use in creating the involute. If option = 1 the radii method is used,otherwise the angle method is used.
REAL scalar1 This value specifies a scalar value depending on the value of option. If the angle method is used,this is the angle to unwind the curve. If the radii method is used,this is the base radius of the bobbin.
REAL scalar2 This value specifies a scalar value depending on the value of option. If the angle method is used,this is the starting angle of the curve. If the radii method is used,this is the stop radius of the curve.
STRING coord_frame[] This value specifies the reference coordinate frame.
STRING point[] This value specifies the list of points to be swept.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000054 An invalid geometric entity type was used as input. The valid entity type to use is %A%. Unable to process request.
1000211 The length of the Axis equals zero.
1000226 The angle which the involute traverses must be positive.
1000227 The starting angle of the involute must be positive.
1000228 The radius of the base circle must be positive.
1000229 The stop radius of the involute must be larger than the base radius.
1000230 The point is inside the base circle.
1000231 The point is outside the stop radius of the involute.
---------------
sgm_const_curve_loft(output_ids,slope_control,point_list,slope_list1,slope_list2,created_ids)
##########
Description:
This function creates true involute curves from sets of points with end point slope control.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
LOGICAL slope_control This value is set to TRUE if the end point slope control is to be enforced.
STRING point_list[] This value specifies the point list.
STRING slope_list1[] This value specifies the vectors defining the initial slope.
STRING slope_list2[] This value specifies the vectors defining the final slope.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
sgm_const_curve_offset(output_ids,od_flag,op_method,dist1,param1,dist2,param2,ncopies,vector_list,curve_list,created_labels)
##########
Description:
This function will create constant or variable offset curves from other curves. It should be noted that while nonplanar curves could be specified,the offset will occur in the least-squares plane of the input curve. If the input curve is a straight line,then a direction vector is required.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER od_flag This value specifies the offset distance flag; 1 = Single value offset,constant distance 2 = Offset distance varying linearly
LOGICAL op_method This value specifies the offset parametrization method; =True; function of parameter value =False; function of arc length
REAL dist1 This value specifies the start offset distance.
REAL param1 This value specifies the arc length or parameter value,depending on op_methodod_flag
REAL dist2 This value specifies the end offset distance.
REAL param2 This value specifies the arc length or parameter value,depending on op_methodod_flag
INTEGER ncopies This value specified the number of copies to make of the offset curve.
STRING vector_list[] This value specifies the direction vector if the input curve is a straight line.
STRING curve_list[] This value specifies the input curve list to create the offset curve(s)from.
Output:
STRING created_labels[VIRTUAL] This value returns a description of the created curve identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
sgm_const_curve_project_v1(output_ids,curve_list,surface_list,etype,delete_original,project_method,vector,coord_frame,projection_tolerance,created_ids)
##########
Description:
This function constructs curves on a set of surfaces by projecting an existing set of curves along a projection vector onto a set of surfaces.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING curve_list[] This value specifies the list of curves to project onto the list of surfaces.
STRING surface_list[] This value specifies the list of surfaces onto which the curves are to be projected.
INTEGER etype This value specifies the entity type to project the curve to: =1; project to surface =2; project to plane
LOGICAL delete_original This value is set to TRUE if the original curves are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
INTEGER project_method This value specifies the method of defining the projection vector: 1 = the curves to be projected lie in a plane and it is desired to project the curves normal to this plane,2 = the direction of projection is normal to the surface at the point of closest approach to the curve,3 = the direction of projection is to be given by a vector,and 4 = the direction of projection is the view vector.
STRING vector[] This value specifies the projection vector.
STRING coord_frame[] This value specifies the coordinate frame for the projection vector.
REAL projection_tolerance This value specifies a tolerance parameter. The algorithm creates all curves along the projected surface so that the maximum distance lies between them is the distance defined by this value
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function can display an information popup message form with the following messages:
1000040 Duplicate %A% was not created at users request
38000412 Negating the View Vector coordinates and trying again...
This function can display a warning popup message form with the following message:
38000415 Skipping zero length Curve %I%.
This function can display a fatal popup message form with the following messages:
1000540 The projection vector has zero length.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve
38000488 Unable to manifold the curve(s)to the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_revolve(output_ids,axis,angle,offset,coord_frame,point,created_ids)
##########
Description:
This function creates arcs by revolving points about an axis of rotation.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING axis[] This value specifies the axis of rotation.
REAL angle This value specifies the total angle to revolve each point.
REAL offset This value specifies the initial offset angle.
STRING coord_frame[] This value specifies the reference coordinate frame.
STRING point[] This value specifies the list of points to be revolved.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000040 Duplicate %A% was not created at users request.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
---------------
sgm_const_surface_3edge(output_ids,curve1_list,curve2_list,curve3_list,created_ids)
##########
Description:
This function creates bi-parametric surfaces from three sets of curves defining the boundary of the surfaces.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING curve1_list[] This value specifies the first set of curves.
STRING curve2_list[] This value specifies the second set of curves.
STRING curve3_list[] This value specifies the third set of curves.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000402 The Surface Edge Surface builder failed to create the evaluator table. Surface was not created.
38000403 Bounding Curves must form a closed loop. Surface was not created.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_surface_3edge_man(output_ids,curve1_list,curve2_list,curve3_list,surface_list,cubic,created_ids)
##########
Description:
This function creates manifold surfaces from three sets of curves defining the boundary of the parametric or generalized coons surfaces.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING curve1_list[] This value specifies the first set of curves.
STRING curve2_list[] This value specifies the second set of curves.
STRING curve3_list[] This value specifies the third set of curves.
STRING surface_list[] This value specifies the surfaces on which the manifold surfaces are created.
LOGICAL cubic This value specifies,when set to TRUE,that parametric bicubic surfaces be created. When this value is set to FALSE,generalized coons surfaces will be created.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000118 An attempt to approximate a general surface with a single Parametric BiCubic failed.
38000121 Invalid format conversion flag specified for surface conversion.
38000402 The Surface Edge Surface builder failed to create the evaluator table. Surface was not created.
38000403 Bounding Curves must form a closed loop. Surface was not created.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000488 Unable to manifold the curve(s)to the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_surface_4edge(output_ids,curve1_list,curve2_list,curve3_list,curve4_list,created_ids)
##########
Description:
This function creates bi-parametric surfaces from four sets of curves defining the boundary of the surfaces.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING curve1_list[] This value specifies the first set of curves.
STRING curve2_list[] This value specifies the second set of curves.
STRING curve3_list[] This value specifies the third set of curves.
STRING curve4_list[] This value specifies the fourth set of curves.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000402 The Surface Edge Surface builder failed to create the evaluator table. Surface was not created.
38000403 Bounding Curves must form a closed loop. Surface was not created.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_surface_4edge_man(output_ids,curve1_list,curve2_list,curve3_list,curve4_list,surface_list,cubic,created_ids)
##########
Description:
This function creates manifold surfaces from four sets of curves defining the boundary of the parametric or generalized coons surfaces.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING curve1_list[] This value specifies the first set of curves.
STRING curve2_list[] This value specifies the second set of curves.
STRING curve3_list[] This value specifies the third set of curves.
STRING curve4_list[] This value specifies the fourth set of curves.
STRING surface_list[] This value specifies the surfaces on which the manifold surfaces are created.
LOGICAL cubic This value specifies,when set to TRUE,that parametric bicubic surfaces be created. When this value is set to FALSE,generalized coons surfaces will be created.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000118 An attempt to approximate a general surface with a single Parametric BiCubic failed.
38000121 Invalid format conversion flag specified for surface conversion.
38000325 The current implementation of this application does not permit the use of closed curves to represent an edge. It is suggested that the same result may be obtained by using these edges to create a trimmed surface directly.
38000402 The Surface Edge Surface builder failed to create the evaluator table. Surface was not created.
38000403 Bounding Curves must form a closed loop. Surface was not created.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000488 Unable to manifold the curve(s)to the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_surface_extract_face(output_ids,face_list,created_ids)
##########
Description:
This function creates surfaces by extraction from the faces of solids.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING face_list[] This value specifies the list of solid faces from which the surfaces are extracted.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_surface_extrude(output_ids,delta,scale,angle,origin,coord_frame,curve_list,created_ids)
##########
Description:
This function creates bi-parametric surfaces by moving curves through space along a defined axis while simultaneously scaling and rotating the created surfaces.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING delta[] This value specifies a translation vector defining the direction and magnitude of the extrusion operation.
REAL scale This value specifies the scaling factor.
REAL angle This value specifies the angle to rotate the curve around the translation vector during extrusion.
STRING origin[] This value specifies the point of origin of the extrusion.
STRING coord_frame[] This value specifies the reference coordinate frame.
STRING curve_list[] This value specifies the list of curves to be extruded.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000040 Duplicate %A% was not created at users request.
38000003 No blob provided.
38000430 The Sweep Extrude Surface builder failed to create the evaluator table. Surface was not created.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_surface_glide(output_ids,scale,glide_option,director_curve_list,base_curve_list,created_ids)
##########
Description:
This function constructs a surface by "gliding" a base curve along a director curve.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
REAL scale This value specifies the scale factor to apply to the glide.
INTEGER glide_option This value specifies the glide option: =0; Avoid twisting; eliminates one degree of freedom. =1; Invokes “fixed logic” that drags the base curve along the path without rotating. Eliminates three degrees of freedom.
STRING director_curve_list[] This value specifies the list of curves along which the base curve is to glide.
STRING base_curve_list[] This value specifies the list of base curves.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function can display an information popup message form with the following messages:
1000040 Duplicate %A% was not created at users request
This function can display a fatal popup message form with the following messages:
38000431 The Sweep Glide Surface builder failed to create the evaluator table. Surface was not created.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_surface_glide_2curve(output_ids,scale,director1_curve_list,director2_curve_list,created_ids)
##########
Description:
This function constructs a surface by "gliding" a base curve along a director curve.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
LOGICAL scale If .TRUE.,the local scaling is determined by the chordal distance between the two director curves. If .FALSE.,the base curve remains unscaled.
STRING director1_curve_list[] This value specifies the list of primary curves along which the base curve is to glide.
STRING director2_curve_list[] This value specifies the list of secondary curves which,along with the primary curves control the orientation and possibly the scaling of the base curve.
STRING base_curve_list[] This value specifies the list of base curves.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function can display an information popup message form with the following messages:
1000040 Duplicate %A% was not created at users request
This function can display a fatal popup message form with the following messages:
38000431 The Sweep Glide Surface builder failed to create the evaluator table. Surface was not created.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_surface_offset(output_ids,dist,ncopies,guide_surface,surface_list,created_labels)
##########
Description:
This function will create constant offset surfaces from other surfaces .
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
REAL dist This value specifies the distance by which the surface is normally offset.
INTEGER ncopies This value specifies the number of copies of the offset surface to make.
LOGICAL guide_surface This value specifies whether the first surface in the surface list is to be used as a guide surface to define the offset direction for all surfaces in the list.
STRING surface_list[] This value specifies the input surface list to create the offset surface(s)from.
Output:
STRING created_labels[VIRTUAL] This value returns a description of the created surface identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
sgm_const_surface_revolve(output_ids,axis,angle,offset,coord_frame,curve_list,created_ids)
##########
Description:
This function creates surfaces by revolving curves about an axis of rotation.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING axis[] This value specifies the axis of rotation.
REAL angle This value specifies the total angle to revolve each curve in degrees.
REAL offset This value specifies the initial offset angle in degrees.
STRING coord_frame[] This value specifies the reference coordinate frame.
STRING curve_list[] This value specifies the list of curves to be revolved.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000040 Duplicate %A% was not created at users request.
1000211 The length of the Axis equals zero.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
---------------
sgm_const_vector_2point(output_ids,base_point_list,tip_point_list,created_ids)
##########
Description:
This function creates vectors between two sets of points.
Input:
STRING output_ids[] This value specifies the vector ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of vector IDs.
STRING base_point_list[] This value specifies the vector base point list.
STRING tip_point_list[] This value specifies the vector tip point list.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
38000441 A Zero length vector would have been created had the process continued. Modify application input and try again.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_vector_2point_v1(output_ids,point1_list,point2_list,unit_vector,created_ids)
##########
Description:
This function creates a vector between two points with an option to create a unit vector
Input:
STRING output_ids[] This value specifies the vector ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of vector IDs.
STRING point1_list[] This value specifies the first point list.
STRING point2_list[] This value specifies the second point list.
LOGICAL unit_vector This value specifies whether the vector to be created is a unit vector
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000441 A zero length vector would have been created had the process continued Modify application input and try again.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_vector_interpolate(output_ids,curve_list,ratio,vector_count,param_method,created_ids)
##########
Description:
This function constructs vectors by interpolating along a curve.
Input:
STRING output_ids[] This value specifies the vector ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of vector IDs.
STRING curve_list[] This value specifies the list of curves to interpolate along.
REAL ratio This value specifies the vector spacing ratio (the distance defined by (nvectors to endpoint)divided by the distance defined by (startpoint to second point).
INTEGER vector_count This value specifies the number of interior vectors to create.
INTEGER param_method This value specifies the parameterization method of interpolation: =1; equal relative Arc Length. =2; equal relative parametric values.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function can display an information popup message form with the following messages:
1000040 Duplicate %A% was not created at users request
This function can display a fatal popup message form with the following messages:
1000222 There must be at least one vector as input.
1000507 Specified Parameterization Method value of %I% is invalid. Valid values are 1 and 2
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_vector_intersect(output_ids,first_plane_list,second_plane_list,vector_rev_direction,created_ids)
##########
Description:
This function creates vectors at the intersections of two sets of planes.
Input:
STRING output_ids[] This value specifies the vector ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of vector IDs.
STRING first_plane_list[] This value specifies the first list of planes to intersect with the second.
STRING second_plane_list[] This value specifies the second list of planes to intersect with the first.
LOGICAL vector_rev_direction This value specifies,when set to TRUE,that the vector direction be reversed.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
38000447 The two intersection planes are parallel.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_vector_magnitude(output_ids,magnitude_list,direction_list,base_point_list,coord_frame,created_ids)
##########
Description:
This function creates vectors from base points,directions,and magnitudes.
Input:
STRING output_ids[] This value specifies the vector ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of vector IDs.
STRING magnitude_list[] This value specifies the vector magnitude list.
STRING direction_list[] This value specifies the vector direction list.
STRING base_point_list[] This value specifies the vector base point list.
STRING coord_frame[] This value specifies the coordinate frame in which the vector will be created.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
38000441 A Zero length vector would have been created had the process continued. Modify application input and try again.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_vector_normal(output_ids,normal_option,entity_list,magnitude_list,base_point_list,created_ids)
##########
Description:
This function creates vectors that are normal to planes,surfaces,or element faces.
Input:
STRING output_ids[] This value specifies the vector ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of vector IDs.
INTEGER normal_option This value specifies the normal option: 1 = normal to a plane,2 = normal to a surface,and 3 = normal to an element face.
STRING entity_list[] This value specifies the planes,surfaces,and/or element faces used to calculate the normal vectors.
STRING magnitude_list[] This value specifies the vector magnitude list.
STRING base_point_list[] This value specifies the vector base point list.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
38000441 A Zero length vector would have been created had the process continued. Modify application input and try again.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_vector_product(output_ids,vector_list1,vector_list2,created_ids)
##########
Description:
This function creates product vectors from two sets of vectors. The generated vectors are based on the origin points of the first set of vectors.
Input:
STRING output_ids[] This value specifies the vector ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of vector IDs.
STRING vector_list1[] This value specifies the first vector list.
STRING vector_list2[] This value specifies the second vector list.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
38000441 A Zero length vector would have been created had the process continued. Modify application input and try again.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_surface_vertex(output_ids,point1_list,point2_list,point3_list,point4_list,created_ids)
##########
Description:
This function creates bi-parametric surfaces bounded by the quadrilaterals formed by four sets of vertex points.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING point1_list[] This value specifies the first set of points defining vertex 1 of each surface.
STRING point2_list[] This value specifies the second set of points defining vertex 2 of each surface
STRING point3_list[] This value specifies the third set of points defining vertex 3 of each surface.
STRING point4_list[] This value specifies the fourth set of points defining vertex 4 of each surface.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000123 The input points for the creation of a surface are invalid.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_create_curve_boundary(output_ids,construct_method,exist,created_ids)
##########
Description:
This function constructs curves from a set of picklist construct methods.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING construct_method[] This value specifies the set of construct methods made up of the resulting strings produced by the last 3 picklist items of the Geometry “Create/Surface/Curve” form.
Output:
INTEGER exist This value is set to 1 if the curve already exists.
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000049 LpParseExpression: Excess left parenthesis detected.
14000050 LpParseExpression: Excess right parenthesis detected.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000281 LpExpandPclVariables: Virtual memory is full.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000308 LpEval: Memory exhausted preparing to evaluate pick.
---------------
sgm_create_curve_bspline(output_ids,point_list,order,interpolate,param_method,closed,created_ids)
##########
Description:
This function constructs B-spline curves from sets of points.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING point_list[] This value specifies the point list.
INTEGER order This value specifies the order of the B-spline curves.
LOGICAL interpolate This value is set to TRUE if the curve is to be interpolated,or to FALSE if the curve is to be approximated.
INTEGER param_method This value specifies the parameterization method,1 = chordal arc length,2 = modified chordal arc length,and 3 = uniform.
LOGICAL closed This value is set to TRUE if the curve is to be closed.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000472 The number of points selected must be greater or equal to the order of the B-spline curve.
---------------
sgm_create_curve_chain(output_ids,curve_list,delete_original,created_ids)
##########
Description:
This function constructs chains or composite curves from a list of curves.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING curve_list[] This value specifies the curve list.
LOGICAL delete_original This value is set to TRUE if the original curves are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000201 %A% is not a recognized syntax for a Curve List.
38000445 There must be at least two curves as input to Chain. The invalid value input was %A%.
38000462 Size and complexity of the problem exceeds the available memory.
38000467 Curves to be chained are not contiguous due to a gap of %G%. The point of discontinuity has been marked.
---------------
sgm_create_curve_chain_v1(output_ids,curve_list,delete_original,segment_id,created_ids)
##########
Description:
This function creates chains or composite curves from a list of curves.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs sequentially. This value is used only if the original curve to extend is a topological edge.
STRING curve_list[] This value specifies the original curves to chain.
LOGICAL delete_original This value is set to TRUE if the original curves are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
INTEGER segment_id This value specifies the id for the graphics segment used for the creation of graphics markers.
Output:
INTEGER segment_id This value returns the id of the graphics segment id used for the creation of graphics markers.
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000201 %A% is not a recognized syntax for a Curve List.
38000445 There must be at least two curves as input to Chain. The invalid value input was %A%.
38000462 Size and complexity of the problem exceeds the available memory.
38000467 Curves to be chained are not contiguous due to a gap of %G%. The point of discontinuity has been marked.
---------------
sgm_create_curve_loft(output_ids,slope_control,point_list,slope_list1,slope_list2,created_ids)
##########
Description:
This function constructs loft-spline curves from sets of points with end point slope control.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
LOGICAL slope_control This value is set to TRUE if the end point slope control is to be enforced.
STRING point_list[] This value specifies the point list.
STRING slope_list1[] This value specifies the vectors defining the initial slope.
STRING slope_list2[] This value specifies the vectors defining the final slope.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
sgm_create_surface_composite(output_labels,surface_list,build_options,clean_tolerance,gap_tolerance,curve_start_label,loop_id,add_list,remove_list,inner_loop_list,vertex_list,delete_cons,implicit_topology,created_labels)
##########
Description:
This function creates composite trimmed surfaces.
Input:
STRING output_labels[] This value specifies the label of the surface to be created.
STRING surface_list[] This value specifies the surfaces from which the composite will be created.
INTEGER build_options This value specifies the options for the builder.
REAL clean_tolerance This value specifies the cleanup tolerance for the creation of surface boundaries.
REAL gap_tolerance This value specifies the gap distance for the surface builder.
INTEGER curve_start_label This value specifies the starting label for the boundary curves that will be created.
INTEGER loop_id This value specifies the loop ID identifying the outer boundary.
STRING add_list[] This value specifies the edge list to be added to the free boundary edges defined by the input surface list.
STRING remove_list[] This value specifies the edge list to be removed from the free boundary edges defined by the input surface list.
STRING inner_loop_list[] This value specifies the inner loop edge list.
STRING vertex_list[] This value specifies the vertex list.
LOGICAL delete_cons This value specifies,when set to TRUE,that the surfaces in the input value surface_list be deleted after the composite trimmed surfaces are created.
LOGICAL implicit_topology This value specifies,when set to TRUE,that the edges of the created surfaces are defined by the chain links. When this value is set to FALSE the chain link edges will be combined if there is slope continuity in the 2D segments.
Output:
STRING created_labels[VIRTUAL] This value returns the label of the composite surface created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000056 Curve list is blank. Input required data.
1000057 Surface list is blank. Input required data.
1000707 No surfaces were found to exist in the database as defined in the surface list. The surface list input was %A%.
38000462 Size and complexity of the problem exceeds the available memory.
38001001 No outer boundary has been selected!
38001002 Problem 2: At the red square there is no boundary curve to continue and the loop is not closed. The white square is showing the start location. White edges are already checked. Red square is showing the current position. Possible Action: Add a curve connecting the red square to a red boundary curve using the < Modify Boundary > tool.
38001003 Problem 1: At the red square there are more than one boundary curves to continue. The white square is showing the start location. White edges are already checked. Red square is showing the current position. Possible Action: Remove the appropriate edge using the < Modify Boundary > tool.
38001004 Problem 3: The red and green vertices are not part of the selected surfaces; however,the green vertices are within global tolerance and will be projected onto the surfaces. Incorrect vertex placement may result in geometric incongruency. Okay to continue?
38001005 No outer Loop has been defined!
---------------
sgm_create_surface_decompose(output_ids,object_surface,manifold_entity,point1_list,point2_list,point3_list,point4_list,created_ids)
##########
Description:
This function constructs surfaces from four sets of vertices defined from existing surfaces.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
LOGICAL object_surface This value is set to TRUE if the object to be created is a surface,and to FALSE if it is to be a simple trimmed surface.
STRING manifold_entity[] This value specifies the manifold surface.
STRING point1_list[] This value specifies the first vertex point list.
STRING point2_list[] This value specifies the second vertex point list.
STRING point3_list[] This value specifies the third vertex point list.
STRING point4_list[] This value specifies the fourth vertex point list.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000446 Unable to decompose Surface %I%. The Surface to decompose must be of a type different from Composite Trimmed Surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_create_surface_from_elems(output_id,shell_element_list,vertex_node_list,preview_mode,corner_node_ids,delete_original,deleted_ids)
##########
Description:
This function constructs a tessellated surface given a collection of shell elements.
Input:
INTEGER output_id This value specifies the surface ID to create.
STRING shell_element_list[] This value specifies the list of shell elements to create the surface from.
STRING vertex_node_list[] This value specifies the list of nodes that represent vertices.
INTEGER preview_mode If =1 returns the 4 corner nodes.
INTEGER corner_node_ids[4] If preview_mode =1,this array will have the corner node Ids.
LOGICAL delete_original This value specifies whether or not to delete the original shell elements after the surface is created.
Output:
STRING deleted_ids[VIRTUAL] This value returns the deleted element ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function can display a warning popup message form with the following messages:
61002002 There are %I% inner loops in the selected surface mesh.
61002003 Duplicate vertices with node id %I% are found on the vertex list. Only one vertex with node id %I% will be used.
61002004 The element edge defined by the nodes with ids %I% and %I% is short (length = %F%). The resulting tessellated surface may have bad parameterization.If the program fails to create a surface,edit the mesh and try again.
61002005 The triangle defined by the nodes with ids %I%,%I% and %I% is small (area = %F%). The resulting tessellated surface may have bad parameterization. If the program fails to create a surface,edit the mesh and try again
This function can display a fatal popup message form with the following messages:
61003002 No shell elements were selected. Select shell elements to create the surface.
61003003 Insufficient memory available. Close other applications and try again.
61003004 The selected mesh is invalid. Three or more elements in the mesh share the edge with nodes %I% and %I%.
61003005 There are no free element edges in the selected mesh. The mesh should be an open shell to create a surface.
61003006 The selected elements form 2 or more disconnected shell meshes. Merge the shell meshes using finite Elements Modify-Mesh-Sew to one and try again or create a surface for each shell mesh.
61003007 Failed on abort signal from client.
61003008 The selected mesh is invalid. Three or more elements in the mesh share edges. This is occurring between elements using the following nodes: %A%
61003009 Error found in disassociating edges with trias.
61003010 The hole with node %I% could not be filled.
61003011 Error on editing the mesh on a hole.
61003012 The selected vertex (Node %I%)is not on the boundary. Select boundary nodes for vertices and try again.
61003013 Duplicate edge with node ids %I% and %I% found on a boundary. Please edit the mesh and try again.
61003014 The boundary of the mesh intersects at the node %I%. Please edit the mesh and try again.
61003015 The input mesh is connected in such a way that it corresponds to the topology of a torus or other surface of higher genus. We are unable to create a surface mapping for this situation. You should partition the input into simpler sets and create two or more surfaces in place of the one just attempted.
61003016 The inner loop with node %I% could not be filled. Please check that inner loop and see if there are some overlapped elements around that loop.
61003017 Error in selecting four default vertices. Please select 4 vertices on the outer loop of the mesh and try again.
---------------
sgm_create_surface_from_elems1(output_id,shell_element_list,preview_mode,vertex_node_list,inner_loops_option,nodes_on_loop_list,delete_original,smoother_option,corner_node_ids,deleted_ids)
##########
Description:
This function constructs a tessellated surface given a collection of shell elements.
Input:
INTEGER output_id This value specifies the surface ID to create.
STRING shell_element_list[] This value specifies the list of shell elements to create the surface from.
INTEGER preview_mode If =1 returns the 4 corner nodes.
STRING vertex_node_list[] This value specifies the list of nodes that represent vertices.
INTEGER inner_loops_option This value specifies which loops are to be preserved: =0; All =1; None =2; Selected loops
STRING nodes_on_loop_list[] This value specifies the list of nodes on the loop that need to be preserved.
LOGICAL delete_original This value specifies whether or not to delete the original shell elements after the surface is created.
LOGICAL smoother_option This value specifies a which smoother algorithm to use: =0; Fast =1; Better Parametrization
INTEGER corner_node_ids[4] If preview_mode =1,this array will have the corner node Ids.
Output:
STRING deleted_ids[VIRTUAL] This value returns the deleted element ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function can display a warning popup message form with the following messages:
61002002 There are %I% inner loops in the selected surface mesh.
61002003 Duplicate vertices with node id %I% are found on the vertex list. Only one vertex with node id %I% will be used.
61002004 The element edge defined by the nodes with ids %I% and %I% is short (length = %F%). The resulting tessellated surface may have bad parameterization.If the program fails to create a surface,edit the mesh and try again.
61002005 The triangle defined by the nodes with ids %I%,%I% and %I% is small (area = %F%). The resulting tessellated surface may have bad parameterization. If the program fails to create a surface,edit the mesh and try again
This function can display a fatal popup message form with the following messages:
61003002 No shell elements were selected. Select shell elements to create the surface.
61003003 Insufficient memory available. Close other applications and try again.
61003004 The selected mesh is invalid. Three or more elements in the mesh share the edge with nodes %I% and %I%.
61003005 There are no free element edges in the selected mesh. The mesh should be an open shell to create a surface.
61003006 The selected elements form 2 or more disconnected shell meshes. Merge the shell meshes using finite Elements Modify-Mesh-Sew to one and try again or create a surface for each shell mesh.
61003007 Failed on abort signal from client.
61003008 The selected mesh is invalid. Three or more elements in the mesh share edges. This is occurring between elements using the following nodes: %A%
61003009 Error found in disassociating edges with trias.
61003010 The hole with node %I% could not be filled.
61003011 Error on editing the mesh on a hole.
61003012 The selected vertex (Node %I%)is not on the boundary. Select boundary nodes for vertices and try again.
61003013 Duplicate edge with node ids %I% and %I% found on a boundary. Please edit the mesh and try again.
61003014 The boundary of the mesh intersects at the node %I%. Please edit the mesh and try again.
61003015 The input mesh is connected in such a way that it corresponds to the topology of a torus or other surface of higher genus. We are unable to create a surface mapping for this situation. You should partition the input into simpler sets and create two or more surfaces in place of the one just attempted.
61003016 The inner loop with node %I% could not be filled. Please check that inner loop and see if there are some overlapped elements around that loop.
61003017 Error in selecting four default vertices. Please select 4 vertices on the outer loop of the mesh and try again.
---------------
sgm_create_surface_ruled(output_ids,curve1_list,curve2_list,ruled_form,auto_align,created_ids)
##########
Description:
This function constructs ruled surfaces between two sets of curves.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING curve1_list[] This value specifies the first set of ruling curves for the start of each surface.
STRING curve2_list[] This value specifies the second set of ruling curves for the end of each surface.
INTEGER ruled_form This value specifies the ruled surface parameterization form: 0 = equal relative arc length,and 1 = equal relative parametric values.
LOGICAL auto_align This value specifies,when set to TRUE,that the curves used to construct the surface should be automatically aligned.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_create_surface_trimmed(output_ids,outer_curve_list,inner_curve_list,surface,outer_curve_delete,inner_curve_delete,delete_surface,created_ids)
##########
Description:
This function constructs a trimmed surfaces from a parent surface and outer and/or inner boundary trim curves.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING outer_curve_list[] This value specifies the outer boundary trim curves.
STRING inner_curve_list[] This value specifies the inner boundary trim curves.
STRING surface[] This value specifies the parent surface to trim.
LOGICAL outer_curve_delete This value is set to TRUE if the outer boundary trim curves are to be deleted after trimmed surface is created.
LOGICAL inner_curve_delete This value is set to TRUE if the inner boundary trim curves are to be deleted after trimmed surface is created.
LOGICAL delete_surface This value is set to TRUE if the parent surface is to be deleted after trimmed surface is created.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000017 Curve %I% does not exist. Unable to continue.
1000019 Surface %I% does not exist. Unable to continue.
1000201 %A% is not a recognized syntax for a Curve List.
1000202 %A% is not a recognized syntax for a Surface List.
38000458 Loop closure required for trimming. A gap of %G% exists.
38000459 Unable to calculate least-squares plane.
38000461 Surface %I% has %I% degenerate edges. The surface may have severe geometric errors and may not be suitable for meshing operations.
38000462 Size and complexity of the problem exceeds the available memory.
38000463 Unable to manifold the trim loops to the surface.
38000464 One or more of the trim loops is degenerate.
38000466 Unable to load the surface into the database.
38000805 Unable to acquire %I% words of virtual memory.
---------------
sgm_create_surface_trimmed_v1(output_ids,outer_curve_list,inner_curve_list,surface,outer_curve_delete,inner_curve_delete,delete_surface,implicit_topology,created_ids)
##########
Description:
This function constructs a trimmed surface from a parent surface and/or outer and inner boundary curves with an option of how to define the edges of the trimmed surfaces.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING outer_curve_list[] This value specifies the outer boundary trim curves.
STRING inner_curve_list[] This value specifies the inner boundary trim curves.
STRING surface[] This value specifies the parent surface to trim.
LOGICAL outer_curve_delete This value is set to TRUE if the outer boundary trim curves are to be deleted after trimmed surface is created.
LOGICAL inner_curve_delete This value is set to TRUE if the inner boundary trim curves are to be deleted after trimmed surface is created.
LOGICAL delete_surface This value is set to TRUE if the parent surface is to be deleted after trimmed surface is created.
LOGICAL implicit_topology This value is set to TRUE if the edges are defined from the chain links,or to FALSE if the edges are to be derived from the slope continuity in the 2D segments.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000482 This application only works with one surface at a time. Subsequent selected surfaces will be ignored.
1000017 Curve %I% does not exist. Unable to continue.
1000019 Surface %I% does not exist. Unable to continue.
1000201 %A% is not a recognized syntax for a Curve List.
1000202 %A% is not a recognized syntax for a Surface List.
38000458 Loop closure required for trimming. A gap of %G% exists.
38000459 Unable to calculate least-squares plane.
38000461 Surface %I% has %I% degenerate edges. The surface may have severe geometric errors and may not be suitable for meshing operations.
38000462 Size and complexity of the problem exceeds the available memory.
38000463 Unable to manifold the trim loops to the surface.
38000464 One or more of the trim loops is degenerate.
38000466 Unable to load the surface into the database.
38000474 Only ONE outer loop (Composite Curve/Chain)may be selected at a time. Try again.
38000636 ONE outer loop (Composite Curve/Chain)must be selected. Try again.
38000805 Unable to acquire %I% words of virtual memory.
38001109 Unable to trim surface - the inner loop must lie within the outer loop. Note that an inner loop surrounding a pole resolves the ambiguity based upon its orientation.
---------------
sgm_const_curve_2d_arc2point(output_ids,arc_angle,plane_list,center_point_list,start_point_list,end_point_list,created_ids)
##########
Description:
This function constructs circular arcs in a two-dimensional space,defined by a set of construction planes,center points,starting points,and ending points.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER arc_angle This value specifies the arc angle to use: 1 = minimum arc angle,and 2 = maximum arc angle.
STRING plane_list[] This value specifies the list of planes in which to construct the arcs.
STRING center_point_list[] This value specifies the list of points defining the center points of the circular arcs.
STRING start_point_list[] This value specifies the list of points defining the starting points of the circular arcs.
STRING end_point_list[] This value specifies the list of points defining the ending points of the circular arcs.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
38000003 No blob provided.
38000413 Zero length plane normal vector.
38000424 The center point and start point define a zero radius.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_2d_arc2point_v1(output_ids,arc_method,radius,create_center,center_rev_direction,arc_angle,plane_list,center_point_list,start_point_list,end_point_list,created_ids)
##########
Description:
This function creates circular arcs in a two-dimensional space,defined by a set of construction planes,center points or a radius,starting points,and ending points.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER arc_method This value specifies the arc method: 1 = define arc by center,start and end points,and 2 = define arc by start point,end point and radius.
REAL radius This value specifies the arc radius if the input value arc_method is set to 2.
LOGICAL create_center This value is set to TRUE if the arc center point is to be created along with the arc if the input value arc_method is set to 2.
LOGICAL center_rev_direction This value is set to TRUE if the arc center is to be flipped/rotated in the counter-clockwise direction before the arc is created,if the input value arc_method is set to 2.
INTEGER arc_angle This value specifies the arc angle to use: 1 = minimum arc angle,and 2 = maximum arc angle.
STRING plane_list[] This value specifies the list of planes in which to construct the arcs.
STRING center_point_list[] This value specifies the list of points defining the center points of the circular arcs.
STRING start_point_list[] This value specifies the list of points defining the starting points of the circular arcs.
STRING end_point_list[] This value specifies the list of points defining the ending points of the circular arcs.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
38000003 No blob provided.
38000413 Zero length plane normal vector.
38000418 The Arc radius must be greater than zero. Invalid value input was %G%.
38000424 The center point and start point define a zero radius.
38000440 Invalid 2D Arc2Point method. Must be 1 or 2. Try again.
38000442 The Radius value of %G% is too small for the input start and end points. Radius magnitude must be at least %G%.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_2d_arc2point_v2(output_ids,arc_method,radius,create_center,center_rev_direction,arc_angle,plane_list,center_point_list,start_point_list,end_point_list,project_points,created_ids)
##########
Description:
This function creates circular arcs in a two-dimensional space,defined by a set of construction planes,center points or a radius,starting points,and ending points.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER arc_method This value specifies the arc method: 1 = define arc by center,start and end points,and 2 = define arc by start point,end point and radius.
REAL radius This value specifies the arc radius if the input value arc_method is set to 2.
LOGICAL create_center This value is set to TRUE if the arc center point is to be created along with the arc and if the input value arc_method is equal to 2.
LOGICAL center_rev_direction This value is set to TRUE if the arc center is to be flipped/rotated in the counter-clockwise direction before the arc is created and of the input value arc_method is equal to 2.
INTEGER arc_angle This value specifies the arc angle to use: 1 = minimum arc angle,and 2 = maximum arc angle.
STRING plane_list[] This value specifies the list of planes in which to construct the arcs.
STRING center_point_list[] This value specifies the list of points defining the center points of the circular arcs.
STRING start_point_list[] This value specifies the list of points defining the starting points of the circular arcs.
STRING end_point_list[] This value specifies the list of points defining the ending points of the circular arcs.
LOGICAL project_points This value specifies,when set to TRUE,that the center points be projected onto the plane. When this value is set to FALSE and the input value arc_method is not set to 2,the construction plane will be translated to the center point location and will still be parallel to the original plane. If this value is set to FALSE and the input value arc_method is set to 2,the construction plane is translated to the starting point location and will still be parallel to the original plane.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
38000003 No blob provided.
38000413 Zero length plane normal vector.
38000418 The Arc radius must be greater than zero. Invalid value input was %G%.
38000424 The center point and start point define a zero radius.
38000440 Invalid 2D Arc2Point method. Must be 1 or 2. Try again.
38000442 The Radius value of %G% is too small for the input start and end points. Radius magnitude must be at least %G%.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_2d_arcangles(output_ids,radius,start_angle,end_angle,plane_list,center_point_list,created_ids)
##########
Description:
This function creates circular arcs in a two-dimensional space,defined by a set of construction planes,center points,a radius,a starting angle and an end angle.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
REAL radius This value specifies the arc radius.
REAL start_angle This value specifies the arc start angle in degrees.
REAL end_angle This value specifies the arc end angle in degrees.
STRING plane_list[] This value specifies the list of planes in which to construct the arcs.
STRING center_point_list[] This value specifies the list of points defining the center points of the circular arcs.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
38000003 No blob provided.
38000413 Zero length plane normal vector.
38000424 The center point and start point define a zero radius.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_2d_arcangles_v1(output_ids,radius,start_angle,end_angle,plane_list,center_point_list,project_points,created_ids)
##########
Description:
This function creates circular arcs in a two-dimensional space,defined by a set of construction planes,center points,a radius,a starting angle and an end angle.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
REAL radius This value specifies the arc radius.
REAL start_angle This value specifies the arc start angle in degrees.
REAL end_angle This value specifies the arc end angle in degrees.
STRING plane_list[] This value specifies the list of planes in which to construct the arcs.
STRING center_point_list[] This value specifies the list of points defining the center point of the circular arc.
LOGICAL project_points This value specifies,when set to TRUE,that the center points be projected onto the plane. When this value is set to FALSE,the construction plane will be translated to the center point location and will still be parallel to the original plane.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
38000003 No blob provided.
38000413 Zero length plane normal vector.
38000424 The center point and start point define a zero radius.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_2d_arc3point(output_ids,plane_list,start_point_list,middle_point_list,end_point_list,created_ids)
##########
Description:
This function constructs circular arcs in a two-dimensional space,defined by a set of construction planes,starting points,midpoints,and ending points.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING plane_list[] This value specifies the list of planes in which to construct the arcs.
STRING start_point_list[] This value specifies the list of points defining the starting points of the circular arcs.
STRING middle_point_list[] This value specifies the list of points defining the midpoints of the circular arcs.
STRING end_point_list[] This value specifies the list of points defining the ending points of the circular arcs.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
38000003 No blob provided.
38000413 Zero length plane normal vector.
38000423 The three points specified are nearly collinear.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_2d_circle(output_ids,radius_method,radius,plane_list,radius_point_list,center_point_list,created_ids)
##########
Description:
This function constructs circles in a two-dimensional space,defined by a set of center points and a radius or a set of radii.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER radius_method This value specifies the method used to define a radius: 1 = scalar radius value,and 2 = point location.
REAL radius This value specifies the radius if the input value radius_method is equal to 1 and is ignored if the input value radius_method is set to 2.
STRING plane_list[] This value specifies the list of planes in which to construct the arcs.
STRING radius_point_list[] This value specifies the list of points defining the radius of the circle if the input value radius_method is set to 2 and is ignored if the input value radius_method is set to 1.
STRING center_point_list[] This value specifies the list of points defining the center point of the circle.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
38000003 No blob provided.
38000413 Zero length plane normal vector.
38000425 The Circle radius must be greater than zero. Invalid value input was %G%.
38000426 The center point and start point define a zero radius.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_2d_circle_v1(output_ids,radius_method,radius,plane_list,radius_point_list,center_point_list,project_points,created_ids)
##########
Description:
This function constructs circles in a two-dimensional space,defined by a set of center points and a radius or a set of radii.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER radius_method This value specifies the method used to define a radius: 1 = scalar radius value,and 2 = point location.
REAL radius This value specifies the radius if the input value radius_method is equal to 1 and is ignored if the input value radius_method is set to 2.
STRING plane_list[] This value specifies the list of planes in which to construct the arcs.
STRING radius_point_list[] This value specifies the list of points defining the radius of the circle if the input value radius_method is set to 2 and is ignored if the input value radius_method is set to 1.
STRING center_point_list[] This value specifies the list of points defining the center point of the circle.
LOGICAL project_points This value specifies,when set to TRUE,that the center points be projected onto the plane. When this value is set to FALSE,the construction plane will be translated to the center point location and will still be parallel to the original plane.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
38000003 No blob provided.
38000413 Zero length plane normal vector.
38000425 The Circle radius must be greater than zero. Invalid value input was %G%.
38000426 The center point and start point define a zero radius.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_2d_circle_v2(output_ids,radius_method,radius,plane_list,radius_point_list,center_point_list,project_points,created_ids)
##########
Description:
This function constructs circles in a two-dimensional space,defined by a set of center points and a radius or a set of radii.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER radius_method This value specifies the method used to define a radius: 1 = scalar radius value,and 2 = point location.
REAL radius This value specifies the radius if the input value radius_method is equal to 1 and is ignored if the input value radius_method is set to 2.
STRING plane_list[] This value specifies the list of planes in which to construct the arcs.
STRING radius_point_list[] This value specifies the list of points defining the radius of the circle if the input value radius_method is set to 2 and is ignored if the input value radius_method is set to 1.
STRING center_point_list[] This value specifies the list of points defining the center point of the circle.
LOGICAL project_points This value specifies,when set to TRUE,that the center points be projected onto the plane. When this value is set to FALSE,the construction plane will be translated to the center point location and will still be parallel to the original plane.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
38000003 No blob provided.
38000413 Zero length plane normal vector.
38000425 The Circle radius must be greater than zero. Invalid value input was %G%.
38000426 The center point and start point define a zero radius.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_2d_normal(output_ids,length,curve_rev_direction,plane_list,point_list,curve_list,created_ids)
##########
Description:
This function constructs curves perpendicular to an existing set of curves and passing through a set of points on the existing curves in a set of construction planes.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
REAL length This value specifies the length of the created curves.
LOGICAL curve_rev_direction This value is set to TRUE if the curve direction is to be flipped relative to the length.
STRING plane_list[] This value specifies the list of planes in which the curves will be created.
STRING point_list[] This value specifies the list of points defining the starting points of the perpendicular curves.
STRING curve_list[] This value specifies the list of curves from which the new curves are perpendicular.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
38000003 No blob provided.
38000413 Zero length plane normal vector.
38000416 The input curve length of %G% is invalid. Input length value greater than zero.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_2d_normal_v1(output_ids,length,curve_rev_direction,plane_list,point_list,curve_list,project_points,created_ids)
##########
Description:
This function constructs curves perpendicular to an existing set of curves and passing through a set of points on the existing curves in a set of construction planes.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
REAL length This value specifies the length of the created curves.
LOGICAL curve_rev_direction This value is set to TRUE if the curve direction is to be flipped relative to the length.
STRING plane_list[] This value specifies the list of planes in which the curves will be created.
STRING point_list[] This value specifies the list of points defining the starting points of the perpendicular curves.
STRING curve_list[] This value specifies the list of curves from which the new curves are perpendicular.
LOGICAL project_points This value specifies,when set to TRUE,that the curves be projected onto the plane. When this value is set to FALSE,the construction plane will be translated to the point location and will still be parallel to the original plane.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
38000003 No blob provided.
38000413 Zero length plane normal vector.
38000416 The input curve length of %G% is invalid. Input length value greater than zero.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_intersect(output_ids,intersect_option,surface1_list,surface2_list,geo_tolerance,int_tolerance,created_ids)
##########
Description:
This function constructs loft spline curves at the intersection between two sets of surfaces.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER intersect_option This value specifies the intersection option: 1 = intersect between two surfaces,and 2 = intersect between a plane and a surface.
STRING surface1_list[] This value specifies the list of surfaces to be compared for intersection with the surfaces given in the input value surface2_list. If the input value intersect_option is set to 2,this input value will provide the definitions for the intersecting planes.
STRING surface2_list[] This value specifies the list of surfaces to be compared for intersection with the surfaces or planes provided by the input value surface1_list.
REAL geo_tolerance This value specifies the maximum deviation tolerance used during the creation of the intersection curve.
REAL int_tolerance This value specifies a tolerance parameter. The algorithm creates all points along the projected curve so that the maximum distance lies between them is the distance defined by this value.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000535 No intersections found between surface(s)%A% and surface(s)%A%.
38000003 No blob provided.
38000413 Zero length plane normal vector.
38000414 Invalid curve intersection method. Must be 1 or 2. Try again.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_intersect_plane(output_ids,length,plane1_list,plane2_list,created_ids)
##########
Description:
This function constructs finite length curves at the intersection of two planes.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
REAL length This value specifies the length of the curve.
STRING plane1_list[] This value specifies the list of planes to be compared for intersection with the planes given in the input value plane2_list.
STRING plane2_list[] This value specifies the list of planes to be compared for intersection with the planes provided by the input value plane1_list.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000535 No intersections found between plane(s)%A% and plane(s)%A%.
38000003 No blob provided.
38000413 Zero length plane normal vector.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_intersect_2pln(output_ids,length,plane1_list,plane2_list,plane3_list,created_ids)
##########
Description:
This function constructs finite length curves from the intersection of two planes with an option to define the starting point of the curve at a specified point where the three input planes intersect.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
REAL length This values specifies the length of the curve.
STRING plane1_list[] This value specifies the list of planes to be compared for intersection with the planes given in the input value plane2_list.
STRING plane2_list[] This valu/nee specifies the list of planes to be compared for intersection with the planes provided by the input value plane1_list.
STRING plane3_list[] This value specifies the list of planes to be compared for intersection with the planes provided by the input value plane1_list and plane2_list. This creates the intersection point for the start point of the curve.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000535 No intersections found between plane(s)%A% and plane(s)%A%.
38000003 No blob provided.
38000413 Zero length plane normal vector.
38000450 Unable to calculate a point on the curve.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_manifold_2point(output_ids,surface_list,point1_list,point2_list,created_ids)
##########
Description:
This function constructs curves on a set of surfaces between two sets of points.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING surface_list[] This value specifies the list of surfaces to manifold the curves onto.
STRING point1_list[] This value specifies the list of points defining the starting points of the curves on the surfaces.
STRING point2_list[] This value specifies the list of points defining the end points of the curves on the surfaces.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000489 Unable to create a curve manifolded to the surface between the two input points.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_manifold_npoint(output_ids,surface,point_list,created_ids)
##########
Description:
This function constructs spline curves through a number of points manifolded onto a set of surfaces.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING surface[] This value specifies the surfaces to manifold the curves onto.
STRING point_list[] This value specifies the list of points through which the spline curves will be fitted.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000301 There must be at least two points as input. The invalid value input was %A%.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000489 Unable to create a curve manifolded to the surface between the two input points.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_curve_offset(output_ids,od_flag,op_method,dist1,param1,dist2,param2,ncopies,vector_list,curve_list,created_labels)
##########
Description:
This function will create constant or variable offset curves from other curves. It should be noted that while nonplanar curves could be specified,the offset will occur in the least-squares plane of the input curve. If the input curve is a straight line,then a direction vector is required.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER od_flag This value specifies the offset distance flag; 1 = Single value offset,constant distance 2 = Offset distance varying linearly
LOGICAL op_method This value specifies the offset parametrization method; =True; function of parameter value =False; function of arc length
REAL dist1 This value specifies the start offset distance.
REAL param1 This value specifies the arc length or parameter value,depending on op_methodod_flag
REAL dist2 This value specifies the end offset distance.
REAL param2 This value specifies the arc length or parameter value,depending on op_methodod_flag
INTEGER ncopies This value specified the number of copies to make of the offset curve.
STRING vector_list[] This value specifies the direction vector if the input curve is a straight line.
STRING curve_list[] This value specifies the input curve list to create the offset curve(s)from.
Output:
STRING created_labels[VIRTUAL] This value returns a description of the created curve identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
sgm_const_curve_project(output_ids,curve_list,surface_list,delete_original,project_method,vector,coord_frame,projection_tolerance,created_ids)
##########
Description:
This function constructs curves on a set of surfaces by projecting an existing set of curves along a projection vector onto a set of surfaces.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING curve_list[] This value specifies the list of curves to project onto the list of surfaces.
STRING surface_list[] This value specifies the list of surfaces onto which the curves are to be projected.
LOGICAL delete_original This value is set to TRUE if the original curves are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
INTEGER project_method This value specifies the method of defining the projection vector: 1 = the curves to be projected lie in a plane and it is desired to project the curves normal to this plane,2 = the direction of projection is normal to the surface at the point of closest approach to the curve,3 = the direction of projection is to be given by a vector,and 4 = the direction of projection is the view vector.
STRING vector[] This value specifies the projection vector.
STRING coord_frame[] This value specifies the coordinate frame for the projection vector.
REAL projection_tolerance This value specifies a tolerance parameter. The algorithm creates all curves along the projected surface so that the maximum distance lies between them is the distance defined by this value.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
38000412 Negating the View Vector coordinates and trying again...
38000415 Skipping zero length Curve %I%.
1000540 The projection vector has zero length.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000488 Unable to manifold the curve(s)to the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_plane_2vec(output_ids,vector1_list,vector2_list,created_ids)
##########
Description:
This function constructs a plane by the cross product of two vectors.
Input:
STRING output_ids[] This value specifies the plane ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of plane IDs.
STRING vector1_list[] This value specifies the first list of vectors.
STRING vector2_list[] This value specifies the second list of vectors.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function can display an information popup message form with the following messages:
1000040 Duplicate %A% was not created at users request
This function can display a fatal popup message form with the following messages:
10000311 No intersections found between %A% and %A%.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_plane_3point(output_ids,point1_list,point2_list,point3_list,created_ids)
##########
Description:
This function creates planes through three sets of points.
Input:
STRING output_ids[] This value specifies the plane ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of plane IDs.
STRING point1_list[] This value specifies the first set of points through which the planes will pass.
STRING point2_list[] This value specifies the second set of points through which the planes will pass.
STRING point3_list[] This value specifies the third set of points through which the planes will pass.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
38000423 The three points specified are nearly collinear.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_plane_curve(output_ids,point_option,curve_list,point_list,u_position,created_ids)
##########
Description:
This function creates planes normal to a set of curves at a set of points on the curves.
Input:
STRING output_ids[] This value specifies the plane ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of plane IDs.
INTEGER point_option This value specifies the point type: 1 = parametric position,and 2 = point.
STRING curve_list[] This value specifies the curves which the planes will be normal to.
STRING point_list[] This value specifies the points on the curves defining the plane centroids,if the input value point_option is set to 2. If the input value point_option is set to 1,this value is ignored.
REAL u_position This value specifies the parametric position of the point,if the input value point_option is set to 1. If the input value point_option is set to 2,this value is ignored.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
38000413 Zero length plane normal vector.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_plane_leastsq(output_ids,leastsq_option,entity_list,created_ids)
##########
Description:
This function creates least squares planes from a set of points,curves,or surfaces.
Input:
STRING output_ids[] This value specifies the plane ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of plane IDs.
INTEGER leastsq_option This value specifies the least squares option: 1 = from a set of points,2 = from a curve,and 3 = from a surface.
STRING entity_list[] This value specifies the set of points,curves,or surfaces from which the planes will be created.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000744 Specified Least Squares Method value of %I% is invalid. Valid values are 1,2,or 3.
38000438 No curves in the curve list define a unique least squares plane. Select a curve that is not straight.
38000448 The points in the point list do not define a unique least squares plane. Select points that are not colinear.
38000449 No surfaces in the surface list define a unique least squares plane. Select a surface with a positive area.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_plane_offset(output_ids,offset_list,nrepeat,plane_list,created_ids)
##########
Description:
This function constructs “nrepeat” planes from offsetting a plane.
Input:
STRING output_ids[] This value specifies the plane ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of plane IDs.
STRING offset_list[] This value specifies the list of offset values along the vector normal defining the location of the plane.
INTEGER nrepeat This value specifies the number of planes to offset.
STRING plane_list[] This value specifies the list of planes which will be used to offset from.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function can display an information popup message form with the following messages:
1000040 Duplicate %A% was not created at users request
This function can display a fatal popup message form with the following messages:
38000413 Zero length plane normal vector.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_plane_plane(output_ids,plane_list,vector_list,created_ids)
##########
Description:
This function constructs a plane which is normal to an existing plane and also contains a specified vector.
Input:
STRING output_ids[] This value specifies the plane ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of plane IDs.
STRING plane_list[] This value specifies the list of planes which will be normal to the new plane.
STRING vector_list[] This value specifies the list of vectors which will lie in the new plane.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function can display an information popup message form with the following messages:
1000040 Duplicate %A% was not created at users request
This function can display a fatal popup message form with the following messages:
38000157 Selected vector is normal to selected plane --Cannot construct unique normal plane.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_plane_point_vector(output_ids,point_list,vector_list,created_ids)
##########
Description:
This function creates planes from a set of points and vectors.
Input:
STRING output_ids[] This value specifies the plane ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of plane IDs.
STRING point_list[] This value specifies the point defining the location at which to create the planes.
STRING vector_list[] This value specifies the vector normals from which the planes will be created.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
38000413 Zero length plane normal vector.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_plane_tangent(output_ids,point_option,surface_list,point_list,uv_position,created_ids)
##########
Description:
This function creates planes that are tangent to a set of surfaces at a set of points on the surfaces.
Input:
STRING output_ids[] This value specifies the plane ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of plane IDs.
INTEGER point_option This value specifies the point type: 1 = parametric position,and 2 = point.
STRING surface_list[] This value specifies the set of surfaces from which the tangential planes will created.
STRING point_list[] This value specifies the point on the surface defining the plane centroid if the input value point_option is set to 2. If the input value point_option is set to 1,this value is ignored.
REAL uv_position(2)This value specifies the u and v parametric positions of the plane centroids if the input value point_option is set to 1. If the input value point_option is set to 2,this value is ignored.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
38000413 Zero length plane normal vector.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_plane_interpolate(output_ids,curve_list,space_ratio,num_planes,method,created_ids)
##########
Description:
This function creates planes by interpolation along a set of curves. The normals of the generated planes are along the curve tangents at the points of intersection between the planes and the curves.
Input:
STRING output_ids[] This value specifies the plane ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of plane IDs.
STRING curve_list[] This value specifies the set of curves from which the planes are created.
REAL space_ratio This value specifies the space ratio of the interpolation operation,if the interpolating is non-uniform.
INTEGER num_planes This value specifies the number of planes per curve to be created.
INTEGER method This value specifies the spacing for interpolating planes based on: 1 = curve arc length or 2 = curve parametric value.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000507 Specified Parameterization Method value of %I% is invalid. Valid values are 1 and 2.
1000951 There must be at least two planes as input. The invalid value input was %A%.
2001070 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_plane_vector_normal(output_ids,offset_list,vector_list,created_ids)
##########
Description:
This function creates planes from a set of vector normals.
Input:
STRING output_ids[] This value specifies the plane ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of plane IDs.
STRING offset_list[] This value specifies the offset value from the vector normal defining the location at which to create the planes.
STRING vector_list[] This value specifies the vector normals from which the planes will be created.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000053 No valid geometric entities of type %A% were used as input. Unable to process request.
38000413 Zero length plane normal vector.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_solid_2surface(output_ids,surface1_list,surface2_list,created_ids)
##########
Description:
This function constructs solids from one surface to another.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING surface1_list[] This value specifies the first set of surfaces for the start of each solid.
STRING surface2_list[] This value specifies the second set of surfaces for the end of each solid.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000452 Unable to calculate a point on the solid.
38000493 The Surface interpolating Solid builder failed to create the evaluator table. Solid was not created.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_solid_2surface_v1(output_ids,auto_align,surface1_list,surface2_list,created_ids)
##########
Description:
This function creates tri-parametric solids from one set of surfaces to another.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
LOGICAL auto_align This value specifies,when set to TRUE,that the surfaces used to construct the solids should be automatically aligned.
STRING surface1_list[] This value specifies the first set of surfaces for the start of each solid.
STRING surface2_list[] This value specifies the second set of surfaces for the end of each solid.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000147 Consecutive degenerate faces must have their degenerate edges topologically aligned in order to create a valid solid.
38000452 Unable to calculate a point on the solid.
38000493 The Surface interpolating Solid builder failed to create the evaluator table. Solid was not created.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_solid_3surface_v1(output_ids,param_method,surface1_list,surface2_list,surface3_list,created_ids)
##########
Description:
This function constructs solids which from three sets of surfaces.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
INTEGER param_method This value specifies the parameterization method to use: 1 = chord length parameterization,and 2 = uniform parameterization.
STRING surface1_list[] This value specifies the first set of surfaces for the start of each solid.
STRING surface2_list[] This value specifies the second set of surfaces for the middle of each solid.
STRING surface3_list[] This value specifies the third set of surfaces for the end of each solid.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000452 Unable to calculate a point on the solid.
38000493 The Surface interpolating Solid builder failed to create the evaluator table. Solid was not created.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_solid_3surface_v2(output_ids,auto_align,param_method,surface1_list,surface2_list,surface3_list,created_ids)
##########
Description:
This function constructs solids which from three sets of surfaces.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
LOGICAL auto_align This value specifies,when set to TRUE,that the surfaces used to construct the solids should be automatically aligned.
INTEGER param_method This value specifies the parameterization method to use: 1 = chord length parameterization,and 2 = uniform parameterization.
STRING surface1_list[] This value specifies the first set of surfaces.
STRING surface2_list[] This value specifies the second set of surfaces.
STRING surface3_list[] This value specifies the third set of surfaces.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000147 Consecutive degenerate faces must have their degenerate edges topologically aligned in order to create a valid solid.
38000452 Unable to calculate a point on the solid.
38000493 The Surface interpolating Solid builder failed to create the evaluator table. Solid was not created.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_solid_4surface_v1(output_ids,param_method,surface1_list,surface2_list,surface3_list,surface4_list,created_ids)
##########
Description:
This function constructs solids which pass through a set of four surfaces.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
INTEGER param_method This value specifies the parameterization method to use: 1 = chord length parameterization,and 2 = uniform parameterization.
STRING surface1_list[] This value specifies the first set of surfaces for the start of each solid.
STRING surface2_list[] This value specifies the second set of surfaces for the 1/3 point of each solid.
STRING surface3_list[] This value specifies the third set of surfaces for the 2/3 point of each solid.
STRING surface4_list[] This value specifies the fourth set of surfaces for the end of each solid.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000452 Unable to calculate a point on the solid.
38000493 The Surface interpolating Solid builder failed to create the evaluator table. Solid was not created.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_solid_4surface_v2(output_ids,auto_align,param_method,surface1_list,surface2_list,surface3_list,surface4_list,created_ids)
##########
Description:
This function creates tri-parametric solids from four surfaces.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
LOGICAL auto_align This value specifies,when set to TRUE,that the surfaces used to construct the solids should be automatically aligned.
INTEGER param_method This value specifies the parameterization method to use: 1 = chord length parameterization,and 2 = uniform parameterization.
STRING surface1_list[] This value specifies the first set of surfaces.
STRING surface2_list[] This value specifies the second set of surfaces.
STRING surface3_list[] This value specifies the third set of surfaces.
STRING surface4_list[] This value specifies the fourth set of surfaces.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000147 Consecutive degenerate faces must have their degenerate edges topologically aligned in order to create a valid solid.
38000452 Unable to calculate a point on the solid.
38000493 The Surface interpolating Solid builder failed to create the evaluator table. Solid was not created.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_solid_5face(output_ids,surface1_list,surface2_list,surface3_list,surface4_list,surface5_list,created_ids)
##########
Description:
This function constructs wedge shaped solids from five sets of surfaces forming their exterior faces. The surfaces can be in any order and have any parametric orientation but they must define a valid exterior face of a solid.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING surface1_list[] This value specifies the first set of surfaces defining face one of each solid.
STRING surface2_list[] This value specifies the second set of surfaces defining face two of each solid.
STRING surface3_list[] This value specifies the third set of surfaces defining face three of each solid.
STRING surface4_list[] This value specifies the fourth set of surfaces defining face four of each solid.
STRING surface5_list[] This value specifies the fifth set of surfaces defining face five of each solid.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000146 The 5 face option requires that the opposing degenerate surfaces have their degenerate edges aligned so that the degenerate solid face may be formed.
38000406 The topology of input surfaces is inappropriate for the sweep/solid/face option.
38000411 The Construct Face Solid builder failed to create the evaluator table. Solid was not created.
38000452 Unable to calculate a point on the solid.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_solid_6face(output_ids,surface1_list,surface2_list,surface3_list,surface4_list,surface5_list,surface6_list,created_ids)
##########
Description:
This function constructs solids from six sets of surfaces forming their exterior faces. The surfaces can be in any order and have any parametric orientation but they must define a valid exterior face of a solid.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING surface1_list[] This value specifies the first set of surfaces defining face one of each solid.
STRING surface2_list[] This value specifies the second set of surfaces defining face two of each solid.
STRING surface3_list[] This value specifies the third set of surfaces defining face three of each solid.
STRING surface4_list[] This value specifies the fourth set of surfaces defining face four of each solid.
STRING surface5_list[] This value specifies the fifth set of surfaces defining face five of each solid.
STRING surface6_list[] This value specifies the sixth set of surfaces defining face six of each solid.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000406 The topology of input surfaces is inappropriate for the sweep/solid/face option.
38000411 The Construct Face Solid builder failed to create the evaluator table. Solid was not created.
38000452 Unable to calculate a point on the solid.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_sweep_solid_arc(output_labels,axis,angle,offset,coord_frame,surface,created_labels)
##########
Description:
This function creates solids be sweeping surfaces about a specified axis.
Input:
STRING output_labels[] This value specifies the labels of the solids to be created.
STRING axis[] This value specifies the axis of rotation.
REAL angle This value specifies the total angle to sweep each surface.
REAL offset This value specifies the initial offset angle.
STRING coord_frame[] This value specifies the reference coordinate frame.
STRING surface[] This value specifies the list of surfaces to be swept.
Output:
STRING created_labels[VIRTUAL] This value returns the labels of the created solids.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000040 Duplicate %A% was not created at users request.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38000003 No blob provided.
38000407 The Sweep Arc Solid builder failed to create the evaluator table. Solid was not created.
38000427 The surface type used for this Action,Object,Method function is invalid. It must be of a type that when created,has the default color of Green.
38000452 Unable to calculate a point on the solid.
38000492 Zero length vector in Solid %I% construction.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_solid_decompose(output_ids,cubic,solid_face1_list,solid_face2_list,vertex1_list,vertex2_list,vertex3_list,vertex4_list,vertex5_list,vertex6_list,vertex7_list,vertex8_list,created_ids)
##########
Description:
This function creates hpats or solids between two sets of surfaces by decomposing two opposing solid faces.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
LOGICAL cubic This value is set to TRUE if the solid is to be a tri-parametric cubic hyperpatch and to FALSE if it is to be a simple solid.
STRING solid_face1_list[] This value specifies the first set of solid faces to decompose.
STRING solid_face2_list[] This value specifies the second set of solid faces to decompose.
STRING vertex1_list[] This value specifies the first set of vertices for the first face of the solids.
STRING vertex2_list[] This value specifies the second set of vertices for the first face of the solids.
STRING vertex3_list[] This value specifies the third set of vertices for the first face of the solids.
STRING vertex4_list[] This value specifies the forth set of vertices for the first face of the solids.
STRING vertex5_list[] This value specifies the first set of vertices for the second face of the solids.
STRING vertex6_list[] This value specifies the second set of vertices for the second face of the solids.
STRING vertex7_list[] This value specifies the third set of vertices for the second face of the solids.
STRING vertex8_list[] This value specifies the forth set of vertices for the second face of the solids.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_solid_extrude(output_ids,delta,scale,angle,origin,coord_frame,surface_list,created_ids)
##########
Description:
This function creates tri-parametric solids by moving a surface through space along a defined axis while simultaneously scaling and rotating the created solids.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING delta[] This value specifies a translation vector defining the direction and magnitude of the extrusion operation.
REAL scale This value specifies the scaling factor.
REAL angle This value specifies the angle to rotate the surface around the translation vector during extrusion.
STRING origin[] This value specifies the point of origin of the extrusion.
STRING coord_frame[] This value specifies the reference coordinate frame.
STRING surface_list[] This value specifies the list of surfaces to be extruded.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000040 Duplicate %A% was not created at users request.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38000003 No blob provided.
38000409 The Sweep Extrude Solid builder failed to create the evaluator table. Solid was not created.
38000427 The surface type used for this Action,Object,Method function is invalid. It must be of a type that when created,has the default color of Green.
38000452 Unable to calculate a point on the solid.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_solid_glide(output_ids,scale,glide_option,director_surface,base_surface,created_ids)
##########
Description:
This function creates tri-parametric solids by moving director surfaces along paths defined by a set of base surfaces translated to the origin of the director surface.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
REAL scale This value specifies the scaling factor.
INTEGER glide_option This value specifies the glide option to use: 0 = normal project glide option,and 1 = fixed logic option.
STRING director_surface[] This value specifies the list of surfaces along which the base surfaces will be swept.
STRING base_surface[] This value specifies the list of surfaces that will be swept along the director surfaces to form the solids.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000040 Duplicate %A% was not created at users request.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38000003 No blob provided.
38000408 The Sweep Glide Solid builder failed to create the evaluator table. Solid was not created.
38000427 The surface type used for this Action,Object,Method function is invalid. It must be of a type that when created,has the default color of Green.
38000452 Unable to calculate a point on the solid.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_solid_normal(output_ids,thickness1,thickness2,thickness3,thickness4,normal_rev_direction,surface_list,created_ids)
##########
Description:
This function creates tri-parametric solids which are defined by projecting a distance along a unique normal vector given by the thickness function,which itself has a unique value at each point on the base surface The offset may be define a constant or a linear taper.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING thickness1[] This value specifies the constant thickness or the first thickness at u=0; v=0 for the linear taper.
STRING thickness2[] This value is set to NULL if a constant thickness has been specified,otherwise it is the second thickness at u=0; v=1 for the linear taper.
STRING thickness3[] This value is set to NULL if a constant thickness has been specified,otherwise it is the third thickness at u=1; v=1 for the linear taper.
STRING thickness4[] This value is set to NULL if a constant thickness has been specified,otherwise it is the fourth thickness at u=1; v=0 for the linear taper.
LOGICAL normal_rev_direction This value is set to TRUE if the normal is to be flipped or reversed.
STRING surface_list[] This value specifies the list of surfaces to be swept using the normal option.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000040 Duplicate %A% was not created at users request.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
16000301 Blank string encountered.
16000302 %A% does not contain enough arguments,looking for %I% arguments.
16000303 %A% has too many arguments,looking for %I% arguments.
16000305 %A% is not a real.
38000003 No blob provided.
38000410 The Sweep Normal Solid builder failed to create the evaluator table. Solid was not created.
38000427 The surface type used for this Action,Object,Method function is invalid. It must be of a type that when created,has the default color of Green.
38000452 Unable to calculate a point on the solid.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_solid_nsurface_v1(output_ids,param_method,surface_list,created_ids)
##########
Description:
This function constructs a tri-parametric solid which passes through a set of surfaces.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
INTEGER param_method This value specifies the parameterization method to use: 1 = chord length parameterization,and 2 = uniform parameterization.
STRING surface_list[] This value specifies the set of surfaces from which the solid will be constructed.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000452 Unable to calculate a point on the solid.
38000493 The Surface interpolating Solid builder failed to create the evaluator table. Solid was not created.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_solid_nsurface_v2(output_ids,auto_align,param_method,surface_list,created_ids)
##########
Description:
This function constructs a tri-parametric solid which passes through a set of surfaces.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
LOGICAL auto_align This value specifies,when set to TRUE,that the surfaces used to construct the solid should be automatically aligned.
INTEGER param_method This value specifies the parameterization method to use: 1 = chord length parameterization,and 2 = uniform parameterization.
STRING surface_list[] This value specifies the set of surfaces from which the solid will be constructed.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000147 Consecutive degenerate faces must have their degenerate edges topologically aligned in order to create a valid solid.
38000452 Unable to calculate a point on the solid.
38000493 The Surface interpolating Solid builder failed to create the evaluator table. Solid was not created.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_solid_revolve(output_ids,axis,angle,offset,coord_frame,surface_list,created_ids)
##########
Description:
This function creates a solid of revolution by revolving a set of surfaces about an axis of rotation.
Input:
STRING output_ids[] This value specifies the solid ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of solid IDs.
STRING axis[] This value specifies the axis of rotation.
REAL angle This value specifies the total angle to revolve each surface in degrees.
REAL offset This value specifies the initial offset angle in degrees.
STRING coord_frame[] This value specifies the reference coordinate frame.
STRING surface_list[] This value specifies the list of surfaces to be revolved.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000040 Duplicate %A% was not created at users request.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
14000012 LpSublistAttributeGet: Attribute to retrieve is undefined.
14000013 LpSublistAttributeGet: Attribute to retrieve is not found in the current sublist.
14000208 LpSublistAttributeGet: Curve evaluator error.
14000210 LpSublistAttributeGet: Insufficient size in return area for geometry.
14000211 LpSublistAttributeGet: Surface evaluator error.
14000213 LpSublistAttributeGet: Unable to coerce geometry: unknown type.
14000282 LpSublistAttributeGet: The value for the attribute requested is NULL.
14000295 LpSublistAttributeGet: The CAD native curve can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
14000296 LpSublistAttributeGet: The CAD native surface can not be accurately approximated to within an order of magnitude of the present geometric tolerance.
38000003 No blob provided.
38000407 The Sweep Arc Solid builder failed to create the evaluator table. Solid was not created.
38000427 The surface type used for this Action,Object,Method function is invalid. It must be of a type that when created,has the default color of Green.
38000452 Unable to calculate a point on the solid.
38000492 Zero length vector in Solid %I% construction.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_surface_2curve(output_ids,curve1_list,curve2_list,created_ids)
##########
Description:
This function constructs bi-parametric surfaces from two sets of curves.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING curve1_list[] This value specifies the first set of curves.
STRING curve2_list[] This value specifies the second set of curves.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000494 The Curve interpolating Surface builder failed to create the evaluator table. Surface was not created.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_surface_2curve_man(output_ids,curve1_list,curve2_list,surface_list,object_surface,created_ids)
##########
Description:
This function creates manifold surfaces from two sets of curves and a set of surfaces.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING curve1_list[] This value specifies the first set of curves.
STRING curve2_list[] This value specifies the second set of curves.
STRING surface_list[] This value specifies the set of surfaces on which manifold surface will be created.
LOGICAL object_surface This value is set to TRUE if the objects to be created are parametric bicubic surfaces,or to FALSE if the objects to be created are simply trimmed surfaces.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000064 Overwrite of existing entity not permitted.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000118 An attempt to approximate a general surface with a single Parametric BiCubic failed.
38000121 Invalid format conversion flag specified for surface conversion.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000494 The Curve interpolating Surface builder failed to create the evaluator table. Surface was not created.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_surface_3curve_v1(output_ids,param_method,curve1_list,curve2_list,curve3_list,created_ids)
##########
Description:
This function constructs bi-parametric surfaces from three sets of curves.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
INTEGER param_method This value specifies the parameterization method to use: 1 = chord length parameterization,and 2 = uniform parameterization.
STRING curve1_list[] This value specifies the first set of curves.
STRING curve2_list[] This value specifies the second set of curves.
STRING curve3_list[] This value specifies the third set of curves.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
1000507 Specified Parameterization Method value of %I% is invalid. Valid values are 1 and 2.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000494 The Curve interpolating Surface builder failed to create the evaluator table. Surface was not created.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_surface_4curve_v1(output_ids,param_method,curve1_list,curve2_list,curve3_list,curve4_list,created_ids)
##########
Description:
This function constructs bi-parametric surfaces from four sets of curves.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
INTEGER param_method This value specifies the parameterization method to use: 1 = chord length parameterization,and 2 = uniform parameterization.
STRING curve1_list[] This value specifies the first set of curves.
STRING curve2_list[] This value specifies the second set of curves.
STRING curve3_list[] This value specifies the third set of curves.
STRING curve4_list[] This value specifies the fourth set of curves.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
1000507 Specified Parameterization Method value of %I% is invalid. Valid values are 1 and 2.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000494 The Curve interpolating Surface builder failed to create the evaluator table. Surface was not created.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_surface_ncurve_v1(output_ids,param_method,curve_list,created_ids)
##########
Description:
This function constructs a bi-parametric surface from a set of curves.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
INTEGER param_method This value specifies the parameterization method to use: 1 = chord length parameterization,and 2 = uniform parameterization.
STRING curve_list[] This value specifies the list of curves used to define the surface.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
1000507 Specified Parameterization Method value of %I% is invalid. Valid values are 1 and 2.
38000003 No blob provided.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000494 The Curve interpolating Surface builder failed to create the evaluator table. Surface was not created.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_surface_offset(output_ids,dist,ncopies,guide_surface,surface_list,created_labels)
##########
Description:
This function will create constant offset surfaces from other surfaces .
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
REAL dist This value specifies the distance by which the surface is normally offset.
INTEGER ncopies This value specifies the number of copies of the offset surface to make.
LOGICAL guide_surface This value specifies whether the first surface in the surface list is to be used as a guide surface to define the offset direction for all surfaces in the list.
STRING surface_list[] This value specifies the input surface list to create the offset surface(s)from.
Output:
STRING created_labels[VIRTUAL] This value returns a description of the created surface identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
sgm_const_surface_extract(output_ids,solid_list,param_plane,param_pos,created_ids)
##########
Description:
This function constructs bi-parametric surfaces by extraction from a set of solids at a specified parametric position and in a specified parametric direction.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING solid_list[] This value specifies the list of solids from which surfaces will be extracted.
INTEGER param_plane This value specifies the constant parametric plane in which to create the surface: 1 = constant U plane,2 = constant V plane,and 3 = constant W plane.
REAL param_pos This value specifies the parametric position in the given parametric plane from which to extract the surface.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
1000508 Specified Parametric Position value of %G% is out of range. The value must be between 0.0 and 1.0.
1000705 Specified Parametric Plane value of %I% is invalid. Valid values are 1,2,and 3.
38000003 No blob provided.
38000434 The solid type used for this Action,Object,Method function is invalid. It must be of a type that when created,has the default color of Blue.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
sgm_const_surface_edge(output_ids,curve1_list,curve2_list,curve3_list,curve4_list,created_ids)
##########
Description:
This function constructs bi-parametric surfaces from four sets of curves defining the boundaries of the surfaces.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING curve1_list[] This value specifies the first set of curves.
STRING curve2_list[] This value specifies the second set of curves.
STRING curve3_list[] This value specifies the third set of curves.
STRING curve4_list[] This value specifies the fourth set of curves.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
1000040 Duplicate %A% was not created at users request.
1000025 Error attempting to allocate virtual memory.
38000003 No blob provided.
38000402 The Surface Edge Surface builder failed to create the evaluator table. Surface was not created.
38000403 Bounding Curves must form a closed loop. Surface was not created.
38000450 Unable to calculate a point on the curve.
38000451 Unable to calculate a point on the surface.
38000845 Unable to acquire %I% words of virtual memory.
---------------
aaui.label_read(i_label_line_num)
##########
Description:
This function will retrieve the .label file line specified by i_label_line_num value
Status: Public
Input:
INTEGER i_label_line_num Specifies the line number to be read from the .labels file.
Output:
None.
STRING <Return Value> This function returns the specified line read from the .labels file.
Error Conditions:
None.
---------------
acumen_drive_page_trans(source_page,converted_page)
##########
Description:
This function serves as a PCL environment interface to the utility function that compiles or indexes XML “drive pages” for more efficient reading by the MSC Acumen software. The first argument references a source file with the .xml file extension. The second argument names the output indexed file with a .xio file extension. It is convenient for application authors to invoke this call from full featured MSC Patran by typing it into the command line.
Input:
STRING source_page[ ] This is a string representing the name of the XML drive page source file,for example,“model1.xml”
STRING converted_page[ ] This is a string representing the name of the indexed or converted drive page,for example,“model1.xio”
Output:
An indexed and compressed .xio file is written out.
---------------
aa_env.ret_acumen_app(s_acumen_app,s_acumen_master,s_acumen_ext)
##########
Description:
This function will retrieve the ACUMEN_APPLICATIONS directory and home drive page file name values. This function will also verify that the named directory and file exist. It will check date stamps on the named .xml and .xio file and translate the .xml file into a .xio file if needed.
Status: Public
Input:
None.
Output:
STRING s_acumen_app [ 1024 ]
This argument will return the ACUMEN_APPLICATIONS directory value.
STRING s_acumen_master [ 1024 ]
This argument will return the body of the home drive page file name defined by the ACUMEN_APPLICATIONS environment variable.
STRING s_acumen_ext [ 1024 ]
This argument will return the extension of the home drive page file name defined by the ACUMEN_APPLICATIONS environment variable.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function may return a nonzero value if an error occurs.
---------------
aa_env.ret_acumen_app_aa(s_acumen_app,s_acumen_master,s_acumen_ext)
##########
Description:
This function will retrieve the ACUMEN_APPLICATIONS directory and home drive page file name values. This function will verify that the named directory and file exist.
Input:
None
Output:
STRING s_acumen_app [ 1024 ] This is a string representing the name of the XML drive page source file,for example,“model1.xml”
STRING s_acumen_master[ 1024 ] This is a string representing the name of the indexed or converted drive page,for example,“model1.xio”
STRING s_acumen_ext [ 1024 ] This argument will return the extension of the home drive page file name defined by the ACUMEN_APPLICATIONS environment variable.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function may return a nonzero value if an error occurs.
---------------
aa_env.ret_acumen_brw(s_acumen_brw)
##########
Description:
This function will retrieve the directory and file name value defined by the "ACUMEN_BROWSER" environment variable. This function will verify that the named directory and file exist.
Input:
None
Output:
STRING s_acumen_brw [ 1024 ] This argument will return the path and filename of the browser application used to display Tutorial application help messages.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function may return a nonzero value if an error occurs.
---------------
aa_env.ret_acumen_home(s_acumen_home)
##########
Description:
This function will retrieve the ACUMEN_HOME value and will check for the existance of the directory named. This value is used to identify the directory that contains the Tutorial core shared component.
Input:
None
Output:
STRING s_acumen_home [ 1024 ] This argument will return the current "ACUMEN_HOME" value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function may return a nonzero value if an error occurs.
---------------
aa_env.ret_acumen_html(s_html)
##########
Description:
This function returns the value of the "HTML_IMAGE_PATH" environment variable. This value is used to provide path information to the html browser widget used to implement the Tutorial user interface.
Input:
None
Output:
STRING s_html [ 1024 ] This argument will return the current "HTML_IMAGE_PATH" value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function may return a nonzero value if an error occurs.
---------------
aa_env.ret_acumen_int(s_acumen_int)
##########
Description:
This function will retrieve the "ACUMEN_INTERFACE" value.
Input:
None
Output:
STRING s_acumen_int [ 1024 ] This argument will the "ACUMEN_INTERFACE" value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function may return a nonzero value if an error occurs.
---------------
aa_env.ret_acumen_y_scale(r_y_scale)
##########
Description:
This function returns the "ACUMEN_Y_SCALE" value. This value is used to set a scaling factor for the form that comprises the Tutorial user interface.
Input:
None
Output:
STRING r_y_scale This argument will return the either a default value or the value to which "ACUMEN_Y_SCALE" has been set.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function may return a nonzero value if an error occurs.
---------------
aa_env.set_acumen_html(s_html)
##########
Description:
This function sets the value of the "HTML_IMAGE_PATH" environment variable. This value is used to provide path information to the html browser widget used to implement the Tutorial user interface.
Input:
STRING s_html [ 1024 ] This argument will return the current "HTML_IMAGE_PATH" value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function may return a nonzero value if an error occurs.
---------------
aa_env.set_acumen_y_scale(r_y_scale)
##########
Description:
This function sets the "ACUMEN_Y_SCALE" value. This value is used to set a scaling factor for the form that comprises the Tutorial user interface.
Input:
STRING r_y_scale This argument will return the either a default value or the value to which "ACUMEN_Y_SCALE" has been set.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function may return a nonzero value if an error occurs.
---------------
aa_env.validate_path(s_src_path_file,s_trg_path_file)
##########
Description:
This function will validate the existance of file with either no path,a partial path,or a full path exists.
Input:
STRING s_src_path_file [ 1024 ] This value defines the path and file name to be validated.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function may return a nonzero value if an error occurs.
---------------
aaui_forms.html_refresh()
##########
Description:
This function forces a refresh of the html browser widget in the Tutorial user interface.
Input:
None
Output:
None
---------------
acumen_drive_page_trans(source_page,converted_page)
##########
Description:
This function compiles or indexes XML Tutorial drive pages efficient reading by the Tutorial software.
Input:
STRING source_page[ ] This is a string representing the name of the XML drive page source file,for example: “model1.xml”
STRING converted_page[ ] This is a string representing the name of the converted drive page,for example: “model1.xio”
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function will return a nonzero value if an error occurs. When an xio file is loaded the Tutorial code will automatically convert an xml drive page into an xio file if the xml file has a time stamp identifying it as newer than the xio file or if the xio file is missing. This makes it very easy to edit an xml file then see the results while a Tutorial application is running. Distributing xio pages without xml files will allow applications to be delivered without source files and preventing the application from being modified.
---------------
get_acumen_app(s_app)
##########
Description:
This function returns the "ACUMEN_APPLICATIONS" value.
Input:
None
Output:
STRING s_app [1024] This string will return: 1. The value of the the acumen app string if set. 2. The value of the "ACUMEN_APPLICATIONS" environment variable if it is set and the acumen app string has not been set or is zero length. 3. A default value of "ACUMEN_HOME"/tutorial_apps/tutorial.xio 4. A value of "tutorial_apps/tutorial.xio"
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function will return a nonzero value if an error occurs.
---------------
get_acumen_brw(s_brw)
##########
Description:
This function returns the "ACUMEN_BROWSER" value.
Input:
None
Output:
STRING s_brw [1024] This string will return: 1. The value of the the acumen browser string if set. 2. The value of the "ACUMEN_BROWSER" environment variable if it is set and the acumen browser string has not been set or is zero length.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function will return a nonzero value if an error occurs.
---------------
get_acumen_debug(i_debug)
##########
Description:
This function returns the "ACUMEN_DEBUG" value.
Input:
None
Output:
INTEGER i_debug This value is used to control or turn on the listing of debug information. This function will return: 1. The value of the the acumen debug value if set. 2. The value of the "ACUMEN_DEBUG" environment variable if it is set and the acumen browser string has not been set or is zero length.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function will return a nonzero value if an error occurs.
---------------
get_acumen_home(s_acumen_home)
##########
Description:
This function will retrieve the ACUMEN_HOME value without checking for the existance of the directory named. This value is used to identify the directory that contains the Tutorial core shared component.
Input:
None
Output:
INTEGER s_acumen_home [ 1024 ] This argument will return the current "ACUMEN_HOME" value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function will return a nonzero value if an error occurs.
---------------
get_acumen_int(s_acumen_int)
##########
Description:
This function will retrieve the "ACUMEN_INTERFACE" value.
Input:
None
Output:
INTEGER s_acumen_int [ 1024 ] This argument will the "ACUMEN_INTERFACE" value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function will return a nonzero value if an error occurs.
---------------
get_acumen_y_scale(r_y_scale)
##########
Description:
This function returns the "ACUMEN_Y_SCALE" value. This value is used to set a scaling factor for the form that comprises the Tutorial user interface.
Input:
None
Output:
INTEGER r_y_scale This argument will return the either a default value or the value to which "ACUMEN_Y_SCALE" has been set.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function will return a nonzero value if an error occurs.
---------------
set_acumen_app(s_app)
##########
Description:
This function sets the "ACUMEN_APPLICATIONS" value.
Input:
STRING s_app [1024] The value to which "ACUMEN_APPLICATONS" is set.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function will return a nonzero value if an error occurs.
---------------
set_acumen_brw(s_brw)
##########
Description:
This function sets the "ACUMEN_BROWSER" value.
Input:
STRING s_brw [1024] This string is used to set the "ACUMEN_BROWSER" value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function will return a nonzero value if an error occurs.
---------------
set_acumen_debug(i_debug)
##########
Description:
This function sets the "ACUMEN_DEBUG" value.
Input:
STRING i_debug This value is used to control or turn on the listing of debug information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function will return a nonzero value if an error occurs.
---------------
set_acumen_home(s_acumen_home)
##########
Description:
This function set the ACUMEN_HOME value.
Input:
STRING s_acumen_home [ 1024 ] This argument will set the current "ACUMEN_HOME" value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function will return a nonzero value if an error occurs.
---------------
set_acumen_int(s_acumen_int)
##########
Description:
This function will set the "ACUMEN_INTERFACE" value.
Input:
STRING s_acumen_int [ 1024 ] This argument will the "ACUMEN_INTERFACE" value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function will return a nonzero value if an error occurs.
---------------
aa_env.ret_acumen_brw(s_acumen_brw)
##########
Description:
This function will retrieve the acumen_browser directory and file name value. This function will verify that the named directory and file exist.
Status: Public
Input:
None.
Output:
STRING s_acumen_brw [ 1024 ]
This argument will return the path and filename of the browser application used to display MSC Acumen application help messages.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function may return a nonzero value if an error occurs.
---------------
aa_env.ret_acumen_home(s_acumen_home)
##########
Description:
This function will retrieve the acumen_home directory value and will check for the existance of the directory used to contain the MSC Acumen core shared component.
Status: Public
Input:
None.
Output:
STRING s_acumen_home [ 1024 ]
This argument will return the current acumen_home value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function will return a nonzero value if an error occurs.
---------------
aa_env.ret_acumen_int(s_acumen_int)
##########
Description:
This function will retrieve the acumen_interface value
Status: Public
Input:
None.
Output:
STRING s_acumen_int [1024 ] This argument will return the path and filename of the browser application used to display MSC Acumen application help messages.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function may return a nonzero value if an error occurs.
---------------
aa_env.validate_path(s_src_path_file,s_trg_path_file)
##########
Description:
This function will validate the existance of file with either no path,a partial path,or a full path really exists.
Status: Public
Input:
STRING s_src_path_file [ 1024 ]
Output:
STRING s_trg_path_file [ 1024 ]
This value returns a string representing the path used for the test.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function may return a nonzero value if an error occurs.
---------------
timer_on()
##########
Description:
Starts the timer.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
timer_off()
##########
Description:
Stops timer and reports time to xterm since last call to timer_on().
Input:
None.
Output:
INTEGER <Return Value> Accumulated CPU time elapsed for all calls to timer_on()and timer_off()during the session.
Error Conditions:
None.
---------------
string_newline_count(chars,nl)
##########
Description:
Count lines in string.
Input:
STRING chars[] String to count number of lines from.
Output:
INTEGER nl Number of new lines.
Error Conditions:
None.
---------------
string_newline_position(chars,pos)
##########
Description:
This function will return the position of any new line characters in a string.
Input:
STRING chars[] This value specifies the string which will have its new line characters counted.
Output:
INTEGER pos()This value returns the positions of any new line characters in the string. This array should be allocated with at least the same number of offsets as there are characters in the input string chars. This array should be initialized to zero before this function is called.
Error Conditions:
None.
---------------
ga_entities_string_format(entitytype,dblist,range,number,entitylist)
##########
Description:
Converts an integer list of a given entity type to a character string.
Input:
INTEGER entitytype The Type Code from dbtypes.h.
INTEGER dblist ()List of database labels.
INTEGER range (3)Range of member labels to return (1,2)and max size of conversion string (3).
INTEGER number Number of entity labels in database list.
Output:
STRING entitylist[] Formatted integer-to-character converted labelist.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
7000127-> Variable is not a virtual string.
8107002-> Last command aborted.
---------------
ga_entity_get_by_type(entity_type,orphan,label_count,entity_labels)
##########
Description:
This function will return all of the labels defined for entities of a specific type.
Input:
INTEGER entity_type This value specifies a type code. The type codes are listed in the dbtypes.h include file.
LOGICAL orphan This value specifies,when set to TRUE,that the count of all labels,including the orphan labels,will be returned. When this value is set to FALSE,the count of non-orphaned labels will be returned.
INTEGER label_count This value specifies the number of offsets defined for the output value entity_labels.
Output:
INTEGER label_count This value returns the number of labels specified by the input values entity_type and orphan.
INTEGER entity_labels (label_count)This value returns the list of entity labels specified by the input values entity_type and orphan.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000134-> The specified entity type was not found.
---------------
uil_list_union_expr(operator,in_str1,in_str2,out_str)
##########
Description:
This function updates two input strings returning a combined string.
Input:
STRING operator[ ] Operation flag. “A” for adding two strings. “R” for subtracting one string from another. “C” for removing repeated strings.
STRING in_str1[ ] This string contains an expression to be modified by in_str2.
STRING in_str2[ ] This string contains an expression to use to operate on in_str1
Output:
STRING out_str[ ] This value returns the created ID list (string).
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 Memory Error List Processor Fetcher error List Processor Error
2
3
---------------
sec_is_product_in_matrix(product)
##########
Description:
To ascertain if the given product is within the product matrix.
Input:
STRING product[] Name of product to query.
Output:
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
None.
---------------
sec_is_product_licensed(product)
##########
Description:
Determines whether a given product has a current license.
Input:
STRING product[] Registered product name.
Output:
INTEGER <Return Value> Returns 0 if product is licensed.
Error Conditions:
None.
---------------
sec_license_type(product,version)
##########
Description:
To return the license type for a previously allocated license.
Input:
STRING product[] Name of product to request or ““ for last allocated license.
STRING version[] Version of product to request or ““ for last allocated license.
Output:
INTEGER <Return Value> 0: license for this product/version is not currently allocated. Else: NETLS_ANY NETLS_NODELOCKED NETLS_CONCURRENT NETLS_COMPOUND	 NETLS_USEONCE NETLS_USAGE.
Error Conditions:
None.
---------------
rpc_add_server(server,prog_num,prog_ver,host)
##########
Description:
rpc_add_server “registers” a service name (server)and associates it with a program number,program version and server host. This service name may be used later. Typically,all servers will be registered during start-up processing. This does not cause the server to start.
Input:
STRING server[] Name of RPC server.
INTEGER prog_num Server program number.
INTEGER prog_ver Server program version.
STRING host[] Host where server will run.
Output:
INTEGER <Return Value> Integer indicating the success or failure of the routine.
Error Conditions:
Success(0)-> registered OK
47000001-> Malloc failure (FATAL)
47000004-> RPC exists,warning only (ignore)
---------------
rpc_init_client(server,handle)
##########
Description:
rpc_init_client returns a handle to be used for all server communication. It initializes the client/server communication link and data structures and will cause the server to start execution.
Input:
STRING server[] Name of RPC server program.
Output:
INTEGER handle Handle used by client to communicate with server.
INTEGER <Return Value> Integer indicating the success or failure of the routine.
Error Conditions:
Success(0)-> registered OK
47000004-> server not registered
47000001->Malloc failure (FATAL)
47000003->Client create error (FATAL)
---------------
rpc_call(handle)
##########
Description:
rpc_call will send make an RPC (remote procedure call). The client’s output data will be sent and the client will wait for a response from the server.
Input:
INTEGER handle Pointer to client/server communication structure.
Output:
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
Success(0)-> Registered OK
47000008-> RPC call failure.
---------------
rpc_timeout(handle,seconds)
##########
Description:
rpc_timeout will change the amount of time before all subsequent rpc_call()s will timeout.
Input:
INTEGER handle Server handle.
INTEGER seconds Timeout in seconds.
Output:
LOGICAL <Return Value> FALSE - timeout setting failed TRUE - timeout successful.
Error Conditions:
None.
---------------
rpc_put_bool_array(handle,value,count)
##########
Description:
rpc_put_bool_array will put the number of booleans as indicated by count from the array value into the output stream.
Input:
INTEGER status Pointer to client/server communications structure.
LOGICAL value(5)Array of booleans to put to the type data stream.
INTEGER count Number of booleans to send
Output:
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
47000001-> Malloc Failure (FATAL)
---------------
rpc_put_int_array(handle,value,count)
##########
Description:
rpc_put_int_array will put the number of integers as indicated by count from the array value into the output stream.
Input:
INTEGER status Pointer to client/server communications structure.
INTEGER value(5)Array of integers to put to the data stream.
INTEGER count Number of integers to send.
Output:
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
47000001-> Malloc Failure (FATAL)
---------------
rpc_put_real_array()
##########
Description:
rpc_put_real_array will put the number of reals as indicated by count from the array value into the output stream
Input:
INTEGER handle Pointer to client/server communications structure.
REAL value(count)Array of reals to put to the data stream.
INTEGER count Number of reals to send.
Output:
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
47000001-> Malloc failure (FATAL)
---------------
rpc_put_boolean(handle,value)
##########
Description:
rpc_put_boolean will put a single boolean into the output stream.
Input:
INTEGER handle Pointer to client/server communications structure.
LOGICAL value Boolean value to put to the data stream.
Output:
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
47000001-> Malloc failure (FATAL)
---------------
rpc_put_command(handle,value)
##########
Description:
rpc_put_command will put a command value into the output stream.
Input:
INTEGER handle Pointer to client/server communications structure.
INTEGER value Command value to put to the data stream.
Output:
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
47000001-> Malloc failure (FATAL)
---------------
rpc_put_integer(handle,value)
##########
Description:
rpc_put_integer will put an integer value into the output stream.
Input:
INTEGER handle Pointer to client/server communications structure.
INTEGER value Integer value to put to the data stream.
Output:
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
47000001-> Malloc failure (FATAL)
---------------
rpc_put_real(handle,value)
##########
Description:
rpc_put_real will put a real value into the output stream.
Input:
INTEGER handle Handle to server.
INTEGER value Real value.
Output:
INTEGER <Return Value> Success (0)
Error Conditions:
47000001-> Malloc failure (FATAL)
---------------
rpc_put_status(handle,value)
##########
Description:
rpc_put_status will put a status value into the output stream.
Input:
INTEGER handle Pointer to client/server communications structure.
INTEGER value Status code to put to the data stream.
Output:
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
47000001-> Malloc failure (FATAL)
---------------
rpc_put_string(handle,value)
##########
Description:
rpc_put_string will put a string value into the output stream.
Input:
INTEGER handle Pointer to client/server communications structure.
STRING value[] String value to put to the data stream.
Output:
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
47000001-> Malloc failure (FATAL)
---------------
rpc_clear_output(handle)
##########
Description:
rpc_clear_output will reset the output data stream. Any unsent data will be lost.
Input:
INTEGER handle Pointer to client/server communications structure.
Output:
None
Error Conditions:
None.
---------------
rpc_get_bool_array(handle,value,[count])
##########
Description:
rpc_get_bool_array will copy a boolean array from the input stream. The number of elements copied will be the lesser of the number in the input stream or the array size. Additionally,the number of elements in the input stream will be placed in count (unless omitted).
Input:
INTEGER handle Pointer to client/server communications structure.
Output:
LOGICAL value(count)Array of booleans.
INTEGER count Num of booleans in input stream (Optional).
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
47000001-> Malloc failure (FATAL)
47000006-> warning,end of input
47000005-> warning,type mismatch
---------------
rpc_get_int_array(handle,value [,count])
##########
Description:
rpc_get_int_array will copy an integer array from the input stream. The number of elements copied will be the lesser of the number in the input stream or the array size. Additionally,the number of elements in the input stream will be placed in count (unless omitted).
Input:
INTEGER handle Pointer to client/server communications structure.
Output:
INTEGER value Array of integers.
INTEGER count Number of integers in input stream (Optional).
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
47000001-> Malloc failure (FATAL)
47000006-> warning,end of input
47000005-> warning,type mismatch
---------------
rpc_get_real_array(handle,value [,count])
##########
Description:
rpc_get_real_array will copy a real array from the input stream. The number of elements copied will be the lesser of the number in the input stream or the array size. Additionally,the number of elements in the input stream will be placed in count (unless omitted).
Input:
INTEGER handle Pointer to client/server communications structure.
Output:
REAL value()Array of reals.
INTEGER count Number of reals in input stream (Optional).
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
47000001-> Malloc failure (FATAL)
47000006-> warning,end of input
47000005-> warning,type mismatch
---------------
rpc_get_boolean(handle,value)
##########
Description:
rpc_get_boolean will get a single boolean from the input stream.
Input:
INTEGER handle Pointer to client/server communications structure.
Output:
LOGICAL value Boolean value.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
47000001-> Malloc failure (FATAL)
47000006-> warning,end of input
47000005-> warning,type mismatch
---------------
rpc_get_command(handle,value)
##########
Description:
rpc_get_command will get a command from the input stream.
Input:
INTEGER handle Pointer to client/server communications structure.
Output:
INTEGER value Command value.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
47000001-> Malloc failure (FATAL)
47000006-> warning,end of input
47000005-> warning,type mismatch
---------------
rpc_get_integer(handle,value)
##########
Description:
rpc_get_integer will get a integer from the input stream.
Input:
INTEGER handle Pointer to client/server communications structure.
Output:
INTEGER value Integer value.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
47000001-> Malloc failure (FATAL)
47000006-> warning,end of input
47000005-> warning,type mismatch
---------------
rpc_get_real(handle,value)
##########
Description:
rpc_get_real will get a real value from the input stream.
Input:
INTEGER handle Pointer to client/server communications structure.
Output:
REAL value Real value.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
47000001-> Malloc failure (FATAL)
47000006-> warning,end of input
47000005-> warning,type mismatch
---------------
rpc_get_status(handle,value)
##########
Description:
rpc_get_status will get a status from the input stream.
Input:
INTEGER handle Pointer to client/server communications structure.
Output:
INTEGER value Status value.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
47000001-> Malloc failure (FATAL)
47000006-> warning,end of input
47000005-> warning,type mismatch
---------------
rpc_get_string(handle,value)
##########
Description:
rpc_get_string will get a string from the input stream.
Input:
INTEGER handle Pointer to client/server communications structure.
Output:
STRING value[] String value.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
47000001-> Malloc failure (FATAL)
47000006-> warning,end of input
47000005-> warning,type mismatch
---------------
rpc_inquire_count(handle,count)
##########
Description:
rpc_inquire_count will determine how many item remain in the input stream. Each different data type (integer,status,real array,etc.)counts as one.
Input:
INTEGER handle Pointer to client/server communications structure.
Output:
INTEGER count Number of items remaining in the input stream.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
47000001-> Malloc failure (FATAL)
47000006-> warning,end of input
47000005-> warning,type mismatch
---------------
rpc_inquire_item(handle,type[,count])
##########
Description:
rpc_inquire_item will return the type of the current input stream item and optionally,its size or count(see the available data types listed at the beginning of thissection). The count will be 1 for all simple datatypes. A string will have a size equal to the number of bytes required to represent it plus 1. Arrays will have a count equal to the number of elements in the array.
Input:
INTEGER handle Pointer to client/server communications structure.
Output:
INTEGER type Type of data in current list item.
INTEGER count Number of items in current list item.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
47000001-> Malloc failure (FATAL)
47000006-> warning,end of input
47000005-> warning,type mismatch
---------------
math_get_no_data_null(rval)
##########
Description:
Return the no valid value real number.
Input:
None
Output:
REAL rval The value that represents no valid real.
Error Conditions:
None.
---------------
math_is_no_data_null(rval)
##########
Description:
Return True if the input is the math no data null value,False otherwise.
Input:
REAL rval The value to check against the no valid real value.
Output:
REAL rval The value to check against the no valid real value.
LOGICAL <Return Value> TRUE if value is NULL.
Error Conditions:
None.
---------------
math_mat_add(matrix3,matrix1,matrix2,dim1,dim2)
##########
Description:
This function adds the two matrices into the third matrix.
Input:
REAL matrix1(dim1,dim2)First matrix to be added.
REAL matrix2(dim1,dim2)Second matrix to be added.
INTEGER dim1 Dimensional values.
INTEGER dim2 Dimensional values.
Output:
REAL matrix3(dim1,dim2)Resultant matrix after the addition
---------------
math_mat_invert(matrix ,dim,tol,i_return_value)
##########
Description:
This function inverts the matrix.
Input:
REAL matrix(dim,dim)Matrix to be inverted.
INTEGER dim Dimensional value.
REAL tol System tolerance for singularity checking.
Output:
REAL matrix(dim,dim)Resultant matrix after inversion.
INTEGER i_return_value 0 for success of function
---------------
math_mat_mult(matrix1,matrix2,matrix3,dim1,dim2,dim3)
##########
Description:
This function multiplies two matrices assuming PCL (row,column)array ordering.
Input:
REAL matrix1(dim1,dim2)First matrix to be multiplied.
REAL matrix2(dim2,dim3)Second matrix to be multiplied.
INTEGER dim1 Dimensional value.
INTEGER dim2 Dimensional value.
INTEGER dim3 Dimensional value.
Output:
REAL matrix3(dim1,dim3)Resultant matrix after multipication.
---------------
math_mat_mult_f(matrix1,matrix2,matrix3,dim1,dim2,dim3)
##########
Description:
This function multiplies two matrices assuming FORTRAN (column,row)array ordering.
Input:
REAL matrix1(dim1,dim2)First matrix to be multiplied.
REAL matrix2(dim2,dim3)Second matrix to be multiplied.
INTEGER dim1 Dimensional value.
INTEGER dim2 Dimensional value.
INTEGER dim3 Dimensional value.
Output:
REAL matrix3(dim1,dim3)Resultant matrix after multipication.
---------------
math_mat_transp_in_place(matrix,dim)
##########
Description:
This function transposes a matrix.
Input:
REAL matrix(dim,dim)Matrix to be transposed.
INTEGER dim Dimensional value.
Output:
REAL matrix(dim,dim)Transposed matrix.
---------------
math_vec_len(vector)
##########
Description:
This function computes the length of a vector.
Input:
REAL ARRAY vector(3)Three dimensional vector
Output:
REAL <Return Value> Length of the vector
Error Condition:
None
---------------
math_vec_norm(syseps,vector)
##########
Description:
This function normalizes a three dimensional vector.
Input:
REAL syseps The system epsilon,used to determine when a floating point number is essentially zero,as far as the system is concerned.
REAL ARRAY vector(3)Three dimensional vector
Output:
REAL ARRAY vector(3)The normalized three dimensional vector
INTEGER <Return Value> Return value is 1 if the length of the vector is zero,otherwise 0.
Error Condition:
None
---------------
mth_vec_add(dim,vector1,vector2,vector3)
##########
Description:
This function computes the sum of two n-dimensional vectors.
Input:
INTEGER dim Dimensional value of vectors.
REAL ARRAY vector1(dim)First vector to be added
REAL ARRAY vector2(dim)Second vector to be added
Output:
REAL ARRAY vector3(dim)Resultant vector
Error Condition:
None
---------------
mth_vec_cross_prod(vector1,vector2,vector3,dim)
##########
Description:
This function computes the cross product of two 3-dimensional vector arrays.
Input:
INTEGER dim Dimensional value of vectors.
REAL ARRAY vector1(dim,3)First vector.
REAL ARRAY vector2(dim,3)Second vector.
Output:
REAL vector3(dim,3)Resultant cross product vector.
Error Condition:
None
---------------
mth_vec_dot_prod(vector1,vector2)
##########
Description:
This function computes the dot product of two 3-dimensional vectors.
Input:
REAL ARRAY vector1(3)First vector.
REAL ARRAY vector2(3)Second vector.
Output:
REAL <Return Value> Resultant dot product real value.
Error Condition:
None
---------------
mth_vec_length(vector)
##########
Description:
This function computes the length of a vector.
Input:
REAL ARRAY vector(3)Three dimensional vector.
Output:
REAL <Return Value> Length of the vector.
Error Condition:
None
---------------
mth_vec_scale(scale_factor,n,vector)
##########
Description:
This function scales a vector by a scale factor.
Input:
REAL scale_factor Scale factor value.
REAL ARRAY vector(n)Three dimensional vector.
INTEGER n Dimensional value.
Output:
REAL vector(n)The scaled vector.
Error Condition:
None
---------------
util_equal_real(a,b,nsig)
##########
Description:
Determine if a and b are equal out to NSIG significant digits.
Input:
REAL a Test values.
REAL b Comparison value.
INTEGER nsig Number of significant digits.
Output:
LOGICAL <Return Value> Returns TRUE if a and b are equal to the nsig significant digit,FALSE otherwise.
Error Conditions:
None.
---------------
util_real_equal_null(val)
##########
Description:
Test if a real value is null.
Input:
REAL val Value to test.
Output:
LOGICAL <Return Value> Returns TRUE if input value is null.
Error Conditions:
None.
---------------
util_rounder(rval,nsigd,rout)
##########
Description:
Round off RVAL to NSIGD significant digits in ROUT.
Input:
REAL rval The value to be rounded.
INTEGER nsigd Number of significant digits NSIGD must be positive to get a meaningful answer. If it is not,a warning will be issued that NSIGD will be assumed to be one.
Output:
REAL rout Rounded value of RVAL.
INTEGER <Return Value> Return status (=0 if no error).
Error Conditions:
None.
---------------
array_copy_real(array1,array2,n)
##########
Description:
This function copies all n elements from real array array1 to real array array2.
Input:
REAL array1(n)Source array.
INTEGER n Number of elements in source array.
Output:
REAL array2(n)Resultant array.
Error Condition:
None
---------------
array_del_zero_int(array,numval)
##########
Description:
This function deletes all zeros from an integer array.
Input:
INTEGER ARRAY array(numval)Source array.
INTEGER numval Number of elements in source array.
Output:
INTEGER ARRAY array(numval)Resultant array with zeros deleted.
INTEGER numval Adjusted number of elements in resultant array.
Error Condition:
None
---------------
array_fill_int(array,n,dim)
##########
Description:
This function sets each of n elements of an array to a given input value.
Input:
INTEGER ARRAY array(dim)Source array.
INTEGER ARRAY dim Number of elements in source array.
INTEGER ARRAY n Input value for the filled array.
Output:
REAL ARRAY array(dim)Resultant array filled by input value.
Error Condition:
None
---------------
array_fill_zero_int(array,n)
##########
Description:
Set every component in an integer array to 0.
Input:
INTEGER n Array size.
Output:
INTEGER array()Array set to zero.
Error Conditions:
None.
---------------
array_fill_zero_real(array,dim)
##########
Description:
This function sets each of the elements of the array to zero real values.
Input:
REAL array(dim)Source array.
INTEGER dim Number of elements in source array.
Output:
REAL array(dim)Resultant array with zero values.
Error Condition:
None
---------------
array_real_fill_null(array,n)
##########
Description:
Set every component in a real array to the null value.
Input:
INTEGER n Array size.
Output:
REAL array()Array filled with null values.
Error Conditions:
None.
---------------
array_sort_and_del_dupl_int(array,n,dim)
##########
Description:
This function sqeezes all duplicate values from the first n locations of an unsorted integer array. This function does not exist in PatranV9.0. It works in PatranV8.5.
Input:
INTEGER ARRAY array(dim)Array to be sqeezed.
INTEGER dim Actual number of elements in array.
INTEGER n Number of array elements to be considered.
Output:
INTEGER ARRAY array(dim)Sorted array with no duplicates.
INTEGER n Adjusted element count.
Error Condition:
None
---------------
ui_get_help(wid,help)
##########
Description:
Get the help keyword registered for the given widget.
Input:
widget wid Pointer to the widget.
Output:
STRING help[] Keyword used for searching.
---------------
ui_register_help(wid,help)
##########
Description:
Register help for the given widget.
Input:
widget wid Pointer to the widget.
STRING help[] Keyword used for searching.
Output:
none
---------------
ui_add_help(keyword,path,marker)
##########
Description:
Adds a record to the help table,providing the connection from the keyword in the widget to the help file and to the entry in that file.
Input:
STRING keyword[] Unique keyword to locate the marker in the frame document.
STRING path[] Path to the frame document.
STRING marker[] Frame hypertext marker.
Output:
INTEGER <Return Value> 0 for no error.1 for duplicate.
---------------
ui_clear_focus(wid)
##########
Description:
Clear the input focus for a widget.
Input:
widget wid Pointer to the widget.
Output:
none
---------------
ui_wid_restore_widget(wid)
##########
Description:
Restore the values for this widget and all child widgets.
Input:
widget wid Widget ID.
Output:
LOGICAL <Return Value> TRUE if no error.
---------------
ui_wid_save_widget(wid)
##########
Description:
Save the values for this widget and all child widgets.
Input:
widget wid Pointer to the widget.
Output:
LOGICAL <Return Value> TRUE if no error.
---------------
uil_utils_listbox.select(lbox_id,label)
##########
Description:
Highlight a “name” in the listbox.
Input:
widget lbox_id ID of listbox to modify. This is the ID returned by a call to the PCL functions ui_listbox_items_create or uil_utils_listbox.create_list
STRING label[] Name in listbox to highlight. This list of names is the list of labels used by the PCL functions ui_listbox_items_create and uil_utils_listbox.create_list.
Output:
LOGICAL <Return Value> TRUE if no error.
---------------
uil_utils_listbox.select_none(lbox_id)
##########
Description:
Clear all highlighted names in the listbox.
Input:
widget lbox_id ID of listbox to modify.
Output:
LOGICAL <Return Value> TRUE if no error.
---------------
uil_utils_listbox.select_list(list_box_id,label_list,list_count)
##########
Description:
This function will select or highlight a list of names in a listbox.
Input:
widget list_box_id This value specifies the identifier of the listbox.
STRING label_list[31](list_count)
This value specifies the list of labels in the listbox that will be highlighted. These labels are defined when the listbox is created and are typically a maximum of 31 characters long.
INTEGER list_count This value specifies the number of labels specified by the input value label_list.
Output:
LOGICAL <Return Value> This function will return a value of TRUE if an error has not occurred and a value of FALSE if an error has occurred.
Error Conditions:
None.
Remarks:
None.
---------------
uil_utils_listbox.create_list(lbox_id,labellist,listcnt)
##########
Description:
Create a list of items in the listbox from the given names.
Input:
widget lbox_id ID of listbox to modify.
STRING labellist[]()List of names in listbox to create.
INTEGER listcnt Number of items in labellist.
Output:
none
---------------
uil_utils_listbox.append_list(lbox_id,labellist,listcnt)
##########
Description:
Append a list of items in the listbox from the given names.
Input:
widget lbox_id ID of listbox to modify.
STRING labellist[]()List of name items to append.
INTEGER listcnt Number of items in labellist.
Output:
none
---------------
uil_utils_listbox.get_selected(lbox_id,items,num)
##########
Description:
Get the selected items in the listbox.
Input:
widget lbox_id ID of listbox to modify.
Output:
STRING items [xx] (VIRTUAL)Items selected. xx needs to be equal to or larger than the length of the largest item in the listbox.
INTEGER num Number of items selected.
---------------
uil_utils_listbox.get_unselected(lbox_id,items,num)
##########
Description:
Get the unselected items in the listbox.
Input:
widget lbox_id ID of listbox to modify.
Output:
STRING items [xx] (VIRTUAL)Items selected. xx needs to be equal to or larger than the length of the largest item in the listbox.
INTEGER num Number of items selected.
---------------
uil_utils_listbox.get_all(lbox_id,items,num)
##########
Description:
Get all items in the listbox
Input:
widget lbox_id ID of listbox widget
Output:
STRING items [VIRTUAL] (VIRTUAL)Listbox items.
INTEGER num Number of items in listbox.
---------------
uil_utils_listbox.delete_item(lbox_id,name)
##########
Description:
Delete a given item from the set of listbox items.
Input:
widget lbox_id Id of listbox to modify.
STRING name[] Name in listbox to delete.
Output:
LOGICAL <Return Value> TRUE if no error,FALSE if name does not exist.
---------------
uil_utils_listbox.delete_item_list(lbox_id,nitems,itemlist)
##########
Description:
Delete a list of given items from the listbox.
Input:
widget lbox_id Id of listbox to modify.
INTEGER nitems The number of items in the list.
STRING itemlist[]()Names in listbox to delete.
Output:
none
---------------
uil_utils_listbox.delete_selected(lbox_id)
##########
Description:
Deletes from the listbox the selected items.
Input:
widget lbox_id Id of listbox to modify.
Output:
none
---------------
uil_utils_listbox.select_all(lbox_id)
##########
Description:
Highlight all names in the listbox.
Input:
widget lbox_id Id of listbox to modify.
Output:
none
---------------
uid_get_screen_info(xpix,ypix,width,height,dpi)
##########
Description:
Return the setting of screen size in pixels and pixels per inch.
Input:
none
Output:
INTEGER xpix The number of pixels in the x screen direction.
INTEGER ypix The number of pixels in the y screen direction.
INTEGER width The pixel width of the screen.
INTEGER height The pixel height of the screen.
INTEGER dpi The number of dots (pixels)per inch in the x direction.
Error Conditions:
14000199 LpGeometryText: there isn’t enough room to build the output string.
---------------
uid_get_border_sizes(type,pos_is_frame,leftoffset,topoffset,rightoffset,bottomoffset)
##########
Description:
Return the value of positionIsFrame and the size of the borders in all four directions for a specific type of window.
Input:
INTEGER type Window type:0=dialog1=graphics2=modal
Output:
LOGICAL pos_is_frame Setting of PositionIsFrame.
INTEGER leftoffset Size of left border.
INTEGER topoffset Size of top border.
INTEGER rightoffset Size of right border.
INTEGER bottomoffset Size of bottom border.
---------------
uid_get_font_heights(font_ht,textfont_ht,spreadfont_ht)
##########
Description:
Return font heights.
Input:
none
Output:
INTEGER font_ht Font height in pixels.
INTEGER textfont_ht Text font height in pixels.
INTEGER spreadfont_ht Spreadsheet font height in pixels.
---------------
uid_set_sys_pix(pix_per_inch,new_disp_factor)
##########
Description:
Calculate system dimensions.
Input:
REAL pix_per_inch Set monitor pixels per inch.
REAL new_disp_factor Set the display factor.
Output:
none
---------------
uil_app_analysis.get_real_name(user_name,real_name)
##########
Description:
Get the current preference from the database.
Input:
STRING user_name[] The current analysis code or type name. See db_get_default_anal_code.
Output:
STRING real_name[] The modified analysis code or analysis type name.
---------------
uil_pcntcomplete.close()
##########
Description:
This function closes the percent complete form in the Patranwindow. The function has no return value.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
uil_pcntcomplete.initlz(<label>)
##########
Description:
This function starts the percent complete status form in the Patranwindow. The function has no return value.
Input:
STRING label [] The label for the percent complete form.
Output:
None.
Error Conditions:
None.
---------------
uil_primary.get_menubar_id()
##########
Description:
Returns the widget id of the main menu bar
Input:
none
Output:
widget <Return Value> Value of the main menu bar id.
---------------
ui_sys_command(cmd)
##########
Description:
Can be used to create new files outside the Patranenvironment,or perform any other Linux task in the invoking window.
Input:
STRING cmd[] Linux command.
Output:
LOGICAL <Return Value> True- Unsuccessful. False- Successful.
---------------
ui_sys_return()
##########
Description:
Return out of the event loop. This will cause the application to return to the operating system command line.
Input:
none
Output:
none
---------------
ui_text_select(textwid,left,right,vstr)
##########
Description:
Return selected text and it’s left and right positions in the string in which it resides.
Input:
widget textwid The widget ID.
Output:
INTEGER left Left position.
INTEGER right Right position.
STRING vstr[ ] This value returns the text selected in the textbox. See the notes below.
---------------
ui_wid_exit()
##########
Description:
Call the exit function for all displayed windows.
Input:
none
Output:
none
---------------
ui_wid_hide_forms(parm)
##########
Description:
Call the hide all function for all displayed windows to hide all the displayed windows. Used for applications such as Insight which need to hide all the forms with one call.
Input:
STRING parm[] “ALL”,“NONGRAPHICS”,“NONMODAL”,“MODAL”,“GRAPHICS”,“DB” .
Output:
none
---------------
ui_exec_command(cmd)
##########
Description:
Invokes a Patrancommand.
Input:
STRING cmd[] Command to be invoked.
Output:
none
---------------
ui_form_delete(class)
##########
Description:
Delete the form defined in the given group.
Input:
STRING class[] Form’s group name.
Output:
none
---------------
ui_form_exists(class)
##########
Description:
This function will determine if a form has been initialized.
Input:
STRING class[] This value specifies the name of the class that implements the form.
Output:
LOGICAL <Return Value> TRUE if the given groupname has been initialized.
---------------
ui_form_is_displayed(class)
##########
Description:
This function will determine if a form is currently being displayed.
Input:
STRING class[] Name of the class to be searched for in the list of currently displayed forms.
Output:
LOGICAL <Return Value> TRUE: The class form is currently displayed.FALSE: The class form is NOT displayed.
---------------
ui_graph_create(parent,name,x,y,width,height)
##########
Description:
Create a graphics widget.
Input:
widget parent Pointer to the parent widget.
STRING name[] Name of the graphics widget.
REAL x X location.
REAL y Y location.
REAL width Widget width.
REAL height Widget height.
Output:
widget <Return Value> Pointer to the new widget.
---------------
ui_is_initialized()
##########
Description:
Check to see if the user interface has been initialized.
Input:
none
Output:
LOGICAL <Return Value> User interface has been initialized.User interface has not been initialized.
---------------
ui_get_client(client_info)
##########
Description:
Get the X client.
Input:
none
Output:
STRING client_info [80] X client.
---------------
ui_get_server(server_info)
##########
Description:
Get the X server.
Input:
none
Output:
STRING server_info[] X server.
---------------
app_count_list(type,list,domesg,status)
##########
Description:
Count the number of items of a specified type that are contained in a list.
Input:
INTEGER type Item type (for example lp_sublist_curve from “lpenums.i”)
STRING list[] Input list from user interface.
LOGICAL domes Error message flag: If TRUE,this routine will issue a message if LIST produces an error condition during list processing.
Output:
INTEGER status List processor status code: 0 = ok.
INTEGER <Return Value> Number of TYPE items in LIST (-1 if error encountered).
---------------
app_ids_to_vstring(id_array,numval,type,appstr)
##########
Description:
This function will create a string from an array of integer id and label values.
Input:
INTEGER id_array(numval)This value specifies the integer id and label values used to create a string.
INTEGER numval This value specifies the number of offsets defined for the input value id_array.
INTEGER type This value specifies the list processor entity type that the integer id and label values represent. This value can range from 1 to 16.
Output:
INTEGER appstr [VIRTUAL] This value returns the string created from the integer id and label values.
INTEGER <Return Value> This function will always return a value of zero.
---------------
app_int_array_to_vstring(prefix,numvals,inlist,virtsym)
##########
Description:
This function will create a list processor string of entity identifiers from a list of label values.
Input:
STRING prefix[] Prefix string,max be null or empty.
INTEGER numvals The number of values in the input list.
INTEGER inlist()The int array input list of ids to convert.
Output:
STRING virtsym[VIRTUAL] Virtual string to receive character list.
INTEGER <Return Value> Success = 0,else message code.
---------------
asm_u_coord_global_to_local(<points>,<trans_vector>,<rot_matrix >,<i_type>,<num_points>)
##########
Description:
Transform points from global coordinates to local. Pass the transpose of the rotation matrix stored in the database. The real array points()which is used as an input to the function returns the new coordinates of the points.
Input:
REAL ARRAY points()The point coordinates in global frame.
REAL ARRAY trans_vector()This value specifies the translation vector for the local coordinate frame.
REAL ARRAY rot_matrix()This value specifies the rotation matrix for the local coordinate frame and is the transpose of the rotation matrix stored in the database.
INTEGER i_type The reference coordinate frame type:1=rectangular2=cylindrical3=sphericalAny other integer defaults to rectangular.
INTEGER num_points The number of points.
Output:
REAL points()The point coordinates in local frame
Error Conditions:
None.
---------------
asm_u_lp_get_entity_label(label_handle,list,last_supplied_label,domesg,label,status)
##########
Description:
Get an ASM entity label from the user supplied entity label list.
Input:
INTEGER label_handle Pointer to the list evaluator allocated structure for the entity labels.
STRING list[] User input list.
LOGICAL last_supplied_label True if the list of user supplied entity labels has been exhausted prematurely and the remaining entity labels will be assigned by the database.
LOGICAL domesg Error message flag: If TRUE,this routine will allow the app_db_err_msg routine to issue a message if an error is encountered.
Output:
INTEGER label Label of asm entity to create.
INTEGER status The list processor status flag.=0: successful.
---------------
asm_u_lp_get_point(point_list,do_message,point,status)
##########
Description:
Uses list processor to get a point.
Input:
STRING point_list[] The point list.
LOGICAL do_message =TRUE if subroutine to handle errors.
Output:
REAL point()The x,y,z coordinates of the point.
INTEGER status =0: successful.!=0: error,returns error code.
---------------
asm_u_lp_get_vector(vector,do_message,vector_coord,status)
##########
Description:
Uses list processor to get the x,y,z parts of a vector.
Input:
STRING vector[] The vector list.
LOGICAL do_message =TRUE if subroutine to handle errors.
Output:
REAL vector_coord()The x,y,z coordinates of the vector.
INTEGER status =0: successful.!=0: error,returns error code.
---------------
asm_u_lp_get_plane(plane,do_message,base,vector,status)
##########
Description:
Gets plane definition information.
Input:
STRING plane[]	 Plane ID in picklist format.
LOGICAL do_message =TRUE if subroutine to handle errors.
Output:
REAL base(3)XYZ coordinates of base point for plane.
REAL vec(3)XYZ components of vector from base point normal to plane.
INTEGER status =0: successful.!=0: error,returns error code.
---------------
lp_eval_cleanup(handle)
##########
Description:
Free allocated memory for list processor operations. This function must be called after all calls to parse a particular picklist.
Input:
INTEGER handle Handle returned from lp_eval.
Output:
INTEGER <Return Value> Always returns 0.
---------------
lp_geometry_text(geo_keyword,geo_id_count,geo_id_list,text_len_max,text)
##########
Description:
Create a geometry Picklist from a prefix and array of integers.
Input:
INTEGER geo_keyword Geometry type (From lpkeywords.i)
INTEGER geo_id_count Number of ids in array.
INTEGER geo_id_list ()List of ids.
INTEGER text_len_max Number of characters in text.
Output:
STRING text[VIRTUAL] Picklist syntax string.
INTEGER <Return Value> See error conditions.
Error Conditions:
14000199 LpGeometryText: there isn’t enough room to build the output string.
---------------
lp_keyword_text(keyword,family,text)
##########
Description:
The purpose of this function is to return the keywords found in Patranthat are used by Patranto describe objects,actions,etc. This function receives parameters in a nonintuitive fashion. The family is the first method of grouping,and the keyword is next. 1,3 yields point,and 2,3 yields grid. This should show that they keywords are organized by family,the second parameter. Below is shown all the families,and then a listing of the LpGEOMETRY family.
Input:
INTEGER keyword Identifies the entity. From lpkeywords.i:
(SAMPLE for family LpGEOMETRY)
#define LpPOINT 1
#define LpGRID 2
#define LpCURVE 3
#define LpLINE 4
#define LpSURFACE 5
#define LpPATCH 6
#define LpSOLID 7
#define LpHYPERPATCH 8
#define LpPOINT_IMMEDIATE 9
#define LpSCREEN_PICK 10
#define LpCOORDINATE_FRAME 11
#define LpVECTOR 12
#define LpAXIS 13
#define LpVECTOR_IMMEDIATE 4
#define LpAXIS_IMMEDIATE 15
#define LpSIDE_NUMBER 16
INTEGER family Identifies the group of entities keyword falls. From lpkeywords.i:
/* listing of possible families */
#define LpACTION 1
#define LpTECHNIQUE 2
#define LpGEOMETRY 3
#define LpFINITE_ELEMENT 4
#define LpDESIGNATOR 5
#define LpATTRIBUTE 6
#define LpGEOMETRY_TYPES 7
#define LpGEOMETRY_FORMATS 8
#define LpGEOMETRY_COOS 9
#define LpOPERATION 10
#define LpTOKEN_TYPES 11
#define LpELEMENT_TYPES 12
#define LpNUMERIC_STANDIN 13
Output:
STRING text[31] String alias for keyword.
INTEGER <Return Value> Message facility code. See Message System Functions (p. 162)in the PCL and Customization. 0 indicates no error.
---------------
appcode(status)
##########
Description:
Return the multiple of 1000000 ignoring the remainder of status. Used to determine the application which originated the error status code.
Input:
INTEGER status Application error status code.
Output:
INTEGER <Return Value> Return status of operation.
---------------
app_db_err_msg(domesg,db_routine,caller,status,id)
##########
Description:
Handle a database error.
Input:
LOGICAL domesg Error message flag: If TRUE,this routine will issue a message if an error is encountered.
STRING db_routine[] Name of the database routine that detected the error.
STRING caller[] Name of the routine that called the database routine.
INTEGER status Database status code.
INTEGER id Id of item causing the error.
Output:
none
---------------
msg_format_string(msgcode,ints,reals,chars,string)
##########
Description:
PCL interface to Message Utility for getting message into string(s).
Input:
INTEGER msgcode Message code to look up.
INTEGER ints()Integer array for formatting.
REAL reals()Real array for formatting.
STRING chars[] Character array start for formatting.
Output:
STRING string[] String containing the resulting message.
INTEGER <Return Value> This function returns the number of characters in the string returned in the output value string.
---------------
msg_get_application(msgcode)
##########
Description:
Get Application code embedded in a message code.
Input:
INTEGER msgcode Message code to look up.
Output:
INTEGER <Return Value> Application code extracted from msgcode.
---------------
msg_string_more(string)
##########
Description:
Get next piece of message string.
Input:
none
Output:
STRING string[] Return string containing up to the total number of characters in the message string. The string can be declared to any length.
INTEGER <Return Value> Number of characters left.
---------------
msg_to_file(msgcode,msgtype,appcode,ints,reals,chars,maxout,unit)
##########
Description:
Output a message to a PCL fio unit.
Input:
INTEGER msgcode Message code to look up.
INTEGER msgtype Message type.
INTEGER appcode Application code for calling application.
INTEGER ints()Integer array for formatting.
REAL reals()Real array for formatting.
STRING chars[] Character array (Fortran style)for formatting.
INTEGER maxout Maximum output size in string.
INTEGER unit Channel from TEXT_OPEN call.
Output:
INTEGER <Return Value> Number of characters left.
---------------
msg_to_string(msgcode,msgtype,appcode,ints,reals,chars,string)
##########
Description:
Interface to Message utility to retrieve Message from message database.
Input:
INTEGER msgcode Message code to look up.
INTEGER msgtype Message type.
INTEGER appcode Application code for calling application.
INTEGER ints()Integer array for formatting.
REAL reals()Real array for formatting.
STRING chars[] Character array for formatting.
Output:
STRING string[] String to return first part of message in to.
INTEGER <Return Value> Number of characters left in string.
---------------
user_message(type,appcode,appname,message)
##########
Description:
Display a user message with the Patranuser interface and possibly wait for and return a reply. The “type” determines whether the message is displayed in a form or simply output to the history window. The “type” also determines what buttons are available in the form. The “appcode” is a number assigned by the programmer which can be used in conjunction with ui_answer_message and ui_override_message to supply the message response during session file playback. Use of duplicate application codes will not generally cause problems but it is better if they are unique.
Input:
STRING type[] Type of message format desired. May be:“Info” Informative message“Warn” Warning message“Error” Error/Fatal message“Ack” Acknowledgment message“Q_YN” -Yes/No Query w/o default“Q_YN_Y” -Yes/No Query Yes default“Q_YN_N” -Yes/No Query No default“Q_YNY” -Yes/No/YesAll Query w/o default“Q_YNY_N” -Yes/No/YesAll Query No default“Q_YNYN” -Yes/No/YesAll/NoAll Query w/o default“Q_YNYN_Y” -Yes/No/YesAll/NoAll Query Yes default“Q_YNYN_N” -Yes/No/YesAll/NoAll Query No default“C_YN” -Yes/No Critical w/o default“C_YN_Y” -Yes/No Critical Yes default“C_YN_N” -Yes/No Critical No default“C_YNY” -Yes/No/YesAll Critical w/o default“C_YNY_N” -Yes/No/YesAll Critical No default“C_YNYN” -Yes/No/YesAll/NoAll Critical w/o default“C_YNYN_Y” -Yes/No/YesAll/NoAll Critical Yes default“C_YNYN_N” -Yes/No/YesAll/NoAll Critical No default
INTEGER appcode Application message code,unique value.
STRING appname[] Name of the application generating the message.
INTEGER message[] Message to display.
Output:
INTEGER <Return Value> 1=Yes,2=No,3=Yes All,4=Abort,5=No All.
---------------
notemessage.text(label,message)
##########
Description:
Simple note message form with Ok button.
Input:
STRING label[] Form label.
STRING message[] Message text (Include \n for new line).
Output:
none
---------------
db_count_result_types_for_elem(elementId,resultTypeCount)
##########
Description:
Given an elementId,count all the unique result types used by it.
Input:
INTEGER elementId The element ID.
Output:
INTEGER resultTypeCount Count of all the unique result types used by the given element ID.
INTEGER <Return Value> .Integer indicating the success or failure of the routine.
Error Conditions:
None.
---------------
db_get_results_file_suffix(name,suffix)
##########
Description:
Retrieves the results file suffix associated with the named analysis code.
Input:
STRING name[31] Name of the analysis code for which the suffix is to be retrieved.
Output:
STRING suffix[6] Location into which the named suffix is to be retrieved.
INTEGER <Return Value> Success or failure of routine.
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_get_elem_scalar_name(scalar_id,name)
##########
Description:
This function retrieves the name of an element scalar table from the database.
Input:
INTEGER scalar_id This value specifies an identifier for an element scalar table in the database.
Output:
STRING name[] The value returns the name of the specified element scalar table. This name is used for display purposes only and is not a unique table identifier.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000002-> Unrecoverable database error
13000007-> An unspecified database error occurred
---------------
jobfile.create_jobname()
##########
Description:
This function creates a jobname for an analysis. It returns error conditions for the jobname creation as an output.
Input:
None
Output:
INTEGER <Return Value> The status of the execution. Returns 0 for successful completion and an error code in case of error.
Error Conditions:
13000002 Unrecoverable database error.
13000004 Duplicate entry for jobname.
13000007 An unspecified database error occured.
13000158 Jobname already exists in the database.
13000159 Jobname id not found in the database.
---------------
jobfile.create_param(<label>,<int_value >,<real_value>,<string_value>,<param_type>)
##########
Description:
This function creates a parameter for the current parameter set of the type indicated. Every new jobname or subcase is referenced by a new param_set_id. All the parameters for the jobname or subcase can be accessed through this param_set_id. This function (jobfile.create_param)writes the parameter name and assigns its value,first in the jobfile and then in the database. The parameter can be of type string,integer or real. For example,if a string “Load_case” is passed in the first argument,it creates a new param_set_id. Subsequent functions will define the other parameters. This function also creates a new step when the load case parameter is encountered in the label string. It also increments the version of the file search path parameter when it is encountered.
Input:
STRING label [ ] The parameter name to create.
INTEGER int_value The integer value to be assigned to the parameter.
REAL real_value The real value to be assigned to the parameter.
STRING string_value[ ] The string value to be assigned to the parameter.
INTEGER para_type The type of parameter to be added. 1 -INTEGER 3 - REAL 4 - STRING.
Output:
INTEGER <Return Value> Returns 0 for successful execution,else returns the error code.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occured.
13000052 Load case not found.
13000204 The specified analysis step not found.
---------------
jobfile.eval_list(<list>,<sublist_filter>)
##########
Description:
This function sorts the values in the string ‘list[ ]’in the form of a real or integer array. This function should be followed by function jobfile.write_array_as_list to write the array to the jobfile. Refer to file ‘lpenums.i’ for values of sublist filters.
Input:
STRING list [ ] The values of the array in string format.
INTEGER sublist_filter The type of array. Refer to file ‘lpenums.i’ for values. 512 - if the list contain nodes. 1024 - if the list contain elements. 16348 - if the list contain real values. 8192 - if the list contain integer values.
Output:
INTEGER < Return_status> Returns 0 on successful execution.
Error Conditions:
14000045 Improper input list.
---------------
jobfile.write_array_as_list(<label>,<value_format>,<num_values_on_line>)
##########
Description:
This function writes values of an array in string format to the jobfile. The array is specified by the function jobfile.eval_list(). ‘Value_format’ is a string to specify the format for the array as per the string input/output routines.
Input:
STRING label [ ] The label text to be written to the jobfile.
STRING value_format [ ] The format for the array values (i.e. “%I2.2%”,“%G2%”.)
INTEGER num_values_on_line The value to specify the number of values to be written on a single line in the jobfile.
Output:
INTEGER < Return_status> Returns a 0 on successful execution.
Error Conditions:
None
---------------
jobfile.write_element_list(<label>,<element_list>)
##########
Description:
This function writes element numbers from the string in the databox as string format to the jobfile. The element_list[ ] should start with ‘elm’ or ‘Element’ for the function to get executed.
Input:
STRING label [ ] The label text to be written to the jobfile.
STRING element_list [ ] The element numbers in string format to be written to the jobfile.
Output:
None
Error Conditions:
None
---------------
jobfile.write_integer_list(<label>,<integer_value>)
##########
Description:
This function writes integer values from the databox in string format to the jobfile.
Input:
STRING label [ ] The text to be written to the jobfile.
STRING integer_value [ ] The integer values in string format to be written to the jobfile.
Output:
None
Error Conditions:
None
---------------
jobfile.write_node_list(<label>,<node_list>)
##########
Description:
This function writes node numbers from the string in the databox in string format to the jobfile. The node_list[ ] should start with ‘node’ for the function to get executed.
Input:
STRING label [ ] The label text to be written to the jobfile.
STRING node_list [ ] The node list in string format to be written to the jobfile.
Output:
None
Error Conditions:
None
---------------
jobfile.write_real_list(<label>,<real_value>)
##########
Description:
This function writes real values from the databox in string format to the jobfile.
Input:
STRING label [ ] The text to be written to the jobfile.
STRING real_value[ ] The real values in string format to be written to the jobfile.
Output:
None
Error Conditions:
None
---------------
jobfile.write_stream(<label>,<int_value >,<real_value>,<string_value>)
##########
Description:
This function writes text (a formatted string)with the integer,real and string values (defined in the other arguments)to the jobfile. The format of the values is specified in the label argument. The function jobfile.write_stream()can be used in this way: jobfile.write_stream("The values are : integer value : %I%,real value : %G% and string value:%A%",15,5.5,"test string ")This will write the following statement to the jobfile: The values are : integer value : 15,real value : 5.5 and string value: test string. %I%,%G%,%A% are formats to specify integer,real and string values respectively.
Input:
STRING label [ ] The text to be written to the jobfile.
INTEGER int_value The integer value to be written in the text to the jobfile.
REAL real_value The real value to be written in the text to the jobfile.
STRING string_value[ ] The string value to be written in the text to the jobfile.
Output:
None
Error Conditions:
None
---------------
jobfile.write_string(<label>,<value>)
##########
Description:
This function will write a statement “label” = “value” to the jobfile opened by the jobfile.open()function. For total text length exceeding 80 characters,it is written to the next line in the jobfile. For instance,if the user wants to specify that the output should be in the form of an .op2 file only,then the command is: jobfile.write_string(“DATA OUTPUT”,”OP2 ONLY”). This will write the following statement to the jobfile: DATA OUTPUT = OP2 ONLY.
Input:
STRING label [ ] The name of the parameter.
STRING value [ ] The value for the parameter.
Output:
INTEGER <Return Value> Returns 0 for success,else returns the error code.
Error Conditions:
6013024 The maximum number of characters that can be written to the control file for a parameter is 240.
---------------
jobfile.writer(<label>,<real_value>)
##########
Description:
This function writes real values to the jobfile. The format is ‘label = real_value’.
Input:
STRING label [ ] The label to be written to the jobfile.
REAL real_value The real value to be written to the jobfile.
Output:
None
Error Conditions:
None
---------------
jobfile.writeS1(<label>,<rl_val>)
##########
Description:
This function will write an array of one real value to the jobfile opened by the jobfile.open()function.
Input:
STRING label [ ] The name of the parameter.
REAL rl_val (1)The array of one real value to be written.
Output:
None
Error Conditions:
None
---------------
jobfile.writeS2(<label>,<rl_val>)
##########
Description:
This function will write an array of two real values to the jobfile opened by the jobfile.open()function. Input:
STRING label [ ] The name of the parameter.
REAL rl_val (2)The array of two real values to be written
Output:
None
Error Conditions:
None
---------------
jobfile.writeS3(<label>,<rl_val>)
##########
Description:
This function will write an array of three real values to the jobfile opened by the jobfile.open()function.
Input:
STRING label [ ] The name of the parameter.
REAL rl_val (3)The array of three real values to be written
Output:
None
Error Conditions:
None
---------------
jobfile.writeS4(<label>,<rl_val>)
##########
Description:
This function will write an array of four real values to the jobfile opened by the jobfile.open()function.
Input:
STRING label [ ] The name of the parameter.
REAL rl_val (4)The array of four real values to be written
Output:
None
Error Conditions:
None
---------------
jobfile.writeSS(<label>,<int_val>)
##########
Description:
This function will write an array of two integer values to the jobfile opened by the jobfile.open()function.
Input:
STRING label [ ] The name of the parameter.
INTEGER int_val (2)The array of two integer values to be written
Output:
None
Error Conditions:
None
---------------
rdm_result_minmax_get(group_name,min,max)
##########
Description:
This function obtains the minimum and maximum values from the current “active” result which is controlling the current viewport spectrum/range.
Input:
STRING group_name[] The current viewport spectrum range.
Output:
REAL min Minimum value of results.
REAL max Maximum value of results.
Error Conditions:
None.
---------------
res_db_cgetlayerposids(<rescase_id>,<rt_id>,<nlayers>,<layerposids>)
##########
Description:
This function will retrieve a list of layers of a result type in a given result case
Input:
INTEGER rescase_id Result case id
INTEGER rt_id Result type id
Output:
INTEGER nlayers Number of layers
INTEGER layerposids()Layer position ids
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
See the Status Message(Ch 11)for information on any error values returned by this function.
---------------
res_db_cgetrescases(<num_ldcases>,<loadcase_id>,<subcase_id>,<rescase_id>)
##########
Description:
This function will retrieve result case ids.
Input:
INTEGER num_ldcases Number of load cases
INTEGER loadcase_id()Load case ids
INTEGER subcase_id()Subcase ids
Output:
INTEGER rescase_id()Result case ids.
INTEGER <Return Value> Returns 0 for success,otherwise return the error code.
Error Conditions:
See the Status Message(Ch 11)for information on any error values returned by this function.
---------------
res_utl_create_elem_result(resultids,primary_title,secondary_title,cnt,ids,cidlist,datatype,location,nresults,results)
##########
Description:
This function creates new result case and writes to the database. The new result case can be displayed in the viewport. The primary results id and secondary results ids are created newly by passing some input value to the function.
Input:
INTEGER resultids(5)Array of the results case ids i.e. load case id,subcase id,primary case id,secondary case id and layer case id. The primary id and secondary id are not used as inputs by this function. This value is used as both as input and an outputs to the function and would be passed by the calling function as a single argument.
STRING primary_title[] This value specifies the primary result title.
STRING secondary_title[] This value specifies the secondary result title.
INTEGER cnt Number of Element results returned.
INTEGER ids(VIRTUAL)Array of the extracted elem ids.
STRING cidlist[] List format of a coordinate system for vector and tensor transformations. NULL string will be interpreted as no transformation.
INTEGER datatype This value returns the datatype i.e. Scalar =1,Vector = 2,Tensor =3
STRING location[] This value specifies the location of the coordinate frame identifier. “A[sis]”,“C[entroid],“N[odal] or ““ = “A[sis]”
INTEGER nresults(VIRTUAL)Array of the results per element.
REAL results(VIRTUAL)Array of the extracted results.
Output:
INTEGER resultids(5)Array of the results case ids i.e. load case id,subcase id,primary case id,secondary case id and layer case id. The load case,sub case and layer ids are not used as output values by this function. The primary id and secondary id are used as outputs by this function. This value is used as both as input and an outputs to the function and would be passed by the calling function as a single argument.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None
---------------
res_utl_extract_elem_history2(nrc,lcids,subids,resultids,elem_list,derivation,location,cidlist,avg_method,avg_domain,extrap_method,complex_form,complex_angle,datatype,resloc,cnt,ids,nresults,results,min_loc,max_loc)
##########
Description:
This function will extract the specified results data from the database. Extrapolation and averaging will be performed as necessary when element based results are requested. The result datatype returned will be determined by the derivation method. This routine will return scalar,vector and tensor data. Apart from that it also gives an array index for each minimum and maximum element result component.
Input:
INTEGER nrc Number of input loadcases.
INTEGER lcids(virtual)Loadcase ids array.
INTEGER subids(virtual)Subcase id array.
INTEGER resultids(3)Primary id,secondary id and layer id.
STRING elem_list[] List of element ids
STRING derivation[] Derivation Specifier: Tensor to Scalar: “VONM”,“OCT”,“HYDRO”,“INV1”,“INV2”,“INV3”,“MAXSHR”,“MAXCMP”,“MINCMP”,“P1”,“P2”,“P3”,“XX”,“YY”,“ZZ”,“XY”,“YZ”,“ZX”,Tensor to Vector: “PV1”,“PV2”,“PV3”,any 3 component initials (“XXYYZZ”)Vector to Scalar: “X”,“Y”,“Z”,“MAG”,“MINCMP”,“MAXCMP”,“AVG”
STRING location[] Location Specifier: “A[sis]”,“C[entroid],“N[odal] or ““ = “A[sis]”
STRING cidlist[] List format of a coordinate frame. NULL will be interpreted as no transformation.
STRING avg_method[] Average Method string (see below).
STRING avg_domain[] Average Domain string (see below).
STRING extrap_method[] Extrapolation Method string (see below).
STRING complex_form[] Complex form string (see below).
REAL complex_angle Used with complex results when complex form is “Angle”.
Output:
INTEGER datatype Scalar =1,Vector = 2,Tensor =3
INTEGER resloc Centroid =1,Nodal =2,Multiple =3
INTEGER cnt Number of nodal results returned .
INTEGER ids(virtual)Array of the extracted elem ids.
INTEGER nresults(virtual)Array of the results per element.
REAL results(virtual)Array of the extracted results.
INTEGER min_loc(virtual)Subcase ID for each elem min component.
INTEGER max_loc(virtual)Subcase ID for each elem max component.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
res_utl_extract_elem_results2(resultsids,elem_list,derivation,location,cidlist,avg_method,avg_domain,extrap_method,complex_form,complex_angle,datatype,resloc,cnt,ids,nresults,results,min_loc,max_loc)
##########
Description:
This function extracts the specified results data from the database. Extrapolation and averaging will be performed as necessary when element based results are requested. The result datatype returned will be determined by the derivation method. This routine will return scalar,vector and tensor data. Apart from that it also gives an array index for each minimum and maximum element result component.
Input:
INTEGER resultsids()Array of the results case ids i.e. load case id,subcase id,primary case id,secondary case id and layer case id.
STRING elem_list[] List of element ids for which to extract results.
STRING derivation[] Derivation Specifier: Tensor to Scalar: “VONM”,“OCT”,“HYDRO”,“INV1”,“INV2”,“INV3”,“MAXSHR”,“MAXCMP”,“MINCMP”,“P1”,“P2”,“P3”,“XX”,“YY”,“ZZ”,“XY”,“YZ”,“ZX”,Tensor to Vector: “PV1”,“PV2”,“PV3”,any 3 component initials (“XXYYZZ”)Vector to Scalar: “X”,“Y”,“Z”,“MAG”,“MINCMP”,“MAXCMP”,“AVG”
STRING location[] This value specifies the location of the coordinate frame identifier. “A[sis]”,“C[entroid],“N[odal] or ““ = “A[sis]”
STRING cidlist[] List format of a coordinate system for vector and tensor transformations. NULL string will be interpreted as no transformation.
STRING avg_method[] Average Method string (see below).
STRING avg_domain[] Average Domain string (see below).
STRING extrap_method[] Extrapolation Method string (see below).
STRING complex_form[] Complex form string (see below).
REAL complex_angle Used with complex results when complex form is “Angle”
Output:
INTEGER datatype This value returns the datatype i.e. Scalar =1,Vector = 2,Tensor =3
INTEGER resloc This value returns the result location. Valid value are : Centroid =1,Nodal =2,Multiple =3
INTEGER cnt Number of Element results returned.
INTEGER ids()Array of the extracted elem ids.
INTEGER nresults()Array of the results per element.
REAL results()Array of the extracted results.
INTEGER min_loc()Subcase ID for each elem minimum component.
INTEGER max_loc()Subcase ID for each elem maximum component.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message database.
---------------
res_utl_extract_nodal_history2(nrc,lcids,subids,resultids,node_list,derivation,cidlist,avg_method,avg_domain,extrap_method,complex_form,complex_angle,datatype,cnt,ids,results,min_loc,max_loc)
##########
Description:
This function will extract the specified results data from the database. Extrapolation and averaging will be performed as necessary when nodes based results are requested. The result datatype returned will be determined by the derivation method. This routine will return scalar,vector and tensor data. Apart from that it also gives an array index for each minimum and maximum nodal result component.
Input:
INTEGER nrc Number of result cases to be extracted.
INTEGER lcids()Loadcase ids array.
INTEGER subids()Subcase id array.
INTEGER resultids()Primary id,secondary id and layer id.
STRING elem_list[] List of nodes ids at which to extract results.
STRING derivation[] Derivation Specifier: Tensor to Scalar: “VONM”,“OCT”,“HYDRO”,“INV1”,“INV2”,“INV3”,“MAXSHR”,“MAXCMP”,“MINCMP”,“P1”,“P2”,“P3”,“XX”,“YY”,“ZZ”,“XY”,“YZ”,“ZX”,Tensor to Vector: “PV1”,“PV2”,“PV3”,any 3 component initials (“XXYYZZ”)Vector to Scalar: “X”,“Y”,“Z”,“MAG”,“MINCMP”,“MAXCMP”,“AVG”
STRING cidlist[] List format of a coordinate system for vector/tensor transformations. NULL will be interpreted as no transformation.
STRING avg_method[] Average Method string (see below).
STRING avg_domain[] Average Domain string (see below).
STRING extrap_method[] Extrapolation Method string (see below).
STRING complex_form[] Complex form string (see below).
REAL complex_angle Used with complex results when complex form is “Angle”.
Output:
INTEGER datatype This value returns the data type. Valid values are: Scalar =1,Vector = 2 and Tensor =3
INTEGER cnt Number of Nodal results returned
INTEGER ids()Array of the extracted nodes ids
REAL results()Array of the extracted results at all the specified nodes.
INTEGER min_loc()Subcase ID for each node as minimum component
INTEGER max_loc()Subcase ID for each node as maximum component
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
res_utl_extract_nodal_results2(resultsids,node_list,derivation,cidlist,avg_method,avg_domain,extrap_method,complex_form,complex_angle,datatype,cnt,ids,results,min_loc,max_loc)
##########
Description:
This function extracts the specified results data from the database. Extrapolation and averaging will be performed as necessary when nodal based results are requested. The result datatype returned will be determined by the derivation method. This routine will return scalar,vector and tensor data. Apart from that it also gives an array index for each minimum and maximum nodes result component.
Input:
INTEGER resultsids()Array of the results case ids i.e. load case id,subcase id,primary case id,secondary case id and layer case id.
STRING node_list[] List of nodes ids for which to extract results.
STRING derivation[] Derivation Specifier: Tensor to Scalar: “VONM”,“OCT”,“HYDRO”,“INV1”,“INV2”,“INV3”,“MAXSHR”,“MAXCMP”,“MINCMP”,“P1”,“P2”,“P3”,“XX”,“YY”,“ZZ”,“XY”,“YZ”,“ZX”,Tensor to Vector: “PV1”,“PV2”,“PV3”,any 3 component initials (“XXYYZZ”)Vector to Scalar: “X”,“Y”,“Z”,“MAG”,“MINCMP”,“MAXCMP”,“AVG”
STRING cidlist[] List format of a coordinate system for vector and tensor transformations. NULL string will be interpreted as no transformation.
STRING avg_method[] Average Method string (see below).
STRING avg_domain[] Average Domain string (see below).
STRING extrap_method[] Extrapolation Method string (see below).
STRING complex_form[] Complex form string (see below).
REAL complex_angle Used with complex results when complex form is “Angle”
Output:
INTEGER datatype This value returns the dta type i.e. Scalar =1,Vector = 2,Tensor =3
INTEGER cnt Number of Nodal results returned.
INTEGER ids()Array of the extracted nodes ids.
REAL results()Array of the extracted results.
INTEGER min_loc()Subcase ID for each node minimum component.
INTEGER max_loc()Subcase ID for each node maximum component.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message database.
---------------
res_utl_transform_nodal_results(node_count,node_ids,cid,ncomp,resvals)
##########
Description:
This function transforms the specified nodal results for specified coordinate system.
Input:
INTEGER node_count Number of nodal results returned.
INTEGER node_ids()Array of the extracted nodes ids.
INTEGER cid Coordinate frame identifier.
INTEGER ncomp This value specifies the number of component as 1,3 or 6.
REAL resvals()Array of the specified results.
Output:
REAL resvals()Array of the transformed results.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
4500015 The Specified Cordinate Frame Id does not exist.
---------------
vki_db_getresid(<rescase_id>,<prires_id>,<secres_id>)
##########
Description:
This function will retrieve result type id from the database.
Input:
INTEGER rescase_id Result case id.
INTEGER prires_id Primary result id.
INTEGER secres_id Secondary result id.
Output:
INTEGER rt_id <Return Value> Result type id.
Error Conditions:
NONE
---------------
xy_curve_results_set_wnd(<window_name>,<num_points >,<curve_name>,<x_values>,<y_values>)
##########
Description:
This function opens a window and draws a graph using given number of points and the array for coordinates of the points. The function internally sets the array size for the x and y values. It returns an integer with 0 as success condition or the error code in case of failure.
Input:
STRING window_name[ ] The name of the window to open the X-Y curve.
INTEGER num_points Number of points to decide the curve
STRING curve_name[ ] The name to be assigned to the curve
REAL ARRAY x_values()The array of real values of the x values of the points on the curve.
REAL ARRAY y_values()The array of real values of the y values of the points on the curve.
Output:
INTEGER <Return Value> 0 for success or the error code for failure.
Error Conditions:
130000007 Database not open.
---------------
bl_create_std_beam_section(<shape>,<name>,<ndim>,<data_types>,<rvalues>,<field_ids>,<id>)
##########
Description:
This function will create a standard beam section.
Input:
STRING shape [] Standard shape of the beam section.
STRING name [] Name for the beam section created.
INTEGER ndim Number of dimension required for corresponding beam section shape.
INTEGER data_types()Type of data for each dimension.
REAL rvalues()Dimension values for beam section
INTEGER field_ids()Field ids for beam section.
Output:
INTEGER id ID of beam section
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
NONE
---------------
bl_get_std_beam_section_data(<id>,<ndim>,<data_types>,<rvalues>,<field_ids>)
##########
Description:
This function will get standard beam section data.
Input:
INTEGER id [] Id of the beam section for which data is required.
INTEGER ndim Number of dimension required for beam section shape.
Output:
INTEGER data_types()Type of data for each dimension.
REAL rvalues()Dimension values for beam section.
INTEGER field_ids()Field ids for beam section.
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
NONE
---------------
bl_modify_std_beam_section(<new_shape>,<old_name>,<new_name>,<ndim>,<data_types>,<rvalues>,<field_ids>,<id>)
##########
Description:
This function will modify the existing standard beam section.
Input:
STRING new_shape [] Standard shape of the beam section.
STRING old_name [] Name of the existing beam section .
STRING new_name[] Name for the modified beam section.
INTEGER ndim Number of dimension required for modified beam section shape.
INTEGER data_types()Type of data for each dimension.
REAL rvalues()Dimension values for modified beam section.
INTEGER field_ids()Field ids for modified beam section.
Output:
INTEGER id ID of the modified beam section.
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
1 Invalid shape name
---------------
blcomputeprincaxespoints(<alpha>,<npoints>,<points>,<centroid>,<princ_axis1>,<princ_axis2>)
##########
Description:
This function calculates principal axes vectors for the beam section from the principal angle alpha. It also scales the axes based on the beam section points.
Input:
REAL alpha Principal angle for the beam section.
INTEGER npoints Number of points for beam section shape.
REAL points()Coordinates for each point
REAL centroid(2)Coordinates for centroid of beam section.
Output:
REAL princ_axis1(2)First principal axis
REAL princ_axis2(2)Second principal axis.
INTEGER <Return Value> Returns 0 for success.
Error Conditions:
NONE
---------------
blgetalpha(<entype>,<prop>,<alpha>)
##########
Description:
This function calculates principal angle for the beam section from the given properties of a beam section.
Input:
INTEGER entype Type of beam secion (1=Basic,2=Advanced)
REAL prop()Properties of beam section.
Output:
REAL alpha Principal angle for the beam section.
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
1 Invalid entype.
2 Extremely small Izz or Iyy in property definition.
---------------
blgetbuttonicon(<shape>,<cdo>)
##########
Description:
This function gets the file system location of the button icon bitmap for a shape.
Input:
STRING shape Shape of the beam section.
Output:
STRING cdo[] File system location of the button icon bitmap for a shape.
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
1 Invalid shape name
---------------
blgetcenters(<enttype>,<shape>,<dim>,<prop>,<centroid>,<shear>)
##########
Description:
This function calculates the centroid and sheare centre of the beam section.
Input:
INTEGER enttype Type of beam secion (1=Basic,2=Advanced)
STRING shape Shape of the beam section.
REAL dim()Dimensions for the beam section shape.
REAL prop()Properties of beam section.
Output:
REAL centroid()Centroid of the beam section.
REAL shear()Shear center of the beam section.
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
1 Invalid area in property definition
---------------
blgetdimfieldid(<bsid>,<dim_loc>,<field_id>)
##########
Description:
This function will get the field id at specified dimension location.
Input:
INTEGER bsid Beam section ID.
STRING dim_loc Dimension location.
Output:
INTEGER field_id Field id at specified dimension location.
INTEGER <Return Value> Returns 0 for success.
Error Conditions:
NONE
---------------
blgetdimvalue(<bsid>,<dim_loc>,<value>)
##########
Description:
This function will get the value at the specified dimension location.
Input:
INTEGER bsid Beam section ID.
STRING dim_loc Dimension location.
Output:
REAL value Value at specified dimension location.
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
NONE
---------------
blgetlabelicon(<shape>,<cdo>)
##########
Description:
This function gets the file system location of the label icon bitmap for a shape.
Input:
STRING shape Shape of the beam section.
Output:
STRING cdo[] File system location of the label icon bitmap for a shape.
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
1 Invalid shape name.
---------------
blgetlabels(<shape>,<cdo>)
##########
Description:
This function gets the dimension labels for a given shape.
Input:
STRING shape[] Shape of the beam section.
Output:
STRING ARRAY cdo[]()String array of dimension labels for beam section shape.
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
1 Invalid shape name.
---------------
blgetnumdimension(<shape>)
##########
Description:
This function gets the number of dimensions required to define a given shape completely.
Input:
STRING shape[] Shape of the beam section.
Output:
INTEGER ndim No. of dimensions required for beam section shape.
<Return Value>
Error Conditions:
1 Invalid shape name.
---------------
blgetnumplotpoints(<shape>,<chord_tol>,<npoints>,<nloops>)
##########
Description:
This function will get the number of total plot points and loops used to draw a given shape.
Input:
STRING shape[] Beam section shape.
REAL chord_tol Chordal tolerance for rod and tube.
Output:
INTEGER npoints Number of total plot points.
INTEGER nloops Number of loops.
INTEGER <Return Value> Returns 0 for success,othewise returns the error code.
Error Conditions:
1 Invalid shape name
---------------
blgetnumplotpointsbyid(<bsid>,<chord_tol>,<npoints>,<nloops>)
##########
Description:
This function will get the number of total plot points and loops used to draw a shape of beam section.
Input:
INTEGER bsid ID of beam section.
REAL chord_tol Chordal tolerance for rod and tube.
Output:
INTEGER npoints Number of total plot points.
INTEGER nloops Number of loops.
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
1 Invalid shape name
---------------
blgetnumtypeinfo(<nsect>,<ndimax>)
##########
Description:
This function will get the number of section types available in Patranand the maximum number of dimensions for any section.
Input:
Output:
INTEGER nsect Number of different section types.
INTEGER ndimax Maximum number of dimensions for any section.
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
NONE
---------------
blgetperim(<shape>,<dim>,<perim>)
##########
Description:
This function calculates the exterior perimeter of a beam section.
Input:
STRING shape[] Beam section shape.
REAL ARRAY dim()Array of dimensions of the section.
Output:
REAL perim Perimeter of the beam section.
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
1 Invalid shape name
---------------
blgetplotpoints(<shape>,<dim>,<npoints>,<nloops>,<points>,<nploops>)
##########
Description:
This function gets the coordinates of plot points and the number of plot points on each loop for given section shape.
Input:
STRING shape[] Beam section shape.
REAL ARRAY dim()Array of dimensions of the section.
INTEGER npoints Number of total plot points.
INTEGER nloops Number of loops.
Output:
REAL ARRAY points()Coordinates of plot points for the section.
INTEGER ARRAY nploops()Array of number of plot points on each loop.
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
1 Invalid shape name,npoints or nloops
---------------
blgetplotpointsbyid(<bsid>,<bmtype>,<enttype>,<entid>,<nparloc>,<nrmflg>,<npoints>,<nloops>,<points>,<nploop>,<vec1s>,<vec2s>,<xyz>)
##########
Description:
This function gets the coordinates of plot points and the number of plot points on each loop for given beam section id,entity type,entity id and entity parametric location. This function calls blgetplotpointsbyid2,and hardwires the displaymode argument in blgetplotpointsbyid2 to 1 (flag to process offsets).
Input:
INTEGER bsid Beam section id stored in db or region id for Abaqus beams.
INTEGER bmtype Beam type 1 = Bar ,2 = Beam,3 for aero bodies. For Abaqus beams: 1001 = Box section1002 = Circular section1003 = I section1004 = L section1005 = Pipe section1006 = Rectangular section1007 = Hex section1008 = Trapazoidal section1009 = Arbitrary section
INTEGER enttype Entity type,currently only type 124 is supported.
INTEGER entid Entity id
INTEGER nparloc Number of parametric locations.
REAL parloc(nparloc)One dimensional parametric location on entity.
INTEGER nrmflg If =1,normal is calculated.
INTEGER npoints Number of total plot points for one parametric location.
INTEGER nloop Number of loops for one parametric location.
Output:
REAL points(npoints*nparloc,nparloc)Coordinates of plot points for the section. One set of points per parametric location.
INTEGER nploops(nloop)Array of number of plot points on each loop for one parametric location.
REAL vec1s(nparloc,3)Array of nparloc axis 1 orientation vectors.
REAL vec2s(nparloc,3)Array of nparloc axis 2 orientation vectors.
REAL xyz(nparloc*3)Array of evaluated xyz coordinates at the input parametric locations.
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
See the Status Message (Ch 11)for information on any error values returned by this function.
---------------
blgetplotpointsbyid2(<bsid>,<bmtype>,<enttype>,<entid>,<nparloc>,<nrmflg>,<npoints>,<nloops>,<displaymode>,<points>,<nploop>,<vec1s>,<vec2s>,<xyz>)
##########
Description:
This function gets the coordinates of plot points and the number of plot points on each loop for given beam section id,entity type,entity id and entity parametric location.
Input:
INTEGER bsid Beam section id stored in db or region id for Abaqus beams.
INTEGER bmtype Beam type 1 = Bar ,2 = Beam,3 for aero bodies. For Abaqus beams: 1001 = Box section1002 = Circular section1003 = I section1004 = L section1005 = Pipe section1006 = Rectangular section1007 = Hex section1008 = Trapazoidal section1009 = Arbitrary section
INTEGER enttype Entity type,currently only type 124 is supported.
INTEGER entid Entity id
INTEGER nparloc Number of parametric locations.
REAL parloc(nparloc)One dimensional parametric locations on entity.
INTEGER nrmflg If =1,calculates normals.
INTEGER npoints Number of total plot points for one parametric location.
INTEGER nloops Number of loops for one parametric location
INTEGER displaymode If beam type = 1 or 2,this flag is whether to process offsets. 0 = do not process1 = process If beam type = 3 this flag is whether slender only,interference only,both or none should display. 0 = None1 = Slender2 = Interference3 = All
Output:
REAL points(npoints*nparloc,nparloc)Coordinates of plot points for the section. One set of points perparametric location.
INTEGER nploop(nloop)Array of number of plot points on each loop for one parametric location.
REAL vec1s(nparloc,3)Array of nparloc axis 1 orientation vectors
REAL vec2s(nparloc,3)Array of nparloc axis 2 orientation vectors
REAL xyz(nparloc*3)Array of evaluated xyz coordinates at the input parametric locations
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
See the Status Message (Ch 11)for information on any error values returned by this function.
---------------
blgetprop(<enttyp>,<shape>,<dim>,<ndim>,<prop>,<nprop>)
##########
Description:
This function will get the all properties of beam section.
Input:
INTEGER enttyp Beam type (1 = Basic(Bar),2 = Advanced(Beam))
STRING shape[] Beam section shape. See beam_section_create for valid beam sections.
REAL dim(ndim)Array of dimensions of the section.
INTEGER ndim Number of dimensions.
Output:
REAL prop()Properties of the beam section.
INTEGER nprop Number of properties
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
See the Status Message(Ch 11)for information on any error values returned by this function.
---------------
blgetproplabels(<enttyp>,<cdo>)
##########
Description:
This function will get the propery labels for given beam entity type.
Input:
INTEGER enttyp Beam type (1 = Basic(Bar),2 = Advanced(Beam))
Output:
STRING cdo[]()Array of property label strings.
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
1 Invalid Entity type.
---------------
blgettypeinfo(<entype>,<shapes>,<ndims>,<nconsts>)
##########
Description:
This function will get the beam shape name,number of dimensions for each beam shape and the number of dimensional constraints for each beam shape available in the Patranlibrary.
Input:
INTEGER entype Beam type(1=Basic(Bar),2=Advanced(Beam))
Output:
STRING shapes[] Array of shape names
INTEGER ndims[] Array of the number of dimensions for each shape
INTEGER nconsts[] Array of the number of dimensional constraints
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
1 Invalid entype
---------------
blmodifybeamdimension(<bsid>,<dimid>,<value>,<fid>)
##########
Description:
This function will modify the beam section dimension.
Input:
INTEGER bsid ID of beam section.
INTEGER dimid Dimension location.
REAL value New dimension value.
INTEGER fid Field id.
Output:
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
See the Status Message(Ch 11)for information on any error values returned by this function.
---------------
db_create_selected_etype(atid,acid,geopcd,copcd,fopcd,lopcd,etopid,dofsetid,mlcd,mdcd,etypid)
##########
Description:
Create a selected element type entry in the database.
Input:
INTEGER atid The ID of the analysis type associated to the selected element type.
INTEGER acid The ID of the analysis code associated to the selected element type.
INTEGER geopcd The ID of the geometric option code associated with the selected element type.
INTEGER copcd The ID of the condense option code associated with the selected element type.
INTEGER fopcd The ID of the formulation option code associated with the selected element type.
INTEGER lopcd The ID of the laminate option code associated with the selected element type.
INTEGER etopid The ID of the element topology associated with the selected element type.
INTEGER dofsetid The ID of the degree of freedom associated with the selected element type.
INTEGER mlcd The ID of the material linearity code associated with the selected element type.
INTEGER mdcd The ID of the material directionality code associated with the selected element type.
INTEGER etypid The ID of the element type associated with the selected element type.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
External Dependencies and Side Effects:
Creates one record in the “selected_element_type” relation in the database. Verifies all input fields in their respective tables to verify their existence in the database before creating the entry.
---------------
db_count_elem_type(acid,atid,etcnt)
##########
Description:
This function will return a count of the number of distinct element types for each element dimensionality for a specified analysis code and type.
Input:
INTEGER acid This value specifies the analysis code id.
INTEGER atid This value specifies the analysis type id.
Output:
INTEGER etcnt(4)This value returns the count of element types,one for each element dimensionality.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_count_etop_for_a_code(acid,atid,count)
##########
Description:
This function will return a count of element types for all element topologies for a specific analysis code and type.
Input:
INTEGER acid This value specifies the analysis code id.
INTEGER atid This value specifies the analysis type id.
Output:
INTEGER count This value returns the count of element types for all element topologies.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
---------------
db_get_all_dof_set_names()
##########
Description:
Sets db_get_next_dof_set_names to start at the beginning of a list of dof_set code names and ids from the database.
Input:
None.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000007 The query specified has completed.
13000117 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses all records in the “dof_set” table in the database.
---------------
db_get_next_dof_set_names(name,id)
##########
Description:
Gets the next dof_set code names and id from the database.
Input:
None.
Output:
STRING name[31] The name retrieved from the database.
INTEGER id Id corresponding to the name retrieved.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000007 The query specified has completed.
13000117 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses all records in the “dof_set” table in the database.
---------------
db_get_all_form_opt_code_names()
##########
Description:
Sets db_get_next_form_opt_code_names to start at the beginning of a list of formulation option code names and ids from the database.
Input:
None.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000007 The query specified has completed.
13000117 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses all records in the “formulation_option” table in the database.
---------------
db_get_next_form_opt_code_names(name,id)
##########
Description:
Gets the next formulation option code name from the database.
Input:
None.
Output:
STRING name[31] The name retrieved from the database.
INTEGER id The ID retrieved from the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000007 The query specified has completed.
13000117 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses all records in the “formulation_option” table in the database.
---------------
db_get_all_geo_opt_code_names()
##########
Description:
Sets the db_get_next_geo_opt_code_names to start at the beginning of a list of geometric option code names.
Input:
None.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000007 The query specified has completed.
13000117 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses all records in the “geometric_option” table in the database.
---------------
db_get_next_geo_opt_code_names(name,id)
##########
Description:
Gets the next formulation option code name from the database.
Input:
None.
Output:
STRING name[31] The name retrieved from the database.
INTEGER id The ID retrieved from the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000007 The query specified has completed.
13000117 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses all records in the “geometric_option” table in the database.
---------------
db_get_all_lam_opt_code_names()
##########
Description:
Set db_get_next_lam_opt_code_names to start at the beginning of a list of laminate_option code names from the database.
Input:
None.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000007 The query specified has completed.
13000117 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses all records in the “laminate_option” table in the database.
---------------
db_get_next_lam_opt_code_names(name,id)
##########
Description:
Gets all laminate_option code names from the database,in get all,get next method.
Input:
None.
Output:
STRING name[31] The name retrieved from the database.
INTEGER id The ID retrieved from the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000007 The query specified has completed.
13000117 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses all records in the “laminate_option” table in the database.
---------------
db_get_region_for_geometry(entity_type,entity_id,rid)
##########
Description:
Returns the region id for the given entity type and entity id.
Input:
INTEGER entity_type The entity type.
INTEGER entity_id The entity ID.
Output:
INTEGER rid The region ID.
INTEGER <Return Value> Returns the success or failure of the routine.
External Dependencies and Side Effects:
This routine access the geometric_region_list table in the database.
---------------
db_get_region_ids_and_names(count,rid,name)
##########
Description:
Gets all region ids from the database.
Input:
INTEGER count The number of region IDs for which storage has been allocated by the calling routine.
Output:
INTEGER rid(count)The region IDs.
STRING name[31](count)The region names.
INTEGER <Return Value> Returns the success or failure of the routine.
External Dependencies and Side Effects:
This routine accesses the phys_prop_region table in the database.
---------------
db_get_elements_in_region_exp(count,rid,eid)
##########
Description:
Gets all element ids for a specified region id from the database.
Input:
INTEGER count The number of region IDs for which storage has been allocated by the calling routine.
INTEGER rid The region ID for which the list of element IDs is requested.
Output:
INTEGER eid()The element IDs for the region.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
External Dependencies and Side Effects:
Accesses specified records in the “element_in__region” table.
---------------
db_get_etop_for_a_code(acid,atid,count,etids)
##########
Description:
Retrieves a set of element_topology_ids based on analysis code id and analysis type id.
Input:
INTEGER acid The analysis code ID.
INTEGER atid The analysis type ID.
INTEGER count The count of element types,one for each element dimensionality.
Output:
INTEGER etids()The list of element type IDs retrieved.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Retrieves analysis_elements relationships.
---------------
db_get_a_phys_prop_w_nord(acid,ppid,defid,alias,rflag,atypes,dtype,nord,aival,arval,acval)
##########
Description:
Creates an allowable physical property entry in the database.
Input:
INTEGER acid The ID of the analysis code for which this physical property is to be allowed.
INTEGER ppid The ID of the physical property to be allowed.
INTEGER defid The ID of the physical property member set defn allowed.
Output:
STRING alias[] The alias to be used for this physical property from this analysis code.
INTEGER rflag Flag indicating whether or not this property is required.
INTEGER atypes(10)Allowable types for this physical property.
INTEGER dtype Default type for this physical prop.
INTEGER nord Neutral file order for this physical property from phys_prop_set_mbr_defn.
STRING aival[] PCL function to be used to validate integer values.
STRING arval[] PCL function to be used to validate real values.
STRING acval[] PCL function to be used to validate character values.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000004 Duplicate entry exists in table.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Creates one record in the “allowable_phys_prop” table in the database.
---------------
db_create_phys_prop_set_defn(id,name,num,ppids)
##########
Description:
Creates a physical property set entry in the database.
Input:
INTEGER id The ID of the physical property set to be created.
STRING name[] The name of the physical property set to be created.
INTEGER num The number of physical properties to be associated with this set.
INTEGER ppids()The IDs of the physical properties to be associated with this set defn.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000004 Duplicate entry exists in table.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Creates one record in the “phys_prop_set_defn” table in the database.
---------------
db_get_phys_prop_set_defn(id,name,num,ppids)
##########
Description:
Get physical property definition from the database.
Input:
INTEGER id The set ID for which the physical property IDs are requested.
Output:
STRING name[] The name of the physical property set.
INTEGER num The number of physical property values associated with this set.
INTEGER ppids()The IDs of the physical property values associated with this set.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
External Dependencies and Side Effects:
Specified.
---------------
db_get_allowable_phys_prop(acid,ppid,alias,rflag,atypes,dtype,nord,aival,arval,acval)
##########
Description:
Creates an allowable physical property entry in the database.
Input:
INTEGER acid The ID of the analysis code for which this physical property is to be allowed.
INTEGER ppid The ID of the physical property to be allowed.
Output:
STRING alias[] The alias to be used for this physical property from this analysis code.
INTEGER rflag Flag indicating whether or not this property is required.
INTEGER atypes(10)Allowable types for this physical property.
INTEGER dtype Default type for this physical prop.
INTEGER nord Neutral file order for this physical property.
STRING aival[] PCL function to be used to validate integer values.
STRING arval[] PCL function to be used to validate real values.
STRING acval[] PCL function to be used to validate character values.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000004 Duplicate entry exists in table.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Creates one record in the “allowable_phys_prop” table in the database.
---------------
db_get_selected_prop_set(atid,acid,geopcd,copcd,fopcd,lopcd,etopid,dofsetid,physprop)
##########
Description:
Gets a field in the database.
Input:
INTEGER atid The ID of the analysis type associated to the selected property set.
INTEGER acid The ID of the analysis code associated to the selected property set.
INTEGER geopcd The ID of the geometric option code associated with the selected property set.
INTEGER copcd The ID of the condense option code associated with the selected property set.
INTEGER fopcd The ID of the formulation option code associated with the selected property set.
INTEGER lopcd The ID of the laminate option code associated with the selected property set.
INTEGER etopid The ID of the element topology associated with the selected property set.
INTEGER dofsetid The ID of the physical property to be allowed.
Output:
STRING physprop The ID of the associated physical property set.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
External Dependencies and Side Effects:
Gets a record in the “selected_property_set” table.
---------------
db_delete_phys_prop_region(prop_reg_id)
##########
Description:
This function will delete a physical property region from the database.
Input:
INTEGER prop_reg_id This value specifies the physical property region id.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000002 Unrecoverable database error.
13000125 The property entered does not exist.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Deletes one record in the “phys_prop_region”,and any record associated to the specified physical property in the “element_in_region” or “geometric_region_list” relations in the database.
---------------
db_associate_geo_to_region(gid,gtype,gsid,rid)
##########
Description:
Associates a specified region to a geometric entity in the database.
Input:
INTEGER gid The internal ID for the geometric entity to associate with the region.
INTEGER gtype The type of geometric entity to which the region is being associated.
INTEGER gsid The internal sub_id for the geometric entity to associate with the region.
INTEGER rid The internal ID of the region being associated to the geometric entity.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000004 Duplicate entry exists in table.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Creates one record associating a region to a geometric entity in the database for the region id passed to the routine.
---------------
db_count_geo_in_region(rid,count)
##########
Description:
Retrieves the count of entities associated with a physical property region in the database.
Input:
INTEGER rid The physical property region ID for which information is requested.
Output:
INTEGER count The number of entities for the specified physical property region.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Counts all entities in the “phys_prop_region” relation in the database for a specified region id.
---------------
db_get_geo_in_region(count,rid,gid,gtype,gsid)
##########
Description:
Gets all geometric entities for a physical property region from the database.
Input:
INTEGER count The number of region IDs for which storage has been allocated by the calling routine.
INTEGER rid The physical property region for which the geometric entities are requested.
Output:
INTEGER gid()The IDs of the geometric entities associated with the specified physical property region.
INTEGER gtype()The type of the geometric entities associated with the specified physical property region.
INTEGER gsid()The sub-IDs of the geometric entities associated with the specified physical property region.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
External Dependencies and Side Effects:
Accesses records in the “geometric_region_list” relation by the physical property region id specified.
---------------
db_count_elements_in_region_exp(rid,count)
##########
Description:
Retrieves the number of elements in a specified region in the database.
Input:
INTEGER rid The region ID for which the element count is requested.
Output:
INTEGER count The number of physical_property_region items stored in the database.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Counts records in the “element_in_region” relation in the database for one specified region.
---------------
db_create_anl_elm_summary(acid,atid,etcnt)
##########
Description:
Stores an analysis_element_summary relationship.
Input:
INTEGER acid The analysis code ID.
INTEGER atid The analysis type ID.
INTEGER etcnt(4)The count of element types,one for each element dimensionality.
Output:
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Uses the analysis_element_summary relationship.
---------------
db_get_anl_elm_summary(acid,atid,etcnt)
##########
Description:
Retrieves an analysis_element_summary relationship
Input:
INTEGER acid The analysis code ID.
INTEGER atid The analysis type ID.
Output:
INTEGER etcnt(4)The count of element types,one for each element dimensionality.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Uses the analysis_element_summary relationship.
---------------
db_delete_anl_elm_summary(acid,atid,etcnt)
##########
Description:
Removes an analysis_element_summary relationship.
Input:
INTEGER acid The analysis code ID.
INTEGER atid The analysis type ID.
Output:
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Deletes a analysis_element_summary relationship.
---------------
db_create_analysis_elements(acid,atid,etcnt,etids,etnames)
##########
Description:
Stores a set of analysis_elements relationships.
Input:
INTEGER acid The analysis code ID.
INTEGER atid The analysis type ID.
INTEGER etcnt The count of element types to store.
INTEGER etids()The element type IDs to store.
STRING etnames[]()The element type names to go with the corresponding ID.
Output:
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Set analysis_elements relationships. Note that the etnames values are actually a denormalized form of the element_type_name field in the element_type relationship,placed in the analysis_elements relationship for speed.
---------------
db_delete_analysis_elements(acid,atid,etcnt,etids)
##########
Description:
Removes a set of analysis_elements relationships.
Input:
INTEGER acid The analysis code ID.
INTEGER atid The analysis type ID.
INTEGER etcnt The count of element types to delete.
INTEGER etids()The element type IDs to delete.
Output:
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Removes analysis_elements relationships.
---------------
db_get_analysis_elements(acid,atid,etcntMax,etcntFound,etids,etnames)
##########
Description:
Retrieves a set of analysis_elements relationships.
Input:
INTEGER acid The analysis code ID.
INTEGER atid The analysis type ID.
INTEGER etcntMax The size that the receiving arrays are dimensioned for.
Output:
INTEGER etcntFound The number of element type IDs and element type names found. Only the first etcntMax values will actually be returned.
INTEGER etids()The element type IDs retrieved.
STRING etnames[]()The element type names related to the corresponding IDs.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Retrieves analysis_elements relationships. Note that the etnames values are actually a denormalized form of the element_type_name field in the element_type relationship,placed in the analysis_elements relationship for speed.
---------------
db_get_all_elem_defn(acid,atid,eldim)
##########
Description:
Gets all the definitions for all requested elements in get all,get next method.
Input:
INTEGER acid The analysis code ID for the requested element definition.
INTEGER atid The analysis type ID for the requested element definition.
INTEGER eldim The dimensionality for the requested element definition.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
13000117 The query specified has completed.
External Dependencies and Side Effects:
Accesses the “selected_element_type” and “element_type” table in the database.
---------------
db_get_next_elem_defn(etype_id,ename)
##########
Description:
Gets all the definitions for all requested elements in get all,get next method.
Input:
None.
Output:
INTEGER etype_id The ID of the next element type.
STRING ename[31] The name of the next element type.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
13000117 The query specified has completed.
External Dependencies and Side Effects:
Accesses the “selected_element_type” and “element_type” table in the database.
---------------
db_bulk_get_possible_dof_sets2(etid,atid,acid,coc,goc,foc,loc,nbr,dsid)
##########
Description:
This function will retrieve all possible values of the degrees of freedom sets for the specified input options.
Input:
INTEGER etid This value specifies the id value of the element type.
INTEGER atid This value specifies the id value of the analysis type.
INTEGER acid This value specifies the id value of the analysis code.
INTEGER coc This value specifies the id value of the condense option code.
INTEGER goc This value specifies the id value of the geometric option code.
INTEGER foc This value specifies the id value of the formulation option code.
INTEGER loc This value specifies the id value of the lamination option code.
Output:
INTEGER nbr This value returns the number of degrees of freedom set id values returned in the output value dsid.
INTEGER dsid(nbr)This value returns the unique degrees of freedom set id values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Fetches all dof set ids for the input set of parameters.
---------------
db_bulk_get_possible_lam_opts2(etid,atid,acid,goc,coc,nbr,loc)
##########
Description:
Retrieves all possible values of the laminate option for the specified input options.
Input:
INTEGER etid The ID of the element type selected by the user.
INTEGER atid The ID of the analysis type currently selected.
INTEGER acid The ID of the analysis code currently selected.
INTEGER goc The ID of the geometric option code selected.
INTEGER coc The ID of the condense option code selected.
Output:
INTEGER nbr The number of laminate option codes that were found for the above specified set of parameters.
INTEGER loc()The unique laminate option code values that were found for the above specified set of values.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Fetches all laminate option codes for the input set of parameters.
---------------
db_bulk_get_possible_form_opts2(etid,atid,acid,goc,coc,loc,nbr,foc)
##########
Description:
Retrieves all possible values of the formulation option for the specified input options.
Input:
INTEGER etid The ID of the element type selected by the user.
INTEGER atid The ID of the analysis type currently selected.
INTEGER acid The ID of the analysis code currently selected.
INTEGER goc The ID of the geometric option code selected.
INTEGER coc The ID of the condense option code selected.
INTEGER loc The ID of the location option code selected.
Output:
INTEGER nbr The number of formulation option codes found for the above specified set of parameters.
INTEGER foc()The unique formulation option code values that were found for the above specified set of values.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Fetches all formulation option codes for the input set of parameters.
---------------
db_bulk_get_possible_dof_sets1(etid,atid,acid,nbr,dsid)
##########
Description:
This function will retrieve all possible values of the degrees of freedom sets for the specified input options.
Input:
INTEGER etid This value specifies the id value of the element type.
INTEGER atid This value specifies the id value of the analysis type.
INTEGER acid This value specifies the id value of the analysis code.
Output:
INTEGER nbr This value returns the number of degrees of freedom set id values returned in the output value dsid.
INTEGER dsid(nbr)This value returns the unique degrees of freedom set id values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Fetches all dof set ids for the input set of parameters.
---------------
db_bulk_get_possible_lam_opts1(etid,atid,acid,nbr,loc)
##########
Description:
Retrieves all possible values of the laminate option for the specified input options.
Input:
INTEGER etid The ID of the element type selected by the user.
INTEGER atid The ID of the analysis type currently selected.
INTEGER acid The ID of the analysis code currently selected.
Output:
INTEGER nbr The number of laminate option codes that were found for the above specified set of parameters.
INTEGER loc()The unique laminate option code values that were found for the above specified set of values.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Fetches all laminate option codes for the input set of parameters.
---------------
db_bulk_get_possible_geo_opts1(etid,atid,acid,nbr,goc)
##########
Description:
Retrieves all possible values of the geometric option for the specified input options.
Input:
INTEGER etid The ID of the element type selected by the user.
INTEGER atid The ID of the analysis type currently selected.
INTEGER acid The ID of the analysis code currently selected.
Output:
INTEGER nbr The number of geometric option codes that were found for the above specified set of parameters.
INTEGER goc()The unique geometric option code values that were found for the above specified set of values.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Fetches all geometric option codes for the input set of parameters.
---------------
db_bulk_get_possible_form_opts1(etid,atid,acid,nbr,foc)
##########
Description:
Retrieves all possible values of the formulation option for the specified input options.
Input:
INTEGER etid The ID of the element type selected by the user.
INTEGER atid The ID of the analysis type currently selected.
INTEGER acid The ID of the analysis code currently selected.
Output:
INTEGER nbr The number of formulation option codes found for the above specified set of parameters.
INTEGER foc()The unique formulation option code values that were found for the above specified set of values.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Fetches all formulation option codes for the input set of parameters.
---------------
db_bulk_get_selected_etops_mat(etid,atid,acid,goc,foc,loc,dsid,coc,nbr,etop)
##########
Description:
Retrieves all possible values of element topology for the specified input options. All values must be input for this select.
Input:
INTEGER etid The ID of the element type selected by the user.
INTEGER atid The ID of the analysis type currently selected.
INTEGER acid The ID of the analysis code currently selected.
INTEGER goc The code for the geometric option if it has been uniquely determined at point. otherwise,zero.
INTEGER foc The code for the formulation option if it has been uniquely determined at point. otherwise,zero.
INTEGER loc The code for the laminate option if it has been uniquely determined at point. otherwise,zero.
INTEGER dsid The ID for the dof set if it has been uniquely determined at point. otherwise,zero.
Output:
INTEGER nbr The number of formulation option codes found for the above specified set of parameters.
INTEGER etop()The unique element topology values that were found for the above specified set of values.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Fetches all element topologies for the input set of parameters.
---------------
db_bulk_get_possible_matl_dirs(etid,atid,acid,goc,foc,loc,dsid,coc,mlc,nbr,mdc)
##########
Description:
Retrieves all possible values of the material directionality option for the specified input options. If an input option is 0,it does not have a uniquely assigned value yet. The first three parameters may not be zero.
Input:
INTEGER etid The ID of the element type selected by the user.
INTEGER atid The ID of the analysis type currently selected.
INTEGER acid The ID of the analysis code currently selected.
INTEGER goc The code for the geometric option if it has been uniquely determined at point. otherwise,zero.
INTEGER foc The code for the formulation option if it has been uniquely determined at point. otherwise,zero.
INTEGER loc The code for the laminate option if it has been uniquely determined at point. otherwise,zero.
INTEGER dsid The ID for the dof set if it has been uniquely determined at point. otherwise,zero.
INTEGER coc The ID for the condense option if it has been uniquely determined at point. otherwise,zero.
INTEGER mlc The code for the material linearity if it has been uniquely determined at point. otherwise,zero.
Output:
INTEGER nbr The number of material directionality codes that were found for the above specified set of parameters.
INTEGER mdc()The unique material directionality code value that were found for the above specified set of values.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Fetches all material directionality codes for the input set of parameters.
---------------
db_bulk_get_possible_matl_lins(etid,atid,acid,goc,foc,loc,dsid,coc,mdc,nbr,mlc)
##########
Description:
Retrieves all possible values of the material linearity option for the specified input options. If an input option is 0,it does not have a uniquely assigned value yet. The first three parameters may not be zero.
Input:
INTEGER etid The ID of the element type selected by the user.
INTEGER atid The ID of the analysis type currently selected.
INTEGER acid The ID of the analysis code currently selected.
INTEGER goc The code for the geometric option if it has been uniquely determined at point. otherwise,zero.
INTEGER foc The code for the formulation option if it has been uniquely determined at point. otherwise,zero.
INTEGER loc The code for the laminate option if it has been uniquely determined at point. otherwise,zero.
INTEGER dsid The ID for the dof set if it has been uniquely determined at point. otherwise,zero.
INTEGER coc The ID for the condense option if it has been uniquely determined at point. otherwise,zero.
INTEGER mdc The code for the material directionality if it has been uniquely determined at point. otherwise,zero.
Output:
INTEGER nbr The number of material linearity codes that were found for the above specified set of parameters.
INTEGER mlc()The unique material linearity code value that were found for the above specified set of values.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Fetches all material linearity codes for the input set of parameters.
---------------
db_get_all_pp_ids_and_names()
##########
Description:
This function will set the cursor to the start of a list of physical property id,name and data type values.
Input:
None.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_next_pp_ids_and_names(pp_id,pp_name,datatype)
##########
Description:
This function will get the next physical property id,name,and data type from the database.
Input:
None.
Output:
INTEGER pp_id This value returns the physical property id value.
STRING pp_name[80] This value returns the physical property name.
INTEGER datatype This value returns the physical property datatype.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000142 The MPC was not found in the database.
13000117 The query specified has completed.
External Dependencies and Side Effects:
Accesses records in the phys_prop table in the database.
---------------
db_set_comp_lam(mat_name,num_plies,ply_names,thicknesses,orientations,iconven,offset,offset_def)
##########
Description:
This function will set laminate construction data in the laminate and laminate_layer tables in the database.
Input:
STRING mat_name[31] This value specifies the name of the material.
INTEGER num_plies This value specifies the number of plies.
STRING ply_names[31*num_plies] This value specifies a list of ply names. See the remarks below for details on the use of this value.
REAL thicknesses(num_plies)This value specifies a list of ply thicknesses.
REAL orientations(num_plies)This value specifies a list of ply orientations.
INTEGER iconven This value specifies the stacking sequence convention.
REAL offset This value specifies the offset.
LOGICAL offset_def This value specifes,when set to TRUE,that the input value offset is to be used. When set to FALSE,the input value offset will be ignored.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Remarks:
The input value ply_names is a string that consists of the number of 32 character fields specified by the input value num_plies. If an individual ply name is less that 32 characters in length it must be padded by concatinating spaces so that the total name length is 32 characters.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
13000120 The material specified in the query was not found.
13000136 The specified material has an invalid directionality flag.
External Dependencies and Side Effects:
This routine access the material,laminate and laminate_layer tables.
---------------
pref_anal_get(anal_code,anal_type,mod_suf,res_suf)
##########
Description:
Get the Analysis Preference parameters.
Input:
None
Output:
STRING anal_code[31] Analysis Code Name.
STRING anal_type[31 Analysis Type.
STRING mod_suf[4] Model File Suffix.
STRING res_suf[4] Results File Suffix.
INTEGER <Return Value> 0: no error.1: fatal error.
Error Conditions:
None.
---------------
pref_anal_set(anal_code,anal_type,mod_suf,res_suf)
##########
Description:
Set the Analysis Preference parameters.
Input:
STRING anal_code[31] Analysis Code Name.
STRING anal_type[31] Analysis Type.
STRING mod_suf[4] Model File Suffix.
STRING res_suf[4] Results File Suffix.
Output:
INTEGER <Return Value> 0: no error.1: fatal error
Error Conditions:
None.
---------------
pref_confirm_get(confirm)
##########
Description:
Get the Global Preference Confirm status.
Input:
None
Output:
LOGICAL confirm Confirm Flag.
INTEGER <Return Value> 0: no error.1: fatal error.
Error Conditions:
None.
---------------
pref_display_method_get(disp_meth)
##########
Description:
Get the Graphics Display Method Preference type.
Input:
None
Output:
INTEGER disp_meth Display Method.
INTEGER <Return Value> 0: no error.1: fatal error.
Error Conditions:
None.
---------------
pref_entity_dp_get(ed_prop)
##########
Description:
Get the Entity Display Property Preference.
Input:
None
Output:
STRING ed_prop[] Entity Display Property.
INTEGER <Return Value> 0: no error.1: fatal error.
Error Conditions:
None.
---------------
pref_entity_dp_set(ed_prop)
##########
Description:
Set the Entity Display Property Preference.
Input:
STRING ed_prop[] Entity Display Property.
Output:
INTEGER <Return Value> 0: no error.1: fatal error.
Error Conditions:
None.
---------------
pref_env_get_integer(prefname,value)
##########
Description:
Retrieve the value of an integer preference.
Input:
STRING prefname[] Name of preference to load.
Output:
INTEGER value Result preference integer.
INTEGER <Return Value> 0: no error,else see error returned.
Error Conditions:
12002001 The environment preference was not found.
12002002 The environment preference is of the wrong datatype.
---------------
pref_env_get_logical(prefname,value)
##########
Description:
Retrieve the value of a logical preference.
Input:
STRING prefname[] Name of preference to load.
Output:
LOGICAL value Result preference logical.
INTEGER <Return Value> 0: no error,else see returned error.
Error Conditions:
12002001 The environment preference was not found.
12002002 The environment preference is of the wrong datatype.
---------------
pref_env_get_real(prefname,value)
##########
Description:
Retrieve the value of a real preference.
Input:
STRING prefname[] Name of preference to load.
Output:
REAL value Result preference real.
INTEGER <Return Value> 0: no error,else see error returned.
Error Conditions:
12002001 The environment preference was not found.
12002002 The environment preference is of the wrong datatype.
---------------
pref_env_get_string(prefname,maxlen,value)
##########
Description:
Retrieve the value of a string preference.
Input:
STRING prefname[] Name of preference to load.
INTEGER maxlen Max length of return string w/o null.
Output:
STRING value[] Result preference string.
INTEGER <Return Value> 0; no error,else see error returned.
Error Conditions:
12002001 The environment preference was not found.
12002002 The environment preference is of the wrong datatype.
12002003 The string buffer is too small for the preference.
---------------
pref_fa_get(<lbc_color>,<lbc_display>,<ep_color>,<ep_display>,<display_fem)
##########
Description:
This function gets the color preferences and flags for the display of Loads/Boundary Conditions and Element Properties. The function pref_fa_set sets the attributes for display of Loads/ Boundary Conditions and Element Properties.
Input:
None
Output:
INTEGER ARRAY lbc_color()Load/Boundary Condition colors.
LOGICAL ARRAY lbc_display()Load/Boundary Condition display flags.
INTEGER ARRAY ep_color()Element Property colors.
LOGICAL ARRAY ep_display()Element Property display flags.
LOGICAL display_fem Display on FEM Only flag.
INTEGER <Return Value> 0 for success ,1 for failure
Error Conditions:
None
---------------
pref_fa_set(<set_flags>,<lbc_color>,<lbc_display>,<ep_color>,<ep_display>,<display_fem>)
##########
Description:
This function sets the color preferences,flags for the Display of Loads/Boundary Conditions and Element Properties. The function should preferably be used from the graphical user-interface menu,Display,Load/BC/Element Props.
Input:
LOGICAL ARRAY set_flags()Array of logical values used to determine if a preference is set.
INTEGER ARRAY lbc_color()Load/Boundary Condition colors.
LOGICAL ARRAY lbc_display()Load/Boundary Condition display flags.
INTEGER ARRAY ep_color()Element Property colors.
LOGICAL ARRAY ep_display()Element Property display flags.
LOGICAL display_fem Display on FEM Only flag.
Output:
INTEGER <Return Value> 0 - no error ,1 - fatal error.
Error Conditions:
None
---------------
pref_geo_cid_int_string(cid,sdb_string)
##########
Description:
Construct the selectdatabox string in SDB_STRING from the coordinate frame ID specified in CID. Assume CID is a valid coordinate frame. SDB_STRING on input should be long enough to accommodate the completed string.
Input:
INTEGER cid Default Coordinate Frame ID.
Output:
STRING sdb_string[] SelectDataBox string.
INTEGER <Return Value> 0: no error,else see error returned.
Error Conditions:
12001005 The string representation of the selectdatabox label for a coordinate frame exceeds 25 characters.
---------------
pref_geo_cid_string_int(sdb_string,cid)
##########
Description:
Get the default coordinate frame ID in CID from the selectdatabox input string and verify the coordinate frame.
Input:
STRING sdb_string[] SelectDataBox string.
Output:
INTEGER cid Default Coordinate Frame ID.
INTEGER <Return Value> 0: no error. 1: fatal error.
Error Conditions:
None.
---------------
pref_geo_get(defcid,rgtol)
##########
Description:
Get the Geometric Modeling Preference parameters.
Input:
None
Output:
INTEGER defcid Default Coordinate Frame ID.
REAL rgtol Relative Geometric Tolerance.
INTEGER <Return Value> 0: no error. 1: fatal error.
Error Conditions:
None.
---------------
pref_get_anal_attributes(anal_code,anal_type,mod_suf,res_suf)
##########
Description:
Get the Analysis Preference suffixes.
Input:
STRING anal_code[31] Analysis Code Name.
Output:
STRING anal_type[31] Analysis Type.
STRING mod_suf[4] Model File Suffix.
STRING res_suf[4] Results File Suffix.
INTEGER <Return Value> 0: no error. 1: fatal error.
Error Conditions:
None.
---------------
pref_get_anal_code_count(num_codes)
##########
Description:
Get the number of analysis codes and prepare for their fetch by calling DB_GET_ALL_ANAL_CODES.
Input:
None
Output:
INTEGER num_codes Number of Analysis Codes in d.b.
INTEGER <Return Value> 0: no error. 1: fatal error.
Error Conditions:
None.
---------------
pref_get_anal_type_count(anal_code,num_types)
##########
Description:
Get the number of analysis types associated with ANAL_CODE and prepare for their fetch by calling DB_GET_ALL_ANAL_TYPES.
Input:
STRING anal_code [31] Default analysis code.
Output:
INTEGER num_types Number of Analysis Types in d.b.
INTEGER <Return Value> 0: no error. 1: fatal error.
Error Conditions:
None.
---------------
pref_get_next_anal_code(anal_code)
##########
Description:
Get next analysis code name.
Input:
None
Output:
STRING anal_code[31] Analysis Code Name.
INTEGER <Return Value> 0: no error. 1: fatal error.
Error Conditions:
None.
---------------
pref_get_next_anal_type(anal_type)
##########
Description:
Get next analysis type.
Input:
None
Output:
STRING anal_type[31] Analysis type.
INTEGER <Return Value> 0: no error. 1: fatal error.
Error Conditions:
None.
---------------
pref_global_get(confirm,wm_opt,glo_mod_tol)
##########
Description:
Get the Global Preference parameters.
Input:
None
Output:
LOGICAL confirm Confirm Flag.
INTEGER wm_opt Warning Message Option. 1=none 2=ring bell 3=non-modal form
REAL glo_mod_tol Global Model Tolerance.
INTEGER <Return Value> 0: no error. 1: fatal error.
Error Conditions:
None.
---------------
pref_graphics_get(disp_meth,p_color,s_color,e_color,extend,fit_view,center,hard_rend,anti_alias,td_vector,rt_display,s_light,p_marker,s_marker,m_color,m_size,gm_size,nm_size,l_format,nsigd)
##########
Description:
Get the Graphics Preference parameters.
Input:
None
Output:
INTEGER disp_meth Display Method.
INTEGER p_color Primary Color.
INTEGER s_color Secondary Color.
INTEGER e_color Error Color.
LOGICAL extend Autoextend Flag.
LOGICAL fit_view Autofitview Flag.
LOGICAL center Autocenter Flag.
LOGICAL hard_rend Hardware Rendering Flag.
LOGICAL anti_alias Anti-Alias Flag.
LOGICAL td_vector 3-D Vector Display Flag.
LOGICAL rt_display Result Title Display Flag.
LOGICAL s_light Symmetric Light Flag	.
INTEGER p_marker Primary Marker.
INTEGER s_marker Secondary Marker.
INTEGER m_color Marker Color.
INTEGER m_size Marker Size.
INTEGER gm_size Grid Marker Size.
INTEGER nm_size Node Marker Size.
INTEGER l_format Results Label Format.
INTEGER nsigd Number of significant results digits.
INTEGER <Return Value> 0: no error. 1: fatal error.
Error Conditions:
None.
---------------
pref_graphics_marker_data_get(p_marker,s_marker,m_color,m_size)
##########
Description:
Get the Graphics Preference parameters for markers.
Input:
None
Output:
INTEGER p_marker Primary Marker.
INTEGER s_marker Secondary Marker.
INTEGER m_color Marker Color.
INTEGER m_size Marker Size.
INTEGER <Return Value> 0: no error.1: fatal error.
Error Conditions:
None.
---------------
pref_entity_set(set_flag,ed_prop,r_style,precision,fa_vectors,dv_results,d_defo,shcolor,gcolor,lcolor,pcolor,hpcolor,tscolor,bdcolor,ncolor,pecolor,bcolor,trcolor,qcolor,tecolor,wcolor,hecolor,mcolor,g_label,l_label,p_label,hp_label,ts_label,bd_label,n_label,pe_label,b_label,tr_label,q_label,te_label,w_label,he_label,m_label)
##########
Description:
Set the Graphics Entity Types Preference parameters.
Input:
LOGICAL set_flag(37)Flag array for setting individual Preferences.
STRING ed_prop[] Entity Type Display Property.
STRING r_style[] Render Style.
INTEGER precision 0=fast.1=accurate.
LOGICAL fa_vectors Display Functional Ass. Vectors.
LOGICAL dv_results Display Vector Results Flag.
LOGICAL d_defo Display Deformation Flag.
INTEGER shcolor Shade Color.
INTEGER gcolor Grid Color.
INTEGER lcolor Line Color.
INTEGER pcolor Patch Color.
INTEGER hpcolor Hyperpatch Color.
INTEGER tscolor Trimmed Surface Color.
INTEGER bdcolor Body Color.
INTEGER ncolor Node Color.
INTEGER pecolor Point Element Color.
INTEGER bcolor Bar Color.
INTEGER trcolor Tri Color.
INTEGER qcolor Quad Color.
INTEGER tecolor Tet Color.
INTEGER wcolor Wedge Color.
INTEGER hecolor Hex Color.
INTEGER mcolor MPC Color.
LOGICAL g_label Grid Label Flag.
LOGICAL l_label Line Label Flag.
LOGICAL p_label Patch Label Flag.
LOGICAL hp_label Hyperpatch Label Flag.
LOGICAL ts_label Trimmed Surface Label Flag.
LOGICAL bd_label Body Label Flag.
LOGICAL n_label Node Label Flag.		
LOGICAL pe_label Point Element Label Flag.
LOGICAL b_label Bar Label Flag.
LOGICAL tr_label Tri Label Flag.
LOGICAL q_label Quad Label Flag.
LOGICAL te_label Tet Label Flag.
LOGICAL w_label Wedge Label Flag.
LOGICAL he_label Hex Label Flag.
LOGICAL m_label MPC Label Flag.
Output:
INTEGER <Return Value> 0: no error.1: fatal error.
Error Conditions:
None.
---------------
db_get_pref(pref_id,data_type,int_pref,log_pref,real_pref,char_pref)
##########
Description:
This function will get a preference from the database.
Input:
INTEGER pref_id This value specifies the id value of the preference to be retrieved.
INTEGER data_type This value is not used.
Output:
INTEGER int_pref This value returns the integer preference value.
LOGICAL log_pref This value returns the logical preference value.
REAL real_pref This value returns the real preference value.
STRING char_pref[31] This value returns the string preference value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000002 Unrecoverable database error.
13000088 Preference not found.
---------------
db_add_pref(id,data_type,int_pref,log_pref,real_pref,name)
##########
Description:
Adds preferences to the database.
Input:
INTEGER id The internal id of the preference to be added to the database
INTEGER data_type The data type of the preference to be added to the database
INTEGER int_pref The value of the integer preference to be added to the database
INTEGER log_pref The value of the logical preference to be added to the database
REAL real_pref The value of the real preference to be added to the database
STRING name[31] The value of the character preference to be added to the database
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason
Error Conditions:
13000088 Preference not found
13000002 Unrecoverable database error
---------------
db_create_client_data(id,client_label,client_type,num_logicals,num_integers,num_reals,num_strings,max_string_length,p_logical_data,p_integer_data,p_real_data,p_string_data)
##########
Description:
Creates a client defined entity in the database.
Input:
INTEGER client_label The external id of the db entity being created. if input as ”0”,the database will assign a label. if a number is input,the database will ensure that it is not a duplicate,then insert it.
INTEGER client_type Type of data uniquely defined by the client.
INTEGER num_logicals The number of logical data items being associated with this entity.
INTEGER num_integers The number of integer data items being associated with this entity.
INTEGER num_reals The number of real data items being associated with this entity.
INTEGER num_strings The number of real data items being associated with this entity.
INTEGER max_string_length The maximum length of any one string.
LOGICAL p_logical_data Pointer to an array of logicals.
INTEGER p_integer_data Pointer to an array of integers.
REAL p_real_data Pointer to an array of reals.
STRING p_string_data[] Pointer to an array of strings.
Output:
INTEGER id This filed receives the id of the client db entity that was just created. this is the uniques database identifier for the entity.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000004 Duplicate entry exists in table.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Creates one record in the “xxx_client_entity” table in the database. Also,depending upon the input data,this routine creates zero or more records in the “xxx_client_interger_data”,or “xxx_client_logical_data”,or “xxx_client_real_data”,or
---------------
db_count_client_labels_by_type(client_type,nbr_of_labels)
##########
Description:
Returns the number of all labels with a specified type.
Input:
INTEGER client_type Type of data uniquely defined by the client.
Output:
INTEGER nbr_of_labels The number of all labels.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000126 Label not found.
13000007 other database error.
---------------
db_count_general_field(<field_id>,<count>)
##########
Description:
This function returns the count of terms in a field. It returns an integer status of 0 on success and 1 on failure.
Input:
INTEGER field_id The id of the field.
Output:
INTEGER count	 The count of term_ids in the field.
INTEGER <Return Value> 0 for success and 1 for failure.
Error Conditions:
None.
---------------
db_get_all_client_data(id,num_logicals,num_integers,num_reals,num_strings,max_string_length,p_logical_data,p_integer_data,p_real_data,p_string_data)
##########
Description:
Gets all data related to a specified client data entity from the database.
Input:
INTEGER id Id of the client entity for which data is requested.
INTEGER num_logicals Num of logical numbers for which storage has been allocated by the calling routine.
INTEGER num_integers Num of integer numbers for which storage has been allocated by the calling routine.
INTEGER num_reals Num of real numbers for which storage has been allocated by the calling routine.
INTEGER num_strings Num of strings for which storage has been allocated by the calling routine.
INTEGER max_string_length Max number of characters to copy into p_string buffer.
Output:
LOGICAL p_logical_data(num_logicals)Pointer to an array of logicals.
INTEGER p_integer_data()Pointer to an array of integers.
REAL p_real_data()Pointer to an array of reals.
STRING p_string_data[]()Pointer to an array of characters.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
DbFUBAR
DbClientEntityNotFound
DbOtherFailure
External Dependencies and Side Effects:
Accesses multiple records in the “xxx_client_integer_data”,“xxx_client_logical_data”,“xxx_client_real_data”,“xxx_client_string_data” in the database.
---------------
db_get_client_data(client_label,id,client_type,num_logicals,num_integers,num_reals,num_strings,max_string_length)
##########
Description:
Gets a client data entity from the database by user defined label.
Input:
INTEGER client_label External id for the user defined entity.
Output:
INTEGER id Internal id for the user defined entity.
INTEGER client_type Type of data uniquely defined by the client.
INTEGER num_logicals The number of logical data items being associated with this entity.
INTEGER num_integers The number of integer data items being associated with this entity.
INTEGER num_reals The number of real data items being associated with this entity.
INTEGER num_strings The number of string items being associated with this entity.
INTEGER max_string_length The maximum length of any one string.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses one record in the “xxx_client_data” table in the database.
---------------
db_get_client_id_by_label(client_label,id)
##########
Description:
Returns client id given the label.
Input:
INTEGER client_label The client label.
Output:
INTEGER id The client id corresponding to the label.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000126 The entity specified in the query was not labeled.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses a record in the “xxx_client_entity” table.
---------------
db_get_client_labels_by_type(client_type,labels)
##########
Description:
Returns all labels with a specified type.
Input:
INTEGER client_type Type of data uniquely defined by the client.
Output:
INTEGER labels()An array of labels.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000201 The specified client entity was not found.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses multiple records in the “xxx_client_entity” table.
---------------
db_get_client_label_by_id(id,client_label)
##########
Description:
Returns client label given the id.
Input:
INTEGER id The client id.
Output:
INTEGER client_label The label corresponding to the id.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000201 The specified client entity was not found.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses a record in the “xxx_client_entity” table.
---------------
db_get_next_client_entity_label(label)
##########
Description:
This function will get the value of the next available client entity label from the database. This value should be equal to the highest value client entity label in use plus one.
Input:
none
Output:
INTEGER label Highest entity label used.
INTEGER <Return Value> This value returns the next available client entity label.
Error Conditions:
13000201 The specified client entity was not found.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Selects the largest client_entity_label from the database.
---------------
db_delete_client_data(label)
##########
Description:
Delete client data from the database.
Input:
INTEGER label User defined label of the data to be deleted.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000201 The specified client entity was not found.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Deletes one record in the “xxx_client_entity” table in the database,and depending on the client data,all associated records.
---------------
db_get_db_version(db_ver)
##########
Description:
Retrieves the database version.
Input:
none
Output:
STRING db_ver[] Database version. Success or failure of routine.
INTEGER <Return Value> SQL error code.
---------------
db_get_general_field(<field_id>,<term_id>,<field_data_length>,<term_field_id>,<term_function_type>,<field_data>)
##########
Description:
This function returns term_field_id,term_function_types and field_data from the field form. The input to the function are the field_id,term_id and the length of the field data. It returns a positive integer indicating the status of the execution of the function.
Input:
INTEGER field_id The id of the field.
INTEGER term_id Term order of creation in the general field.
INTEGER field_data_length Length of the expression stored.
Output:
INTEGER	 term_field_id Field id of the term
INTEGER	 term_function_type Function type id 0 - Field expression. 1 - Utility functions. 2 - PCL Math Built-Ins. 3 - PCL String Built-Ins.
STRING field_data[ ] String containing the field expression.
INTEGER <return value> 0 for success and 1 for failure
Error Conditions:
None.
---------------
db_get_general_field_length(<field_id >,<count>,<term_id>,<field_data_length>)
##########
Description:
This function returns the term_id and field_data_length of the field_id from which the length of field is required. It returns a positive integer indicating the status of the execution of the function,0 for success.
Input:
INTEGER field_id The id of the field.
INTEGER count The count of term_ids in the field.
Output:
INTEGER ARRAY term_id()The term id's for the field.
INTEGER ARRAY field_data_length()Length of the strings of the field data.
INTEGER <return value> 0 for success and 1 for failure.
Error Conditions:
None.
---------------
db_get_model_file_suffix(name,suffix)
##########
Description:
Retrieves the model file suffix associated with the named analysis code.
Input:
STRING name[31] Name of the analysis code for which the suffix is to be retrieved.
Output:
STRING suffix[6] Location into which the named suffix is to be retrieved.
INTEGER <Return Value> Success or failure of routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
---------------
p3cm.close_2(detail)
##########
Description:
This function closes the Laminate Modeler Layup database.
Input:
INTEGER detail Value is 0 for closing the file.
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
None.
---------------
p3cm.create_book_layup2(num_plies_in,index_in,report_it,state,rep_togs,display_it,material,view_arrow,init_vector,disp_area,max_strn,angles,pattern,cutout,offval,pat_igs,pat_dxf,cut_igs,cut_dxf,curve_str,layer_str,hardcopy_it,options)
##########
Description:
This function creates the book report of the layup existing in the Laminate Modeler database. The layup report file “./filename.lm_report” is created. The postscript file “./filename.1_ply_1.ps.01” is also created.
Input:
INTEGER num_plies_in Number of plies in the database.
INTEGER index_in()Array of the index.
LOGICAL report_it Layup report option display.
STRING state[] Status of the layup report i.e. “Expand” or “Compress”
LOGICAL rep_togs(6)Array of the report which toggles display options “Index”,“Name”,“Type”,Multiplier”,“Side” & “Angle Offset”
LOGICAL display_it Ply data display option.
LOGICAL material Material . This is the Laminate Modeler Ply Graphics Display Option.
LOGICAL view_arrow Application Direction . This is the Laminate Modeler Ply Graphics Display Option.
LOGICAL init_vector Reference Direction . This is the Laminate Modeler Ply Graphics Display Option.
LOGICAL disp_area Selected Area. This is the Laminate Modeler Ply Graphics Display Option.
LOGICAL max_strn Maximum Strain . This is the Laminate Modeler Ply Graphics Display Option.
LOGICAL angles Angles. This is the Laminate Modeler Ply Graphics Display Option.
LOGICAL pattern Draped Pattern. This is the Laminate Modeler Ply Graphics Display Option.
LOGICAL cutout Flat Pattern. This is the Laminate Modeler Ply Graphics Display Option.
REAL offval Offset value. By default,value is 0.0.
LOGICAL pat_igs This is the Laminate Modeler Ply “Draped Pattern IGES files” Export Option.
LOGICAL pat_dxf This is the Laminate Modeler Ply “Draped Pattern DXF files” Export Option.
LOGICAL cut_igs This is the Laminate Modeler Ply “Flat Pattern IGES files” Export Option.
LOGICAL cut_dxf This is the Laminate Modeler Ply “Flat Pattern DXF files” Export Option.
STRING curve_str[] “POLYLINE” or “SPLINE”
STRING layer_str[] Layer String.
LOGICAL hardcopy_it Image creation display option.
STRING options[] “printer=Postscript Default,driver=Postscript,destination=Unknown,window=Current Viewport,save=YES,output_file=,paper=Letter,left_margin=0.5 in,right_margin=0.5 in,top_margin=0.5 in,bottom_margin=0.5 in,default_units=Inches,orientation=Landscape,copies=1,format=Black to White,background=White,lines_&_text=Black,line_weight=0.5 pts,text_scale=100%,image_size=Fit on Page,scale_factor=1.0,center=Yes,draw_borders=Yes,quality=Normal,color_model=RGB,gcr=75 %”
Output:
<Return Status> This function creates the layup report file “./filename.lm_report.0*”. and postscript file “./filename.1_ply_1.ps.0*” .
Error Conditions:
None
---------------
P3cm.create_laminates_layup_2(areaspec,an_code_name,an_type_name,orientation,prim_entity,switch_angle_in,sec_entity,num_tols,ang_tols,thick_tols,tol_areas,element_type,prefix,first_laminate_id,first_property_id,preview)
##########
Description:
This function creates the laminate layup in the Laminate Modeler database.
Input:
STRING areaspec[] “Select Area”,“ALL” or “Select Elements”
STRING an_code_name[] “MSC.Nastran”
STRING an_type_name[] “STRUCTURAL”
STRING orientation[] Laminate Orientation i.e. “Coordinate System”,“Vector”,“Angle” or “Laminate Only”.
STRING prim_entity[] Primary Coordinate System.
REAL switch_angle_in Switch Angle Value.
STRING sec_entity[] Secondary Coordinate System
INTEGER num_tols Tolerance number.
REAL ang_tols()Angle tolerance array. By default value is 5.0 degrees.
REAL thick_tols()Thickness tolerance array. By default value is 5.0 %
STRING tol_areas[]()Array of the define overrides
STRING element_type[] Selection of the element type for analysis model as below: "2D_Stan. Lam. Plate (CQUAD4/PCOMP)","2D_Rev. Lam. Plate (CQUAD4/PCOMP)"
STRING prefix[] Prefix i.e. LM_Layup.
INTEGER first_laminate_id First laminate identifier.
INTEGER first_property_id First property identifier.
LOGICAL preview Preview Option. TRUE for Display.
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
None
---------------
p3cm.create_layup_add_2(layup_name,layup_description,num_plies,ply_names,type_names,instances,sides,offsets,num_offs,off_values,off_flags,off_starts,off_views,off_areas,num_tols,ang_tols,thick_tols,tol_areas,model_flag,element_type,solid_flag,bacon_flag)
##########
Description:
This function creates the layup in the Laminate Modeler database.
Input:
STRING layup_name[] Laminate Modeler layup name.
STRING layup_description[] As Default,the description is: "LM_Layup created from : ./Filename by LAMINATE MODELER"
INTEGER num_plies Number of Laminate Modeler plies
STRING ply_names[]()Array of Laminate Modeler ply names
STRING type_names[]()Array of Laminate Material material types.
INTEGER instances()Array size depends upon the number of plies.
STRING sides[]()Array of sides. “Top”,“Bottom” and “Middle”.
REAL offset()Array of offsets values. By default it is 0.
INTEGER num_offs Offsets number.
REAL off_values()Offsets values array. By deault value is 0.0.
STRING off_flags[]()Offsets flags array.
REAL off_starts()Offsets starts array. By default value is 0.0.
REAL off_views()Offsets views array. By default value is 0.0.
STRING off_areas[]()Array of the define offsets selected areas values.
INTEGER num_tols Tolerance number.
REAL ang_tols()Angle tolerance array. By deault value is 5.0 degrees.
REAL thick_tols()Thickness tolerance array. By default value is 5.0 %
STRING tol_areas[]()Array of the define overrides
LOGICAL model_flag Analysis Model Display Option.
STRING element_type[] Selection of the element type for analysis model as below: "2D_Stan. Lam. Plate (CQUAD4/PCOMP)","2D_Rev. Lam. Plate (CQUAD4/PCOMP)"
LOGICAL solid_flag Solid element Option.
LOGICAL bacon_flag BACON Option.
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
-1 Could not create layup due to insufficient input data.
---------------
p3cm.create_material_add(type_name,material_name,analysis_material_name,thickness,max_strain,warp_weft_angle)
##########
Description:
This function creates the material name for Laminate Modeler database.
Input:
STRING type_name[] Material type in Laminate Modeler like “Paint”,“Scissor”,“Slide” or “Project”
STRING material_name[] Laminate Modeler material name
STRING analysis_material_name[] Created material name in the database.
REAL thickness Additional property of the material. By default the value of thickness is 0.1 unit.
REAL max_strain Additional property of the material. By default the value of the Maximum Strain is taken 60.0 degrees.
REAL warp_weft_angle Additional property of the material. By default the value of the Warp/Weft Angle is 90.0 degrees.
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
-1 Material name already used. Layup Module Error.
---------------
p3cm.create_ply_add_2(type_name,material_name,ply_name,start_pt,view_dirn,ref_dirn,ref_ang,warp_weft_angle,max_strain,step_length,axis_type,warpaxis_str,weftaxis_str,extn_type,max_sweeps,bounds,num_areas,area_strs,split_str)
##########
Description:
This function creates the new ply for Laminate Modeler database.
Input:
STRING type_name[] Material type in Laminate Modeler like “Paint”,“Scissor”,“Slide” or “Project”
STRING material_name[] Laminate Modeler Material Name
STRING ply_name[] Laminate Modeler Ply Name
REAL start_pt(3)Starting Point (3D coordinate)
REAL view_dirn(3)Application Direction as a 3D vector .
REAL ref_dirn(3)Reference Direction,by default it is [0.,0.,0.]
REAL ref_ang Reference Angle,by default it is 0.0.
REAL warp_weft_angle Additional Material Property. By default the value of the Warp/Weft Angle is 90.0 degrees.
REAL max_strain Additional Material Property. By default the value of the Maximum Strain is taken 60.0 degrees.
REAL step_length Step Length is the parameter of geometry. By default value is 1.0
INTEGER axis_type This is a Control Parameter used for Geometry i.e. 0 - None Axis type 1 - Geodesic Axis type 2 - Planner
STRING warpaxis_str[] Warp Axis String,By default value ““
STRING weftaxis_str[] Waft Axis String,By default value ““
INTEGER extn_type This is the extension type used for geometry control parameters: 1 - Geodesic 2 - Energy 3 - Maximum
INTEGER max_sweeps By default value is 0
REAL bounds()Boundaries Parameters Array for limit fabric size. This is the array of four elements for example: [minimum warp,maximum warp,minimum weft,maximum weft]
INTEGER num_areas Number of selected areas.
STRING area_strs[]()Array of the selected areas.
STRING split_str[] Split Definition selected either by Geometry or by FEM data.
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
-1 Could not create ply due to insufficient input data.
---------------
p3cm.create_results_failure(res_name,area,criterion,basis,num_mats,mat_names,mat_allows,name,ply_sort,ply_results,f ailure_index,reserve_factor,margin_safety,critical_component,critical_ply)
##########
Description:
This function creates the Laminate Modeler results by using the LM_Ply Failure Calculation method.
Input:
STRING res_name[]()Array of the results names,i.e. load case,subcase,primary result case,secondary result case & layer result case.
STRING area[] Selected area for results data.
STRING criterion[] Criteria set for getting the results i.e. “Maximum”,“Tsai-Wu”,“Hill”,“Haffman”,“Hakinson”,“Cowin” & “User Defiened”.
STRING basis[] Basis of the failure i.e. “STRESS” etc.
INTEGER num_mats Number of materials.
STRING mat_names[]()Array of the LM material for selected area and other parameters.
REAL mat_allows()Array of the material allowables.
STRING name[] Name of the created results.
LOGICAL ply_sort “Ply_Sort” Option is not yet implemented in the Laminate Modeler. By default it is FALSE.
LOGICAL ply_results Ply by Ply Results Display Option.
LOGICAL failure_index Failure Index Display Option.
LOGICAL reserve_factor “Reserve_Factor” Option is not yet implemented in the Laminate Modeler. By default it is FALSE.
LOGICAL margin_safety Margin of Safety Display Option.
LOGICAL critical_component Critical Component Display Option.
LOGICAL critical_ply Critical Ply Display Option.
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
-1 Module Error.
---------------
p3cm.create_results_mid_sort(res_name,area,num_mats,mat_names)
##########
Description:
This functions creates the Laminate Modeler results by using the material identifier sorting method.
Input:
STRING res_name[]()Array of the results names,i.e. load case,subcase,primary result case,secondary result case & layer result case.
STRING area[] Selected area for results data.
INTEGER num_mats Number of materials.
STRING mat_names[]()Array of the LM material for selected area and other parameters.
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
-1 Module Error.
---------------
p3cm.create_results_sort(res_name)
##########
Description:
This functions creates the Laminate Modeler results by using the LM_Ply Sorting method.
Input:
STRING res_name[]()Array of the results names,i.e. load case,subcase,primary result case,secondary result case & layer result case.
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
-1 Module Error.
---------------
p3cm.delete_laminates(num_laminates,laminates)
##########
Description:
This function deletes the laminates from the Laminate Modeler database.
Input:
INTEGER num_laminates Number of laminates.
STRING laminates[](num_laminates)Array of the laminates.
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
None.
---------------
p3cm.delete_material_name(type_name,material_name)
##########
Description:
This function deletes the material name from the database.
Input:
STRING type_name[] Material type in Laminate Modeler like “Paint”,“Scissor”,“Slide” or “Project”.
STRING material_name[] Laminate Modeler material name.
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
-1 Could not find specified material.
---------------
p3cm.delete_ply_name(type_name,ply_name)
##########
Description:
This function deletes the ply name from the Laminate Modeler database.
Input:
STRING type_name[] Material type in Laminate Modeler like “Paint”,“Scissor”,“Slide” or “Project”
STRING ply_name[] Laminate Modeler ply name
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
-1 Could not find specified layer.
---------------
p3cm.delete_propsets(num_propsets,propsets)
##########
Description:
This function deletes the property sets from the Laminate Modeler Database.
Input:
INTEGER num_propsets Number of property sets.
STRING propsets[](num_propsets)Array of the property sets.
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
13000119 Property Sets could not retrieved from the database. 0 Property Sets deleted.
---------------
p3cm.import_model_file_2(mesh,materials,node_id_offset,elem_id_offset,create_group,gr_name)
##########
Description:
This function imports the model file from Laminate Modeler database.
Input:
LOGICAL mesh Mesh to be imported.
LOGICAL materials Materials to be imported.
LOGICAL create_group Created group to be imported.
INTEGER node_id_offset Node ID offset.
INTEGER elem_id_offset Element ID offset.
STRING gr_name[] Name of the created group.
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
None
---------------
p3cm.import_plies_file_2(num_files,files,angle_tolerance,distance_tolerance,create_layup,preview,merge_nodes)
##########
Description:
This function imports the ply file from Laminate Modeler database.
Input:
INTEGER num_files Number of imported ply files
STRING files[](num_files)Array of the imported ply file names.
REAL angle_tolerance Angle tolerance in degrees. By default value is 25. deg.
REAL distance_tolerance Distance tolerance in % . By default value is 5.0 %. This value is either relative or absolute.
LOGICAL create_layup Add plies to layup option.
LOGICAL preview Preview plies before import option.
LOGICAL merge_nodes Merge Nodes before import option.
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
-1 Could not open file for reading.
---------------
p3cm.modify_material(type_name,old_material_name,material_name,analysis_material_name,thickness,max_strain,warp_weft_angle)
##########
Description:
This function modifies the existing material properties for Laminate Modeler database.
Input:
STRING type_name[] Material type in Laminate Modeler like “Paint”,“Scissor”,“Slide” or “Project”
STRING old_material_name[] Laminate Modeler existing Material Name
STRING material_name[] Laminate Modeler modified Material Name
STRING analysis_material_name[] Created Material Name in the database.
REAL thickness Additional property of the material. By default the value of thickness is 0.1 unit.
REAL max_strain Additional property of the material. By default the value of the Maximum Strain is taken 60.0 degrees.
REAL warp_weft_angle Additional property of the material. By default the value of the Warp/Weft Angle is 90.0 degrees.
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
-1 Could not find Specified Material name. Layup Module Error.
---------------
p3cm.modify_ply(type_name,material_name,old_ply_name,ply_name,start_pt,view_dirn,ref_dirn,ref_ang,warp_weft_angle,max_strain,step_length,axis_type,warpaxis_str,weftaxis_str,extn_type,max_sweeps,bounds,num_areas,area_strs,split_str)
##########
Description:
This function modifies the existing ply to the new ply name for Laminate Modeler database.
Input:
STRING type_name[] Material type in Laminate Modeler like “Paint”,“Scissor”,“Slide” or “Project”
STRING material_name[] Laminate Modeler material name
STRING old_ply_name[] Existing ply name
STRING ply_name[] Modified ply name
REAL start_pt(3)Starting point (3D coordinate)
REAL view_dirn(3)Application direction as a 3D vector
REAL ref_dirn(3)Reference direction,by default it is [0.,0.,0.]
REAL ref_ang Reference angle,by default it is 0.0
REAL warp_weft_angle Additional material property. By default the value of the Warp/Weft Angle is 90.0 degrees.
REAL max_strain Additional material property. By default the value of the maximum strain is taken 60.0 degrees.
REAL step_length Step length is the parameter of geometry. By default value is 1.0
INTEGER axis_type This is a control parameter used for Geometry i.e. 0 - None Axis type 1 - Geodesic Axis type 2 - Planner
STRING warpaxis_str[] Warp Axis String,By default value ““
STRING weftaxis_str[] Waft Axis String,By default value ““
INTEGER extn_type This is the Extension type used for Geometry Control Parameters like: 1 - Geodesic 2 - Energy 3 - Maximum
INTEGER max_sweeps By default value is 0.
REAL bounds()Boundaries Parameters Array for limit fabric size. This is the array of four elements for example: [minimum warp,maximum warp,minimum weft,maximum weft]
INTEGER num_areas Number of selected areas.
STRING area_strs[](num_areas)Array of the selected areas.
STRING split_str[] Split definition selected either by Geometry or by FEM data.
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
-1 Could not modify ply due to insufficient input data.
---------------
p3cm.new(filename)
##########
Description:
This function opens the new layup file for begining the Laminate Modeler session.
Input:
STRING filename[] The new layup file name. (As default “db_filename.layup”)
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
None.
---------------
p3cm.set_offsets(num_offs,off_values,off_flags,off_starts,off_views,off_areas)
##########
Description:
This function sets the offsets data for creating the new layup in Laminate Modeler database.
Input:
INTEGER num_offs Number of the defined offsets.
REAL off_values()Array of the offset value for each defined offsets.
STRING off_flags[]()Array of the offset flag for each defined offsets. There are three types of flags as Middle,Top & Bottom. These flag types represent the value as below: “0” for Middle type,“1” for Top type “-1” for Bottom type.
REAL off_starts()Array of the 3D coordinate values of definition points for all defined offsets. It represents the starting points of the offsets.
REAL off_views()Array of the 3D coordinate values of definition direction for all defined offsets. It represents the directional views of the offsets.
STRING off_areas[]()This represents the array of the selected areas for each defined offset in the form of elements or surfaces.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None
---------------
p3cm.open(filename)
##########
Description:
This function opens the existing laminate modeler database.
Input:
STRING filename[] The existing layup filename.
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
None.
---------------
p3cm.save_as_2(filename,detail)
##########
Description:
This function saves the Laminate Modeler database.
Input:
STRING filename[] The open layup file name.
INTEGER detail Set this value = 0
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
None.
---------------
p3cm.set_export_options_2(draped_pattern_iges,draped_pattern_dxf,flat_pattern_iges,flat_pattern_dxf,mold_surface_iges,curve,layer)
##########
Description:
This function sets the export options for Laminate Modeler database.
Input:
LOGICAL draped_pattern_iges This is the Laminate Modeler Ply “Draped Pattern IGES files” Export Options.
LOGICAL draped_pattern_dxf This is the Laminate Modeler Ply “Draped Pattern DXF files” Export Options.
LOGICAL flat_pattern_iges This is the Laminate Modeler Ply “Flat Pattern IGES files” Export Options.
LOGICAL flat_pattern_dxf This is the Laminate Modeler Ply “Flat Pattern DXF files” Export Options.
LOGICAL mold_surface_iges This is the Laminate Modeler Layup Mold Surface IGES files Options
STRING curve[] “POLYLINE” or “SPLINE”
STRING layer[] “POLYLINE”
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
None
---------------
p3cm.set_graphics_options_2(message,ply_graphics,layup_graphics,material,app_direction,ref_direction,max_strain,selected_area,flat_pattern,draped_pattern,surface_offset,angles,offset_val,scale)
##########
Description:
This function sets the graphics options for Laminate Modeler database.
Input:
LOGICAL message TRUE for opening the message file .
LOGICAL ply_graphics LM_ply Display Control. TRUE for Display.
LOGICAL layup_graphics LM_Layup Display Control. TRUE for Display.
LOGICAL material Material. This is the Laminate Modeler Ply Graphics Display Options.
LOGICAL app_direction Application Direction . This is the Laminate Modeler Ply Graphics Display Options
LOGICAL ref_direction Reference Direction . This is the Laminate Modeler Ply Graphics Display Options
LOGICAL max_strain Maximum Strain . This is the Laminate Modeler Ply Graphics Display Options
LOGICAL selected_area Selected Area. This is the Laminate Modeler Ply Graphics Display Options
LOGICAL flat_pattern Flat Pattern. This is the Laminate Modeler Ply Graphics Display Options
LOGICAL draped_pattern Draped Pattern. This is the Laminate Modeler Ply Graphics Display Options
LOGICAL surface_offset Surface Offset. This is the Laminate Modeler Layup Graphics Display Options.
LOGICAL angles Angles. This is the Laminate Modeler Ply Graphics Display Options.
REAL offset_val Offset value. By default value is 0.0.
REAL scale Scale value (0.1 to 10.0)
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
None
---------------
p3cm.set_tolerance(num_tols,ang_tols,thick_tols,tol_area)
##########
Description:
This function sets the tolerance data for Laminate Modeler database.
Input:
INTEGER num_tols Tolerance number.
REAL ang_tols()Angle tolerance array. By default value is 5.0 degrees.
REAL thick_tols()Thickness tolerance array. By default value is 5.0 %
STRING tol_areas[]()Array of the define overrides .
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
None
---------------
p3cm.show_laminate(elem_vstr,nprop,prop,nlam,lam,property,display_method,scale,nlay,lay)
##########
Description:
This function shows the laminates from the Laminate Modeler database.
Input:
STRING elem_vstr[] Array of the selected elements to show the laminate.
INTEGER nprop Number of selected properties.
STRING prop[](nprop)Array of the selected properties sets.
INTEGER nlam Number of selected laminates.
INTEGER lam(nlam)Array of the selected laminates.
STRING property[] Select properties i.e: “Material”“Orientation”“Thickness”
STRING display_method[] Display method i.e: “Model Plot”“Scalar Plot”“Vector Plot”“XY Plot”
REAL scale Thickness Scale. (0.1 to 10 value)
INTEGER nlay Number of selected layers.
INTEGER lay(nlay)Array of the selected layers.
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
None
---------------
p3cm.show_layup_exploded(num_selected,index,offset_mult)
##########
Description:
This function shows the selected laminate modeler layup from the database.
Input:
INTEGER num_selected Number of Laminate Modeler plys
INTEGER index(num_selected)Array of ply ids
REAL offset_mult Offset distance multiplier. By default,value is taken as 1.0
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
None
---------------
p3cm.show_ply(type_id_name,ply_name,plot_flag)
##########
Description:
This function deletes the ply name from the database.
Input:
STRING type_id_name[] ID string for various material types like “Paint”,“Scissor”,“Slide” or “Project”.
STRING ply_name[] Laminate Modeler Ply Name.
LOGICAL plot_flag TRUE to show the existing ply.
Output:
INTEGER <Return Value> 0 for success of the function.
Error Conditions:
None
---------------
db_bulk_get_possible_cond_opts1(etid,atid,acid,nbr,coc)
##########
Description:
Retrieves all possible values of the condense option for the specified input options.
Input:
INTEGER etid The ID of the element type selected by the user.
INTEGER atid The ID of the analysis type currently selected.
INTEGER acid The ID of the analysis code currently selected.
Output:
INTEGER nbr The number of condense option codes that were found for the above specified set of parameters.
INTEGER coc()The unique condense option code values that were found for the above specified set of values.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_bulk_get_possible_cond_opts2(etid,atid,acid,goc,nbr,coc)
##########
Description:
Retrieves all possible values of the condense option for the specified input options.
Input:
INTEGER etid The ID of the element type selected by the user.
INTEGER atid The ID of the analysis type currently selected.
INTEGER acid The ID of the analysis code currently selected.
INTEGER goc The ID of the geometric option code selected.
Output:
INTEGER nbr The number of condense option codes that were found for the above specified set of parameters.
INTEGER coc()The unique condense option code values that were found for the above specified set of values.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_bulk_get_possible_dof_sets(etid,atid,acid,coc,goc,foc,loc,mlc,mdc,nbr,dsid)
##########
Description:
Retrieves all possible values of the condensation option for the specified input options. If an input option is 0,it does not have a uniquely assigned value yet. The first three parameters may not be zero.
Input:
INTEGER etid The ID of the element type selected by the user.
INTEGER atid The ID of the analysis type currently selected.
INTEGER acid The ID of the analysis code currently selected.
INTEGER coc The ID for the condense option if it has been uniquely determined at point. otherwise,zero.
INTEGER goc The code for the geometric option if it has been uniquely determined at point. otherwise,zero.
INTEGER foc The code for the formulation option if it has been uniquely determined at point. otherwise,zero.
INTEGER loc The code for the laminate option if it has been uniquely determined at point. otherwise,zero.
INTEGER mlc The code for the formulation option if it has been uniquely determined at point. otherwise,zero.
INTEGER mdc The code for the material directionality if it has been uniquely determined at point. otherwise,zero.
Output:
INTEGER nbr The number of condense option codes that were found for the above specified set of parameters
INTEGER dsid()The unique dof set ID values that were found for the above specified set of values.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_get_constitutive_model(cid,cm_id,cm_name,linearity_code)
##########
Description:
Gets a constitutive model in the database.
Input:
INTEGER cid The analysis code ID.
INTEGER cm_id The constitutive model ID.
Output:
STRING cm_name[] The constitutive model name.
INTEGER linearity_code The linearity code.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
None.
---------------
db_get_valid_const_models_count(cid,atid,mc_id,nbr)
##########
Description:
Returns the number of valid constitutive models for the given analysis code ID,analysis type ID and material category ID.
Input:
INTEGER cid The analysis code ID.
INTEGER atid The analysis type ID.
INTEGER mc_id The material category ID.
Output:
INTEGER nbr The number of valid constitutive models.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
None.
---------------
db_get_valid_const_models(cid,atid,mc_id,cm_id)
##########
Description:
Returns the constitutive model IDs for the given analysis code ID,analysis type ID and material category ID.
Input:
INTEGER cid The analysis code ID.
INTEGER atid The analysis type ID.
INTEGER mc_id The material category ID.
Output:
INTEGER cm_id()The constitutive model IDs.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
None.
---------------
db_mo_const_models_specified(mid,cm_id,magics,active)
##########
Description:
Modifies a constitutive model specified in the database.
Input:
INTEGER mid The material ID.
INTEGER cm_id The constitutive model ID.
INTEGER magics(5)The magic numbers ID.
INTEGER active The active flag.
Output:
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000120 The material specified in the query was not found
13000164 The constitutive model was not found in the database
---------------
db_delete_matl_const_model(mid,cmid)
##########
Description:
Deletes a constitutive model defn from the database.
Input:
INTEGER mid The ID of the material associated with the material property value.
INTEGER cmid The ID of the constitutive model.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_get_matl_category(cid,mc_id,mc_name,dirctionality)
##########
Description:
Gets a material category definition in the database.
Input:
INTEGER cid The analysis code ID.
INTEGER mc_id The material category defn ID.
Output:
STRING mc_name[] The material category defn name.
INTEGER dirctionality The directionality code.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
None.
---------------
db_get_valid_mtl_category_cnt(cid,atid,nbr)
##########
Description:
Returns the number of valid material categories for the given analysis code ID and analysis type ID.
Input:
INTEGER cid The analysis code ID.
INTEGER atid The analysis type ID.
Output:
INTEGER nbr The number of valid material categories.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
None.
---------------
db_get_valid_mtl_categories(cid,atid,mc_id)
##########
Description:
Returns the valid material categories for the given analysis code ID and analysis type ID.
Input:
INTEGER cid The analysis code ID.
INTEGER atid The analysis type ID.
Output:
INTEGER mc_id()The material category ids.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
None.
---------------
db_create_mtl_allowable_magics(cid,mc_id,magic_category_id,magic_alias_id,nbr)
##########
Description:
Creates ’nbr’ records in the allowable_magic_prop table.
Input:
INTEGER cid The analysis code ID.
INTEGER mc_id The material category ID. See Material Categories (p. 551)in the PCL and Customization.
INTEGER magic_category_id The magic category ID. See Material Options and Material Option Categories (p. 556)in the PCL and Customization.
INTEGER magic_alias_id()The magic (ooh)alias ID. See db_create_mtl_magics_options (p. 558)in the PCL and Customization.
INTEGER nbr The number of magic aliases.
Output:
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
None.
---------------
db_get_mtl_allowable_magic_cnt(code_id,matl_cat_id,magic_category_id,nbr)
##########
Description:
Returns the number of allowable magic properties for the given magic_category_id,code_id,and matl_cat_id
Input:
INTEGER code_id The analysis code ID.
INTEGER matl_cat_id The material category ID.
INTEGER magic_category_id The magic category ID.
Output:
INTEGER nbr The number of magic aliases.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
None.
---------------
db_count_options(goc,coc,loc,foc,dsid,etop)
##########
Description:
Retrieves a count of the number of distinct geometric (or laminate,or...)option codes.
Input:
None.
Output:
INTEGER goc The count of geometric options.
INTEGER coc The count of condense options.
INTEGER loc The count of laminate options.
INTEGER foc The count of formulation options.
INTEGER dsid The count of dof sets.
INTEGER etop The count of element topologies.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_get_mtl_allowable_magics(code_id,matl_cat_id,magic_category_id,magic_alias_id)
##########
Description:
Returns the number of allowable magic properties for the given magic_category_id,cid,and mc_id.
Input:
INTEGER code_id The analysis code ID.
INTEGER matl_cat_id The material category ID.
INTEGER magic_category_id The magic category ID.
Output:
INTEGER magic_alias_id()The magic alias ids.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
None.
---------------
db_get_mtl_magics(analysis_code_id,analysis_type_id,matl_category_id,constit_model_id,magic_category_id)
##########
Description:
Returns the material magic categories for the given cid,mc_id,and cm_id
Input:
INTEGER analysis_code_id The analysis code ID.
INTEGER analysis_type_id The analysis type ID.
INTEGER matl_category_id The material category ID.
INTEGER constit_model_id The constitutive model ID.
Output:
INTEGER magic_category_id()The magic category ids.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
None.
---------------
db_get_mtl_magics_count(analysis_code_id,analysis_type_id,matl_category_id,constit_model_id,nbr)
##########
Description:
Returns the number of material magic properties for the given analysis_code_id,analysis_type_id,matl_category_id,and constit_model_id
Input:
INTEGER analysis_code_id The analysis code ID.
INTEGER analysis_type_id The analysis type ID.
INTEGER matl_category_id The material category ID.
INTEGER constit_model_id The constitutive model ID.
Output:
INTEGER nbr The number of magic categories.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
None.
---------------
db_get_mtl_magics_defn(analysis_code_id,analysis_type_id,magic_category_id,magic_label)
##########
Description:
Returns the magic label given the analysis code ID and the magic category.
Input:
INTEGER analysis_code_id The analysis code ID.
INTEGER analysis_type_id The analysis type ID.
INTEGER magic_category_id The magic category ID.
Output:
STRING magic_label[] The magic label.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000086 No Records Found
---------------
db_get_mtl_magics_options(analysis_code_id,magic_alias_id,magic_name)
##########
Description:
Returns the magic alias given the analysis code ID and the magic alias.
Input:
INTEGER analysis_code_id The analysis code ID.
INTEGER magic_alias_id The magic alias ID.
Output:
STRING magic_name[] The magic alias.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000086 No Records Found
---------------
db_get_material_name_from_id(id,mat_name)
##########
Description:
Returns the material name given the ID.
Input:
INTEGER id The material ID.
Output:
STRING mat_name[31] The name of the material.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000120 The material specified in the query was not found
---------------
db_get_material_id_from_name(mat_name,id)
##########
Description:
Returns the material ID given the name.
Input:
STRING mat_name[31] The name of the material.
Output:
INTEGER id The material ID.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000120 The material specified in the query was not found
---------------
db_count_materials(count)
##########
Description:
This function returns the number of materials currently defined in the database.
Input:
None.
Output:
INTEGER count The number of materials in the database
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_get_all_material_names()
##########
Description:
Gets all material information from the database,in get all,get next method.
Input:
None.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
None.
---------------
db_get_next_material_name(name,id,cat,lin,dir,type)
##########
Description:
Gets all material information from the database,in get all,get next method.
Input:
None.
Output:
STRING name[] The name of the material retrieved from the database.
INTEGER id The ID of the material.
INTEGER cat The material category.
INTEGER lin The material linearity code.
INTEGER dir The material directionality code.
INTEGER type The material type.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000117 The query specified has completed
13000007 An unspecified database error occurred
---------------
db_modify_material(mid,desc,mc_id,lin,dir,matl_type)
##########
Description:
Modifies a material in the database.
Input:
INTEGER mid The ID of the material to be modified.
STRING desc[] The description of the material being modified.
INTEGER mc_id The category for the material being modified.
INTEGER lin The linearity of the material being modified.
INTEGER dir The directionality for the material being modified.
INTEGER matl_type The type of the material being modified.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
db_delete_material(name)
##########
Description:
Deletes a material in the database.
Input:
STRING name[] The name of the material to be deleted.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
---------------
db_get_all_cond_opt_code_names()
##########
Description:
Gets all condense_option code names from the database,in get all,get next method.
Input:
None.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine.
Error Conditions:
None.
---------------
db_get_next_cond_opt_code_names(name,id)
##########
Description:
Gets all condense_option code names from the database,in get all,get next method.
Input:
None.
Output:
STRING name[31] The name retrieved from the database.
INTEGER id The ID received from the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000117 The query specified has completed
13000007 An unspecified database error occurred
---------------
db_get_all_lam_opt_code_names()
##########
Description:
Gets all laminate_option code names from the database,in get all,get next method.
Input:
None.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
None.
---------------
db_get_next_lam_opt_code_names(name,id)
##########
Description:
Gets all laminate_option code names from the database,in get all,get next method.
Input:
None.
Output:
STRING name[31] The name retrieved from the database.
INTEGER id The ID retrieved from the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000117 The query specified has completed
13000007 An unspecified database error occurred
---------------
db_get_allowable_matl_prop(cid,atid,mc_id,cm_id,magics,mp_id)
##########
Description:
Returns an allowable material property in the database.
Input:
INTEGER cid The analysis code ID.
INTEGER atid The analysis type ID.
INTEGER mc_id The material category ID.
INTEGER cm_id The constitutive model ID.
INTEGER magics(5)The magic numbers ID.
Output:
INTEGER()mp_id()The material prop alias IDs.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
None.
---------------
db_get_all_allow_matl_prop_cnt(cid,atid,mc_id,cm_id,nbr)
##########
Description:
Returns an allowable material property in the database.
Input:
INTEGER cid The analysis code ID.
INTEGER atid The analysis type ID.
INTEGER mc_id The material category ID.
INTEGER cm_id The constitutive model ID.
Output:
INTEGER nbr The number of material prop aliases.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
None.
---------------
db_get_allowable_matl_prop_cnt(cid,atid,mc_id,cm_id,magics,nbr)
##########
Description:
Returns an allowable material property in the database.
Input:
INTEGER cid The analysis code ID.
INTEGER atid The analysis type ID.
INTEGER mc_id The material category ID.
INTEGER cm_id The constitutive model ID.
INTEGER magics(5)The magic numbers ID.
Output:
INTEGER nbr The number of material prop aliases.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
None.
---------------
db_get_all_allowable_matl_prop(cid,atid,mc_id,cm_id,mp_id)
##########
Description:
Returns all allowable material property in the database for the given analysis code,analysis type,material category and constitutive model.
Input:
INTEGER cid The analysis code ID.
INTEGER atid The analysis type ID.
INTEGER mc_id The material category ID.
INTEGER cm_id The constitutive model ID.
Output:
INTEGER mp_id()The material prop alias IDs.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
None.
---------------
db_get_matl_prop_alias(cid,atid,mc_id,cm_id,mp_id,mp_alias,field_ok)
##########
Description:
Returns a material property alias in the database.
Input:
INTEGER cid The analysis code ID.
INTEGER atid The analysis type ID.
INTEGER mc_id The material category ID.
INTEGER cm_id The constitutive model ID.
INTEGER mp_id The material prop alias ID.
Output:
STRING mp_alias[] The material prop alias.
INTEGER field_ok The field ok flag.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000167 The material property alias was not found in the database
---------------
db_get_matl_prop_defn(mp_id,mp_name)
##########
Description:
Returns the material property definition name given the ID.
Input:
INTEGER mp_id The material prop defn ID.
Output:
STRING mp_name[] The material prop defn name.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000163 The material property definition was not found in the database
---------------
db_modify_matl_prop_value(mid,mp_id,fid,value,nbr)
##########
Description:
Updates an material property value in the database.
Input:
INTEGER mid The material ID.
INTEGER mp_id()The material prop IDs.
INTEGER fid()The field IDs.
REAL value()The material values.
INTEGER nbr The dimension of the above three arrays.
Output:
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000120 The material specified in the query was not found.
13000163 The material property definition was not found in the database
13000127 The field entered does not exist.
---------------
db_delete_material_property(mid,mpid)
##########
Description:
Deletes a material property value from the database.
Input:
INTEGER mid The ID of the material associated with the material property value.
INTEGER mpid The ID of the material property.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_get_comp_hal(mat_name,iopt,fiber_name,matrix_name,fiber_vol_frac,matrix_vol_frac,theory,override,aspect_ratios,empirical_factors)
##########
Description:
Returns the construction data for composite materials generated using the “Halpin -Tsai” equations,given a material name.
Input:
STRING mat_name[31] The name of the material.
Output:
INTEGER iopt The construction option.
STRING fiber_name[] The name of the fiber.
STRING matrix_name[] The name of the matrix.
REAL fiber_vol_frac The fiber vol frac.
REAL matrix_vol_frac The matrix vol frac.
INTEGER theory The theory.
LOGICAL override The override.
REAL aspect_ratios()A 1 by 2 array of aspect ratios.
REAL emperical_factors()A 1 by 9 array of empirical factors.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
13000086 No Records Found
13000120 The material specified in the query was not found
---------------
db_get_comp_sfc(mat_name,uni_mat_name,ndim,niter,theta_av,sig_theta,phi_av,sig_phi,rho)
##########
Description:
Returns the construction data for composite materials generated using the “Short Fiber” option,given a material name.
Input:
STRING mat_name[31] The name of the material.
Output:
STRING uni_mat_name[31] The name of the short fiber.
INTEGER ndim The number of dimensions.
INTEGER niter The number of iterations.
REAL theta_av Theta_av.
REAL sig_theta Sig_theta.
REAL phi_av Phi_av.
REAL sig_phi Sig_phi.
REAL rho Rho.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
13000086 No Records Found
13000120 The material specified in the query was not found
---------------
mat_3d_ani_to_3d_ort(s11,s12,s13,s22,s23,s33,div_tol,e11,e22,e33,v12,v23,v31)
##########
Description:
Given the 3d orthotropic elements of the stiffness matrix,calculates the 3d orthotropic engineering constants. The shear moduli (Shear12,Shear23,Shear31)are not included since there is a one to one relationship between them and Stiff44,Stiff55 and Stiff66 in (11,22,33,12,23,31)matrix form. Jones “Mechanics of Composite Materials” (1975)page 38.
Input:
REAL s11 The 11 element of the stiffness matrix.
REAL s12 The 12 element of the stiffness matrix. Synonymous to s21.
REAL s13 The 13 element of the stiffness matrix. Synonymous to s31.
REAL s22 The 22 element of the stiffness matrix.
REAL s23 The 23 element of the stiffness matrix. Synonymous to s32.
REAL s33 The 33 element of the stiffness matrix.
REAL div_tol The division tolerance.
Output:
REAL e11 The elastic modulus in the 11 direction.
REAL e22 The elastic modulus in the 22 direction.
REAL e33 The elastic modulus in the 33 direction	.
REAL v12 Poisson ratio relating directions 1 and 2. Not generally equivalent to v21.
REAL v23 Poisson ratio relating directions 2 and 3. Not generally equivalent to v32.
REAL v31 Poisson ratio relating directions 3 and 1. Not generally equivalent to v13.
Error Conditions:
None.
---------------
engin_cons_to_elastic_matrix(e,c,status)
##########
Description:
Compute the stress-strain coefficients for a 3D orthotropic material from the nine engineering constants. This routine was called ORTHCZ in the PATRAN 2.5 library. Do not allow any nulls into the output.
Input:
REAL e(9)e = E11,E22,E33,NU12,NU23,NU31,G12,G23,G31.
Output:
REAL c(21)c = Material stiffness matrix in string format using the PATCHES sequence for the 21 constants.
INTEGER status status = Error flag (0=success,1=error)
Error Conditions:
None.
---------------
mat_2d_ani_to_2d_ort(s11,s12,s22,div_tol,e11,e22,v12)
##########
Description:
Given the 2d,orthotropic elements of the reduced (plane stress or 2d)stiffness matrix,calculates the 2d engineering constants. The in plane shear modulus is not included since there is a one to one relationship between it and Stiff33 (in (11,22,12)matrix form). Jones “Mechanics of Composite Materials” (1975)page 38.
Input:
REAL s11 The 11 element of the plane stress stiffness matrix.
REAL s12 The 12 element of the plane stress stiffness matrix. Synonymous to s21.
REAL s22 The 22 element of the plane stress stiffness matrix.
REAL div_tol The division tolerance.
Output:
REAL e11 The elastic modulus in the 11 direction.
REAL e22 The elastic modulus in the 22 direction.
REAL v12 The in plane poisson ratio. Not generally equal to v21
Error Conditions:
None.
---------------
get_qab_from_engin_cons(e,qab,ier)
##########
Description:
Compute the reduced materials matrix Qab from the 4 engineering constants for a 2D orthotropic material.
Input:
REAL e()Real array that contains the 4 engineering constants: E(1)= E11. E(2)= E22. E(4)= NU12 . E(7)= G12.
Output:
REAL qab()The computed reduced materials matrix
INTEGER ier Integer indicating the success or failure of the routine.
Error Conditions:
None.
---------------
n21_cons_to_sym_6x6_matrix(cm,cb)
##########
Description:
Form the 6x6 symmetric matrix CM from the 21 terms in CB. This routine was called SYM6X6 in the PATRAN 2.5 library.
Input:
REAL cb (21)Array of 21 engineering constants.
Output:
REAL cm (6,6)Value of the 6x6 symmetric matrix.
Error Conditions:
None.
---------------
mat_load_show(mat_name,itype,iopt,desc,rvals,num_phases)
##########
Description:
Load the material properties into the format needed for display after performing some error checking.
Input:
STRING mat_name[] Material name.
INTEGER itype Please see Remarks below.
INTEGER iopt Composite option number (used only for HAL and SFC; Halpin-Tsai = Option number (1-5)Short Fiber = Option number (1-2)).
Output:
STRING desc[2500] Material description.
REAL rvals(6,36)Array of material properties.
INTEGER num_phases A type-dependent integer (Laminate = ply count Rule-of-Mixtures = phase count)
INTEGER <Return Value> See error returned.
Error Conditions:
28003001 The material name is ““blank””. Enter a material name.
28003026 Material %A% is not a laminated composite.
28003038 Material %A% is not a Rule-of-Mixtures composite.
28003059 Material %A% is not a Halpin-Tsai composite.
28003070 Short Fiber material %A% is a %A% material,but the existing form is used to display %A% materials.
28003069 Halpin-Tsai material %A% is a %A% material,but the existing form is used to display %A% materials.
28004416 Material %A% does not exist.
---------------
mat_hal_load_defn_show(mat_name,iopt,fiber_name,matrix_name,fvf,mvf,aratio1,aratio2,theory,override,fudge_factor1,fudge_factor2,fudge_factor3,fudge_factor4,fudge_factor5,fudge_factor6)
##########
Description:
Load the Halpin-Tsai material definition data into the format needed for display.
Input:
STRING mat_name[] Halpin-Tsai material name.
INTEGER iopt Halpin-Tsai option flag :1=continuous fiber2=discontinuous fiber3=continuous ribbon4=discontinuous ribbon5=particulate).
Output:
STRING fiber_name[] Fiber material name.
STRING matrix_name[] Matrix material name.
REAL fvf Fiber volume fraction.
REAL mvf Matrix volume fraction.
STRING aratio1[] String representation of 1st aspect ratio.
STRING aratio2[] String representation of 2nd aspect ratio.
INTEGER theory 1=New Theory (GTT).2=Old Theory (NUTT).
LOGICAL override If ON,use empirical factors in ESTRINGi.
STRING fudge_factor1[] String representation of 1st empirical factor
STRING fudge_factor2[] String representation of 2nd empirical factor
STRING fudge_factor3[] String representation of 3rd empirical factor.
STRING fudge_factor4[] String representation of 4th empirical factor.
STRING fudge_factor5[] String representation of 5th empirical factor
STRING fudge_factor6[] String representation of 6th empirical factor.
INTEGER <Return Value> See error returned.
Error Conditions:
28003001 The material name is ““blank””. Enter a material name.
28004416 Material %A% does not exist.
28003069 Halpin-Tsai material %A% is a %A% material,but the existing form is used to display %A% materials.
28003060 Unable to show the properties for composite material %A%.
---------------
mat_lam_load_defn_show(mat_name,num_plies,ply_names,thicks,orients,num_def,iconv,offset_string)
##########
Description:
Load the laminate definition data into the format needed for display.
Input:
STRING mat_name[] Laminate material name.
INTEGER num_plies Number of plies.
Output:
INTEGER ply_names Ply material names (passed as an integer to get through the wrapper).
REAL thicks Ply thicknesses (passed as an integer to get through the wrapper).
REAL orients Ply orientations (passed as an integer to get through the wrapper)
INTEGER num_def Number of plies defined (!= total ply count if ICONV > 1)
INTEGER iconv Stacking sequence convention.
STRING offset_string[] String containing laminate offset.
INTEGER <Return Value> See error returned.
Error Conditions:
28003001 The material name is ““blank””. Enter a material name.
28004416 Material %A% does not exist
28003042 Unable to show the offset for laminate material %A%.
---------------
mat_mix_load_defn_show(mat_name,num_phases,name_string2,name_string3,name_string4,phase_string,v_f_string,orient_string,ncn,ncv,nco)
##########
Description:
Load the Rule-of-Mixtures material definition data into the format needed for display.
Input:
STRING mat_name[] Rule-of-Mixtures material name.
INTEGER num_phases Number of phases.
Output:
STRING name_string2[] String containing the second phase material name and workspace.
STRING name_string3[] String containing the third phase material name and workspace.
STRING name_string4[] String containing the fourth phase material name and workspace.
STRING phase_string[] String containing the primary phase material name.
STRING v_f_string[] Strings containing compressed phase volume fraction string and compressed ply orientation string.
STRING orient_string[] String containing the orientation string.
INTEGER ncn Number of characters in compressed phase material name string
INTEGER ncv Number of characters in compressed phase volume fraction string
INTEGER nco Number of characters in compressed phase orientation string.
INTEGER <Return Value> See error returned.
Error Conditions:
28003001 The material name is ““blank””. Enter a material name.
28003038 Material %A% is not a Rule-of-Mixtures composite.
28003043 Unable to show the phase material name string for Rule-of-Mixtures material %A%.
28003044 Unable to show the phase volume fraction string for Rule-of-Mixtures material %A%.
28003045 Unable to show the phase orientation string for Rule-of-Mixtures material %A%.
28004416 Material %A% does not exist.
---------------
mat_sfc_load_defn_show(mat_name,iopt,uni_mat_name,fmo,smo,fsd,ssd,cor,niter)
##########
Description:
Load the Short Fiber material definition data into the format needed for display.
Input:
STRING mat_name[] Short Fiber material name.
INTEGER iopt Short Fiber material option.
Output:
STRING uni_mat_name[] Unidirectional material name.
REAL fmo First mean orientation.
REAL smo Second mean orientation
REAL fsd First standard deviation.
REAL ssd Second standard deviation.
REAL cor Correlation coefficient
INTEGER niter Number of Monte Carlo iteration.
INTEGER <Return Value> See error returned.
Error Conditions:
28003001 The material name is ““blank””. Enter a material name.
28003070 Short Fiber material %A% is a %A% material,but the existing form is used to display %A% materials.
28004416 Material %A% does not exist
---------------
material.namedelete(<material_name>,<descrip>,<num_material>)
##########
Description:
This function deletes a material from the database. It returns an integer status of zero on successful completion.
Input:
STRING ARRAY material_name[]()The names of the material. Array size gets allocated from the num_material argument.
STRING descrip[] Description of the material. Can be “”. This arguement is not used.
INTEGER num_material The number of materials to be deleted.
Output:
INTEGER <Return Value> 0 for success.,error code for failure.
Error Conditions:
130000120 Material does not exist in the database
130000007 Database not open.
---------------
db_activate_load_case(name)
##########
Description:
Activates the specified load case in the model.
Input:
STRING name[80] Name of the load case to be activated.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason
Error Conditions:
13000002 Unrecoverable database error.
13000052 Load Case Not Found.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Updates one record in the “load case” table in the database.
##########
Description:
Deletes a load case entry from the database
Input:
STRING name[80] Name of the load case to be deleted.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason
Error Conditions:
13000002 Unrecoverable database error.
13000052 Load Case Not Found.
13000076 Load case active
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Deletes one record in the “load case” table in the database.
---------------
db_find_load_case_id(jbname,lc_seqno,lc_id)
##########
Description:
Gets all load case ids from the database in one structure.
Input:
STRING jbname[] The jobname used for the desired run.
INTEGER lc_seqno The load case sequence number for the desired load case.
Output:
INTEGER lc_id The id of the desired load case.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
13000052 Load Case Not Found.
External Dependencies and Side Effects:
Accesses the “load_case” table in the database and retrieves an id of a specified jobname/load case sequence number.
---------------
db_count_load_cases(load_case_count)
##########
Description:
This function returns the number of load cases defined in the database.
Input:
none
Output:
INTEGER load_case_count This value returns the number of load cases defined in the database.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_all_load_case_names()
##########
Description:
Gets all load cases from the database.
Input:
None
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason
---------------
db_get_all_load_cases()
##########
Description:
This function will set a cursor to the start of a list of load cases.
Input:
None
Output:
None
---------------
db_get_next_load_case(name,id,type,description,num_lbc,lbc,dyn_load,map,priority)
##########
Description:
This function will get the next load case from the database.
Input:
None
Output:
STRING name[80] This value returns the name of the load case retrieved.
INTEGER id This value returns the load case id.
INTEGER type This value returns the load case type.
STRING description[256] This value returns the description of the load case.
INTEGER num_lbc This value returns the number of load and boundary conditions associated with the load case.
INTEGER lbc[num_lbc] This value returns the ids of the loads and boundary conditions associated with this load case.
INTEGER dyn_load This value returns the name of the dynamic load case used as a basis for this load case. This value is valid only if the load case is a static load case created from a dynamic load case.
REAL map This value returns a map variable.
INTEGER priority This value returns the priority assigned to the load case.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
13000085 Cursor not open.
13000117 The query specified has completed.
External Dependencies and Side Effects:
Accesses all records in the “load case” table in the database.
---------------
db_get_lc_id_given_job_seq(ac_id,jobname,lcseq,lcid)
##########
Description:
Gets all load case ids from the database in one structure.
Input:
INTEGER ac_id Analysis code id for the requested jobname.
STRING jobname[] The jobname used for the desired run.
INTEGER lcseq The load case sequence number for the desired load case.
Output:
INTEGER lcid The id of the desired load case.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
13000052 Load Case Not Found
External Dependencies and Side Effects:
Accesses the “load_case” table in the database and retrieves an id of a specified jobname/load case sequence number.
---------------
db_bulk_get_lbc_ds(lbc_id,max,nbr,vid,rv,sc_pos,sc_dyn,scale_factor)
##########
Description:
Fetches unevaluated dynamic scalar lbc data attached to an LBC.
Input:
INTEGER lbc_id The ID of the lbc that this lbc data is attached to.
INTEGER max The max number of dynamic scalar data records that can be passed back to the caller.
Output:
INTEGER nbr The number of dynamic scalar data records retrieved from the database.
INTEGER vid()The ID of the definition variable that corresponds to this scalar data
REAL rv()Scalar data values (real).
INTEGER sc_pos()Field IDs for positional dependent scalars.
INTEGER sc_dyn()Field IDs for dynamic dependent scalars.
REAL scale_factor()LBC set scale factor.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
External Dependencies and Side Effects:
Fetches one or more entries in the “ds_lbc” relation in the database.
---------------
db_bulk_get_lbc_dv(lbc_id,max,nbr,vid,rv,ve_pos,ve_dyn,nv,scale_factor)
##########
Description:
Fetches unevaluated dynamic vector LBC data attached to an LBC.
Input:
INTEGER lbc_id The ID of the lbc that this lbc data is attached to.
INTEGER max The max number of dynamic vector data records that can be passed back to the caller.
Output:
INTEGER nbr The number of dynamic vector data records retrieved from the database.
INTEGER vid()The ID of the definition variable that corresponds to this vector data.
REAL rv(j,3)Vector data values (real){i = vector component;(3)j = vector number (row nbr)}
INTEGER ve_pos(j,3)Field IDs for positional dependent vectors {i = vector component;(3)j = vector number (row nbr)}
INTEGER ve_dyn(j,3)Field IDs for dynamic dependent vectors {i = vector component;(3)j = vector number (row nbr)}
INTEGER nv(j,3)Flag indicating whether this vector component contains valid data. {i = vector component;(3)j = vector number (row nbr)}a value of -1 denotes a missing value,a value of 0 denotes not missing
REAL scale_factor()LBC set scale factor
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
External Dependencies and Side Effects:
Fetches one or more entries in the “dv_lbc” relation in the database.
---------------
db_bulk_get_lbc_ss(lbc_id,max,nbr,vid,rv,sc_pos,scale_factor)
##########
Description:
Fetches unevaluated static scalar LBC data attached to an LBC.
Input:
INTEGER lbc_id The ID of the lbc that this lbc data is attached to.
INTEGER max The max number of static scalar data records that can be passed back to the caller.
Output:
INTEGER nbr The number of static scalar data records retrieved from the database.
INTEGER vid()The ID of the definition variable that corresponds to this scalar data.
REAL rv()Scalar data values (real).
INTEGER sc_pos()Field IDs for positional dependent scalars.
REAL scale_factor()LBC set scale factor.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
External Dependencies and Side Effects:
Fetches one or more entries in the “ss_lbc” relation in the database.
---------------
db_bulk_get_lbc_sv(lbc_id,max,nbr,vid,rv,ve_pos,nv,scale_factor)
##########
Description:
Fetches unevaluated static vector LBC data attached to an LBC.
Input:
INTEGER lbc_id The ID of the lbc that this lbc data is attached to.
INTEGER max The max number of static vector data records that can be passed back to the caller.
Output:
INTEGER nbr The number of static vector data records retrieved from the database.
INTEGER vid()The ID of the definition variable that corresponds to this vector data.
REAL rv(j,3)Vector data values (real){i = vector component (3); j = vector number (row nbr)}
INTEGER ve_pos(j,3)Field IDs for positional dependent vectors {i = vector component (3); j = vector number (row nbr)}
INTEGER nv(j,3)Flag indicating whether this vector component contains valid data. {i = vector component (3); j = vector number (row nbr)} a value of -1 denotes a missing value,a value of 0 denotes not missing
REAL scale_factor()LBC set scale factor.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000093 Too Many Values Returned for Space Allocated.
13000002 Unrecoverable database error.
External Dependencies and Side Effects:
Fetches one or more entries in the “sv_lbc” relation in the database.
---------------
db_count_appl_geo_region(id,count)
##########
Description:
Retrieves the number of appl_geo_regions stored in the database by lbc_type_id.
Input:
INTEGER id The id of the lbc_type_id with which the appl_geo_regions are associated
Output:
INTEGER count The number of appl_geo_regions stored in the database
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Counts all records in the “appl_geo_region” relation in the database by lbc_type_id.
---------------
db_count_lbc(count)
##########
Description:
Retrieves the number of lbcs stored in the database.
Input:
none
Output:
INTEGER count The number of appl_geo_regions stored in the database
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Counts all records in the “lbc” relation in the database.
---------------
db_count_lbc_appl_region_entity(id,apprid,count)
##########
Description:
Retrieves the count of entity in each application region,and the application region ids for each lbc stored in the database.
Input:
INTEGER id The lbc ID for which the region information is requested
Output:
INTEGER apprid(2)The IDs of the application regions stored in the database. At present two is the maximum.
INTEGER count(2)The number of entities for each appl_geo_regions stored in the database. at present there is a maximum of two corresponding to the application region IDs.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Counts all entities in the “lbc_app_region” relation in the database for a specified lbc_id and app_region_id.
---------------
db_count_lbc_types(nbr_of_lbcs)
##########
Description:
Returns the total number of distinct lbcs in the database.
Input:
none
Output:
INTEGER nbr_of_lbcs The number of lbc type IDs
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
External Dependencies and Side Effects:
Accesses records in the lbc_type table in the database.
---------------
db_count_loads_for_element(elem_id,nbr_of_lbcs)
##########
Description:
Returns the number of loads and boundary conditions for an element.
Input:
INTEGER elem_id The element ID.
Output:
INTEGER nbr_of_lbcs The number of lbcs associated with the element.
INTEGER <Return Value> Returns the success or failure of the routine
External Dependencies and Side Effects:
This routine access the element,fem_ss_lbc,fem_sv_lbc,fem_ds_lbc and fem_dv_lbc tables.
---------------
db_count_load_cases_with_lbc(lbc_id,num_loadcases)
##########
Description:
Retrieves the number of load cases associated with a lbc.
Input:
INTEGER lbc_id The lbc ID
Output:
INTEGER num_loadcases The number of distinct load cases associated with the above lbc ID
INTEGER <Return Value> Returns the success or failure of the routine
External Dependencies and Side Effects:
Counts records in the “assigned_load_set” relation in the database.
---------------
db_delete_lbc(lbc_id)
##########
Description:
Deletes an lbc entry from the database.
Input:
INTEGER lbc_id Id of the lbc to be deleted.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
External Dependencies and Side Effects:
Deletes one record in the “lbc” table in the database,and deletes from any associated lbc entity.
---------------
db_delete_lbc_defn(<lbc_type_id>)
##########
Description:
This function will delete the lbc type definition from the database.
Input:
INTEGER lbc_type_id ID of the lbc type in the database.
Output:
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
See the Status Message(Ch 11)for information on any error values returned by this function.
---------------
db_get_all_appl_geo_regions(lbc_id)
##########
Description:
Gets all records in the LbcAppRegion table relation for the specified lbc_id from the database,in get all,get next method. See also db_get_next_appl_geo_region,398.
Input:
INTEGER lbc_id The ID of the lbc for the new records
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine.
---------------
db_get_next_appl_geo_region(ar_id,etype,eid,esid)
##########
Description:
Gets next record in the lbcAppRegion table relation for the specified lbc id from the database. See also db_get_all_appl_geo_regions,397.
Input:
none
Output:
INTEGER ar_id The sequential ID assigned to this application geometry region.
INTEGER etype The entity type to which this lbc has been applied.
INTEGER eid The entity ID to which this lbc has been applied.
INTEGER esid The entity sub_id to which this lbc has been applied (if appropriate).
INTEGER <Return Value> Integer indicating success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000117 The query specified has completed.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses records in the “Appl Geo Region” table in the database.
---------------
db_get_all_appl_reg_defns(lbc_tid)
##########
Description:
Gets all application geometry region definitions for an lbc type definition from the database,in get all,get next method. See also db_get_next_appl_reg_defn,399
Input:
INTEGER lbc_tid The ID of the lbc type in the database.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine.
---------------
db_get_next_appl_reg_defn(vid,label)
##########
Description:
Gets next application geometry region definition for an lbc type definition from the database. See also db_get_all_appl_reg_defns,398.
Input:
none
Output:
INTEGER vid The sequential ID assigned to this application geometry region.
INTEGER label[31] The label to be placed in front of the databox on the “Create LBC” form.
INTEGER <Return Value> Integer indicating success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000117 The query specified has completed.
13000007 An unspecified database error occurred.
---------------
db_get_all_lbcs_new()
##########
Description:
This function will set up the data required to retrieve all of the information about all of the LBCs in the memory database.
Input:
none
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine.
---------------
db_get_next_lbcs_new(id,name,type,cat,eldim,cid,dyn_flag,scaleFactor,geo_fem,appRegCouple,appRegOrder,equivFlag,acidMod)
##########
Description:
This function will retrieve all of the information about all of the LBCs in the memory database one structure at a time.
Input:
none
Output:
INTEGER id The ID of the LBC structure.
STRING name[] The name of this lbc table.
INTEGER type The type of the lbc this is.
INTEGER cat The category of lbc this is.
INTEGER eldim(3)The target element dimensionality values.
INTEGER cid The ID of the alternate coordinate frame if there is one.
INTEGER dyn_flag The dynamic/static flag value.
REAL scaleFactor The scale factor value.
INTEGER geo_fem (3)Specifies geo or fem as original lbc app region types.
INTEGER appRegCouple Multi app region coupling option.
INTEGER appRegOrder Multi app region order option.
INTEGER equivFlag The "don't equivalence nodes" flag.
INTEGER acidMod The flag which says that this lbc requires the acid frame for nodes to be modified.
INTEGER <Return Value> Integer indicating success or failure of the routine.
---------------
db_get_all_lbc_names()
##########
Description:
Gets all lbc names & types from the database,in get all,get next method. See also db_get_next_lbc_name,401.
Input:
none
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000117 The query specified has completed.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses all records in the “lbc” table in the database.
---------------
db_get_next_lbc_name(id,name,type)
##########
Description:
Gets next lbc name & type from the database.
Input:
none
Output:
INTEGER id The unique internal ID of the lbc type created in the database.
STRING name[31] The name of the lbc type being created in the database.
INTEGER type The type ID of the lbc (from the lbc_type table).
INTEGER <Return Value> Integer indicating success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000117 The query specified has completed.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses all records in the “lbc” table in the database.
---------------
db_get_all_lbc_names_by_type(lbc_typ_id)
##########
Description:
Gets all lbc type names from the database,in get all next method. See also db_get_next_lbc_name_by_type,403.
Input:
INTEGER lbc_type_id The lbc type ID for the row selected.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000117 The query specified has completed.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses all records in the “lbc” table in the database.
---------------
db_get_next_lbc_name_by_type(id,name)
##########
Description:
Gets next lbc type name from the database. See also db_get_all_appl_reg_defns,398.
Input:
none
Output:
INTEGER id The unique internal ID of the lbc in the database.
STRING name[31] The name of the lbc being in the database.
INTEGER <Return Value> Integer indicating success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000117 The query specified has completed.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses all records for a specified type in the “lbc” table in the database.
---------------
db_get_all_lbc_type_defns()
##########
Description:
Gets all lbc type definitions from the database,in get all,get next method.See also db_get_next_lbc_type_defn,404.
Input:
none
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000117 The query specified has completed.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses all records in the “load case” table in the database.
---------------
db_get_next_lbc_type_defn(id,name,class,form,gbc,cid,g_sym,sv,nv,nbr_ac,an_code,defcol,cbid,anstyl)
##########
Description:
Gets next lbc type definition from the database. See also db_get_all_lbc_type_defns,403.
Input:
none
Output:
INTEGER id The unique internal ID of the lbc type created in the database.
STRING name[31] The name of the lbc type being created in the database.
INTEGER class The class of the lbc type to be created. (Structural,Thermal,Other)
INTEGER form The form of the lbc being created. (Body or Boundary)
INTEGER gbc Flag indicating whether this is a global boundary condition.
INTEGER cid Flag indicating whether the lbc can be defined in an alternate coord frame.
INTEGER g_sym The graphics symbol used to display this lbc.
INTEGER sv Flag indicating whether this lbc is a scalar or vector.
INTEGER nv Flag indicating whether (for vector lbcs)one (or more)of the components can be null.
INTEGER nbr_ac The number of analysis codes supplied.
INTEGER an_code()List of valid analysis code IDs for this lbc.
INTEGER defcol Default color of associated graphics.
INTEGER cbid Color box ID of associated graphics.
INTEGER anstyl Anchor style of associated graphics.
INTEGER <Return Value> Integer indicating success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000117 The query specified has completed.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses all records in the “load case” table in the database.
---------------
db_get_all_lbc_type_names()
##########
Description:
Gets all lbc type names from the database,in get all,get next method. See also db_get_next_lbc_type_name.
Input:
none
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000117 The query specified has completed.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses all records in the “lbc_type” table in the database.
---------------
db_get_next_lbc_type_name(id,name)
##########
Description:
Gets next lbc type name from the database. See also db_get_all_lbc_type_names,405.
Input:
none
Output:
INTEGER id The unique internal ID of the lbc type in the database.
STRING name[31] The name of the lbc type being in the database.
INTEGER <Return Value> Integer indicating success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000117 The query specified has completed.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses all records in the “lbc_type” table in the database.
---------------
db_get_all_lbc_var_defns(id)
##########
Description:
Gets all the lbc variables for an lbc type definition from the database,in get all,get next method. See also db_get_next_lbc_var_defn,408.
Input:
INTEGER id The lbc type ID for the row selected.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine.
---------------
db_get_next_lbc_var_defn(cat,eldim)
##########
Description:
Gets next lbc variable for an lbc type definition from the database. See also db_get_all_lbc_var_defns,406.
Input:
none
Output:
INTEGER cat The category of this lbc type.
STRING eldim The element shape to get this label.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000117 The query specified has completed.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses records in the “Lbc Variable Defn” table in the database.
---------------
db_get_lbc_id(name,id)
##########
Description:
Retrieves the lbc id associated with the specified lbc name.
Input:
STRING name[31] Pointer to a string containing the name of the lbc.
Output:
INTEGER id Location to receive the resulting value.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000103 No LBC was found.
13000007 An unspecified database error occurred.
---------------
db_get_lbc_name(id,name)
##########
Description:
Retrieves the lbc name associated with the specified lbc id.
Input:
INTEGER id Integer containing the ID of the lbc.
Output:
STRING name[31] Pointer to a string where the name of the lbc is to be placed.
INTEGER <Return Value> Returns the success or failure of the routine.
---------------
db_get_lbc_type_defn(name,id,class,form,gbc,cid,g_sym,sv,nv,nbr_ac,an_code,defcol,cbid,anstyl)
##########
Description:
This function will get the attributes of an lbc type definition from the database.
Input:
STRING name[31] This value specifies the name of the lbc type.
Output:
INTEGER id This value returns the id value of the lbc type.
INTEGER class This value returns the class of the lbc type which can be either structural,thermal,or other.
INTEGER form This value returns the form of the lbc which can be either a body or a boundary.
INTEGER gbc This value returns an indication stating if the lbc is a global boundary condition.
INTEGER cid This value returns an indication stating if the lbc can be defined in an alternate coord frame.
INTEGER g_sym This value returns the graphics symbol used to display this lbc.
INTEGER sv This value returns an indication stating if this lbc is scalar or vector.
INTEGER nv This value indicates for vector lbcs whether one or more of the components can be null.
INTEGER nbr_ac The value returns the number of analysis codes applied to this lbc.
INTEGER an_code(20)This value returns the valid analysis code id values for this lbc.
INTEGER defcol This value returns the default color of the graphics associated with the lbc.
INTEGER cbid This value returns the color box id of the graphics associated with the lbc.
INTEGER anstyl This value returns the anchor style of the graphics associated with the lbc.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
13000101 No LBC Definition was found.
External Dependencies and Side Effects:
Accesses all records in the “lbc type” table in the database.
---------------
db_get_lbc_var_defn(lbc_type_id,lbc_category,eldim,label,id)
##########
Description:
Gets the lbc variable defn from the database.
Input:
INTEGER lbc_type_id The ID of the lbc type in the database.
INTEGER lbc_category The ID of the lbc type in the database
INTEGER eldim The dimensionality of the lbc type in the database.
STRING label[] The label of the variable in the database.
Output:
INTEGER id The unique internal ID of the lbc type variable in the database.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000101 No LBC Definition was found.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Accesses all records in the “lbc_variable_defn” table in the database.
---------------
db_get_loads_for_element(nbr_of_lbcs,elem_id,lbc)
##########
Description:
Returns the loads and boundary conditions for an element.
Input:
INTEGER nbr_of_lbcs The amount of memory allocated for the lbc IDs.
INTEGER elem_id The element ID.
Output:
INTEGER lbc()The lbc IDs.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000093 Too Many Values Returned for Space Allocated.
13000157 Fewer values were returned than the amount requested.
External Dependencies and Side Effects:
This routine access the element,fem_ss_lbc,fem_sv_lbc,fem_ds_lbc and fem_dv_lbc tables.
---------------
db_get_load_cases_with_lbc(lbc_id,num_loadcases,loadcase_ids,priority)
##########
Description:
Retrieves the number of load cases associated with an lbc.
Input:
INTEGER lbc_id The ID of the lbcs to which the load cases are associated in the database.
INTEGER num_loadcases The input/output field containing the maximum number of load cases on input and the actual number of load cases retrieved from the database on output.
Output:
INTEGER num_loadcases The input/output field containing the maximum number of load cases on input and the actual number of load cases retrieved from the database on output.
INTEGER loadcase_ids()Array of the IDs of the load cases assigned to this lbc id.
INTEGER priority()Priority associated with the assigned load set.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
External Dependencies and Side Effects:
Retrieves multiple entries from the “assigned_load_case” relation.
---------------
db_get_valid_cat_by_type(typid,cat)
##########
Description:
Retrieves all valid categories from the database for a specified type. The maximum number of categories for a type is three.
Input:
INTEGER typid The specific lbc type for which the category is requested.
Output:
INTEGER cat(3)The categories associated with the specified lbc type.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Fetches the categories associated with specified type from the lbc_variable_defn relation.
---------------
db_get_valid_eldim_by_type_cat(typid,cat,eldim)
##########
Description:
Retrieves all valid element dimensions for the specified types and categories in the database. The maximum number of element dimensions is five.
Input:
INTEGER typid The specific lbc type for which the element dimensionality is requested.
INTEGER cat The categories associated with the specified lbc type.
Output:
INTEGER eldim(5)The types of element dimensionality which correspond to the input type and category.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Fetches the element dimensionalities associated with specified type and category of lbc from the lbc_variable_defn relation.
---------------
db_get_valid_lbc_var_ids(typid,cat,eldim,count,vid)
##########
Description:
Retrieves all valid element variable ids for the specified combination pf type,category,and dimensionality specified from the database.
Input:
INTEGER typid The specific lbc type for which the element dimensionality is requested.
INTEGER cat The categories associated with the specified lbc type.
INTEGER eldim The types of element dimensionality for which the variable IDs are requested.
INTEGER count Input/Output field which specifies the maximum storage allocated by the calling routine,and outputs the actual number of variable IDs fetched if it is not greater than the count.
Output:
INTEGER count Input/Output field which specifies the maximum storage allocated by the calling routine,and outputs the actual number of variable IDs fetched if it is not greater than the count.
INTEGER vid()Array of variable IDs defined by the combination of items input.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Fetches the element dimensionalities associated with specified type and category of lbc from the lbc_variable_defn relation.
---------------
db_modify_load_case(id,name,type,desc,nbrlc,lbc,dlcname,mv,priority)
##########
Description:
Modifies a load case in the database.
Input:
INTEGER id The unique internal ID of the load case being modified in the database.
STRING name[80] The new name of the load case being modified in the database.
INTEGER type The new type of the load case being modified.
STRING desc[256] The description of the load case being modified.
INTEGER nbrlbc The number of lbcs being attached to this load case.
INTEGER lbc()Array of the IDs of the load\bc set IDs assigned to this load case.
STRING dlcname[80] The name of the dynamic load case being used as a basis for this definition. (This field is only applicable if a static load case is being created from a dynamic load case.)
REAL mv Map variable.
INTEGER priority()The priority for the assigned load set.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000075 Load case name exists.
13000052 Load Case Not Found.
13000002 Unrecoverable database error.
External Dependencies and Side Effects:
Updates an entry in the “load_case” relation in the database and deletes and adds multiple entries to the “assigned_load_case” relation.
---------------
lbc_create(name,type_id,cat_id,dyn_flag,num_ar,ar_id,aplist1,aplist2,fem_flag,targ_elem,lbc_sf,cid_id,no_data_flag,num_dat,var_id,sv,null_flag,null_var,datatype,ivalue,rvalue,fldid,dyn_fldid,node_id)
##########
Description:
Create the Loads and Boundary Condition Set (i.e.,for positionally dependent quantities field references are store not actual values).
Input:
STRING name[] Load/BC Set Name - user specified.
INTEGER type_id Load/BC Type -disp,force,etc.
INTEGER cat_id Category - Nodal,Elem Uni,Elem Var.
INTEGER dyn_flag Dynamic Flag = FA_TRUE if dynamic.
INTEGER num_ar Number of Application Regions.
INTEGER ar_id (2)Appl Region db ID.
STRING aplist1[] Application Region 1 list.
STRING aplist2[] Application Region 2 list.
INTEGER fem_flag (5)FEM Flag = FA_TRUE if FEM entities FEM Flag(4)= app-reg-couple,FEM Flag (5)= app‑reg-order.
INTEGER targ_elem (3)Target Element Dimension.
REAL lbc_sf Lbc Set Scale Factor.
INTEGER cid_id Coordinate System ID.
INTEGER no_data_flag No_Data_Flag = FA_TRUE if no data case is valid.
INTEGER num_dat Number of input data variables.
INTEGER var_id (20)Input Variable Data ID.
INTEGER sv (20)Indicates whether data is scalar or vector.
INTEGER null_flag (20)Null vector flag =1,if null allowed.
INTEGER null_var (20,3)Flag indicating whether this vector comp is null null_var = -1 if null,0 if not null.
INTEGER datatype (20)Indicates datatypes,(e.g. integer,real,field (see dbcodes.h); DbInt).
INTEGER ivalue (20)Integer value.
REAL rvalue (20,3)Real value.
INTEGER fldid (20,3)Field ID.
INTEGER dyn_fldid (20,3)Dynamic Field ID.
INTEGER node_id (20)Node ID.
Output:
INTEGER <Return Value> See error returned.
Comments:
Entity types and ids will change based on topological description. Displays loads/bcs graphics. Currently only one application region is being processed.
Error Conditions:
26002020 Load/BC "%A%" already exists. Do you wish to overwrite?
26006004 Dynamic memory allocation error encountered.
---------------
lbc_create_scalar_table(type_name,type_id,dynamic_val,var_name,component,num_lbcs,lbc_ids,num_grps,grp_ids)
##########
Description:
Main application routine for the Loads/BCs Show Plot Scalar option. A scalar graphics table is loaded with the specified load/BC and is assigned to the specified groups.
Input:
STRING type_name The Load/BC type name.
INTEGER type_id Load/BC Type Ids.
REAL dynamic_val The value of the dynamic field to evaluate
STRING var_name The name of the variable to be loaded into the scalar table.
STRING component The component of the variable to be loaded into the scalar table.
INTEGER num_lbcs The number of lbcs to contour.
INTEGER lbc_ids The IDs of the lbcs to contour.
INTEGER num_grps The number of groups to assign the scalar table to.
INTEGER grp_ids The IDs of the groups to assign the scalar table to.
Output:
INTEGER table_id ID of element scalar table created
INTEGER <Return Value> FA_NOERROR success; FA_ERROR Failure.
---------------
lbc_delete(count,del_id,update_graph)
##########
Description:
Delete the Loads and Boundary Condition Sets (and their related associations - application region,data,load case association.
Input:
INTEGER count Number of Load/BC Sets to delete.
INTEGER del_id (count)Load/BC Set Ids.
LOGICAL update_graph If TRUE,then update graphics.
Output:
INTEGER <Return Value> FA_NOERROR success; FA_ERROR Failure.
Comments:
Removes the Load/BC sets from all applicable load cases.
---------------
lbc_eval_fem_by_lc(lc_name)
##########
Description:
Given a load case name,get all the lbcs associated with it and check to see if each lbc has any unevaluated fem_xx_lbcs. If it does then create the appropriate fem_xx_table in the db.
Input:
STRING lc_name[] Load Case Name.
Output:
INTEGER <Return Value> See error returned.
Error Conditions:
3001301 Load Case "%A%" has no Load/BC sets.
3001101 Load Case "%A%" does not exist.
---------------
lbc_eval_fem_lbc(lbc_id)
##########
Description:
Given an lbc id,check to see if it has any unevaluated fem_xx_lbcs. If it does then create the appropriate fem_xx_table in the db.
Input:
INTEGER lbc_id Load/BC ID.
Output:
INTEGER <Return Value> See error returned.
Error Conditions:
26002144 The application region for Load/BC Set "%A%" is empty.
---------------
lbc_get_sdbx_datatype(lbc_id,obj_str,meth_str,targ_str,geo_group,sdbx_type,sdbx_label)
##########
Description:
Given lbc object,method,target element type,and geometry group return the select databox datatype and label.
Input:
INTEGER lbc_id Load/BC ID.
STRING obj_str[] Load/BC object,e.g.,Displacement.
STRING meth_str[] Load/BC Category - Nodal,Element Uniform,Element Variable.
STRING targ_str[] Target Element Type - Beam,Shell,Solid,PTEAM.
STRING geo_group[] Geometry Group - Geometry or FEM.
Output:
STRING sdbx_type[] Select databox type.
STRING sdbx_label[] Select databox label.
INTEGER <Return Value> See error returned.
Error Conditions:
26002410 "%A%" is an invalid Load/BC target element type.
26002400 "%A%" is an invalid Load/BC type.
---------------
lbc_gm()
##########
Description:
Loads/BCs Graphics Manager. 1. Gets the valid groups to which lbcs will be posted. 2. Gets the lbc_types which should be posted from pref form. 3. Filters out the lbc_ids in the current load case which should be posted. 4. Modifies the LBC_IN_GROUP relation as appropriate. 5. Creates the Group Vector Table. 6. Assigns the Group Vector Table to the valid groups.
Input:
none
Output:
INTEGER <Return Value> See error returned.
Error Conditions:
26006004 Dynamic memory allocation error encountered.
---------------
lbc_graphics_defn(type_id,cat_id,targ_elem_id,nvar,varid,vector_flag,marker,color,anchor)
##########
Description:
Given an lbc id,get the data in the ss_lbc,sv_lbc,ds_lbc,and/or dv_lbc table.
Input:
INTEGER type_id LBC Type Id - disp,force.
INTEGER cat_id Category - Nodal,Elem Uni,Elem Var.
INTEGER targ_elem_id Target Element Dimension.
Output:
INTEGER nvar Number of input variable (10 max).
INTEGER varid ()Input data variable ID.
INTEGER vector_flag ()Vector flag = 1,if vector.
INTEGER marker ()Graphics symbol.
INTEGER color ()Colorbox ID.
INTEGER anchor ()Anchor style.
INTEGER <Return Value> Returns success or failure of the routine.0 = success-1 = Error occurred
---------------
lbc_lp_parse_sca(data_string,data_type,field_id,null_flag,data_string_value)
##########
Description:
This function will parse a loads and boundary condition data string,verify that it contains valid scalar or scalar field information,and return the value in the string.
Input:
STRING data_string[] This value specifies a loads and boundary condition property.
INTEGER data_type This value specifies the property data type. This value should be set to either 1 to parse integers,3 to parse real values,4 to parse tokens,5 to parse nodes,and 7 to parse field values. If the "datatype" input value is not set to a value of 1 or 5,this function will attempt to parse the "dval" string as a character,node,or field values based on information obtained from the string itself.
Output:
INTEGER field_id This value returns the value of id for the scalar field specified by the input value data_string.
INTEGER null_flag This value returns a non zero value if the input value data_string represents a valid loads and boundary condition property that has no data.
REAL data_string_value This value returns the results of the parse of the input value data_string.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
14000004 LpSublistType: I am being invoked with a NULL list.
26005002 The data entered in databox %I% on the "Input Data" form is invalid.
26005003 Databox %I% on the "Input Data" form requires a Scalar field.
26005001 The data entered in databox %I% on the "Input Data" form cannot be parsed.
---------------
lbc_lp_parse_vec(data_string,field_id,null_flag,data_string_value)
##########
Description:
This function will parse a loads and boundary condition vector string,verify that it contains valid vector or vector field information,and return the value in the string.
Input:
STRING data_string[] This value specifies a loads and boundary condition property
Output:
INTEGER field_id This value returns the value of id for the scalar field specified by the input value data_string.
INTEGER null_flag This value returns a non zero value if the input value data_string represents a valid loads and boundary condition property that has no data.
REAL data_string_value This value returns the results of the parse of the input value data_string.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
14000011 LpSublistAttributeGet: Attempt to get attribute from NULL list.
26005004 Databox %I% on the "Input Data" form requires a Spatial Vector field.
26005001 The data entered in databox %I% on the "Input Data" form cannot be parsed.
---------------
lbc_plot_markers(num_lbcs,lbc_ids,num_grps,grp_ids)
##########
Description:
Creates graphics marker tables for display on groups.- Filters out the lbc_ids in the current load case which should be posted.- Modifies the LBC_IN_GROUP relation as appropriate.- Creates or modifies the Group Vector Table.- Assigns the Group Vector Table to the valid groups
Input:
INTEGER num_lbcs Number of lbc IDs.
INTEGER lbc_ids ()LBC IDs to process.
INTEGER num_grps Number of groups .
INTEGER grp_ids ()Group IDs to assign table to.
Output:
INTEGER <Return Value> See error returned.FA_NOERROR = successFA_ERROR = failure
---------------
lbc_show_plot_scalar(type_name,type_id,dynamic_val,var_name,component,num_lbcs,lbc_ids,num_grps,grp_ids)
##########
Description:
Main application routine for the Loads/BCs Show Plot Scalar option. A scalar graphics table is loaded with the specified load/BC and is assigned to the specified groups.
Input:
STRING type_name[] The Load/BC type name.
INTEGER type_id Load/BC type ID.
REAL dynamic_val The value of the dynamic field to evaluate.
STRING var_name[] The name of the variable to be loaded into the scalar table.
STRING component[] The component of the variable to be loaded into the scalar table.
INTEGER num_lbcs The number of lbcs to contour.
INTEGER lbc_ids (num_lbcs)The IDs of the lbcs to contour.
INTEGER num_grps The number of groups to assign the scalar table to.
INTEGER grp_ids (num_lbcs)The IDs of the groups to assign the scalar table to.
Output:
INTEGER <Return Value> See error returned.
Error Conditions:
26004001 Unable to assign the scalar table to Group "%A%".
26004003 Invalid component "%A%" was specified. Valid component strings are "Resultant","Component1","Component2",and "Component3".
---------------
loadcase_create2(load_case_name,load_case_type,load_case_desc,scale_factor,lbc_name,priorities,lbc_scales,dynamic_name,mv,make_current)
##########
Description:
This function creates a new load case in the database.
Input:
STRING load_case_name[] New load case name
STRING load_case_type[] New load case type,can be set to either “Static” or “Time Dependent”.
STRING load_case_desc[ ] Load case description.
REAL scale_factor Load case scale factor.
STRING lbc_name[]()Names of assigned lbcs.
INTEGER priorities()Array of priorities of assigned lbcs.
REAL lbc_scales()Array of lbc scale factors.
STRING dynamic_name[] Dynamic load case name.
REAL mv Flag to indicate if newly created.
LOGICAL make_current Load case should be made the current load case,TRUE if make current.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
loadsbcs_get_appl_region_list(id,region_id,ent_count,geo_str,app_list)
##########
Description:
Gets the application region entities - types,ids,and sub ids (if applicable)from the database.
Input:
INTEGER id Load/BC ID.
INTEGER region_id App Region ID.
INTEGER ent_count Number of entities in appl region.
Output:
STRING geo_str[] Geometry group = Geometry or FEM
STRING app_list[VIRTUAL] Application list.
INTEGER <Return Value> See error returned.
Comments:
This routine can be used to return multiple lists by returning the array ARID,increasing the number of PCL string pointer arguments,and filling them out.
Error Conditions:
26006004 Dynamic memory allocation error encountered.
---------------
loadsbcs_lp_coord(cid_list,cid_id)
##########
Description:
Returns the coordinate system id (Expects there to be only one Coordinate system in the list).
Input:
STRING cid_list[] Coordinate System List.
Output:
INTEGER cid_id Coordinate System ID.
INTEGER <Return Value> See error returned.
Error Conditions:
26002205 No Coordinate Frame chosen. Select one.
26002210 Only one coordinate system is allowed. %I% coordinate systems were input.
26002215 Coordinate Frame List %A% is invalid.
---------------
user_start()
##########
Description:
Called just after startup of Patran. No arguments are given to the function and there is no return result.
Input:
none
Output:
none
---------------
user_quit()
##########
Description:
Called just before exit of Patran. No arguments are given to the function and there is no return result.
Input:
none
Output:
none
---------------
user_db_new(dbname,tmplname)
##########
Description:
Called just after a new database is created.
Input:
STRING dbname[ ] Name of database that was created.
STRING tmplname[ ] Name of the template file used for the database.
Output:
none
---------------
user_db_open(dbname)
##########
Description:
Called just after an existing database is opened.
Input:
STRING dbname[] Name of database that was opened.
Output:
none
---------------
user_db_close(dbname,isquit)
##########
Description:
Called just before a database is closed.
Input:
STRING dbname[] Name of database that was created.
LOGICAL isquit TRUE if quit,FALSE if close.
Output:
none
---------------
is_batch()
##########
Description:
Checks to see if Patranis running in batch mode.
Input:
none
Output:
LOGICAL <Return Value> TRUE if running in batch mode.FALSE if running interactively.
---------------
db_get_p3_version(p3_ver)
##########
Description:
Queries the database for the version number.
Input:
none
Output:
STRING p3_ver[ ] Buffer to hold Patranversion.
INTEGER <Return Value> SQL error code.
---------------
utl_get_terse_version(terse_verson)
##########
Description:
Get terse (short)version string.
Input:
none
Output:
STRING terse_verson[ ] Version string.
---------------
utl_query_version_level()
##########
Description:
Return the code version level.
Input:
none
Output:
INTEGER <Return Value> 0 = Production code. 1 = Beta code. 2 = Alpha code. 3 = Development code.
---------------
asm_const_curve_loft(output_ids,slope_control,point_list,slope_list1,slope_list2,created_ids)
##########
Description:
Input:
STRING output_ids[] The Curve ID List. If blank,0,or #,Database will assign Curve IDs sequentially
LOGICAL slope_control =TRUE if endpoint slope control is to be enforced
STRING point_list[] The point list
STRING slope_list1[] The vectors defining the initial slope
---------------
db_count_orphan_curves(count)
##########
Description:
Returns the number of curves not in a group.
Input:
none
Output:
INTEGER count The number of curves not in a group.
INTEGER <Return Value> Returns the success or failure of the routine
---------------
db_get_orphan_curves(count,label_id)
##########
Description:
This function will return the label ids for curves that are not assigned to a group.
Input:
INTEGER count This value specifies the number of offsets defined for the output value label_id.
Output:
INTEGER entity_id()This value returns the label id values of the orphan curves.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_count_orphan_points(count)
##########
Description:
Returns the number of points not in a group.
Input:
none
Output:
INTEGER count The number of points not in a group.
INTEGER <Return Value> Returns the success or failure of the routine
---------------
db_get_orphan_points(count,entity_id)
##########
Description:
Returns the point entities not in a group.
Input:
INTEGER count Max number of entities returned.
Output:
INTEGER entity_id()Array of orphan eitity ids.
INTEGER <Return Value> Returns the success or failure of the routine.
---------------
db_count_orphan_solids()
##########
Description:
Returns the number of solids not in a group.
Input:
none
Output:
INTEGER count The number of solids not in a group.
INTEGER <Return Value> Returns the success or failure of the routine.
---------------
db_get_orphan_solids(count,entity_id)
##########
Description:
Returns the solid entities not in a group.
Input:
INTEGER count Max number of entities returned.
Output:
INTEGER entity_id()Array of orphan entity ids.
INTEGER <Return Value> Returns the success or failure of the routine.
---------------
db_count_orphan_surfaces(count)
##########
Description:
Returns the number of surfaces not in a group.
Input:
none
Output:
INTEGER count The number of surfaces not in a group.
INTEGER <Return Value> Returns the success or failure of the routine.
---------------
db_get_orphan_surfaces(count,entity_id)
##########
Description:
Returns the surface entities not in a group.
Input:
INTEGER count Max number of entities returned.
Output:
INTEGER entity_id()Array of orphan entity ids.
INTEGER <Return Value> Returns the success or failure of the routine.
---------------
asm_db_count_asm_in_group(groupId,count,status)
##########
Description:
Counts all of the The MacNeal-Schwendler Corporation entities (grid,line,patch,hpat,coordinate frames,nodes,and elements)in a group.
Input:
INTEGER groupId The id of the group.
Output:
INTEGER count(7)The count for each of the entities:(1)- grid(2)- line(3)- patch(4)- hpat(5)- coordinate frames(6)- nodes(7)- elements
INTEGER status Success or an error code.
---------------
asm_db_get_grids_in_group(groupId,gridLabels,xyzCoordinates,status)
##########
Description:
Gets the labels and xyz coordinates of all the grids in a group.
Input:
INTEGER groupId The id of the group.
Output:
INTEGER gridLabels()The grid labels.
REAL xyzCoordinates()The xyz coordinates.
INTEGER status Success or an error code.
Error Conditions:
38000617 ERROR Retrieving geometric entity definition of type PDA %A% from the database.
---------------
asm_db_get_hpats_in_group(groupid,hpatlabels,hpatvertexids,geometriccoeff,status)
##########
Description:
This function will get the labels,hpat vertex ids,and the xyz coordinates of all the hpats in a group.
Input:
INTEGER groupid This value specifies the id of the group.
Output:
INTEGER hpatlabels()This value returns the hpat label values. The number of offsets for this array should equal the number of solids defined for the group.
INTEGER hpatvertexIds()This value returns the hpat vertex ids. The number of offsets for this array should equal the number of solids defined for the group times 8.
REAL geometriccoeff()This value returns the xyz coordinates. The number of offsets for this array should equal the number of solids defined for the group times 192.
INTEGER status This value returns a value of 0 when the function executes successfully and a non zero value to indicate a change in status or an error.
---------------
asm_db_get_lines_in_group(groupid,linelabels,geometriccoefficients,status)
##########
Description:
Gets the labels and xyz coordinates of all the lines in the model.
Input:
INTEGER groupId The id of the group.
Output:
INTEGER linelabels()The line labels.
REAL geometriccoefficients()The xyz coordinates.
INTEGER status Success or an error code.
Error Conditions:
38000617 ERROR Retrieving geometric entity definition of type PDA %A% from the database.
---------------
asm_db_get_patches_in_group(groupid,patchlabels,geometriccoeff,status)
##########
Description:
This function will get the labels and the xyz coordinates of all of the patches in a group.
Input:
INTEGER groupid This value specifies the id of the group.
Output:
INTEGER patchlabels()This value returns the patch label values. The number of offsets for this array should equal the number of surfaces defined for the group.
REAL geometriccoeff()This value returns the xyz coordinates. The number of offsets for this array should equal the number of surfaces defined for the group times 48.
INTEGER status This value returns a value of 0 when the function executes successfully and a non zero value to indicate a change in status or an error.
---------------
sgm_db_count_iges_in_group(groupid,count)
##########
Description:
Counts all the IGES entity types IN A GROUP.
Input:
INTEGER groupId The id of the group.
Output:
INTEGER count (15)The count for each of the entities:(1)- IGES_Nurb_Curve.(2)- IGES_Cubic_Spline.(3)- IGES_Arc.(4)- IGES_Composite_Curve.(5)- IGES_Line.(6)- IGES_Conic.(7)- IGES_PieceWise_Linear.(8)- IGES_Offset_Curve.(9)- IGES_Nurb_Surface.(10)- IGES_Trimmed_Surface.(11)- IGES_BiCubic_Patch_Network.(12)- IGES_Surface_Of_Revolution.(13)- IGES_Ruled_Surface.(14)- IGES_Tabulated_Cylinder.(15)- IGES_Offset_Surface.
INTEGER <Return Value> See error conditions.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
---------------
sgm_db_get_iges_in_group(groupid,typecode,entityids,id_count)
##########
Description:
This function will get all the IGES entity types in a group.
Input:
INTEGER groupid This value specifies the id of the group.
INTEGER typecode This value specifies the type code of the group. See the remarks below.
Output:
INTEGER entityids()This value returns the entity id values. This array must be allocated with enough offsets to list all of the entity id values assigned to the group. Use a call to the PCL function sgm_db_count_iges_in_group()to get a count of the number of offsets required.
INTEGER id_count This value returns the number of id values of the specified type returned by the value entityids.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
38000617 ERROR Retrieving geometric entity definition of type PDA %A% from the database.
---------------
db_get_groups_using_mpc(nmpc,mpcid,maxgrp,ngroup,gid)
##########
Description:
Returns a list of all groups which refer to the specified MPC.
Input:
INTEGER nmpc The number of MPCs ids for which the information is being requested.
INTEGER mpcid()The ids of the MPCs for which the information is being requested.
INTEGER maxgrp The maximum number of groups which may be returned per MPC.
Output:
INTEGER ngroup()The number of groups using each MPC.
INTEGER gid()The ids of the groups for each MPC.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000142 The MPC was not found in the database.
13000154 The list of Groups for one or more of the MPCs is longer than MAXGRP.
External Dependencies and Side Effects:
Accesses records in the mpc_in_group table in the database.
---------------
db_count_groups_using_mpc(nmpc,mpcid,ngroup,flag)
##########
Description:
Returns the number of groups which refer to the specified MPCs.
Input:
INTEGER nmpc The number of MPCs ids for which the information is being requested.
INTEGER mpcid()The ids of the MPCs for which the information is being requested.
Output:
INTEGER ngroup()The number of groups using each MPC.
INTEGER flag An error flag indicating that one or more of the MPCs was not found.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000142 The MPC was not found in the database.
External Dependencies and Side Effects:
Accesses records in the mpc_in_group table in the database.
---------------
db_count_orphan_mpcs(count)
##########
Description:
Returns the number of entities not in a group.
Input:
none
Output:
INTEGER count The number of entities not in a group.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000086 No Records Found
External Dependencies and Side Effects:
This routine accesses records in the mpc & mpc_in_group tables in the database.
---------------
db_get_orphan_mpcs(count,entity_id)
##########
Description:
Gets the entities not in a group.
Input:
INTEGER count The number of entities not in a group.
Output:
INTEGER entity_id()Array of orphan entity ids.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000086 No Records Found
External Dependencies and Side Effects:
This routine accesses records in the mpc & mpc_in_group tables in the database.
---------------
count_orphan_elements(count)
##########
Description:
This function will count all of the elements that do not belong to any group. It will build a list of these elements in the process and this list will be saved for a subsequent call to get_orphan_elements,166.
Input:
none
Output:
INTEGER count The number of elements not associated with any group.
INTEGER <Return Value> 0 = Successful Completion.
---------------
count_orphan_nodes(count)
##########
Description:
This function will count all of the nodes that do not belong to any group. It will build a list of these nodes in the process and this list will be saved for a subsequent call to get_orphan_nodes,166.
Input:
none
Output:
INTEGER count The number of nodes not associated with any group.
INTEGER <Return Value> 0 = Successful Completion.
---------------
get_orphan_elements(count,idlist)
##########
Description:
Returns the list of all of the elements that do not belong to any group. The initial list is created through a call to the function count_orphan_elements,165.
Input:
INTEGER count This is the number of orphan elements.
Output:
INTEGER idlist(count)The number of nodes not associated with any group.
INTEGER <Return Value> 0 if Successful.
---------------
get_orphan_nodes(count,idlist)
##########
Description:
Returns the list of all of the elements that do not belong to any group. The initial list is created through a call to the function count_orphan_nodes,166.
Input:
INTEGER count This is the number of orphan nodes.
Output:
INTEGER idlist(count)This is an array of orphan node ids that has ‘count’ number of members in the array.
INTEGER <Return Value> 0 if Successful.
---------------
db_add_mpc_to_group(mpc_id,gid,visible)
##########
Description:
Add an mpc to a group.
Input:
INTEGER mpc_id The mpc id.
INTEGER gid The group id.
LOGICAL visible True (1)if the mpcs are to be considered visible.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000142 The MPC was not found in the database.
13000008 Group not found.
13000004 Duplicate entry exists in table.
External Dependencies and Side Effects:
Creates a record in the mpc_in_group table in the database.
---------------
db_get_group_name(grp_id,name)
##########
Description:
Retrieves the group name associated with the specified group id.
Input:
INTEGER grp_id Id to be retrieved from the database.
Output:
STRING name[31] Name of the group.
INTEGER <Return Value> Returns the success or failure of the routine.
---------------
db_count_entities_in_group(name,type,count)
##########
Description:
Counts all entities in the specified group name.
Input:
STRING name[] Pointer to a string containing the name of the group.
INTEGER type The type of entity to be counted.
Output:
INTEGER count Location to receive the resulting entity count.
INTEGER <Return Value> Returns the success or failure of the routine.
---------------
db_count_groups_for_entity(id,type,count)
##########
Description:
Counts all groups in which a specified entity resides
Input:
INTEGER id The id of the entity for which the group count is desired.
INTEGER type The type of entity to be counted.
Output:
INTEGER count Location to receive the resulting entity count.
INTEGER <Return Value> Returns the success or failure of the routine.
---------------
db_get_groups_for_entity(id,type,count,group_list)
##########
Description:
Gets all group ids associated with the specified entity type and id.
Input:
INTEGER id The id of the entity of the type specified.
INTEGER type The type of entity to be counted.
INTEGER count The number of groups for which storage has been allocated by the calling routine.
Output:
INTEGER group_list()Array containing the ids of the groups associated with the input id.
INTEGER <Return Value> Returns the success or failure of the routine.
---------------
uil_entity_group_members_get(group,entity_type,members)
##########
Description:
Get the group’s members of a given entity type.
Input:
STRING group[] Name of the group from which to get the list of members.
INTEGER entity_type Type of entity members to get.DbTypPoint 	1DbTypCurve 	2DbTypSurface 	3DbTypSolid 	4DbTypNode 	123DbTypElem 	124DbTypMpc 	161
Output:
STRING members [VIRTUAL]
INTEGER <Return Value> List of group members of the given entity type.= 0,Function was successful.
---------------
ga_groups_load_vector_set(ngroups,group_ids,vector_id)
##########
Description:
Changes the current load vector table associated with multiple groups.
Input:
INTEGER ngroups Number of groups.
INTEGER group_ids ()Groups to assign vector table to.
INTEGER vector_id Load vector id.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000143 The specified vector result table was not found.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_color_get(name,color)
##########
Description:
Gets the current color associated with a group.
Input:
STRING name[] Group name.
Output:
INTEGER color Color of group (0-15).
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_color_set(name,color)
##########
Description:
Modifies the current color associated with a group.
Input:
STRING name[] Group name.
INTEGER color Color id (0-15).
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_current_get(name)
##########
Description:
Get the current group.
Input:
none
Output:
STRING name[] Group name.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000121 There is not a current group defined.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_deform_get(name,flag)
##########
Description:
Gets the deform flag associated with a group.
Input:
STRING name[] Group name.
Output:
INTEGER flag Deform flag.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
---------------
ga_group_deform_set(name,flag)
##########
Description:
Sets whether a deform plot should be displayed.
Input:
STRING name[] Group name.
INTEGER flag If Flag=1 display deform plot,If Flag=0 don’t display.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
---------------
ga_group_display_get(name,dname)
##########
Description:
Gets the name of the current display property list associated with a group.
Input:
STRING name[] Group name.
Output:
STRING dname[] Name of the display property list.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000118 There is no display property posted to the group.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_elem_scalar_get(name,scalar_id)
##########
Description:
Gets the scalar table associated with a group.
Input:
STRING name[] Group name.
Output:
INTEGER scalar_id Scalar id.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_elem_scalar_set(name,scalar_id)
##########
Description:
Changes the current element scalar table associated with a group.
Input:
STRING name[] Group name.
INTEGER scalar_id Element scalar id.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000137 The specified element scalar table was not found.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_entities_get(name,type,range,number,entities)
##########
Description:
Gets a sorted list of the entities contained in a group.
Input:
STRING name[] Group name.
INTEGER type Entity type.
INTEGER range (3)Id range of members to return (1,2)and (3)max size of conversion string.
INTEGER number Number of entities in group.
Output:
STRING entities[] Entity labels.
INTEGER <Return Value> See error conditions.
Comments:
Called from PCL (uil_group_modify.pcl,uil_group_modify_members.pcl,uil_group_show_members).
Error Conditions:
11000050 The group name is invalid.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000127 The group does not have any entities in it.
---------------
ga_group_exist_get(name,flag)
##########
Description:
Determines if a group with the specified name exists.
Input:
STRING name[] Group name.
Output:
INTEGER flag Existence flag.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_groups_get(group_list)
##########
Description:
This function will get a list of the currently defined groups.
Input:
none
Output:
STRING group_list [ ] ()List of groups.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_label_get(name,flag)
##########
Description:
Gets the current label flag associated with a group.
Input:
STRING name[] Group name.
Output:
INTEGER flag Label flag.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_label_set(name,flag)
##########
Description:
Sets whether labels should be displayed.
Input:
STRING name[] Group name.
INTEGER flag If Flag=1 display deform plot,If Flag=0 don’t display.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_load_vector_get(name,vector_id)
##########
Description:
Gets the load vector table associated with a group.
Input:
STRING name[] Group name.
Output:
INTEGER vector_id Vector id.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_load_vector_set(name,vector_id)
##########
Description:
Changes the current load vector table associated with a group.
Input:
STRING name[] Group name.
INTEGER vector_id Load vector id.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000143 The specified vector result table was not found.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_nentities_get(name,type,number)
##########
Description:
Gets the number of entities of a particular type contained in the specified group.
Input:
STRING name[] Group name.
INTEGER type Entity type.
Output:
INTEGER number Number of entities.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_ngroups_get(group_count)
##########
Description:
This function will get the number of currently defined groups.
Input:
None.
Output:
INTEGER group_count This value will return the number of groups that are currently defined.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_node_deform_set(name,deform_id)
##########
Description:
Changes the current deform table associated with a group.
Input:
STRING name[] Group name.
INTEGER deform_id Node deform id.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000139 The specified nodal deformation table was not found.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_precision_get(name,flag)
##########
Description:
Gets the current precision flag associated with a group.
Input:
STRING name[] Group name.
Output:
INTEGER flag Flag=1 if high precision,Flag=0 if fast.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_result_vector_get(name,vector_id)
##########
Description:
Gets the result vector table associated with a group.
Input:
STRING name[] Group name.
Output:
INTEGER vector_id Vector id.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_result_vector_set(name,vector_id)
##########
Description:
Changes the current result vector table associated with a group.
Input:
STRING name[] Group name.
INTEGER vector_id Result vector id.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000143 The specified vector result table was not found.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_selectable_get(name,flag)
##########
Description:
Gets the current select status of a group.
Input:
STRING name[] Group name.
Output:
INTEGER flag 1 or 0 if selectable or not.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_selectable_set(name,flag)
##########
Description:
Modifies the current setting of the group selectable flag.
Input:
STRING name[] Group name.
INTEGER flag 1 or 0 if selectable or not.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_style_get(name,style)
##########
Description:
Gets the render style associated with a group.
Input:
STRING name[] Group name.
Output:
STRING style[] Render style.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_style_set(name,style)
##########
Description:
Modifies the render style associated with a group.
Input:
STRING name[] Group name.
STRING style[] Render Style.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000013 The render style is invalid.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_vector_load_get(name,style)
##########
Description:
Gets the load vector flag associated with a group.
Input:
STRING name[] Group name.
Output:
INTEGER flag Vector flag.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_vector_load_set(name,flag)
##########
Description:
Flags if a load vector plot should be displayed with group.
Input:
STRING name[] Group name.
INTEGER flag If Flag=1 display vector plot,If Flag=0 don’t display.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_vector_result_get(name,flag)
##########
Description:
Gets the load vector flag associated with a group.
Input:
STRING name[] Group name.
Output:
INTEGER flag Vector flag.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_group_vector_result_set(name,flag)
##########
Description:
Flags if a result vector plot should be displayed with group.
Input:
STRING name[] Group name.
INTEGER flag If Flag=1 display vector plot,If Flag=0 don’t display.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000050 The group name is invalid.
11000105 The specified group was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_clip_plane_clip_planes_get(aclips_list)
##########
Description:
Gets the list of arb clipping planes.
Input:
None.
Output:
STRING aclips_list [ ] List of arb clipping planes.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_clip_plane_create(name)
##########
Description:
Creates an arb clipping plane.
Input:
STRING name[] Name of plane.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000155 The arbitrary clipping plane name is invalid.
11000154 An arbitrary clipping plane with the given name is already in the database.
11000097 There is not enough disk space to complete operation.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_clip_plane_delete(name)
##########
Description:
Delete a plane.
Input:
STRING name[] Name of plane.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000155 The arbitrary clipping plane name is invalid.
11000158 The specified arbitrary clipping plane was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_clip_plane_direction_get(name,value)
##########
Description:
Get the arb clipping plane direction.
Input:
STRING name[] Arb clipping plane name.
Output:
REAL value (3)Direction of arb clipping plane.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000155 The arbitrary clipping plane name is invalid.
11000158 The specified arbitrary clipping plane was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_clip_plane_direction_set(name,value,up_flag)
##########
Description:
Set the arb clipping plane direction.
Input:
STRING name[] Arb clipping plane name.
REAL value (3)Direction of arb clipping plane.
LOGICAL up_flag Calculate up vector or not.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000155 The arbitrary clipping plane name is invalid.
11000158 The specified arbitrary clipping plane was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_clip_plane_icon_get(name,value)
##########
Description:
Get the status whether the icon is displayed.
Input:
STRING name[] Arb clipping plane name.
Output:
INTEGER value Flag specifying if an icon should be displayed at arb clipping plane.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000155 The arbitrary clipping plane name is invalid.
11000158 The specified arbitrary clipping plane was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_clip_plane_icon_set(name,value)
##########
Description:
Set the status whether the icon is displayed.
Input:
STRING name[] Arb clipping plane name.
INTEGER value Up of arb clipping plane.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000155 The arbitrary clipping plane name is invalid.
11000158 The specified arbitrary clipping plane was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_clip_plane_location_get(name,value)
##########
Description:
Get the location of arb clipping plane.
Input:
STRING name[] Arb clipping plane name.
Output:
REAL value (3)Location of arb clipping plane (x,y,z).
INTEGER <Return Value> See error conditions.
Error Conditions:
11000155 The arbitrary clipping plane name is invalid.
11000158 The specified arbitrary clipping plane was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_clip_plane_location_set(name,value)
##########
Description:
Set the location of arb clipping plane.
Input:
STRING name Arb clipping plane name.
REAL value (3)Location of arb clipping plane (x,y,z).
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000155 The arbitrary clipping plane name is invalid.
11000158 The specified arbitrary clipping plane was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_clip_plane_movement_get(name,value)
##########
Description:
Get whether the arb clipping plane moves with the model or not.
Input:
STRING name[] Arb clipping plane name.
Output:
INTEGER value (3)Flag specifying whether arb clipping plane moves with the model or not.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000155 The arbitrary clipping plane name is invalid.
11000158 The specified arbitrary clipping plane was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_clip_plane_movement_set(name,value)
##########
Description:
Set the status whether the arb clipping plane should move with the model.
Input:
STRING name[] Arb clipping plane name.
INTEGER value Flag specifying if the arb clipping plane should move with the model.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000155 The arbitrary clipping plane name is invalid.
11000158 The specified arbitrary clipping plane was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_clip_plane_nclip_planes_get(naclips)
##########
Description:
Gets the number of arb clipping planes.
Input:
None.
Output:
INTEGER naclips Number of arb clipping planes.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_clip_plane_nposted_get(naclips)
##########
Description:
Gets the number of posted arb clipping planes.
Input:
None.
Output:
INTEGER naclips Number of posted arb clipping planes.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_clip_plane_post(name)
##########
Description:
Post a plane.
Input:
STRING name[] Name of plane.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000155 The arbitrary clipping plane name is invalid.
11000158 The specified arbitrary clipping plane was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_clip_plane_posted_get(aclips_list)
##########
Description:
Gets the list of posted arb clipping planes.
Input:
None.
Output:
STRING aclips_list [ ] ()List of arb clipping planes.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_clip_plane_unpost(name)
##########
Description:
Unpost a plane.
Input:
STRING name[] Name of plane.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000155 The arbitrary clipping plane name is invalid.
11000158 The specified arbitrary clipping plane was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_clip_plane_up_set(name,value)
##########
Description:
Set the arb clipping plane Up.
Input:
STRING name[] Arb clipping plane name.
REAL value (3)Up of arb clipping plane.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000155 The arbitrary clipping plane name is invalid.
11000158 The specified arbitrary clipping plane was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
clip_plane_ar_calc(name,rx,ry,rz,new_dir,new_up)
##########
Description:
Update the indicated clipping plane’s data to reflect the axes relative rotations about the x,y and z axes.
Input:
STRING name[] Name of clipping plane.
REAL rx Rotation about the x-axis.
REAL ry Rotation about the y-axis.
REAL rz Rotation about the z-axis.
Output:
REAL new_dir(3)New dir.
REAL new_up(3)New up.
INTEGER <Return Value> Error status.
---------------
clip_plane_zoom_calc(name,factor,new_loc)
##########
Description:
Update the indicated clipping plane’s location point to reflect the zoom (not in db).
Input:
STRING name[] Name of clipping plane.
REAL factor Factor.
Output:
REAL new_loc(3)New location.
INTEGER <Return Value> Error status.
---------------
db_get_current_viewport_id(id)
##########
Description:
Retrieves the viewport id associated with the specified viewport.
Input:
None.
Output:
INTEGER id Location for returned value.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
---------------
ga_view_normal_get(viewport,vector)
##########
Description:
This function gets the view vector for the view.
Input:
STRING viewport[ ] The name of the viewport. ““ for the current viewport.
Output:
REAL ARRAY vector(3)The three values of the view vector.
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
gm_convert_name(orig_name,new_name)
##########
Description:
This function will remove the directory from a full path and file name specification.
Input:
STRING orig_name[] This value specifies the full path and file name.
Output:
STRING new_name[] This value will return the file name from the path and file name specification.
INTEGER <Return Value> This return value is unused.
Comments:
Device dependent routine.
---------------
gm_conv_device_to_subject(vp_id,dev_pt,sub_pt)
##########
Description:
To convert from device space to subject space.
Input:
INTEGER vp_id Viewport id.
INTEGER dev_pt (2)Point in device space.
Output:
REAL sub_pt (3)Point in subject space.
INTEGER <Return Value> See error conditions.
Error Conditions:
15000028 The viewport must be posted to carry out this operation.
15000025 An error occurred during an operation on the graphics manager display list.
---------------
gm_database_current(dbname)
##########
Description:
Get the current database from the graphics manager.
Input:
None.
Output:
STRING dbname[] Current database name.
INTEGER <Return Value> GM Error status.
---------------
gm_draw_entity(segment_id,color_id,entity_type,entity_id)
##########
Description:
This function draws an entity in segment or current viewport.
Input:
INTEGER segment_id Segment id number. If <0 then use current viewport.
INTEGER color_id Selected color id of entity.
INTEGER entity_type Type of entity,i.e. curve or surface.
INTEGER entity_id Entity ID
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Condition:
None
---------------
gm_fit_view(flag)
##########
Description:
Make sure limits are up to date and perform a fit view.
Input:
INTEGER flag If TRUE perform fit view no matter what. If FALSE,only fit view if gm has detected that a fit is necessary.
Output:
INTEGER <Return Value> 1 if a fit view was done,0 if not.
---------------
gm_fullcolor_mode()
##########
Description:
Return whether or not the device is Fullcolor.
Input:
None.
Output:
LOGICAL <Return Value> Fullcolor status of device.
---------------
gm_graphics_off()
##########
Description:
Shut down the graphics. Database will be closed and all colors freed.
Input:
None.
Output:
INTEGER <Return Value> GM Error status.
---------------
gm_graphics_on()
##########
Description:
Start the graphics back up. Called after a GmGraphicsOff call. Loads in the last database,allocated colors.
Input:
None.
Output:
INTEGER <Return Value> GM Error status.
---------------
gm_hilight_clear()
##########
Description:
To unhighlight all of the highlighted objects.
Input:
None.
Output:
INTEGER <Return Value> GM Error status.
---------------
gm_hilight_entity(type,id,color)
##########
Description:
To highlight an entity.
Input:
INTEGER type Entity type.
INTEGER id Entity id.
INTEGER color Color to hilight. 0 - unhilight,-1 - hilight using preference color.
Output:
INTEGER <Return Value> This return value is unused.
Error Conditions:
15000035 A new pick list could not be created.
---------------
gm_hilight_string(string,color)
##########
Description:
This function highlights all of the entities in the picklist string.
Input:
STRING string[] Picklist string.
INTEGER color Color to hilight. 0 - unhilight,-1 - hilight using preference color.
Output:
INTEGER <Return Value> This return value is unused.
Error Condition:
None
---------------
gm_hilight_widget(wid_id,color)
##########
Description:
To hilight all of the entities in the select databox.
Input:
widget wid_id Select databox widget id.
INTEGER color Color to hilight. 0 - unhilight,-1 - hilight using preference color.
Output:
INTEGER <Return Value> This return value is unused.
Error Conditions:
15000035 A new pick list could not be created.
---------------
gm_lookup_write(start,ncolors,colors)
##########
Description:
Write colors to lookup table.
Input:
INTEGER start Starting location in colormap to write to.
INTEGER ncolors Number of colors to write.
REAL colors (ncolors,3)Array of RGB values.
Output:
INTEGER <Return Value> See error conditions.
Comments:
The color table is organized in three regions; The first region is for the DAKAR color table,the second for UIMS colors,the third for shading. When calling this routine,the ncolors should not cross over these boundaries.
Error Conditions:
15000041 User Interface colors not allocated. The colormap is being used.
15000042 Not enough colors were allocated for shading.
---------------
gm_mpeg_pause_recording()
##########
Description:
This function pauses the recording of mpeg images file. This is a void function so there are no input/output arguments in this function.
Input:
None
Output:
None
---------------
gm_mpeg_resume_recording()
##########
Description:
This function resumes the recording of mpeg images file. This is a void function so there are no input/output arguments in this function.
Input:
None
Output:
None
---------------
gm_mpeg_start_recording(file_name,file_version,x,y,width,height,quality,maxframes)
##########
Description:
This function starts the recording of an mpeg images file.
Input:
STRING file_name[] Recorded .mpeg filename
STRING file_version[] File version,i.e. overwrite or increment
REAL x X point coordinate
REAL y Y point coordinate
REAL width Width of the drawable area
REAL height Height of the drawable area
INTEGER quality Quality (0-100)
INTEGER maxframes Maximum number of frames.
Output:
INTEGER <Return Value> 0 for success of the function and integer value 1 to 7 for the failure of the function.
Error Condition:
None
---------------
gm_mpeg_stop_recording()
##########
Description:
This function stops the recording of an mpeg images file. This is a void function so there are no input/output arguments in this function.
Input:
None
Output:
None
---------------
gm_viewport_hardware_mode_get(hard_flag)
##########
Description:
To get whether viewport is drawn in hardware mode.
Input:
None.
Output:
INTEGER hard_flag If TRUE,viewport is drawn in hardware.
INTEGER <Return Value> This return value is unused.
---------------
gm_viewport_hardware_mode_set(hard_flag)
##########
Description:
To set whether viewport is drawn in hardware mode.
Input:
INTEGER hard_flag If TRUE,viewport is drawn in hardware.
Output:
INTEGER <Return Value> This return value is unused.
---------------
gm_viewport_id_to_name(id,name)
##########
Description:
Convert from Viewport id to Viewport name.
Input:
INTEGER id Viewport ID.
Output:
STRING name[] Viewport name.
INTEGER <Return Value> GM error status.
---------------
gm_viewport_limits_get(persp,limits)
##########
Description:
Determine the limits of the model in View Space.
Input:
LOGICAL persp If TRUE,this skips perspective. If FALSE,the perspective setting in the current viewport will be used.
Output:
REAL limits (6)Min/max x,y and z coordinates of the model in View Space.
INTEGER <Return Value> See error conditions.
Error Conditions:
15000025 An error occurred during an operation on the graphics manager display list.
15000028 The viewport must be posted to carry out this operation.
---------------
gm_viewport_ncolors_get(ncolors)
##########
Description:
To get the number of colors used by the GM.
Input:
None.
Output:
INTEGER ncolors Number of colors.
INTEGER <Return Value> This return value is unused.
---------------
gm_viewport_refresh_off()
##########
Description:
Turn off viewport refresh.
Input:
None.
Output:
INTEGER <Return Value> This return value is unused.
---------------
gm_viewport_refresh_on()
##########
Description:
Turn on viewport refresh.
Input:
None.
Output:
INTEGER <Return Value> This return value is unused.
---------------
gm_viewport_refresh_status()
##########
Description:
Return the current status of gmRefreshViewports.
Input:
None.
Output:
LOGICAL <Return Value> GM error status.
---------------
gm_viewport_view_corners(id,corn1,corn2,cent_x,cent_y,zoom)
##########
Description:
Calculate the center and zoom for a viewport given two corners of a rectangle.
Input:
INTEGER id Viewport id.
INTEGER corn1[2] This value specifies the X and Y coordinates of the upper left corner of the rectangle defining the new center point and zoom value for the viewport.
INTEGER corn1[2] This value specifies the X and Y coordinates of the lower right corner of the rectangle defining the new center point and zoom value for the viewport.
Output:
REAL cent_x New center in x.
REAL cent_y New center in y.
REAL zoom New zoom.
INTEGER <Return Value> GM error status.
---------------
gm_visibility_all(vstat)
##########
Description:
To set the visibility status of all objects.
Input:
LOGICAL vstat TRUE - plot.FALSE - erase.
Output:
INTEGER <Return Value> GM error status.
---------------
gm_visibility_widget(entityList,visibility)
##########
Description:
To set the visibility status of all the entities in the selectdatabox.
Input:
STRING entityList List of entities to plot or erase.
LOGICAL visibility Visibility status: TRUE - visible,FALSE - hidden.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
15000035 A new pick list could not be created.
---------------
end_vrml_animation()
##########
Description:
The function ends the process of copying the animation from the screen into a VRML file. This function has to follow the start_vrml_animation()function after specifying the animation attributes. The function has no return conditions.
Input:
None
Output:
None
Error Conditions:
None.
---------------
gm_write_image(<image_type >,<filename>,<version_logic>,<xpcnt >,<ypcnt>,<width_pcnt>,<height_pcnt>,<quality>,<xyplot>)
##########
Description:
The function prepares an image file of the specified type of the current viewport. It returns an integer status of 0 on success and 1 on failure.
Input:
STRING image_type[] The typeof the image file – BMP,JPEG,PNG,TIFF,VRML.
STRING filename[] The name of the file to write the image with the file extensions - bmp,jpg,png,tif,wrl.
STRING version_logic[] String to specify the version logic for writing the image file – “Overwrite”,“Increment”. Any other string defaults to “Increment”.
REAL xpcnt The starting percentage of the viewport for the image file in the horizontal direction.
REAL ypcnt The starting percentage of the viewport for the image file in the vertical direction.
REAL width_pcnt The ending percentage of the viewport for the image file in the horizontal direction.
REAL height_pcnt The ending percentage of the viewport for the image file in the vertical direction.
INTEGER quality An integer specifying the quality of image.
STRING xyplot The image captured will be of the current XY PLOT window as opposed to the model graphics viewport.
Output:
INTEGER <Return Value> 0 for success and 1 for failure.
Error Conditions:
None.
---------------
gm_write_vrml(<filename>,<version_logic>)
##########
Description:
The function prepares an image file of the entire viewport with the extension .wrl. It returns an integer status of 1 on success and 0 on failure.
Input:
STRING filename[] The name of the file to write the image with the file extension - .wrl.
STRING version_logic[] String to specify the version logic for writing the image file. – “Overwrite”,“Increment”. Any other string defaults to “Increment”.
Output:
INTEGER <Return Value> 1 for success and 0 for failure.
Error Conditions:
None.
---------------
start_vrml_animation(<filename>,<version_logic>)
##########
Description:
The function starts the process of copying the animation from the screen into a VRML file. This function has to be followed by the end_vrml_animation()function after specifying the animation attributes. During the course of execution of this function,the animation is sent to the .wrl file and is not viewed in the current viewport. The function has no return conditions.
Input:
STRING filename[] The name of the file to write the animation file with the file extension - .wrl
STRING version_logic[] String to specify the version logic for writing the image file – “Overwrite”,“Increment”. Any other string defaults to “Increment”.
Output:
None
Error Conditions:
None.
---------------
ga_title_color_get(old_name,size)
##########
Description:
Get the color.
Input:
STRING old_name[] Title name.
Output:
INTEGER size Color.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000152 Invalid title name.
11000151 Title not found.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_title_color_set(old_name,size)
##########
Description:
Set the color.
Input:
STRING old_name[] Title name.
INTEGER size Title color.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000152 Invalid title name.
11000151 Title not found.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_title_create(name,x,y,color,size)
##########
Description:
Creates title.
Input:
STRING name[] Title.
REAL x X percentage.
REAL y Y percentage.
INTEGER color Text color.
INTEGER size Font size.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000150 Duplicate title.
11000097 There is not enough disk space to complete operation.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_title_delete(name)
##########
Description:
Delete title.
Input:
STRING name[] Title.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000150 Duplicate title.
11000097 There is not enough disk space to complete operation.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_title_font_size_get(old_name,size)
##########
Description:
Get the font size.
Input:
STRING old_name[] Title name.
Output:
INTEGER size Font size.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000152 Invalid title name.
11000151 Title not found.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_title_font_size_set(old_name,size)
##########
Description:
Set the font size.
Input:
STRING old_name[] Title name.
INTEGER size Font size.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000152 Invalid title name.
11000151 Title not found.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_title_list_get(list)
##########
Description:
Get the list of titles.
Input:
None.
Output:
STRING list [ ] ()List of titles from db.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_title_loc_get(old_name,x,y)
##########
Description:
Get the x,y location.
Input:
STRING old_name[] Title name.
Output:
REAL x X percentage.
REAL y Y percentage.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000152 Invalid title name.
11000151 Title not found.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_title_loc_set(old_name,x,y)
##########
Description:
Set the x,y location.
Input:
STRING old_name[] Title name.
REAL x X percentage.
REAL y Y percentage.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000152 Invalid title name.
11000151 Title not found.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_title_nposted_get(num)
##########
Description:
Get the number of posted titles in db.
Input:
None.
Output:
INTEGER num Number of posted titles.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_title_num_get(num)
##########
Description:
Get the number of titles in db.
Input:
None.
Output:
INTEGER num Number of titles.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_title_posted_get(list)
##########
Description:
Get the list of posted titles
Input:
None.
Output:
STRING list [ ] ()List of posted titles from db.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_title_rename(old_name,new_name)
##########
Description:
Rename title.
Input:
STRING old_name[] Title.
STRING new_name[] Title.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_spectrum_colors_get(name,colors)
##########
Description:
Get the colors defined in a spectrum.
Input:
STRING name[] Spectrum name.
Output:
INTEGER colors ()Color index values.
INTEGER <Return Value> GA error status.
Error Conditions:
11000030 The spectrum name is invalid.
11000106 The specified spectrum was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_spectrum_colors_set(name,offset,number,colors)
##########
Description:
Set the colors in spectrum.
Input:
STRING name[] Name of spectrum.
INTEGER offset Starting position in color table where colors should be modified.
INTEGER number Number of colors in spectrum.
INTEGER colors ()Color values.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000030 The spectrum name is invalid.
11000032 An incorrect offset was specified in spectrum color table.
11000031 An incorrect number of colors was specified for the spectrum.
11000106 The specified spectrum was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_spectrum_continuous_get(name,value)
##########
Description:
Get the continuous tone flag.
Input:
STRING name[] Spectrum name.
Output:
INTEGER value Continuous tone flag.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000030 The spectrum name is invalid.
11000106 The specified spectrum was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_spectrum_continuous_set(name,value)
##########
Description:
Set the continuous tone flag.
Input:
STRING name[] Spectrum name.
INTEGER value Continuous tone flag.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000030 The spectrum name is invalid.
11000106 The specified spectrum was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_spectrum_create(name,number,colors)
##########
Description:
Creates a spectrum color table.
Input:
STRING name[] Name of spectrum table.
INTEGER number Number of colors in spectrum.
INTEGER colors ()Color index values.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000030 The spectrum name is invalid.
11000031 An incorrect number of colors was specified for the spectrum.
11000029 A spectrum with the given name is already in the database.
11000097 There is not enough disk space to complete operation.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_spectrum_current_get(name)
##########
Description:
Gets the current spectrum.
Input:
None.
Output:
STRING name[] Spectrum name.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000030 The spectrum name is invalid.
11000106 The specified spectrum was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_spectrum_current_set(name)
##########
Description:
Sets the current spectrum.
Input:
STRING name[] Spectrum name.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000030 The spectrum name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_spectrum_delete(name)
##########
Description:
Delete a spectrum table.
Input:
STRING name[] Name of spectrum table.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000030 The spectrum name is invalid.
11000106 The specified spectrum was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_spectrum_interpolation_get(name,factor)
##########
Description:
Get the interpolation factor.
Input:
STRING name[] Spectrum name.
Output:
REAL factor Interpolation factor.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000030 The spectrum name is invalid.
11000106 The specified spectrum was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_spectrum_interpolation_set(name,factor)
##########
Description:
Set the interpolation factor.
Input:
STRING name[] Spectrum name.
REAL factor Interpolation factor.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000030 The spectrum name is invalid.
11000033 An incorrect interpolation factor was specified.
11000106 The specified spectrum was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_spectrum_ncolors_get(name,number)
##########
Description:
Get the number of colors defined in spectrum.
Input:
STRING name[] Spectrum name.
Output:
INTEGER number Number of colors.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000030 The spectrum name is invalid.
11000106 The specified spectrum was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_spectrum_nspectrums_get(nspectrums)
##########
Description:
Gets the number of spectrums.
Input:
None.
Output:
INTEGER nspectrums Number of spectrums.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_spectrum_rename(old,new)
##########
Description:
Rename a spectrum.
Input:
STRING old[] Current name of spectrum.
STRING new[] New name of spectrum.
Output:
INTEGER <Return Value> GA Error status	
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_spectrum_spectrums_get(spectrums)
##########
Description:
Gets the list of spectrums.
Input:
None.
Output:
STRING spectrums [ ] ()List of spectrums.
INTEGER <Return Value> GA error status.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_db_range_set_attributes_m(has_attribute_data,post_when_used,allow_overwrite,dynamic_update_results,id,name)
##########
Description:
This function sets the range attributes.
Input:
INTEGER has_attribute_data This option declars that the range has attribute data. This value is commonly set to on or 1.
INTEGER post_when_used This option causes the range to be posted to the Viewport if a results tool that is posted in a Viewport references it. Set to 1 to turn on,0 to turn off.
INTEGER allow_overwrite This option if turned off (0)will not allow the ranges definition to be modified when attributes of a tool that uses it are changed. This is to prevent accidental overwriting of your range by an auto-ranging result plot. Set to 1 to turn on,0 to turn off.
INTEGER force_update This value forces the update of the range. This value on (1)if the "Force Result Update" toggle on the "Display>Range" form is set. Set to 1 to turn on,0 to turn off.
INTEGER id The database id value set for the range.
STRING name [32] The name of the range.
Output:
INTEGER <Return Value> This value will be set to 0 if an error has not occured.
---------------
ga_db_range_set_custom_labels_m(num_labels,sub_index,mid_index,labels,id,name)
##########
Description:
This function sets the subrange labels for the range.
Input:
INTEGER num_labels The number of labels in the subrange label set.
INTEGER sub_index (num_labels)The label subrange indice values.
INTEGER mid_index (num_labels)The label middle indice values.
STRING labels [80] (num_labels)The custom label values.
INTEGER id The database id value set for the range.
STRING name [32] The name of the range.
Output:
INTEGER <Return Value> This value will be set to 0 if an error has not occured.
---------------
ga_db_range_set_data_method_m(has_method_data,data_method,num_rl_data,num_int_data,num_str_data,real_data,int_data,string_data,num_subranges,id,name)
##########
Description:
This function sets the range data method.
Input:
INTEGER has_method_data Used to indicate that method data is available (1)or not (0).
INTEGER data_method The data method. This is an enumerated value that can have the values listed in Table Range Enumerations.XX with an "Enumeration Name" of "Manual Aids:".
INTEGER num_rl_data The number of real data items.
INTEGER num_int_data The number of integer data items.
INTEGER num_str_data The number of string data items.
REAL real_data (num_rl_data)The array of real data items.
INTEGER int_data (num_int_data)The array of integer data items.
STRING int_data [80] (num_str_data)The array of string data items.
INTEGER num_subranges The number of subranges for the method.
INTEGER id The database id value set for the range.
STRING name [32] The name of the range.
Output:
INTEGER <Return Value> This value will be set to 0 if an error has not occured.
---------------
ga_db_range_set_label_control_m(has_label_data,prefix_label,suffix_label,nodata_label,id,name)
##########
Description:
This function sets the range labels.
Input:
INTEGER has_label_data Used to indicate that label control data is available (1)or not (0).
STRING prefix_label [80] The prefix label.
STRING suffix_label [80] The suffix label.
STRING nodata_label [80] The nodata label.
INTEGER id The database id value set for the range.
STRING name [32] The name of the range.
Output:
INTEGER <Return Value> This value will be set to 0 if an error has not occured.
---------------
ga_db_range_set_label_display_m(has_display_data,to_label,middle_label,from_label,all_custom,middle_options,id,name)
##########
Description:
This function controls which labels are displayed.
Input:
INTEGER has_display_data Used to indicate that display data is available (1)or not (0).
INTEGER to_label Value can be turned on (1)or off (0).
INTEGER middle_label Value can be turned on (1)or off (0).
INTEGER from_label Value can be turned on (1)or off (0).
INTEGER all_custom Value can be turned on (1)or off (0).
INTEGER middle_options The middle option value. This is an enumerated value that can have the values listed in Table Range Enumerations.XX with an "Enumeration Name" of "Tolerance:".
INTEGER id The database id value set for the range.
STRING name [32] The name of the range.
Output:
INTEGER <Return Value> This value will be set to 0 if an error has not occured.
---------------
ga_db_range_set_label_style_m(has_style_date,label_color,data_format,font_size,sig_figs,id,name)
##########
Description:
This function sets the label style control information.
Input:
INTEGER has_style_data Used to indicate that style data is available (1)or not (0).
INTEGER label_color This value is an offset into the current color table. A default or initial value of 7 is used for this argument value.
INTEGER data_format The data format value. This is an enumerated value that can have the values listed in Table Range Enumerations.XX with an "Enumeration Name" of "Format:".
INTEGER font_size The size of the font. Internal notes suggest that this value is not used.
INTEGER sig_figs This value is used to set the number of significant figures for real values.
INTEGER id The database id value set for the range.
STRING name [32] The name of the range.
Output:
INTEGER <Return Value> This value will be set to 0 if an error has not occured.
---------------
ga_db_range_set_no_subrange_m(has_sub_data,outside_sub_cont,sub_label,sub_color,id,name)
##########
Description:
This function sets the no-subrange control information.
Input:
INTEGER has_sub_data Used to indicate that no-subrange data is available (1)or not (0).
INTEGER outside_sub_cont The no-subrange control value. This is an enumerated value that can have the values listed in Table Range Enumerations.XX with an "Enumeration Name" of "Use Sub-Range:".
STRING sub_label [80] The no-subrange label value.
INTEGER sub_color This value is an offset into the current color table. A default or initial value of 7 is used for this argument value.
INTEGER id The database id value set for the range.
STRING name [32] The name of the range.
Output:
INTEGER <Return Value> This value will be set to 0 if an error has not occured.
---------------
ga_db_range_set_subranges_flt_m(num_subranges,from,to,middle,id,name)
##########
Description:
This function sets the subrange limits.
Input:
INTEGER num_subranges The number of subrange limits in the arrays.
REAL from (num_subranges)The "from" subrange values.
REAL to (num_subranges)The "to" subrange values.
REAL middle (num_subranges)The "middle" subrange values.
INTEGER id The database id value set for the range.
STRING name [32] The name of the range.
Output:
INTEGER <Return Value> This value will be set to 0 if an error has not occured.
---------------
ga_db_range_set_threshold_m(has_thresh_data,method,datatype,r_start,r_end. i_start,i_end,s_start,s_end,id,name)
##########
Description:
This function sets the range threshold values.
Input:
INTEGER has_thresh_data Used to indicate that threshold data is available (1)or not (0).
INTEGER method The method value. Can be set to: both (3),upper(2),lower(1),or none(0).
INTEGER datatype The datatype value. Can be set to: percent (1)or value (0).
REAL r_start The real start value.
REAL r_end The real end value.
INTEGER i_start The integer start value.
INTEGER i_end The integer end value.
STRING s_start [80] The string start value.
STRING s_end [80] The string end value.
INTEGER id The database id value set for the range.
STRING name [32] The name of the range.
Output:
INTEGER <Return Value> This value will be set to 0 if an error has not occured.
---------------
db_get_range_id(name,id)
##########
Description:
This function gets the range id using the range name.
Input:
STRING name [32] The name of the range.
INTEGER <Return Value> This value will be set to 0 if an error has not occured.
Output:
INTEGER id The database id value set for the range.
---------------
ga_range_contour_get(name,flag)
##########
Description:
Get whether range is to be displayed using contour values.
Input:
STRING name[] Range name.
Output:
INTEGER flag Flag=1 if contour values are displayed,Flag=0 if fringe values.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000134 The range name is invalid.
11000136 The specified range was not found.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_range_contour_set(name,flag)
##########
Description:
Set the display type flag.
Input:
STRING name[] Name of range.
INTEGER flag Flag=1 if contour values are displayedFlag=0 if fringe values.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000134 The range name is invalid.
11000136 The specified range was not found.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_range_create(name,number)
##########
Description:
Creates a range.
Input:
STRING name[] Name of range.
INTEGER number Number of sub-ranges in range.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000134 The range name is invalid.
11000133 A range with the given name is already in the database.
11000097 There is not enough disk space to complete operation.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_range_delete(name)
##########
Description:
Delete a range
Input:
STRING name[] Name of range.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000134 The range name is invalid.
11000136 The specified range was not found.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_range_exist_get(name,flag)
##########
Description:
Check if range exists.
Input:
STRING name[] Range name.
Output:
INTEGER flag Exist flag.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000134 The range name is invalid.
11000136 The specified range was not found.
---------------
ga_range_nranges_get(nranges)
##########
Description:
Gets the number of ranges.
Input:
None.
Output:
INTEGER nranges Number of ranges.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_range_nvalues_get(name,number)
##########
Description:
Get the number of sub-ranges defined in range.
Input:
STRING name[] Range name.
Output:
INTEGER number Number of sub-ranges.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000134 The range name is invalid.
11000136 The specified range was not found.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_range_ranges_get(ranges)
##########
Description:
Gets the list of ranges.
Input:
None.
Output:
STRING ranges [ ] ()List of ranges.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_range_rename(old,new)
##########
Description:
Rename a range.
Input:
STRING old[] Current name of range.
STRING new[] New name of range.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000134 The range name is invalid.
11000136 The specified range was not found.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_range_startend_set(name,start,end)
##########
Description:
Set the sub-ranges in range given start/end.
Input:
STRING name[] Name of range.
REAL start Start value.
REAL end End value.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000134 The range name is invalid.
11000136 The specified range was not found.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_range_threshold_set(name,start,end,sthresh_fl,sthresh,ethresh_fl,ethresh)
##########
Description:
Set the sub-ranges in range given start/end and threshold values.
Input:
STRING name[] Name of range.
REAL start Start value.
REAL end End value.
INTEGER sthresh_fl Whether a starting threshold value is spec.
REAL sthresh Starting threshold value.
INTEGER ethresh_fl Whether an ending threshold value is spec.
REAL ethresh Ending threshold value.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000134 The range name is invalid.
11000136 The specified range was not found.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_range_values_get(name,from,to,middle)
##########
Description:
Get the sub-ranges defined in range.
Input:
STRING name[] Range name.
Output:
REAL from ()From values.
REAL to ()To values.
REAL ranges [ ] ()List of ranges.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000134 The range name is invalid.
11000136 The specified range was not found.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_range_values_set(name,from,to,middle)
##########
Description:
Set the sub-ranges in range.
Input:
STRING name[] Name of range.
REAL from ()From values.
REAL to ()To values.
REAL middle ()Middle values.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000134 The range name is invalid.
11000136 The specified range was not found.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_node_deform_create(title,nbr_nodes,node_ids,deforms,id)
##########
Description:
Creates a node deformation table.
Input:
STRING title[] Title of table.
INTEGER nbr_nodes Number of nodes to place in table.
INTEGER node_ids ()Array of node ids.
REAL deforms (nbr_nodes,3)Deform values for all nodes.
Output:
INTEGER id Id of created node deformation table.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
db_update_mesh_params(smooth_factor,max_cycles,accel_factor,term_factor,tri_surf_mesh,rect_surf_tria)
##########
Description:
Output:
INTEGER <Return Value> = 0 Function was successful
---------------
ga_lookup_colors_get(name,rgb)
##########
Description:
Get the colors defined in LUT.
Input:
STRING name[] LUT name.
Output:
REAL rgb (,3)Colors in LUT.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000102 The specified lookup table was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_lookup_colors_set(name,offset,number,rgb)
##########
Description:
Set the LUT’s colors.
Input:
STRING name[] LUT name.
INTEGER offset Start position.
INTEGER number Number of colors in LUT.
REAL rgb (,3)Triplets of RGB values.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000026 The lookup table is invalid.
11000028 An incorrect offset was specified in lookup table.
11000027 An incorrect number of colors was specified for lookup table.
11000102 The specified lookup table was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_lookup_create(name,number,rgb)
##########
Description:
Create a lookup table.
Input:
STRING name[] LUT name.
INTEGER number Number of colors in LUT.
REAL rgb (,3)Triplets of RGB values.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000026 The lookup table is invalid.
11000027 An incorrect number of colors was specified for lookup table.
11000097 There is not enough disk space to complete operation.
11000025 A lookup table with the given name is already in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_lookup_current_get(name)
##########
Description:
Get the current LUT.
Input:
None.
Output:
STRING name[] LUT name.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000102 The specified lookup table was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_lookup_current_set(name)
##########
Description:
Set the current LUT.
Input:
STRING name[] LUT name.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000026 The lookup table is invalid.
11000102 The specified lookup table was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_lookup_delete(name)
##########
Description:
Delete a LUT.
Input:
STRING name[] Display name.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000026 The lookup table is invalid.
11000102 The specified lookup table was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_lookup_ncolors_get(name,number)
##########
Description:
Get the number of colors defined in LUT.
Input:
STRING name[] LUT name.
Output:
INTEGER number Number of colors.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000026 The lookup table is invalid.
11000102 The specified lookup table was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_lookup_ntables_get(ntables)
##########
Description:
Get the number of luts in database.
Input:
None.
Output:
INTEGER ntables Number of luts.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000102 The specified lookup table was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_lookup_rename(old_name,new_name)
##########
Description:
Rename a LUT.
Input:
STRING old_name[] Old LUT name.
STRING new_name[] New LUT name.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000026 The lookup table is invalid.
11000102 The specified lookup table was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_lookup_tables_get(ntables)
##########
Description:
Get the list of luts in database.
Input:
None.
Output:
STRING ntables [ ] ()List of lut names.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000102 The specified lookup table was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_attenuation_get(name,value)
##########
Description:
Get the attenuation of the light.
Input:
STRING name[] Light source name.
Output:
REAL value Attenuation of light (0.0-1.0).
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000104 The specified light source was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_attenuation_set(name,value)
##########
Description:
Set the attenuation of the light.
Input:
STRING name[] Light source name.
REAL value Attenuation of light (0.0-1.0).
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000104 The specified light source was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_color_get(name,index)
##########
Description:
Get the light source color.
Input:
STRING name[] Light source name.
Output:
INTEGER index Light color.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000104 The specified light source was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_color_set(name,index)
##########
Description:
Set the light source color.
Input:
STRING name Light source name.
INTEGER index Light source color index.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000086 The color index for the current lookup table is out of range.
11000104 The specified light source was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_create(name)
##########
Description:
Creates a light source.
Input:
STRING name Name of light source.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000036 A light source with the given name is already in the database.
11000097 There is not enough disk space to complete operation.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_delete(name)
##########
Description:
Delete a light source.
Input:
STRING name[] Name of light source.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000104 The specified light source was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_direction_get(name,value)
##########
Description:
Get the light source direction.
Input:
STRING name Light source name.
Output:
REAL value (3)Direction of light source.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000104 The specified light source was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_direction_set(name,value)
##########
Description:
Set the light source direction.
Input:
STRING name[] Light source name.
REAL value (3)Direction of light source.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000104 The specified light source was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_icon_get(name,value)
##########
Description:
Get the status whether the icon is displayed.
Input:
STRING name[] Light source name.
Output:
INTEGER value Flag specifying if an icon should be displayed at light source.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000104 The specified light source was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_icon_set(name,value)
##########
Description:
Set the status whether the icon is displayed.
Input:
STRING name[] Light source name.
INTEGER value Flag specifying if an icon should be displayed at light source.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000104 The specified light source was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_intensity_get(name,value)
##########
Description:
Get the intensity of the light.
Input:
STRING name[] Light source name.
Output:
REAL value Intensity of light (0.0-1.0).
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000104 The specified light source was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_intensity_set(name,value)
##########
Description:
Set the intensity of the light.
Input:
STRING name[] Light source name.
REAL value Intensity of light (0.0-1.0).
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000104 The specified light source was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_lights_get(lights_list)
##########
Description:
Gets the list of lights.
Input:
None.
Output:
STRING lights_list [ ] ()List of lights.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_location_get(name,value)
##########
Description:
Get the location of light source.
Input:
STRING name[] Light source name.
Output:
REAL value (3)Location of light source (x,y,z).
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000104 The specified light source was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_location_set(name,value)
##########
Description:
Set the location of light source.
Input:
STRING name[] Light source name.
REAL value (3)Location of light source (x,y,z).
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000104 The specified light source was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_movement_get(name,value)
##########
Description:
Get whether the light moves with the model or not.
Input:
STRING name[] Light source name.
Output:
INTEGER value Flag specifying whether light moves with the model or not.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000104 The specified light source was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_movement_set(name,value)
##########
Description:
Set the status whether the light should move with the model.
Input:
STRING name[] Light source name.
INTEGER value Flag specifying if the light should move with the model.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000104 The specified light source was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_nlights_get(nlights)
##########
Description:
Gets the number of lights.
Input:
None.
Output:
INTEGER nlights Number of lights.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_nposted_get(nlights)
##########
Description:
Gets the number of posted lights.
Input:
None.
Output:
INTEGER nlights Number of posted lights.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_post(name)
##########
Description:
Post a light source.
Input:
STRING name[] Name of light source.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000104 The specified light source was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_posted_get(lights_list)
##########
Description:
Gets the list of posted lights.
Input:
None.
Output:
STRING lights_list [ ] ()List of lights.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_type_get(name,value)
##########
Description:
Get the light source type.
Input:
STRING name[] Light source name.
Output:
STRING value[] Type.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000104 The specified light source was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_type_set(name,value)
##########
Description:
Set the light source type.
Input:
STRING name[] Light source name.
STRING value[] Light source type.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000104 The specified light source was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_light_unpost(name)
##########
Description:
Unpost a light source.
Input:
STRING name[] Name of light source.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
11000037 The light source name is invalid.
11000104 The specified light source was not found in the database.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_elem_scalar_create(title,nbr_elems,elem_ids,nbr_values,max_vals,scalars,id)
##########
Description:
Creates a scalar element table.
Input:
STRING title[] Title of table.
INTEGER nbr_elems Number of elements to place in table.
INTEGER elem_ids ()Array of element ids.
INTEGER nbr_values ()Number of scalar values in each element.
INTEGER max_vals Maximum number of scalar values in any element.
REAL scalars (nbr_elems,max_value)Scalar values for all elements.
Output:
INTEGER id Id of created element scalar table.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_elem_scalar_single_create(title,nbr_elems,elem_ids,nbr_nodes,scalars,id)
##########
Description:
Creates a scalar element table given only one value per element.
Input:
STRING title[] Title of table.
INTEGER nbr_elems Number of elements to place in table.
INTEGER elem_ids ()Array of element ids.
INTEGER nbr_nodes ()Number of nodes in each element.
REAL scalars ()One scalar value per element.
Output:
INTEGER id Id of created element scalar table.
INTEGER <Return Value> See error conditions.
Error Conditions:
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_vector_create(title,comp_vect_flag,sym_flag,nbr_vectors,vect_ent_types,vect_ent_ids,vect_locs,normals,vect_types,anchor_styles,vect_colors,sub_ids,id)
##########
Description:
Creates a vector table.
Input:
STRING title[] Title of table.
INTEGER comp_vect_flag Whether 3 component vector should be displayed or a resultant vector.
INTEGER sym_flag Whether vector should be displayed symmetrically on the opposite side.
INTEGER nbr_vectors Number of vectors to place in table.
INTEGER vect_ent_types ()Array of entity types.
INTEGER vect_ent_ids ()Array of entity ids (if negative,use the location to signify the location of the vector).
REAL vect_locs (nbr_vectors ,3)Location of vector (only used if vector_ent_ids < 0).
REAL normals (nbr_vectors ,3)Normal of vector (includes length).
INTEGER vect_types ()Vector types. 0 - no arrow head.1 - one arrow head.2 - double head.3 - triple head.4 - one arrow head 0-displacements.5 - double head 0-displacements.6 - triple head 0-displacements.7 - one arrow head imposed displacements.8 - double head imposed displacements.9 - triple head imposed displacements.100’s are reserved for markers.101 - dot.102 - circle.103 - X.104 - +.105 - filled circle.106 - square.107 - filled square.108 - triangle.109 - filled triangle.110 - diamond.111 - filled diamond.
INTEGER anchor_styles ()Anchor styles (1-base,2-tip,3-middle).
INTEGER vect_colors ()Vector colors. For results:NULL - use the colors on D.P. form.0 - use vector color.1,2,3 - use component colors.For functional assignments:Values must be specified. The value is the type of vector. The possible values are taken from the preference include file (LBCCOLOR1,LBCCOLOR2,EPCOLOR1,EPCOLOR2,etc.).
INTEGER sub_ids ()Sub ids. Only used by FA.
Output:
INTEGER id Id of created vector table.
---------------
ga_vector_get(id,title,comp_vect_flag,sym_flag,vect_ent_types,vect_ent_ids,vect_locs,normals,vect_types,anchor_styles,vect_colors,sub_ids)
##########
Description:
Gets a vector table.
Input:
INTEGER id Id of vector table.
Output:
STRING title[] Title of table.
INTEGER comp_vect_flag Whether 3 component vector should be displayed or a resultant vector.
INTEGER sym_flag Whether vector should be displayed symmetrically on the opposite side.
INTEGER vect_ent_types ()Array of entity types.
INTEGER vect_ent_ids ()Array of entity ids (if negative,use the location to signify the location of the vector).
REAL vect_locs (,3)Location of vector (only used if vector_ent_ids < 0).
REAL normals (,3)Normal of vector (includes length).
INTEGER vect_types ()Vector types (1-one arrow head,2-double head,3-triple head,0-no arrow head).
INTEGER anchor_styles ()Anchor styles (1-base,2-tip,3-middle).
INTEGER vect_colors ()Vector colors.
INTEGER sub_ids ()Sub-ids.
INTEGER <Return Value> 0 if function was succesful.
Error Conditions:
11000143 The specified vector result table was not found.
11000098 A fatal error has occurred in the database. Database is corrupted.
---------------
ga_vector_number_get(id,number)
##########
Description:
Gets the number of vectors in vector table.
Input:
INTEGER id Id of vector table.
Output:
INTEGER number Number of vectors in table.
INTEGER <Return Value> 0 if function was successful.
---------------
ga_error()
##########
Description:
Returns a LOGICAL indicating whether the last call to the Graphics application raised an error condition.
Input:
None.
Output:
LOGICAL <Return Value> Flag indicating if an error occurred.
---------------
verify_boundaries_display_mgr.initialize()
##########
Description:
Save graphics properties associated with the current group. Used in conjunction with verify_boundaries_display_mgr.plot/erase.
Input:
None.
Output:
None.
---------------
verify_boundaries_display_mgr.plot(displ_type)
##########
Description:
Plot the free boundaries by changing display properties.
Input:
STRING displ_type[] “Free_Edges” or “Free_Faces”
Output:
None.
---------------
verify_boundaries_display_mgr.erase()
##########
Description:
Erase the free boundary display by resetting graphics properties
Input:
None.
Output:
None.
---------------
elementprops_show(prop_name,disp_type,grp_names)
##########
Description:
Input:
STRING prop_name[] Name of the property to be displayed
STRING disp_type[] Form of the display: “Table” “Marker Plot” “Vector Plot” “Scalar Plot”
STRING grp_names[]()List of the group names to display on
---------------
transform_pts(cid,cidtyp,npts,points)
##########
Description:
This function will transform points defined in the global coordinate system to the specified local coordinate system.
Input:
INTEGER cid This value specifies the local coordinate system id.
INTEGER npts This value specifies the number of points to be transformed.
REAL points(3,npts)This value specifies the coordinates of the points to be transformed. This value is used as both an input and an output to this function and the values passed into the function will be changed.
Output:
INTEGER cidtyp This value returns the type of the local coordinate system.
REAL points (3,npts)This value returns the coordinates of the points transformed into the local coordinate system. This value is used as both an input and an output to this function. The original input values for this array will be lost.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_count_solids_for_surface(id,count)
##########
Description:
Counts all solids associated with a specified surface in the database.
Input:
INTEGER id The id of the surface to which the solids are associated.
Output:
INTEGER count The integer number of solids associated to the surface in the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_solids_for_surface(srfid,count,solid)
##########
Description:
Finds the ids of all solids associated with a specified surface in the database.
Input:
INTEGER srfid Id of the surface to which the solids are associated.
INTEGER count The number of solids that the calling routine expects to receive from the database. This count should be the same as the number of solids to which the surface is associated as it should have been fetched from the database prior to making this call.
Output:
INTEGER solid()Ids of the various solids associated with the specified surface.
---------------
sgm_db_get_gen_body_face_ids(bodyid,numberfaces,faceids,faceorients,facesense,status)
##########
Description:
Gets the Face IDs for a body.
Input:
INTEGER bodyid The ID of the body.
INTEGER numberfaces The number of face for the body.
Output:
INTEGER faceids ()The IDs of the faces of the body.
INTEGER faceorients ()The orientations of the faces of the body.
INTEGER facesense ()The sense of the normal (out or in).
INTEGER status Success or an error code.
---------------
sgm_db_get_gen_body_vertex_ids(bodyid,numvert,vertexids,status)
##########
Description:
Gets the Vertex IDs for a body.
Input:
INTEGER bodyid The ID of the body.
INTEGER numvert The number of vertices for the body.
Output:
INTEGER vertexids ()The IDs of the vertices of the body.
INTEGER status 0 if successful,error code otherwise.
---------------
sgm_db_get_num_faces_body(bodyid,numberfaces,status)
##########
Description:
Gets the number of faces for a general body.
Input:
INTEGER bodyid The ID of the body.
Output:
INTEGER numberfaces The number of faces for the body.
INTEGER status 0 if successful,else returns error code.
---------------
db_count_surfaces_for_edge(id,count)
##########
Description:
Counts all surfaces associated with a specified edge in the database.
Input:
INTEGER id The id of the edge to which the surfaces are associated.
Output:
INTEGER count The integer number of surfaces associated to the edge in the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_surfaces_for_edge(edgid,count,srfid)
##########
Description:
Finds the ids of all surfaces associated with a specified edge in the database.
Input:
INTEGER edgid Id of the edge to which the surfaces are associated.
INTEGER count The number of surfaces that the calling routine expects to receive from the database. This count should be the same as the number of surfaces to which the edge is associated as it should have been fetched from the database prior to making this call.
Output:
INTEGER srfid()Ids of the various surfaces associated with the specified edge.
---------------
sgm_db_get_gen_face_edge_ids(surfaceid,numberloops,numberedges,loopids,edgeids,edgeorients)
##########
Description:
Returns the loop ids,edge ids,and orientations for an n-sided surface identified by its id.
Input:
INTEGER surfaceid The id of the surface.
INTEGER numberloops Total number of loops for the surface.
INTEGER numberedges The total number of edges for the surface.
Output:
INTEGER loopids ()The loop handle for each edge. (dim totalNumberOfEdges).
INTEGER edgeids ()The ids of the edge. (dim totalNumberOfEdges).
INTEGER edgeorients ()The orientations of the edge. (dim totalNumberOfEdges).
INTEGER <Return Value> Success or an error code.
---------------
sgm_db_get_gen_face_vertex_ids(surfaceid,numberverts,vertexids)
##########
Description:
Returns the vertex ids for an n-sided surface identified by its id.
Input:
INTEGER surfaceid The id of the surface.
INTEGER numberverts The number of vertices for the surface.
Output:
INTEGER vertexids ()The ids of the vertex.
INTEGER <Return Value> Success or an error code.
---------------
sgm_db_get_num_edges_face(surfaceid,numberfaces)
##########
Description:
This function will return the number of edges of the specified surface.
Input:
INTEGER surfaceid This value specifies the identifier for a surface or the face of a solid.
Output:
INTEGER numberfaces This value returns the number of edges of the specified surface of face of a solid.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_count_curves_for_point(id,count)
##########
Description:
Counts all curves associated with a specified point in the database.
Input:
INTEGER id The id of the point to which the curves are associated.
Output:
INTEGER count The integer number of curves associated to the point in the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000097 Curve input was not found.
---------------
db_get_curves_for_point(ptid,count,crvid)
##########
Description:
Finds the ids of all curves associated with a specified point in the database.
Input:
INTEGER ptid Id of the point to which the curves are associated.
INTEGER count The number of curves that the calling routine expects to receive from the database. This count should be the same as the number of curves to which the point is associated as it should have been fetched from the database prior to making this call.
Output:
INTEGER crvid()Ids of the various curves associated with the specified point.
---------------
sgm_db_get_edge_vertex_ids(edgeid,vertexids)
##########
Description:
This function returns the vertex id values foran edge.
Input:
INTEGER edgeid This value specifies the id of an edge.
Output:
INTEGER vertexids ()This value returns the id values of the vertices of an edge.
INTEGER <Return Value> 0 if the function was successful.
---------------
sgm_nearest_point_on_curve(location,curve_data,parameter,point_location)
##########
Description:
This function gets the nearest point at a specific parametric location on a curve.
Input:
REAL ARRAY location(3)The xyz location of the point in space.
REAL ARRAY curve_data()The blob of the curve. The functions to be used for getting the blob are sgm_db_get_blob_size()followed by sgm_db_get_curve().
REAL parameter The parameter value along the curve where to look for the nearest point.
Output:
REAL ARRAY point_location(3)The xyz location of the nearest point in space.
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_nearest_point_on_curve_aea(location,curve_data,parameter,point_location)
##########
Description:
This function gets the nearest point at a specific parametric location on a curve.
Input:
REAL ARRAY location(3)The xyz location of the point in space.
REAL ARRAY curve_data()The blob of the curve. The functions to be used for getting the blob are sgm_db_get_blob_size()followed by sgm_db_get_curve().
REAL parameter The parameter value where to look for the nearest point.
Output:
REAL ARRAY point_location(3)The xyz location of the nearest point in space.
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
xy_curve_num_points_get(<curve_name>,yonly,npoints)
##########
Description:
This function will get the number of points on the curve.
Input:
STRING curve_name Name of the curve.
Output:
LOGICAL yonly Flag which is TRUE if curve uses only y values and FALSE if curve uses both xy values.
INTEGER npoints Number of points on the curve.
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
See the Status Message(Ch 11)for information on any error values returned by this function.
---------------
db_get_load_case_id(title,id)
##########
Description:
Input:
INTEGER id Load case ID
INTEGER <Return Value> = 0 Function was successful
---------------
app_db_get_ref_cid(domesg,cord_frame)
##########
Description:
Get the default reference coordinate frame from the database.
Input:
LOGICAL domesg Error message flag: If TRUE,this routine will allow the app_db_err_msg routine to issue a message if an error is encountered.
Output:
STRING cord_frame[] The default reference coordinate frame.
INTEGER <Return Value> Success or an error code.
---------------
asm_u_coord_local_to_global(p,t,r,itype,npts)
##########
Description:
This function transforms point locations from local coordinates to global. It will internally calculate the transpose of the provided rotation matrix for the local frame relative to the global,and use that to determine the global location.
Input:
REAL ARRAY p(3,npts)The point coordinates in local frame.
REAL ARRAY t(3)This specifies the translation vector for the local coordinate frame relative to the global coordinate frame.
REAL ARRAY r(3,3)This specifies the rotation matrix for the local coordinate frame relative to the global coordinate frame.
INTEGER itype The reference coordinate frame type:1=rectangular2=cylindrical3=spherical
INTEGER npts The number of points.
Output:
REAL ARRAY p(3,npts)The point coordinates in global frame.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
db_check_coord_frame_exist(id)
##########
Description:
Checks to see if a coordinate frame exists in the database.
Input:
INTEGER id The unique internal cid identifying the coordinate frame to be retrieved from the database.
Output:
LOGICAL <Return Value> True if the cid exists.
Error Conditions:
This routine returns only a logical value,and gives no indication of why a failure occurred.
External Dependencies and Side Effects:
Accesses one record in the “coordinate_frame” table in the database.
---------------
db_count_coordinate_frame(count)
##########
Description:
Counts all coordinate_frames in the database.
Input:
none
Output:
INTEGER count The integer number of coordinate_frames in the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
External Dependencies and Side Effects:
Queries “coordinate_frame” table in the database.
---------------
db_get_all_coord_frame_ids()
##########
Description:
This function will set a cursor to the start of a list of all coordinate frames.
Input:
none
Output:
none
---------------
db_get_next_coord_frame_ids(id)
##########
Description:
This function will get the next coordinate frame id from the database.
Input:
none
Output:
INTEGER id This value returns the id of the next coordinate frame id.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Remarks:
The PCL function db_get_all_coord_frame_ids()must be called at least once to establish the list of posted coordinate frame id values and to set the cursor to point to the start of the list. Calling the db_get_next_coord_frame_ids()function in a loop will then allow the list entries to be retrieved.
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred.
13000085 Cursor not open.
13000117 The query specified has completed.
External Dependencies and Side Effects:
Accesses all records in the “coordinate frame” table in the database.
---------------
db_get_max_coord_label(label)
##########
Description:
Gets the largest coord label from the database.
Input:
none
Output:
INTEGER label Highest coord label used.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000056 Coordinate frame not found.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Selects the largest coord label from the database.
---------------
db_get_min_coord_label(label)
##########
Description:
Gets the smallest coord label from the database.
Input:
none
Output:
INTEGER label Lowest coord label used.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000056 Coordinate frame not found.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Selects the smallest coord label from the database.
---------------
db_get_all_posted_coord()
##########
Description:
This function will set a cursor to the start of a list of posted coordinate frames.
Input:
none
Output:
none
---------------
db_get_next_posted_coord(id)
##########
Description:
This function will get the next posted coordinate frame id from the database.
Input:
none
Output:
INTEGER id This value returns the id of the next posted coordinate frame id.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Remarks:
The PCL function db_get_all_posted_coord()must be called at least once to establish the list of posted coordinate frame id values and to set the cursor to point to the start of the list. Calling the db_get_next_posted_coord()function in a loop will then allow the list entries to be retrieved.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
13000085 Cursor not open.
13000117 The query specified has completed.
External Dependencies and Side Effects:
Accesses all records in the “coordinate frame” table in the database.
---------------
asm_db_get_next_cord_label(domessage,integerlabel,stringlabel)
##########
Description:
Get the next highest coord label from the database.
Input:
LOGICAL domessage Tells the routine to issue an error message if an error occurs.
Output:
INTEGER integerlabel The next highest coord label.
STRING stringlabel[] The next highest coord label.
INTEGER <Return Value> Success or an error code.
---------------
db_get_coord_frame_label(id,label)
##########
Description:
Gets a label from the database given an id.
Input:
INTEGER id The unique internal id identifying the coord to be retrieved from the database.
Output:
INTEGER label The unique external id identifying the coord to be retrieved from the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
External Dependencies and Side Effects:
Accesses one record in the “coordinate_frame” table in the database.
---------------
db_get_current_coord(coord_label)
##########
Description:
Retrieves the current coordinate frame from the database.
Input:
none
Output:
INTEGER label Location for returned value.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
13000056 Coordinate frame not found
13000007 An unspecified database error occurred.
---------------
db_count_solid(count)
##########
Description:
Counts all solids in the database.
Input:
none
Output:
INTEGER count The integer number of solids in the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_max_solid_label(label)
##########
Description:
Gets the largest solid label from the database.
Input:
none
Output:
INTEGER label Highest solid label used.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_min_solid_label(label)
##########
Description:
Gets the smallest solid label from the database.
Input:
none
Output:
INTEGER label Lowest solid label used.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_solid_coo_and_type(id,coo,type)
##########
Description:
Gets a geometric coo and type from the database given an id.
Input:
INTEGER id The unique internal solid id identifying the association of the information to be retrieved from the database.
Output:
INTEGER coo The geometric company of origin stored in the database.
INTEGER type The geometric type of data stored in the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_solid_id(label,id)
##########
Description:
Gets a solid id from the database given a solid label.
Input:
INTEGER label The unique external solid id identifying the solid to be retrieved from the database.
Output:
INTEGER id The unique internal solid id identifying the solid retrieved from the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_solid_label(id,label)
##########
Description:
Gets a solid label from the database given a solid id.
Input:
INTEGER id The unique internal solid id identifying the solid to be retrieved from the database.
Output:
INTEGER label The unique external solid id identifying the solid to be retrieved from the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
asm_db_get_next_hpat_label(domessage,integerlabel,stringlabel)
##########
Description:
Get the next unused hpat label from the database.
Input:
LOGICAL domessage Tells the routine to issue an error message if an error occurs.
Output:
INTEGER integerlabel The next highest solid label.
STRING stringlabel[] The next highest solid label.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
sgm_construct_solid_brep(output_ids,surface_list,delete_flag,created_ids)
##########
Description:
This function creates a b-rep solids from surfaces.
Input:
STRING output_ids[] The output ids to be assigned to the new solids.
STRING surface_list[] This value specifies the list of the surfaces used to create the b-rep solid.
LOGICAL delete_flag This value is set to TRUE if the original surfaces are to be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_construct_solid_volume(output_ids,surface)
##########
Description:
This function creates solids with a set of surfaces.
Input:
STRING output_ids[ ] The output ids to be assigned to the new solids.
STRING surface_list[ ] This value specifies the list of the surfaces from which the solid is to be created.
LOGICAL delete_flag This value is set to TRUE if the original surfaces are to be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_db_get_num_vertices_body(bodyid,numvert,status)
##########
Description:
Gets the number of vertices for a general body.
Input:
INTEGER bodyid The ID of the body.
Output:
INTEGER numvert The number of vertices for the body.
INTEGER status Success or an error code.
---------------
sgm_db_get_solid(solidid,blobsize,blob,status)
##########
Description:
Get the geometric definition of a solid from the database.
Input:
INTEGER solidid Id of the solid.
INTEGER blobsize The size of the blob in words.
Output:
REAL blob ()Array to be filled in with Geometric descriptionof a solid as a blob.
INTEGER status 0: no error.-1: database error.-2: insufficient array length for the blob.
Error Conditions:
38000001 The allocated space for the blob is too small.
---------------
sgm_edit_brep_break_plane_v1(output_ids,solid_list,plane_list,delete_flag,created_ids)
##########
Description:
This function breaks a set of solids with a set of planes.
Input:
STRING output_ids[ ] The output ids to be assigned to the new solids.
STRING solid_list[ ] This value specifies the list of the solids to be broken.
STRING plane_list[ ] This value specifies the list of the planes which will break the solids.
LOGICAL delete_flag This value is set to TRUE if the original solids are to be deleted.
Output:
STRING created_ids[ ] This value returns the created ID list.
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_edit_brep_break_surface_v1(output_ids,solid_list,surface_list,delete_flag,created_ids)
##########
Description:
This function breaks a set of solids with a set of surfaces.
Input:
STRING output_ids[] The output ids to be assigned to the new solids.
STRING solid_list[] This value specifies the list of the solids to be broken.
STRING surface_list[] This value specifies the list of the surfaces which will break the solids.
LOGICAL delete_flag This value is set to TRUE if the original solids are to be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_edit_solid_break(output_ids,option_type,point_list,parameter,delete_flag,solid_list,created_ids)
##########
Description:
This function breaks solids at a point or by parametric location.
Input:
STRING output_ids[] The output ids to be assigned to the new solids.
INTEGER option_type The option for breaking the solid 1 for breaking by point 0 for breaking by u,v,w parameters.
STRING point_list[] The point where the solid is to be broken if option_type=1.
REAL ARRAY parameter(3)The u,v and w parameters if option_type = 0,0<u,v,w<1
LOGICAL delete_flag This value is set to TRUE if the original solids are to be deleted.
STRING solid_list[] List of solids to break.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_edit_solid_refit_v1(output_ids,tolerance,type_option,delete_flag,solid_list,created_ids)
##########
Description:
This function edits solids for changing the topology.
Input:
STRING output_ids[] The output ids to be assigned to the new solids.
REAL tolerance This tolerance for fitting the solid.
LOGICAL type_option = TRUE for creating hyperpatches= FALSE for creating a triparametric net
LOGICAL delete_flag This value is set to TRUE if the original solids are to be deleted.
STRING solid_list[] The list of solids to refit.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_edit_solid_reverse(solid_list,created_ids)
##########
Description:
This function reverses the parametric directions of solids.
Input:
STRING solid_list[] List of solids to be reversed.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_get_solid_volume(solid,volume)
##########
Description:
Gets the volume of a solid.
Input:
INTEGER solid The ID of the solid.
Output:
REAL volume The volume of the solid.
INTEGER <Return Value> Success or an error code.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
---------------
sgm_solid_evaluate(s,ui,vi,wi,in,pd,irc)
##########
Description:
This subroutine plays traffic cop for the lower level solid evaluators.
Input:
REAL s ()Solid data table.
REAL ui Parametric coordinates.
REAL vi Parametric coordinates.
REAL wi Parametric coordinates.
INTEGER in Derivative flag.0 - P1 - P,PU,PV,PW2 - P,PU,PV,PW,PUV,PUW,PVW3 - P,PU,PV,PW,PUV,PUW,PVW,PUU,PVV,PWW
Output:
REAL pd (,3)Output table (controlled by IN).
INTEGER irc 0 - evaluation successful.1 - error somewhere,don’t trust the result.
---------------
sgm_solid_parametric(solid_id,num_pnt_xyz,pnt_xyz,para_xyz)
##########
Description:
Returns a list of parametric locations that corresponds to a list of xyz points for a solid.
Input:
INTEGER solid_id The id value for the solid.
INTEGER num_pnt_xyz The number of points in the input and output lists.
REAL pnt_xyz (num_pnt_xyz,3)The input point locations.
Output:
REAL para_xyz (num_pnt_xyz,3)The output parametric point locations.
INTEGER <return_value> A non-zero value is returned if an error has occured.
---------------
sgm_verify_solid_brep(surface list,verify_tol)
##########
Description:
This function verifies that a collection of surfaces represent a valid B-rep solid.
Input:
STRING surface_list[] This value specifies the collection of surfaces that represent the B-rep solid.
REAL verify_tol This value specifies a tolerance value used to determine if the surfaces represent the B-rep solid. This value must be less than or equal to the global geometric modeling tolerance value.
Output:
INTEGER <Return Value> 0 if the function was successful.
---------------
asm_db_get_next_patch_label(domessage,integerlabel,stringlabel)
##########
Description:
Get the next highest patch label from the database.
Input:
LOGICAL domessage Tells the routine to issue an error message if an error occurs.
Output:
INTEGER integerlabel The next highest curve label.
STRING stringlabel[] The next highest curve label.
INTEGER <Return Value> Success or an error code.
---------------
db_count_surface(count)
##########
Description:
Counts all surfaces in the database.
Input:
none
Output:
INTEGER count The integer number of surfaces in the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_max_surface_label(label)
##########
Description:
Gets the largest surface label from the database.
Input:
none
Output:
INTEGER label
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_min_surface_label(label)
##########
Description:
Gets the smallest surface label from the database.
Input:
none
Output:
INTEGER label Highest surface label used.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_surface_coo_and_type(id,coo,type)
##########
Description:
Gets a geometric coo and type from the database given an id.
Input:
INTEGER id The unique internal surface id identifying the association of the information to be retrieved from the database.
Output:
INTEGER coo The geometric company of origin stored in the database.
INTEGER type The geometric type of data stored in the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_surface_id(label,id)
##########
Description:
Gets a surface id from the database given a surface label.
Input:
INTEGER label The unique external surface id identifying the surface to be retrieved from the database.
Output:
INTEGER id The unique internal surface id identifying the surface retrieved from the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_surface_label(id,label)
##########
Description:
Gets a surface label from the database given a surface id.
Input:
INTEGER id The unique internal surface id identifying the surface to be retrieved from the database.
Output:
INTEGER label The unique external surface id identifying the surface to be retrieved from the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
sgm_create_surface_composite_c(output_labels,surface_list,flag,gap_tolerance,delete_cons,implicit_topology,created_labels)
##########
Description:
This function creates composite trimmed surfaces.
Input:
STRING output_labels[ ] This value specifies the label of the surface to be created.
STRING surface_list[ ] This value specifies the surfaces from which the composite will be created.
INTEGER flag Inner Loop Options : 0 for All,1 for None and 2 for Select Edge.
REAL gap_tolerance This value specifies the gap distance for the surface builder.
LOGICAL delete_cons This value specifies,when set to TRUE,that the surfaces in the input value surface_list be deleted after the composite trimmed surfaces are created.
LOGICAL implicit_topology This value specifies,when set to TRUE,that the edges of the created surfaces are defined by the chain links. When this value is set to FALSE the chain link edges will be combined if there is slope continuity in the 2D segments.
Output:
STRING created_labels[VIRTUAL] This value returns the label of the composite surface created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_create_surface_comptrim_v1(output_ids,surface_list,outer_curve_list,inner_curve_list,gap_dist,delete_surface,outer_curve_delete,inner_curve_delete,implicit_topology,created_ids)
##########
Description:
This function constructs a trimmed surface from a parent surface and/or outer and inner boundary curves with an option of how to define the edges of the trimmed surfaces.
Input:
STRING output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING surface_list[] This value specifies the parent surface to trim.
STRING outer_curve_list[] This value specifies the outer boundary trim curves.
STRING inner_curve_list[] This value specifies the inner boundary trim curves.
REAL gap_dist The gap distance tolerance between the surfaces to be trimmed.
LOGICAL delete_surface This value is set to TRUE if the parent surface is to be deleted after trimmed surface is created.
LOGICAL outer_curve_delete This value is set to TRUE if the outer boundary trim curves are to be deleted after trimmed surface is created.
LOGICAL inner_curve_delete This value is set to TRUE if the inner boundary trim curves are to be deleted after trimmed surface is created.
LOGICAL implicit_topology This value is set to TRUE if the edges are defined from the chain links,or to FALSE if the edges are to be derived from the slope continuity in the 2D segments.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_create_surface_from_elems1(output_ids,elem_list,preview,node_list,in_options,in_nodes,delete_original,s_option,corner_nodes,deleted_ids,created_ids)
##########
Description:
This function constructs surface from any 2D element.
Input:
INTEGER output_ids[] This value specifies the surface ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of surface IDs.
STRING elem_list[] This value specifies the list of elements.
INTEGER preview = 1 will return 4 corner nodes.
STRING node_list[] List of nodes that represent vertices.
INTEGER in_options Defines which loops to be preserved 0 = All,1 = None,3 = Selected Loops
STRING in_nodes List of nodes on the loop that need to be preserved.
LOGICAL delete_original[] FALSE will delete the original elements.
INTEGER s_option[] Value for Smoother options. 0 = Fast 1 = Better Parametrization.
INTEGER corner_nodes()Returns the array of corner nodes if preview = 1
STRING deleted_ids[VIRTUAL] Deleted items.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_db_get_num_loops_face(surfaceid,getedges,numloops,numedges,numegploop,status)
##########
Description:
Gets the number of loops for a surface,and the total number of edges and if desired,the number of edges per loop.
Input:
INTEGER surfaceid The ID of the surface.
LOGICAL getedges TRUE if routine should get number of edges per loop.FALSE if not.
Output:
INTEGER numloops The number of loops.
INTEGER numedges The total number of edges.
INTEGER numegploop ()The number of edges per loop (dimension is numberLoops).
INTEGER status Success or an error code.
Comments:
The usual way to use this routine is: 	1.	 Call it to get the number of loops numberLoops with getEdges == False (0)
---------------
sgm_db_get_surface(surfaceid,blobsize,blob,status)
##########
Description:
Get the geometric definition of a surface from the database.
Input:
INTEGER surfaceid The ID of the surface.
INTEGER blobsize Size of the blob in words.
REAL blob ()Array to be filled in with Geometric description of a surface as a blob.
Output:
REAL blob ()Geometric description of the surface.
INTEGER status 0: no error.-1: database error.-2: insufficient array length for the blob.
Error Conditions:
38000001 The allocated space for the blob is too small
---------------
sgm_edit_surface_edge_match(type_option,surface_list_1,surface_list_2,delete_flag,created_ids)
##########
Description:
This function matches the edges for adjacent surfaces which have gaps inbetween. This is particularly relevant when surface models are imported. Such models tend to have gaps which require closing to avoid any errors regarding continuity with adjacent surfaces. This function works with topologically incongruent models and matches topology (edges and vertices).
Input:
INTEGER type_option[] The type of edge match to be done. 1 for surface-point 2 for surface-surface.
STRING surface_list_1[] The first list of surfaces.
STRING surface_list_2[] The second list of surfaces.
LOGICAL delete_flag This value is set to TRUE if the original surfaces are to be deleted.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_edit_surface_sew(surface_list,created_ids)
##########
Description:
This function sews surfaces which have gaps inbetween. This is relevant when surface models are imported. Such models tend to have gaps which require closing to avoid any errors regarding continuity of the surfaces. This function will sew edges into a common boundary between surfaces. This function was introduced to handle cases and close up gaps not possible with just edge_match.
Input:
STRING surface_list[] The list of surfaces to be sewed.
Output:
STRING created_ids[] This value returns the created ID list.
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_get_surface_area(surfid,area)
##########
Description:
Gets the area of a surface.
Input:
INTEGER surfid The ID of the surface.
Output:
REAL area The area of the surface.
INTEGER <Return Value> SUCCESS or an error code.
---------------
sgm_node_on_surface(geo_tolerance,number_surfaces,surface_list,number_nodes,init_flag,number_nodes_found,node_id_list,node_uv_list)
##########
Description:
This function will get the nodes close to the given surfaces within the geometric tolerance.
Input:
REAL geo_tolerance This value specifies the geometric tolerance.
INTEGER number_surfaces This value specifies the number of offsets in the input value surface_list
INTEGER surface_list(number_nodes)This value specifies a list of surface identifier values.
INTEGER number_nodes This value specifies the number of offsets defined for the output values node_id_list and node_uv_list.
INTEGER init_flag This value specifies when set to 0 that the initial call to get the number of nodes on the surfaces is being made. This value specifies,when set to 1 that the call to retrieve the list of nodes on the surfaces is being made.
Output:
INTEGER number_nodes_found (1)This value returns the number of the nodes found on the list of surfaces.
INTEGER node_id_list (number_nodes)This value returns a list of the node identifiers found on the specified surfaces.
REAL node_uv_list (number_nodes * 2)This value returns a list of parametric U and V values for the nodes specified by the return value node_id_list. The U and V values are listed in the order of U1,V1,U2,V2,U3,V3,....
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
9999 See the remarks listed below.
1000025 Error attempting to allocate virtual memory.
1000716 Data for surface %I% not found.
1000707 No surfaces were found to exist in the database as defined in the surface list. The surface list input was %A%.
1000025 No Node found !
---------------
sgm_show_surface_normals(surflist,scaled,numsurf,segid,redflag,vecdens,veclen)
##########
Description:
Routine that calculates and shows the surface normals.
Input:
STRING surflist[] The list of surfaces.
LOGICAL scaled TRUE if user wants to scale the normals to a percentage of the surface area,FALSE otherwise.
INTEGER numsurf The number of surfaces (or segments).
INTEGER segid The ID of the segment.
INTEGER redflag 0 to show vectors on the interior and boundary,1 to show vectors on the boundary only.
INTEGER vecdens The number of vectors in the u and v directions.
REAL veclen The length of the vectors if they are not scaled.
Output:
INTEGER <Return Value> 0 if successful,else returns error code.
Error Conditions:
14000010 In the list being used,the current sublist does not match the sublist filter.
14000015 LpSublistNext: End of current list has been reached.
1000025 Error attempting to allocate virtual memory.
1000707 No surfaces were found to exist in the database as defined in the surface list. The surface list input was %A%.
---------------
sgm_surface_evaluate(surface_data,ui,vi,derivative_use,surface_info,error_code)
##########
Description:
This function evaluates a surface,returning information that defines the characteristics of a surface.
Input:
REAL surface_data()This value specifies a surface data table or a blob. See the remarks below for more information.
REAL ui This value specifies a parametric coordinate.
REAL vi This value specifies a parametric coordinate.
INTEGER derivative_use This value specifies the type of information that will be returned by this function. See below for more information.
Output:
REAL surface_info(21)This value returns the evaluated surface information. See the remarks below for information on how to interpret the values returned.
INTEGER error_code This value returns an error code and will be set to 0 if the surface evaluation was successful and a non zero value to indicate an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1 A malformed surface data table or blob has been found. This problem is most likely caused by an error in the input value surface_data.
2 This value indicates that the input value drivative_use has been set to request normal information and that the current input values for ui and vi fall on an unresolvable singularity. All of the other return vectors are valid at this point. Only the normal vector is not to be used.
---------------
asm_db_get_curve_geo(curve_id,geo_coefs,status)
##########
Description:
Get the geometric format of a curve.
Input:
INTEGER curve_id Curve id (internal db id).
Output:
REAL geo_coefs(12)Geometric coefficients of the curve.
INTEGER status 0 ,no error.-1 ,data base not responding.
---------------
asm_db_get_next_line_label(domessage,integerlabel,stringlabel)
##########
Description:
Get the next highest line label from the database.
Input:
LOGICAL domessage Tells the routine to issue an error message if an error occurs.
Output:
INTEGER integerlabel The next highest curve label.
STRING stringlabel 0 ,no error.-1 ,data base not responding.
INTEGER <Return Value> Success or an error code.
---------------
asm_const_curve_2d_arc2point_v2(output_ids,num_curves,arc_method,radius,create_center,center_rev_direction,arc_angle,plane_list,center_point_list,start_point_list,end_point_list,project_points,created_ids)
##########
Description:
This function creates an arc from ‘two points and center point’ or from ‘start,end point and radius’.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER num_curves Number of curves to be created.
INTEGER arc_method This value specifies the arc method: 1 = define arc by center,start and end points,and 2 = define arc by start point,end point and radius.
REAL radius This value specifies the arc radius if the input value arc_method is set to 2.
LOGICAL create_center This value is set to TRUE if the arc center point is to be created along with the arc and if the input value arc_method is equal to 2.
LOGICAL center_rev_direction This value is set to TRUE if the arc center is to be flipped/rotated in the counter-clockwise direction before the arc is created and if the input value arc_method is equal to 2.
INTEGER arc_angle This value specifies the arc angle to use: 1 = minimum arc angle,and 2 = maximum arc angle.
STRING plane_list[] This value specifies the list of planes in which to construct the arcs.
STRING center_point_list[] This value specifies the list of points defining the center points of the circular arcs.
STRING start_point_list[] This value specifies the list of points defining the starting points of the circular arcs.
STRING end_point_list[] This value specifies the list of points defining the ending points of the circular arcs.
LOGICAL project_points This value specifies,when set to TRUE,that the center points be projected onto the plane. When this value is set to FALSE and the input value arc_method is not set to 2,the construction plane will be translated to the center point location and will still be parallel to the original plane. If this value is set to FALSE and the input value arc_method is set to 2,the construction plane is translated to the starting point location and will still be parallel to the original plane.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
38000845 Unable to acquire %I% words of virtual memory.
38000424 The center point and start point define a zero radius.
38000413 Zero length plane normal vector
38000440 Invalid 2D Arc2Point method. Must be 1 or 2. Try again.
1000578 The number of Curves per Arc must be greater than or equal to one. The invalid value input was %I%
38000442 The Radius value of %G% is too small for the input start and end points. Radius magnitude must be at least %G%. Modify application input and try again.
38000418 The Arc radius must be greater than zero. Invalid value input was %G%
---------------
asm_const_curve_2d_arc3point_v1(output_ids,num_curves,create_center,plane_list,start_list,mid_list,end_list,project_flag,created_ids)
##########
Description:
This function creates an arc-shaped or parametric cubic curve in two dimensional space,defined by a start point,midpoint,and an end point.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER num_curves This value specifies the number of curves per arc to create.
LOGICAL create_center This value is set to TRUE if a point is to be created at the center of the arc.
STRING plane_list[] This value specifies the construction plane of the arc.
STRING start_list[] This value specifies the start point of the arc.
STRING mid_list[] This value specifies the midpoint of the arc.
STRING end_list[] This value specifies the end point of the arc.
LOGICAL project_flag TRUE if the center point is to be projected onto the plane.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
38000845 Unable to acquire %I% words of virtual memory.
38000423 The three points specified are nearly collinear.
38000413 Zero length plane normal vector
1000578 The number of Curves per Arc must be greater than or equal to one. The invalid value input was %I%
---------------
asm_const_curve_2d_circle_v1(output_ids,num_curves,radius_method,radius,plane_list,radius_point_list,center_point_list,created_ids)
##########
Description:
This function creates a circular-shaped or parametric cubic curve in two-dimensional space,defined by a center point and a radius.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
INTEGER num_curves This value specifies the number of curves per circle to create.
INTEGER radius_method This value specifies the method used to define a radius: 1 = scalar radius value,and 2 = point location.
REAL radius This value specifies the radius of the circle if the input value radius_method is set to 1.
STRING plane_list[] This value specifies the list of planes in which to construct the arcs.
STRING radius_point_list[] This value specifies the list of points defining the radius of the circle if the input value radius_method is set to 2.
STRING center_point_list[] This value specifies the list of points defining the center point of the circle.
LOGICAL project_flag TRUE if the center point is to be projected onto the plane.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
38000845 Unable to acquire %I% words of virtual memory.
38000413 Zero length plane normal vector
38000425 The Circle radius must be greater than zero. Invalid value input was %G%
38000426 The center point and start point define a zero radius.
1000579 The number of Curves per Circle must be greater than or equal to two. The invalid value input was %I%.
---------------
asm_const_curve_project_v1(output_ids,curve_list,entity_list,entity_type,delete_original,method,vector,coord_frame,num_curves,projection_tolerance,created_ids)
##########
Description:
This function creates a parametric cubic curve from the projection of curves onto surfaces.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING curve_list[] This value specifies the curve list to project.
STRING entity_list[] This value specifies the entity list to project onto.
INTEGER entity_type The entity type to be projected.
LOGICAL delete_original This value is set to TRUE if the original curves to project are to be deleted after the projection. If this value is set to FALSE,the original entities will not be deleted.
INTEGER method This value specifies the projection method: 1 = the curve to be projected lies in a plane and it is desired to project the curve normal to this plane,2 = the direction of projection is normal to the surface at the point of closest approach,3 = the direction of projection is given by a vector,and 4 = the direction of projection is the view vector.
STRING vector[] This value specifies the projection vector.
STRING coord_frame[] This value specifies the coordinate frame ID for the projection vector.
INTEGER num_curves This value specifies the number of curves per projection to create. If this value is set to 0,then the number of curves created will be based on the projection tolerance.
REAL projection_tolerance This value specifies a tolerance parameter determining the density of intersection points generated.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
curve_arc_to_parm(curve_id,num_values,arc_lengths,parametric_coord,status)
##########
Description:
This function determines the corresponding coordinates for various input values of percent arclength along a curve.
Input:
INTEGER curve_id The id of the curve for which data is required.
INTEGER num_values The number of values for which the parametric coordinates are required.
REAL ARRAY arc_lengths(num_values)Array of arc lengths at which the parameters are desired.
Output:
REAL ARRAY parametric_coord(num_values)Array of parametric coordinates for the curve.
INTEGER status This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
curve_parm_to_arc(curve_id,num_values,parameters,arc_lengths,status)
##########
Description:
This function determines the corresponding arc length coordinates for various input values of parametric coordinates along a curve.
Input:
INTEGER curve_id The id of the curve for which data is required.
INTEGER num_values The number of values for which the arc lengths are required.
REAL ARRAY parameters(num_values)Array of parametric coordinates for the curve at which the arc lengths are desired.
Output:
REAL ARRAY arc_lengths(num_values)Array of arc lengths.
INTEGER status This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
db_count_curve(count)
##########
Description:
Counts all curves in the database.
Input:
none
Output:
INTEGER count The integer number of curves in the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_curve_coo_and_type(id,coo,type)
##########
Description:
Gets a geometric coo and type from the database given an id.
Input:
INTEGER id The unique internal curve id identifying the association of the information to be retrieved from the database.
Output:
INTEGER coo The geometric company of origin stored in the database.
INTEGER type The geometric type of data stored in the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_curve_id(label,id)
##########
Description:
Gets a curve id from the database given a curve label.
Input:
INTEGER label The unique external curve id identifying the curve to be retrieved from the database
Output:
INTEGER id The unique internal curve id identifying the curve retrieved from the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_curve_label(id,label)
##########
Description:
Gets a curve label from the database given a curve id.
Input:
INTEGER id The unique internal curve id identifying the curve to be retrieved from the database.
Output:
INTEGER label The unique external curve id identifying the curve to be retrieved from the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_max_curve_label(label)
##########
Description:
Gets the largest curve label from the database.
Input:
none
Output:
INTEGER label Highest curve label used.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_min_curve_label(label)
##########
Description:
Gets the smallest curve label from the database.
Input:
none
Output:
INTEGER label Lowest curve label used.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
sgm_associate_nodes_curve(node_list,curve_list)
##########
Description:
This function associates nodes with a given set of curves.
Input:
STRING node_list[ ] The list of nodes to be associated with the curves.
STRING curve_list[ ] The list of curves to which the nodes are to be associated.
Output:
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_const_curve_project_v1(output_ids,curve_list,surface_list,entity_type,delete_original,project_method,vector,coord_frame,projection_tolerance,created_ids)
##########
Description:
This function constructs curves on a set of surfaces by projecting an existing set of curves along a projection vector onto a set of surfaces.
Input:
STRING output_ids[] This value specifies the curve ID list. If this value is set to an empty string or to “#”,the function will automatically allocate and assign a sequential list of curve IDs.
STRING curve_list[] This value specifies the list of curves to project onto the list of surfaces.
STRING surface_list[] This value specifies the list of surfaces onto which the curves are to be projected.
INTEGER entity_type =1 Project to surface=2 Project to plane
LOGICAL delete_original This value is set to TRUE if the original curves are to be deleted. If this value is set to FALSE,the original entities will not be deleted.
INTEGER project_method This value specifies the method of defining the projection vector: 1 = the curves to be projected lie in a plane and it is desired to project the curves normal to this plane,2 = the direction of projection is normal to the surface at the point of closest approach to the curve,3 = the direction of projection is to be given by a vector,and 4 = the direction of projection is the view vector.
STRING vector[] This value specifies the projection vector.
STRING coord_frame[] This value specifies the coordinate frame for the projection vector.
REAL projection_tolerance This value specifies a tolerance parameter. The algorithm creates all curves along the projected surface so that the maximum distance lies between them is the distance defined by this value.
Output:
STRING created_ids[VIRTUAL] This value returns the created ID list.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_create_curve_on_surface(direction,param_value,surface_blob,curve_blob)
##########
Description:
This function creates curve on a surface in any of the u /v directions at a given parameter and returns the blob of the curve created.
Input:
INTEGER direction The direction to create the curve. 1 = u direction ,2 = v direction.
REAL param_value The value of the parameter for creating the curve (0 < param_value < 1)
REAL ARRAY surface_blob()The blob of the surface on which to create the curve. The functions to be used for getting the blob are sgm_db_get_blob_size()followed by sgm_db_get_surface().
Output:
REAL ARRAY curve_blob()The blob of the curve returned. The functions to be used for getting the blob size are sgm_db_get_blob_size()followed by sgm_db_get_curve().
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_curve_convert_s_to_u(curve_data,num_points,arc_lengths,parametric_coord,status)
##########
Description:
This function determines the corresponding coordinates for various input values of percent arclength along the curve.
Input:
REAL ARRAY curve_data()The blob of curve the curve for which data is required. The functions to be used for getting the blob are sgm_db_get_blob_size()followed by sgm_db_get_curve().
INTEGER num_points The number of points for which the parametric coordinates are required.
REAL ARRAY arc_lengths(num_points)Array of arc lengths at which the parameters are desired.
Output:
REAL ARRAY parametric_coord(num_points)Array of parametric coordinates for the curve.
INTEGER status This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_curve_convert_u_to_s(curve_data,num_points,parameters,arc_lengths,status)
##########
Description:
This routine determines the corresponding arclength coordinates for various input values of parametric coordinates along the curve.
Input:
REAL ARRAY curve_data()The blob of curve the curve for which data is required. The functions to be used for getting the blob are sgm_db_get_blob_size()followed by sgm_db_get_surface().
INTEGER num_points The number of points for which the arc lengths are required.
REAL ARRAY parameters(num_points)Array of parametric coordinates for the curve at which the arc lengths are desired.
Output:
REAL ARRAY arc_lengths(num_points)Array of arc lengths at the parameters.
INTEGER status This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_curve_evaluate(blob,para_parameter,out_type,output_data,status)
##########
Description:
This function will evaluate a data table representing the geometry of a curve,returning information about the point of origin and the first,second,and third derivatives of the curve.
Input:
REAL blob()This value specifies the curve data table. This array must be allocated with at least 6 offsets and no more than the number of offsets set by the following formula: s(s(6)). The value stored in the array at offset 6 must be equal to or greater than 0. See the comments below.
REAL para_parameter This value specifies a parametric coordinate value and has a range from 0.0 to 1.0.
INTEGER out_type This value specifies the type output expected from this function call. See the remarks below.
Output:
REAL output_data (n,3)This value returns the output data table. See the remarks below.
INTEGER status This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
sgm_db_get_curve(curveid,blobsize,blob,status)
##########
Description:
Get the geometric definition of a curve from the database.
Input:
INTEGER curveid Id of the curve.
INTEGER blobsize Size of the blob in words.
Output:
REAL blob ()Geometric description of the curve.
INTEGER status Success or an error code.
Error Conditions:
38000001 The allocated space for the blob is too small.
---------------
sgm_get_arc_center_radius(arc_id,start_point,center_point,radius)
##########
Description:
This function gets the start point,center point and the radius for any arc.
Input:
INTEGER arc_id The id for the arc.
Output:
REAL ARRAY start_point(3)The starting point of the curve.
REAL ARRAY center_point(3)The center point of the curve.
REAL radius The radius of the curve.
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_get_curve_length(curveid,length)
##########
Description:
Gets the length of a curve.
Input:
INTEGER curveid The ID of the curve.
Output:
REAL length The length of the curve.
INTEGER <Return Value> 0: successful,otherwise return error code.
---------------
sgm_node_on_curve(geotol,num_crvs,crv_id_list,list_size,init_flag,num_nodes,node_id_list,node_u_list)
##########
Description:
Get the nodes close to the given curves within the geometric tolerance.
Input:
REAL geotol The geometric tolerance.
INTEGER num_crvs The number of the given curves.
INTEGER crv_id_lis (num_crvs)The ID list of the given curves.
INTEGER list_size The size of the node_id_list.
INTEGER init_flag Initial call (= 0)or continued call (= 1).
Output:
INTEGER num_nodes ()The number of the nodes found.
INTEGER node_id_list (num_nodes)The ID list of the nodes found.
REAL node_u_list (num_nodes)The list of the node parameter U.
INTEGER <Return Value> Success or an error code.
Comments:
If the node_id_list is not BIG enough to accommodate all found nodes,the return value is 9999. Allocate another memory space,set init_flag == 1,call this routine again to get the rest nodes. (until <return value> == 0).
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000564 Data for curve %I% not found.
48000004 No Node found
1000547 No curves were found to exist in the database as defined in the curve list. The curve list input was %A%
---------------
sgm_show_angle_between_curves(curvelist_1,curvelist_2,seg_id,marker_type,marker_color,marker_size,angle)
##########
Description:
This function gets the angle between any two curves and marks it on the user interface.
Input:
STRING curvelist_1[ ] The first list of curves.
STRING curvelist_2[ ] The second list of curves.
INTEGER seg_id The id of the segment for the marker.
INTEGER marker_type The type of marker for the angle.
INTEGER marker_color The color of marker for the angle.
INTEGER marker_size The size of marker for the angle.
Output:
STRING angle[ ] The value of the angle between the curve.
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
asm_db_create_grid(location,grid_label,yes_to_all,no_to_all,yes_to_all_dup,no_to_all_dup,status)
##########
Description:
This function creates a grid in the database and the graphical user-interface.
Input:
REAL ARRAY location(3)The xyz location of the point.
INTEGER grid_label Label of next grid to create. =0 Database will use the next highest label for the next grid to create. If grid found within tolerance,returns currently existing grid label,otherwise returns new label. >0 User-definable.
LOGICAL yes_to_all = TRUE if grid already exists in database with same label and user wants to overwrite old grid with new grid.
LOGICAL no_to_all = TRUE if grid already exists in database with same label and user does not want to overwrite old grid with new grid.
LOGICAL yes_to_all_dup = TRUE if grid already exists in database within tolerance and same label and user wants to create duplicate grids.
LOGICAL no_to_all_dup = TRUE if grid already exists in database within tolerance and same label and user does not want to create duplicate grids.
Output:
INTEGER status The value of 0 is returned when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
db_count_point(count)
##########
Description:
Counts all points in the database.
Input:
none
Output:
INTEGER count The integer number of points in the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_max_point_label(label)
##########
Description:
Gets the largest point label from the database.
Input:
none
Output:
INTEGER label Highest point label used.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_min_point_label(label)
##########
Description:
Gets the smallest point label from the database.
Input:
none
Output:
INTEGER label Lowest point label used.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_point_association_count(point_id,assoc_count)
##########
Description:
Returns the number of higher order entities associated with this point.
Input:
INTEGER point_id The point id.
Output:
INTEGER assoc_count The number of higher order entities associated with this point.
INTEGER <Return Value> Returns the success or failure of the routine.
---------------
db_get_point_id(label,id)
##########
Description:
Gets a point id from the database given a point label.
Input:
INTEGER label The unique external point ID identifying the point to be retrieved from the database.
Output:
INTEGER id The unique internal point id identifying the point retrieved from the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_point_label(id,label)
##########
Description:
Gets a point label from the database given a point id.
Input:
INTEGER id The unique internal point id identifying the point to be retrieved from the database.
Output:
INTEGER label The unique external point id identifying the point to be retrieved from the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_point_coo_and_type(id,coo,type)
##########
Description:
Gets a geometric coo and type from the database given an id.
Input:
INTEGER id The association of the information to be retrieved from the database.
Output:
INTEGER coo The geometric company of origin stored in the database.
INTEGER type The geometric type of data stored in the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
asm_db_get_next_grid_label(domessage,integerlabel,stringlabel)
##########
Description:
Get the next highest grid label from the database.
Input:
LOGICAL domessage Tells the routine to issue an error message if an error occurs.
Output:
INTEGER integerlabel The next highest grid label.
STRING stringlabel[] The next highest grid label.
INTEGER <Return Value> Success or an error code.
---------------
sgm_db_get_point(pointid,xyz,status)
##########
Description:
Get the geometric definition of a point from the database.
Input:
INTEGER pointid Id of the point.
Output:
REAL xyz (3)Global coordinates of a point.
INTEGER status Success or an error code.
---------------
sgm_edit_point_equivalence(point_ids,created_ids)
##########
Description:
This function checks the equivalence of two points and deletes one of the duplicate points.
Input:
STRING point_ids[ ] The points whose equivalence is to be checked.
Output:
STRING created_ids[ ] This value returns the created ID list.
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_get_close_points(point_location,tolerance,num_only,vertices_only,sort_option,num_point,point_ids,distances)
##########
Description:
This function gets the points around a point within a specified distance.
Input:
REAL ARRAY point_location(3)The xyz location of the point in space.
REAL tolerance The distance within which to search for points.
INTEGER num_only 1 to get the num of points only,0 to get the point ids and the distances.
INTEGER vertices_only 0 to get all points,1 to get vertices only.
INTEGER sort_option 1 to sort the point ids and distances.
Output:
INTEGER num_point The number of points within the tolerance around the location.
INTEGER ARRAY point_ids(num_points)Point ids of the points.
REAL ARRAY distances(num_points)Distances of the points from the location specified.
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
sgm_node_on_point(geotol,num_pts,pt_id_list,num_nodes,node_id_list)
##########
Description:
Get the nodes close to the given points within the geometric tolerance.
Input:
REAL geotol The geometric tolerance.
INTEGER num_pts The number of the given points.
INTEGER pt_id_list (num_pts)The ID list of the given points.
Output:
INTEGER num_nodes ()The number of the nodes found.
INTEGER node_id_list (num_nodes)The ID list of the nodes found.
INTEGER <Return Value> Success or an error code.
Error Conditions:
1000025 Error attempting to allocate virtual memory.
1000305 Coordinates for point %I% not found.
1000303 No points were found to exist in the database as defined in the point list. The point list input was %A%.
48000004 No Node found !
---------------
db_get_geom_type(id_label,entity_type,geom_type)
##########
Description:
Returns the geometry type for the given label and entity_type.
Input:
INTEGER id_label The label id of the piece of geometry.
INTEGER entity_type The type of entity.point = 1curve = 2surface = 3solid = 4
Output:
STRING geom_type[] The type of geometry.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000161 The geometric type is not defined.
13000134 The specified entity type was not found.
---------------
db_put_origin_model_name(model_name,part_name)
##########
Description:
This function will set the part name of a specific parasolid model.
Input:
STRING model_name [256] This value specifies the name of the parasolid model that will have its part name set.
STRING part_name [256] This value specifies the part name that will be set in the parasolid model.
Output:
None
Error Conditions:
A non-zero value will be returned if an error occurs.
---------------
sgm_db_get_blob_size(entitytype,entityid,blobsize,status)
##########
Description:
This function will return the size of a block of data defining a specific piece of geometry.
Input:
INTEGER entitytype This value specifies the type of the geometry for which the data block will be retrieved. See the remarks listed below for more information.
INTEGER entityid This value specifies the identifier for the geometry for which the data block will be retrieved.
Output:
INTEGER blobsize The value returns the size of the of the array needed to hold the block of data defining the geometry.
INTEGER status This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
38000003 No blob provided.
---------------
sgm_db_get_company_of_origin(dbtype,entityid,compoforg,geometrytype,status)
##########
Description:
Gets a geometric coo and type from the database given an id.
Input:
INTEGER dbtype The dbtype from dbtypes.h.
INTEGER entityid The Entity ID.
Output:
INTEGER compoforg The company of origin.From include file geometry_coos.i
---------------
sgm_db_modify_entity_label(entitytype,entityid,newlabel)
##########
Description:
Modifies the label of an existing geometric entity.
Input:
INTEGER entitytype Type of entity from DbTypes.
INTEGER entityid Id of the entity to change.
INTEGER newlabel Label to be assigned to the entity.
Output:
INTEGER <Return Value> 0: no error.
Error Conditions:
10000052 %A% %I% is not an ASM Entity and was not written to the PatranNeutral File.
---------------
sgm_incongruent_geom_exist()
##########
Description:
Initialize the geometry list.
Input:
none
Output:
INTEGER <Return Value> 0: no error.1: fatal error.
---------------
sgm_incongruent_geom_display()
##########
Description:
Creates a graphical display list for curves and surfaces,but displays all unique points and solids. Need to call sgm_verify_surface_boundary first.
Input:
none
Output:
INTEGER <Return Value> 0 if function was successful.
---------------
sgm_incongruent_geom_seg_exit()
##########
Description:
Delete the segment list to clear graphics.
Input:
none
Output:
INTEGER <Return Value> Success returned,else fatal error.
---------------
sgm_u_calc_mscale_mat(coord_org,coord_rmat,translation,scale,axis_base,axis_tip,rotation_angle,tmat)
##########
Description:
Calculates a transformation matrix for a mscale transformation.
Input:
REAL coord_org (3)Reference coordinate frame origin.
REAL coord_rmat (9)Reference coordinate frame rotation matrix.
REAL translation (3)Translation vector.
REAL scale (3)Scale factors.
REAL axis_base (3)Axis base (for rotation).
REAL axis_tip (3)Axis tip (for rotation).
REAL rotation_angle Rotation angle.
Output:
REAL tmat (16)This value returns the calculated transformation matrix.
INTEGER <Return Value> SUCCESS or error code.
---------------
asm_u_coord_global_to_local(p,t,r,itype,npts)
##########
Description:
This function transforms point locations from global coordinates to local.
Input:
REAL p(3,npts)The point coordinates in global frame.
REAL t(3)This specifies the translation vector for the local coordinate frame relative to the global coordinate frame.
REAL r(3,3)This specifies the rotation matrix for the local coordinate frame relative to the global coordinate frame.
INTEGER ityper The reference coordinate frame type:1=rectangular2=cylindrical3=spherical
INTEGER npts The number of points.
Output:
REAL p(3,npts)The point coordinates in local frame.
---------------
xy_axis_display_labels_get(name,flag)
##########
Description:
Input:
LOGICAL flag Display labels flag
INTEGER <Return Value> XY error status.
---------------
ui_form_to_frame(classname,scale)
##########
Description:
Given the string classname as the name of a class which has a form currently displayed,this function will create a framemaker file classname.mif file which contains the form at a scale factor of scale.
Input:
STRING classname[] Name of the PCL class containing the form to be used.
REAL scale Scale factor for translation. Optional and defaults to 1.0.
Output:
none
---------------
ui_framemaker(option,[scale])
##########
Description:
Set automatic framemaker generation. If option is 1,whenever ui_form_display()is called,the classname is echoed to the history window. This gives you the classname in order to type a ui_form_to_frame()command. If option is 2,then whenever ui_form_display()is called,the name of the class is echoed,and a call is automatically made to ui_form_to_frame()with the specified scale factor. If option is 0,then ui_form_display()reverts back to normal operation.
Input:
INTEGER option Specifies how the function works. See Description above.
REAL scale Scale factor for translation. Optional and defaults to 1.0.
Output:
none
---------------
neutral_export2(pname,title,entflg,grp_all,ngroups,groudid)
##########
Description:
Export data to a neutral file,applying the specified entity and group filters first.
Input:
STRING pname[] Neutral file name.
STRING title[] Neutral file title.
LOGICAL entflg(35)Entity filters. TRUE/FALSE toggle flags. Only 22 of the 35 values are used. Visable flags include: #1-8,#10,#11,#14-17,#19-24,#32,and #33.
LOGICAL grp_all TRUE if ALL groups are to be output.
INTEGER ngroups The number of groups to be output.
INTEGER groudid()The IDs of the groups to be output.
Output:
INTEGER <Return Value> 0 if Function was successful.
---------------
nf_write(pname,title,pfea)
##########
Description:
Write a Patran2.5 format neutral file from the open Patrandatabase. Use the PFEA translator as a base,add new Phase I. If PFEA is TRUE,write only a PFEA neutral file.
Input:
STRING pname[] Neutral file name.
STRING title[] Neutral file title.
LOGICAL pfea Flag to write only PFEA neutral file if TRUE.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
45000001 Unable to open output file. Aborting Neutral File Export.
8107002 Last command aborted.
45000002 Error writing Finite Element Model. Will try to complete Neutral File.
45000003 Error writing Named Components. Aborting FEM portion of Neutral File. Will try to complete writing geometry,if any.
---------------
nf_write2(pname,title,pfea,entflg,grp_all,ngroups,groupid)
##########
Description:
Write a Patran2.5 format neutral file from the open Patrandatabase. Use the PFEA translator as a base,add new Phase I. If PFEA is TRUE,write only a PFEA neutral file.
Input:
STRING pname[] Neutral file name.
STRING title[] Neutral file title.
LOGICAL pfea Flag to write only PFEA neutral file if TRUE.
LOGICAL entflg()Entity filters. TRUE/FALSE toggle flags.
LOGICAL grp_all TRUE if ALL groups are to be output.
INTEGER ngroups The number of groups to be output.
INTEGER groupid()The IDs of the groups to be output.
Output:
INTEGER <Return Value> See error conditions.
Error Conditions:
45000001 Unable to open output file. Aborting Neutral File Export.
45000002 Error writing Finite Element Model. Will try to complete Neutral File.
45000003 Error writing Named Components. Aborting FEM portion of Neutral File. Will try to complete writing geometry,if any.
---------------
jou_file_write(astring)
##########
Description:
To write a string to the journal file ONLY.
Input:
STRING astring[] string to write.
Output:
none
---------------
sf_write_disable(alogical)
##########
Description:
To control whether the next “$ pcl_func(blah,blah)” gets written to the session file. Depends upon value of ’flag’.
Input:
LOGICAL alogical TRUE -- don’t record next “$ pcl_func()”. FALSE - record next “$ pcl_func()”.
Output:
none
---------------
ugi_export_iges_v1(filnam,start_section,nlpos,nlknt,product_id,author,author_org,model_units,entity_toggle_values,all_groups,ngroups,group_ids,patran_summary,iges_summary)
##########
Description:
Export Patrangeometry to the IGES standard.
Input:
STRING filnam[] IGES file name to create.
STRING start_section[] IGES file start section prolog lines.
INTEGER nlpos ()Array of nlknt values. Each entry is the # of characters for that line of the “IGES file start section prolog” plus the pervious lines.
INTEGER nlknt Number of lines in the “IGES file start section prolog”.
STRING product_id[] Product Id for receiving system.
STRING author[] Author.
STRING author_org[] Author’s Organization
STRING model_units[] IGES file model units.
LOGICAL entity_toggle_values(35)Flags to specify which Patranentity types to export. Only the first 7 flags are used.
LOGICAL all_groups TRUE if all groups are to be exported.
INTEGER ngroups Number of groups to export.
INTEGER group_ids ()Group ids to export.
Output:
INTEGER patran_summary (8)Number of Patranentities processed.
INTEGER iges_summary (21)Number of IGES entities created.
INTEGER <Return Value> 0 if Function was successful.
---------------
ugi_import_iges_v3(file_name,ipref142,group_name,entity_toggle_values,color_toggle_values,color_method,color_definition,all_layers,layer,number_of_groups,group_entity_ids,group_entity_values,group_color_values,layer_pointers,group_levals,scale,iges_count,patran_count)
##########
Description:
This function imports geometry information from a file in the IGES standard file format into the Patrandatabase.
Input:
STRING file_name [ ] Filename and its path which is to be imported.
INTEGER ipref142 User preference for curve on surface(142)entity representation use flag. 0 = Unspecified,use what is defiened in the IGES file.1 = S or B is preferred (Parametric space)2 = C is preferred (Real space)
STRING group_name[] Group name in which the imported geometry is added.
LOGICAL ARRAY entity_toggle_values()This value specifies the entity type filter status flags to specify which IGES entity types to import.
LOGICAL ARRAY color_toggle_values()This value specifies the entity color filter status flags to specify which IGES entity colors to import.
STRING color_method[ ] This value is used to specify the color definition entity method used to import color definition entities.
STRING color_defination[ ] This value specifies the color definition entities to import.
LOGICAL all_layers TRUE if all geometry layers are to be imported.
STRING layer[ ] This value specifies a string that is used to specify the geometry layers to be imported.
INTEGER number_of_groups Number of groups.
INTEGER group_entity_ids(number_of_groups)ID values for each user group.
LOGICAL ARRAY group_entity_values(22,number_of_groups)This value specifies a 2D array that contains values set to TRUE if an entity is to be included and FALSE if an entity is not to be included in the group being imported. The offset in the first dimension corresponds to the group id in the same offset of the group_entity_ids input value. The offset in the second dimension of the array identifies the entity type.
LOGICAL ARRAY group_color_values(10,number_of_groups)This value specifies a 2D array that contains values set to TRUE if a color value is to be used. The offset in the first dimension of the array corresponds to the group id in the same offset of the group_entity_ids input value. The offset in the second dimension of the array identifies the color type.
INTEGER ARRAY layer_pointers (number_of_groups)This value specifies an array that is used by setting a value at an offset that corresponds with the offset into the group_entity_ids input value that lists the group ids. The value at that offset in the array identifies the offset into the group_layers input values where the number of layers values for each group is stored.The maximum value allowed for this array is equal to the number of integers in the group_layers input value.
INTEGER group_layers This value specifies an array used to identify the number of layers imported for each group. The size of this array must be equal to or greater than the largest value placed in the layer_pointer input value.
Output:
REAL scale This value return the IGES file model space scale.
INTEGER ARRAY iges_count(50)Number of IGES entities imported by type.
INTEGER ARRAY patran_count(8)Number of Patranentities written to the database by type.
INTEGER <Return Value> This function returns a value 0 for success and a non-zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
display_deformations(flag)
##########
Description:
Input:
INTEGER <Return Value> = 0 Function was successful
---------------
file_is_directory(dirname)
##########
Description:
To validate the given string as a valid directory.
Input:
STRING dirname[ ] Possible file directory.
Output:
INTEGER <Return Value> This function will return a value of 1 if the input value dirname represents a valid directory and a value of 0 if the input value dirname represents an invalid directory.
---------------
get_current_dir(dirname)
##########
Description:
Return the current directory.
Input:
none
Output:
STRING dirname[] Current directory.
INTEGER <Return Value> 0 if Function was successful.
---------------
p3_ps_get_xmt(<filename>)
##########
Description:
This function returns the filename of the UG part being imported. Typically,a UG model is in a file with ‘filename.prt’ extension. This function converts it to ‘filename-ps0001.xmt_txt’ file which is actually imported into MSC Patran. The filename is taken from the function p3_ps_open_ug_v2()which is run previous to p3_ps_get_xmt()function. This is an internal function called during the execution of the function p3_ps_open_ug_v2(). See example file for this function.
Input:
None
Output:
STRING ARRAY filename[ ]()The filename for the file. This has an extension of xmt_txt format.
INTEGER <Return Value> Returns the output status of the function.
Error Conditions:
None.
---------------
set_current_dir(dirname)
##########
Description:
Set the current directory.
Input:
STRING dirname[] Current directory to set to.
Output:
INTEGER <Return Value> 0 = successful.-1= failure.
---------------
utl_is_locked_file(filename)
##########
Description:
This function will determine if the indicated file is currently locked.
Input:
STRING filename[] This value specifies the name of the file which will have its lock status checked.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
utl_lock_file(filename)
##########
Description:
This function will set an advisory lock on a file.
Input:
STRING filename[] This value specifies the name of the file to lock.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
8111006 Error attempting to access %A%.
8111002 File %A% is in use by another user. Opening this database may cause undesirable results.
8111001 Cannot lock %A%. Another file is locked.
8111003 Error while attempting to lock %A%.
---------------
utl_unlock_file()
##########
Description:
This function will clear an advisory lock.
Input:
none
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
8111004 Cannot perform file unlock. No files known to be locked.
8111005 Error while attempting to perform an unlock.
---------------
uil_file_open.open_db(name,newdb)
##########
Description:
Open a database and set some initial parameters.
Input:
STRING name[] File name of database to be opened.
LOGICAL newdb This flag will execute viewport tiling on a new database so that it will fill all space from Main Menu to Command Window.
Output:
INTEGER <Return Value> 0 if Description was successful.
---------------
db_get_all_field_names(object)
##########
Description:
Gets all lbc object names from the database,in get all,get next method.
Input:
INTEGER object The object ID for the rows selected
Output:
INTEGER <Return Value> .Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
None.
---------------
db_get_next_field_name(id,name)
##########
Description:
Gets all lbc object names from the database,in get all,get next method.
Input:
None.
Output:
INTEGER id The unique internal ID of the field in the database.
STRING name[ The name of the field in the database.
INTEGER <Return Value> .
Error Conditions:
13000002 Unrecoverable database error
13000117 The query specified has completed
13000007 An unspecified database error occurred
---------------
db_get_field_id(name,id)
##########
Description:
Gets a field id in the database.
Input:
STRING name[] The name of the field.
Output:
INTEGER id The unique internal ID identifying the field in the database.
INTEGER <Return Value> .Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_get_field_attrs(id,name,object,nvar,ivar1,ivar2,ivar3)
##########
Description:
Gets a field in the database.
Input:
INTEGER id The unique internal ID identifying the field in the database.
Output:
STRING name[] The name of the field.
INTEGER object 0 = spatial; 1 = material; 2 = time
INTEGER nvar The number of functions used to define this field.
INTEGER ivar1 Values 1-4
INTEGER ivar2 Values 1-4
INTEGER ivar3 Values 1-4
INTEGER <Return Value> .Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
fields_create_general_term(field_name,term_field_id,term_type,term_id,length,general_term_string)
##########
Description:
This function creates a term for a general field in the database. This function covers the contact LBCs definitions for ABAQUS also.
Input:
STRING field_name[] This value specifies the existing general field name.
INTEGER term_field_id This value specifies the term field id.
INTEGER term_type This value specifies the type of the term i.e. Function,Field & Independent Variable.
INTEGER term_id This value specifies the term identifiers.
INTEGER length String length of general_term_string.
STRING general_term_string[length] This string represents the term type of general field. - For the function term type “Independent Variables”,the function term is selected from allready existed function expressions like ’RAD’,‘UD’,‘X’,‘Y’,‘Z’,‘e’,‘er’,‘f’,‘t’,’u’& ‘v’. - For the function term type “P3 Functions”,user creates the function expression by using selected Arithmetic Operators. In the case of ABAQUS “contact LBC” definition is: general_term_string = "contact_lbc(20|12|13|14|15|16|19|20|21|22|23|24|25|26|27|28|29|30|31|33|35|1|1|1|1|2|3|3|2|0.2|0.|0.|0.|0.|0.|0.|0.|0.|0.|0.|0.)" where “|” is Field argument separatorgeneral_data_count = 2020 data variables ids20 data values|12 = LBC_VAR_CONTACT_TYPE|13 = LBC_VAR_SLIDING_TYPE|14 = LBC_VAR_SURFACE_BEHAVIOR|15 = LBC_VAR_FRICTION_FORMULATION|16 = LBC_VAR_PENETRATION_TYPE|19 = LBC_VAR_MASTER_REGION_ID|20 = LBC_VAR_SLAVE_REGION_ID|21 = LBC_VAR_VISCOUS_DAMPING|22 = LBC_VAR_FRICTION_COEF|23 = LBC_VAR_SHEAR_STRESS_LIMIT|24 = LBC_VAR_PRESS_ZERO_CLEAR|25 = LBC_VAR_CLEAR_ZERO_PRESS|26 = LBC_VAR_NEGATIVE_PRESSURE|27 = LBC_VAR_OVER_CLOSURE|28 = LBC_VAR_DAMPING_ZERO_CLEAR|29 = LBC_VAR_CLEARANCE_ZERO_DAMP|30 = LBC_VAR_FRAC_CLEARANCE|31 = LBC_VAR_ADJUST_TOLERANCE|33 = LBC_VAR_OUT_OF_PLANE_WIDTH|35 = LBC_VAR_CROSS_SECT_AREA
|1 = “General” Contact Type|1 = “Large” Sliding Type|1 = “Hard” Surface Behavior|1 = “Penalty” Friction Formulation|2 = “One Sided” Penetration Type|3 = Master Region Id|3 = Slave Region Id|2 = “Off” Viscous Damping|0.2 = ““ Friction Coefficient (Databox Input)|0. = Shear Stress Limit (Databox Input)|0. = Pressure Zero Clearance|0. = Clearance Zero Pressure|0. = Negative Pressure|0. = Over Closure|0. = Damping Zero Clearance|0. = Clearance Zero Damping |0. = Frac Clearance|0. = Adjust Tolerance (Databox Input)|0. = Out of Plane Width|0. = Cross Sectional Area
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
get_field_values_no_trans(field_id,num_evals,eval_dim,field_dim,eval_points,field_values)
##########
Description:
Return the values of the field ID for NPTS locations specified by POINTS in VALUES. NO transformation of the points is done.
Input:
INTEGER field_id Field ID.
INTEGER num_evals Number of points to be evaluated.
INTEGER eval_dim Number of coordinates defining POINTS.
INTEGER field_dim Dimensionality of field. (1 or 3).
REAL eval_points (num_evals,eval_dim)Values of the coordinates of the points.
Output:
REAL field_values (num_evals,eval_dim)Values of the fields.
INTEGER <Return Value> .See error returned.
Error Conditions:
30001401 Unable to allocate enough memory to evaluate the field.
30001402 No Evaluation method is defined for this field type.
---------------
get_field_values(field_id,num_evals,eval_dim,field_dim,eval_points,field_values)
##########
Description:
Return the values of the field ID for NPTS locations specified by POINTS in VALUES. Transformation matrix for the specified CID.
Input:
INTEGER field_id Field ID.
INTEGER num_evals Number of points to be evaluated.
INTEGER eval_dim Number of coordinates defining POINTS.
INTEGER field_dim Dimensionality of field. (1 or 3).
REAL eval_points (num_evals,eval_dim)Values of the coordinates of the points.
Output:
REAL field_values (num_evals,field_dim)Values of the fields.
INTEGER <Return Value> .Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
30001401 Unable to allocate enough memory to evaluate the field.
30001402 No Evaluation method is defined for this field type.
---------------
db_get_max_field(id)
##########
Description:
Gets the largest field id from the database.
Input:
None.
Output:
INTEGER id Highest field ID used.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000007 An unspecified database error occurred
---------------
fld_evl_get_maxnod_for_group(gid,maxnod)
##########
Description:
Calculate the maximum number of nodes for any element in group GID.
Input:
INTEGER gid Group id - 0 get all elems in model.
Output:
INTEGER maxnod Max number of nodes in any element.
INTEGER <Return Value> .0 if no error,else error code.
Error Conditions:
None.
---------------
db_modify_field(id,name,object,type,etype,eid,extra_opt,cid_type,cid,defn_type,nvar,ivar1,ivar2,ivar3,fn1_size,fn2_size,fn3_size,fn1,fn2,fn3,lin_def,nxvals,nyvals,nzvals,xvals,yvals,zvals,vals)
##########
Description:
Modifies a field in the database.
Input:
INTEGER id The unique internal ID identifying the field in the database.
STRING name[] The name of the field to be modified.
INTEGER object 0 = spatial; 1 = material; 2 = time
INTEGER type 0 = scalar; 1 = vector
INTEGER etype he entity type.
INTEGER eid The entity ID.
INTEGER extra_opt The extrapolation option.
INTEGER cid_type 0 = Real; 1 = Parametric
INTEGER cid The ID of the coordinate frame used to define this field.
INTEGER defn_type 0 = Function; 1 = Table; 2 = Fem;
INTEGER nvar The number of functions used to define this field.
INTEGER ivar1 Values 1-4
INTEGER ivar2 Values 1-4
INTEGER ivar3 Values 1-4
INTEGER fn1_size The size of the first function used to define this field.
INTEGER fn2_size The size of the second function used to define this field.
INTEGER fn3_size The size of the third function used to define this field.
STRING fn1[fn1_size] The first function that defines this field.
STRING fn2[fn2_size] The second function that defines this field.
STRING fn3[fn3_size] The third function that defines this field.
LOGICAL lin_def Flag indicating whether this was a linear definition.
INTEGER nxvals The number of x values for this field.
INTEGER nyvals The number of y values for this field.
INTEGER nzvals The number of z values for this field.
REAL xvals(nxvals)The x values for this field.
REAL yvals(nyvals)The y values for this field.
REAL zvals(nzvals)The z values for this field.
REAL vals(nxvals,nyvals,nzvals)The field values for this table field.
Output:
INTEGER <Return Value> .Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_delete_field(id)
##########
Description:
Deletes a field in the database.
Input:
INTEGER id The unique internal ID identifying the field in the database.
Output:
INTEGER <Return Value> .Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
fld_cre_fem_res_sca(fid,grpid,scalid)
##########
Description:
Transform a scalar elem table to a lbc field table formatted for efficient use in a FEM field. The table will contain one entry per element in the group and will be sorted by element id.
Input:
INTEGER fid Field ID to be converted.
INTEGER grpid Group ID.
INTEGER scalid Scalar_elem_table ID referenced by the field.
Output:
INTEGER <Return Value> .0 success,otherwise an error.
Error Conditions:
None.
---------------
fld_cre_fem_res_vec(fid,vecid,elmflg)
##########
Description:
Transform a vector graphics table to a lbc field table.
Input:
INTEGER fid Field ID to be converted.
INTEGER vecid Ggraphics_vector_table ID referenced by the field.
Output:
INTEGER elmflg !=0 a field_res_elem table was created =0 a field_res_node table was created
INTEGER <Return Value> .0 success,otherwise an error
Error Conditions:
None.
---------------
db_delete_field_res(id)
##########
Description:
This function deletes the field_res_elm or the field_res_not table from a specified database field.
Input:
INTEGER id This value specifies the identifier of a field in the database.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000002 Unrecoverable database error
---------------
field_create_field_lbc(id,name,type,ent_type,nvals,eid,elem_face,elem_edge,node_pos,vals)
##########
Description:
Create an LBC type field
Input:
INTEGER id Field ID (ID nonzero,otherwise use next available field ID).
STRING name[31 Field name.
INTEGER type =1 scalar data,=3 vector data.
INTEGER ent_type Category - Nodal or Element.
INTEGER nvals INumber of points defining the field.
INTEGER eid(nvals)Ids of the elements/nodes.
INTEGER elem_face(nvals)Id of the element faces.
INTEGER elem_edge(nvals)Id of the element edges.
INTEGER node_pos(nvals)Id of nodal position (for elem variable).
REAL vals(nvals,type)Values of the field
Output:
INTEGER id .Field ID returned.
INTEGER <Return Value> 0 success,otherwise an error.
Error Conditions:
None.
---------------
db_get_field_lbc(id,nvals,eid,elem_face,elem_edge,node_pos,vals)
##########
Description:
Gets an lbc field from the database.
Input:
INTEGER id The unique internal ID identifying the field in the database.
INTEGER nvals The number of values that the output arrays are dimensioned to handle.
Output:
INTEGER nvals The number of values that are in the output arrays.
INTEGER eid(nvals)The entity ID.
INTEGER elem_face(nvals)The elem face ID.
INTEGER elem_edge(nvals)The elem edge ID.
INTEGER node_pos(nvals)The node position.
REAL vals(nvals,type)The scalar,vector,or tensor values of the field.
INTEGER <Return Value> .Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_get_field_lbc_type(id,type,object)
##########
Description:
Gets a field type from the database
Input:
INTEGER id The unique internal ID identifying the field in the database.
Output:
INTEGER type The type of the field.
INTEGER object 0 = spatial; 1 = material; 2 = time
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
field_fem_const_eval(gid,numint,nindep,intrpl,extrap,maxnod,cnst,eids,geoloc,offflg)
##########
Description:
Evaluate a FEM type field at NUMINT points. If point is outside the range set the indices according to EXTRAP return the constraints.
Input:
INTEGER gid Group ID.
INTEGER numint Number of interpolents to be evaluated.
INTEGER nindep Number of independent variables.
REAL intrpl(numint,nindep)Locations of interpolents.
INTEGER extrap Extrapolation Option.
INTEGER maxnod Maximum # of nodes of any element in GID.
Output:
REAL cnst(numint,maxnod)Values of the constraints.
INTEGER eids(numint)Elem IDS corresponding to the constraints.
REAL geoloc(numint,nindep)Location of the interpolated points.
INTEGER offflg(numint)=1 GEOLOC(,i)not within GEOTOL of POINTS
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
None.
---------------
db_get_field_dfem(id,nvals,method,eid,elem_face,elem_edge,node_pos,nodeid,vals)
##########
Description:
Gets an lbc field from the database.
Input:
INTEGER id The unique internal ID identifying the field in the database.
INTEGER nvals The number of values that the output arrays are present in the table.
Output:
INTEGER nvals The number of values that the output arrays are present in the table.
INTEGER method(nvals)The method used. 1 = vector 2 = nodeID
INTEGER eid(nvals)The entity id.
INTEGER elem_face(nvals)The elem face id.
INTEGER elem_edge(nvals)The elem edge id.
INTEGER node_pos(nvals)The node position.
INTEGER nodeid(nvals)The node ID if using method = 2
REAL vals(nvals,type)The scalar,vector,or tensor values of the field. If method = 1
INTEGER <Return Value> .Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_count_elems_using_node(nnode,nid,nelem,fflag)
##########
Description:
This function will count the number of elements associated with the specified array of nodes in the memory database.
Input:
INTEGER nnode The number of node ids in the node id array.
INTEGER nid()The array of node IDs to be looked for.
Output:
INTEGER nelem()The number of elements associated with this node.
INTEGER fflag A flag indicating if any nodes were not found.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000020 Node not found.
SUCCESS if the node exists and is associated with some elements.
---------------
db_count_mpcs_using_node(nnode,nid,nmpc,fflag)
##########
Description:
This function will count the number of MPCs associated with a group of nodes.
Input:
INTEGER nnode This value specifies the number of node id values listed in the input value nid.
INTEGER nid(nnode)This value specifies the id values of the nodes for which information is being requested.
Output:
INTEGER nmpc(nnode)This value returns the number of MPCs using each node.
INTEGER fflag This value returns a non zero value if one or more of the nodes listed in the input value nid are not found.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000020 Node not found.
External Dependencies and Side Effects:
Accesses records in the mpc_term_node table in the database.
---------------
db_count_nodes_in_mpc(nmpc,mpcid,nnode,fflag)
##########
Description:
Returns the total number of nodes in a specified MPC.
Input:
INTEGER nmpc The number of MPCs for which the information is being requested.
INTEGER mpcid()The ids of the MPCs for which the information is being requested.
Output:
INTEGER nnode()The number of nodes in each MPC.
INTEGER fflag An error flag indicating that one or more of the MPCs was not found.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000142 The MPC was not found in the database.
External Dependencies and Side Effects:
Accesses records in the mpc_term_node table in the database.
---------------
db_get_elems_using_nodes(nnode,nid,mxelem,nelem,eid)
##########
Description:
This function will retrieve the list of elements associated with the specified array of nodes in the memory database.
Input:
INTEGER nnode The number of node IDs in the node ID array.
INTEGER nid()The array of node IDs to be looked for.
INTEGER mxelem The maximum number of elements allowed per node.
Output:
INTEGER nelem()The number of elements associated with this node.
INTEGER eid()The IDs of all elements referencing this node.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000020 Node not found.
SUCCESS If the node exists and is associated with some elements.
---------------
db_get_elem_nodes(eid,numnode,nid)
##########
Description:
This function will retrieve all of the node IDs for a specified element. The nodes will be returned in node position order.
Input:
INTEGER eid The element ID to be looked up.
Output:
INTEGER numnode The number of nodes associated with this element.
INTEGER nid()The array of node IDs associated with this element.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000020 Node not found.
SUCCESS If some nodes exist for this element.
---------------
db_get_nodes_in_mpc(nmpc,mpcid,mxnode,nnode,nid)
##########
Description:
Returns a list of all nodes which refer to the specified MPC.
Input:
INTEGER nmpc The number of MPCs ids for which the information is being requested.
INTEGER mpcid()The ids of the MPCs for which the information is being requested.
INTEGER mxnode The maximum number of nodes which may be returned per MPC.
Output:
INTEGER nnode()The number of nodes using each MPC.
INTEGER nid()The ids of the nodes for each MPC.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000142 The MPC was not found in the database.
13000150 The list of nodes for one or more of the MPCs is longer than MAXNODE.
External Dependencies and Side Effects:
Accesses records in the mpc_term_node table in the database.
---------------
list_get_node_ass_el_edge(elem_edge_list,node_list)
##########
Description:
This function gets the nodes associated to the specified element edges.
Input:
STRING elem_edge_list[] List of element edges.
Output:
STRING node_list[VIRTUAL] List of nodes.
INTEGER <Return Value> 0 for success.
Error Condition:
None
---------------
list_get_node_ass_el_face(elem_face_list,node_list)
##########
Description:
This function gets the nodes associated to the specified element faces.
Input:
STRING elem_face_list[] List of element faces.
Output:
STRING node_list[VIRTUAL] List of nodes.
INTEGER <Return Value> 0 for success.
Error Condition:
None
---------------
list_get_node_ass_elem(elem_list,node_list)
##########
Description:
This function gets the nodes associated to the specified element.
Input:
STRING elem_list[] List of elements.
Output:
STRING node_list[VIRTUAL] List of nodes.
INTEGER <Return Value> 0 for success.
Error Condition:
None
---------------
list_get_node_ass_geo(ent_list,node_list)
##########
Description:
This function gets the nodes associated to the specified geometry entities.
Input:
STRING ent_list[] List of geometry entities.
Output:
STRING node_list[VIRTUAL] List of nodes.
INTEGER <Return Value> 0 for success.
Error Condition:
None
---------------
list_get_node_ass_group(num,group_list,node_list)
##########
Description:
This function gets the nodes associated to the specified groups.
Input:
INTEGER num Number of groups.
STRING ARRAY group_list[]()Array of group names.
Output:
STRING node_list[VIRTUAL] List of nodes.
INTEGER <Return Value> 0 for success.
Error Condition:
None
---------------
list_get_node_ass_mpc(mpc_list,node_list)
##########
Description:
This function gets the nodes associated to the specified mpcs.
Input:
STRING mpc_list[] List of mpcs.
Output:
STRING node_list[VIRTUAL] List of nodes.
INTEGER <Return Value> 0 for success.
Error Condition:
None
---------------
list_get_node_att_fringe(val,act,tol,group,node_list)
##########
Description:
This function gets the nodes associated with a specified fringe range.
Input:
REAL val(2)Upper & lower fringe value.
STRING act[80] Method name.
REAL tol Tolerance of xyz or rpt if applicable.
STRING group[32] Group name which has the fringe table.
Output:
STRING node_list[VIRTUAL] List of nodes.
INTEGER <Return Value> 0 for success.
Error Condition:
None
---------------
list_get_node_att_value(val_xyz,val_log,act,tol,coord,group,node_list)
##########
Description:
This function gets the nodes associated with a specified coordinate value.
Input:
REAL ARRAY val_xyz(3)Value of xyz or rpt coordinate.
LOGICAL ARRAY val_log(3)Logical value specifying active coords.
STRING ARRAY act[80](3)Method name.
REAL ARRAY tol(3)Tolerance of xyz or rpt if applicable.
STRING coord[32] Coordinate frame
LOGICAL group Logical value for group.
Output:
STRING node_list[VIRTUAL] List of nodes.
INTEGER <Return Value> 0 for success.
Error Condition:
None
---------------
fem_create_mesh_sol_3(<mesher_pick>,<flag>,<solid_list>,<num_val>,<g_leng>,<elem_topo>,<node_list>,<elem_list>,<a_coord_frame>,<r_coord_frame>,<num_nodes>,<num_elems>,<nodes_created>,< elems_created>)
##########
Description:
This function creates a finite element mesh on solids and returns the FEM data for the solid. It returns an integer status of zero on successful completion.
Input:
STRING mesher_pick [ ] Mesher to be used: "IsoMesh" or "Tetmesh".
INTEGER flag Integer to specify use of preview. Used only with “Tetmesh”.
STRING solid_list[ ] List of solids to be meshed.
INTEGER num_val Number of float values.
REAL g_leng Global element edge length.
STRING elem_topo[ ] Element topology.
STRING node_list[ ] List of output node ids.
STRING elem_list[ ] List of output element ids.
STRING a_coord_frame[ ] Analysis coordinate frame id.
STRING r_coord_frame[ ] Reference coordinate frame id.
Output:
INTEGER num_nodes Number of nodes created.
INTEGER num_elems Number of elements created.
STRING nodes_created[ ] Ids of nodes created.
STRING elems_created[ ] Ids of elements created.
INTEGER <Return Value> 0 for success,1 for error.
Error Conditions:
None.
---------------
fem_seed_display_dir_arrows(arrow_segment)
##########
Description:
Display direction arrows on all visible curves.
Input:
INTEGER arrow_segment Graphics manager segment id for arrows.
Output:
INTEGER <Return Value> Integer indicating the success or failure of the routine.
Error Conditions:
2001060 List overflow in %A%. Call customer support.
4 Interrupted system call.
---------------
db_get_mesh_params(wmesh,mshcyc,relaxm,tolmsh,dgmesh,itrngl)
##########
Description:
Gets the definition of an edge mesh from the database.
Input:
None.
Output:
REAL wmesh The unique internal line wmesh identifying the mesh to be retrieved from the database.
INTEGER mshcyc The number of elements on the edge.
REAL relaxm The mesh relaxm of the edge.
REAL tolmsh The tolmsh of the edge.
INTEGER dgmesh The number of meshes on the edge.
INTEGER itrngl True if the edge has been itrngled.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
External Dependencies and Side Effects:
Accesses one record in the “line” table in the database.
---------------
move_mesh(<surface_id_2 >,<surface_id_1>,<user_tolerance >)
##########
Description:
The function moves the finite element entities – vertex nodes,edge nodes and the face nodes with the elements from one surface to another. The size of the two surfaces should be equal and the user tolerance should be at least equal to the normal distance between the two surfaces. It returns an integer status of 0 on success and 1 on failure.
Input:
INTEGER surface_id_2 The id of the surface to which the mesh is to be moved.
INTEGER surface_id_1 The id of the surface from which the mesh is to be moved.
REAL user_tolerance The value of the user tolerance specified by the user.
Output:
INTEGER <Return Value> 0 for success and 1 for failure.
Error Conditions:
None.
---------------
move_mesh_1(<surface_name_ 2 >,<surface_name _1>,<user_tolerance >)
##########
Description:
The function moves the finite element entities – vertex nodes,edge nodes and the face nodes with the elements from one surface to another. The size of the two surfaces should be equal and the user tolerance should be at least equal to the normal distance between the two surfaces. It returns an integer status of 0 on success and 1 on failure.
Input:
STRING surface_name_2[] The name of the surface to which the mesh is to be moved.
STRING surface_name_1[] The name of the surface from which the mesh is to be moved.
REAL user_tolerance The value of the user tolerance specified by the user.
Output:
INTEGER <Return Value> 0 for success and 1 for failure.
Error Conditions:
None.
---------------
db_get_nodal_association(nnode,nid,gid,gtype)
##########
Description:
This function will retrieve the geometry type and ID that is associated with each node that is specified.
Input:
INTEGER nnode The number of node IDs being supplied.
INTEGER nid()The array of nodes IDs to be looked up.
Output:
INTEGER gid()The array of geometry IDs (one for each node ID).
INTEGER gtype()The array of geometry types (one for each node ID).
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_node(id,xyz)
##########
Description:
Given a node ID,this function will look up the specified node and return the coordinates of that node to the caller.
Input:
INTEGER id The node ID to be looked up.
Output:
REAL xyz(3)An array of 3 floating point values which are the coordinates of the specified node.
INTEGER <Return Value> Integer indicating the success or failure of the routine.
Error Conditions:
SUCCESS This function completed successfully.
13000020 Node not found.
---------------
db_get_nodes_by_lbc(lbc_id,max_node,nnode,nid)
##########
Description:
Gets all nodes associated with an specified lbc.
Input:
INTEGER lbc_id Id of the lbc to which the requested nodes are associated.
INTEGER max_node Maximum number of node ids for which storage has been allocated by the calling routine.
Output:
INTEGER nnode Number of nodes found associated to the specified lbc.
INTEGER nid()Ids of the nodes associated to the specified lbc.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000048 Maximum node count exceeded.
External Dependencies and Side Effects:
None.
---------------
db_get_nodes_for_geometry(geo_type,geo_id,parent_type,parent_id,nnode,nids,ncoord)
##########
Description:
This function will retrieve information about all of the nodes associated with a given piece of geometry.
Input:
INTEGER geo_type The type of geometry in question.
INTEGER geo_id The id of the geometry in question.
INTEGER parent_type The type of highest order geometry that the “geo-type” is part of.
INTEGER parent_id The id of the highest order geometry that the “geo-type” is part of.
Output:
INTEGER nnode The number of nodes found.
INTEGER nids()The IDs of all of the nodes found.
REAL ncoord()The model space coordinates of each node (x,y,z).
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
SUCCESS This function completed successfully.
---------------
db_get_next_node_id(id)
##########
Description:
This function will return the next available node ID to the caller. This can be used to create another node.
Input:
None.
Output:
INTEGER id The next available node ID.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
SUCCESS This function completed successfully.
---------------
db_get_min_node_id(id)
##########
Description:
This function will find the smallest node ID currently in use.
Input:
None.
Output:
INTEGER id The smallest node ID currently in use.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
SUCCESS This function completed successfully.
---------------
db_get_max_node_id(id)
##########
Description:
This function will find the largest node ID currently in use.
Input:
None.
Output:
INTEGER id The largest node ID currently in use.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
fem_get_node_assoc_groups(nnode,idnodes,ngroups,ids)
##########
Description:
Get a list of all the groups associated with the nodes in the FEM_LIST.
Input:
INTEGER nnode Number of nodes.
INTEGER idnodes()List of nodes.
Output:
INTEGER ngroups Number of unique groups associated with nodes.
INTEGER ids()symbol Pointer to VIRTUAL integer array containing list of associated group IDs.
INTEGER <Return Value> 0 Function was successful.-1 Abort-2 No NODEs in list-3 No associated groups
Error Conditions:
2001070 Unable to acquire %I% words of virtual memory.
4 Interrupted system call.
---------------
fem_get_node_ids(entity_lst,nnode,idnode,notfound,idnoexist)
##########
Description:
This function will sort a list of node id values,returning a list of existing nodes and a list of nodes that do not exist.
Input:
STRING entity_list[] This value specifies a list of nodes.
Output:
INTEGER nnode This value returns the number of node id values in the return value idnode.
INTEGER idnode(VIRTUAL)This value returns an array of node id values that refer to nodes that do exist.
INTEGER notfound This value returns the number of node id values in the return value idnoexist.
INTEGER idnoexist(VIRTUAL)This value returns an array of node id values that refer to nodes that do not exist.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 Abort.
-2 No existing nodes in list
4 Interrupted system call.
2001070 Unable to acquire %I% words of virtual memory.
16000102 Database error during list processing: Node not found
---------------
db_verify_nodes_exist(nnode,nid,exist)
##########
Description:
This function verifies that a set of node id values exist in the database.
Input:
INTEGER nnode This value specifies the number of node values listed in the input value nid.
INTEGER nid(nnode)This value specifies the node ids to be checked.
Output:
INTEGER exist(nnode)This value specifies an array of integers used used to designate the existence of a node I. A non-zero value indicates the existence of the node and a 0 indicates the id does not exist.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000020 Node not found.
---------------
db_count_unref_nodes(nbr_unref_node)
##########
Description:
This function will count all of the nodes in the database which are not referenced by any of the elements.
Input:
None.
Output:
INTEGER nbr_unref_node The number of unreferenced nodes in the database.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
SUCCESS This function completed successfully.
13000020 Node not found.
---------------
db_get_unreferenced_node_ids(nnode,nunref,nid)
##########
Description:
This function will return the IDs and the count of all of the nodes in the database that are not referenced by any elements or mpcs. If the specified count is less than the number of nodes in the database,output will stop when the requested count has been reached. The order of the IDs returned is not determinate.
Input:
INTEGER nnode The maximum number of nodes that can be returned.
Output:
INTEGER nunref The number of unreferenced nodes found.
INTEGER nid()The array of IDs of the unreferenced nodes.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
SUCCESS This function completed successfully.
13000048 Maximum node count exceeded.
---------------
db_get_next_mpc_id(next_id)
##########
Description:
Return the next available unused MPC id.
Input:
None.
Output:
INTEGER next_id The MPC id.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000004 Duplicate entry exists in table.
External Dependencies and Side Effects:
Accesses records in the mpc table in the database.
---------------
fem_get_mpc_assoc_nodes(nmpc,idmpcs,nnodes,ids)
##########
Description:
Get a list of all the nodes associated with the MPCs in the FEM_LIST.
Input:
INTEGER nmpc Number of MPCs.
INTEGER idmpcs(nmpc)List of MPCs.
Output:
INTEGER nnodes Number of unique nodes associated with MPCs.
INTEGER ids()symbol Pointer to VIRTUAL integer array containing list of associated Node IDs.
INTEGER <Return Value> 0 Function was successful.-1 Abort-2 No MPCs in list-3 No associated nodes
Error Conditions:
2001070 Unable to acquire %I% words of virtual memory.
4 Interrupted system call.
---------------
fem_get_mpc_ids(entity_list,nmpc,idmpc,notfound,idnoexist)
##########
Description:
This function will extract an array of MPC id values from a picklist string.
Input:
STRING entity_list[] This value specifies a list of mass property constraints or MPCs.
Output:
INTEGER nmpc This value returns the number of offsets defined for the return value idmpc.
INTEGER idmpc(VIRTUAL)This value returns the sorted mass property constraint or MPC id values.
INTEGER notfound This value returns the number of offsets defined for the return value idnoexist.
INTEGER idnoexist(VIRTUAL)This value returns the sorted id values for mass property constraints or MPCs that do not exist.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 Abort.
-2 No existing MPCs in list.
4 Interrupted system call.
2001070 Unable to acquire %I% words of virtual memory.
---------------
db_count_valid_dofs_f_mpc_type(mpc_type_id,num_dofs)
##########
Description:
Gets a count of the valid degrees of freedom for a particular MPC types from the database.
Input:
INTEGER mpc_type_id The MPC type id
Output:
INTEGER inum_dofs The number of valid DOFS for this MPC type id.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
External Dependencies and Side Effects:
Accesses records in the mpc_term_dof table in the database.
---------------
db_validate_mpc(mpc_id,valid_flag)
##########
Description:
This function determines if an MPC is valid.
Input:
INTEGER mpc_id This value specifies the MPC identifier.
Output:
LOGICAL valid_flag This value returns the status of the MPC. If this value is set to 1 (TRUE),then the MPC is value. If this value is set to 0 (FALSE)then the MPC is invalid.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
External Dependencies and Side Effects:
Accesses records in the mpc,valid_mpc_type,control_info and analysis_code tables in the database.
---------------
db_count_valid_mpc_types(numtypes)
##########
Description:
Gets a count of the valid MPC type for the default analysis type id and analysis code id from the database.
Input:
None.
Output:
INTEGER numtypes The number of valid MPC type ids.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
External Dependencies and Side Effects:
Accesses records in the valid_mpc_type table in the database.
---------------
db_get_all_valid_dof_f_mpc_type(mpc_type_id)
##########
Description:
Get all the valid degrees of freedom for a particular MPC type from the database.
Input:
INTEGER mpc_type_id The MPC type id.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_nxt_valid_dof_f_mpc_type(mpc_type_id,dof_id,dof_name)
##########
Description:
Get the next valid degree of freedom for a particular MPC type from the database.
Input:
INTEGER mpc_type_id The MPC type id.
Output:
INTEGER dof_id The degree of freedom id.
STRING dof_name[] The degree of freedom name.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000142 The MPC was not found in the database.
External Dependencies and Side Effects:
Accesses records in the mpc_type,mpc and mpc_term_dof tables in the database.
---------------
db_get_all_valid_mpc_type()
##########
Description:
Get the next valid (for the current analysis code and analysis type)MPC type id and name stored in the database.
Input:
None.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000142 The MPC was not found in the database.
External Dependencies and Side Effects:
Accesses records in the mpc_type,mpc and mpc_term_dof tables in the database.
---------------
db_get_next_valid_mpc_type(mpc_type_id,mpc_type_name)
##########
Description:
Get the next valid (for the current analysis code and analysis type)MPC type id and name stored in the database.
Input:
None.
Output:
INTEGER mpc_type_id The MPC type id.
STRING mpc_type_name[] The MPC type name.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000142 The MPC was not found in the database.
External Dependencies and Side Effects:
Accesses records in the valid_mpc_type and mpc_type table in the database.
---------------
db_get_dep_nodes_in_sub_mpc(mpc_id,sub_mpc_id,mxnode,nnode,nid)
##########
Description:
This function returns a list of dependent nodes which refer to the specified sub-MPC.
Input:
INTEGER mpc_id This value specifies the mass property constraint or MPC id for which the information is being requested.
INTEGER sub_mpc_id This value specifies the sub-mass property constraint or MPC id for which the information is being requested.
INTEGER mxnode This value specifies the maximum number of nodes which may be returned for the sub-MPC. This value should be less than or equal to the number of offsets defined for the return value nid.
Output:
INTEGER nnode This value returns the number of nodes using the sub-mass property constraint or MPC.
INTEGER nid()This value returns the id values of the nodes for each sub-mass property constraint or MPC. The number of offsets allocated for this array should be less than or equal to the input value mxnode.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000142 The MPC was not found in the database.
13000143 The sub-MPC was not found in the database.
13000150 The list of nodes for one or more of the MPCs is longer than MAXNODE.
External Dependencies and Side Effects:
Accesses records in the mpc_term_node table in the database.
---------------
db_get_dof_id(dof_name,dof_id)
##########
Description:
Get the degree of freedom id from its degree of freedom name.
Input:
STRING dof_name[] The degree of freedom name.
Output:
INTEGER dof_id The degree of freedom id.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000140 The DOF ID was not found in the database
External Dependencies and Side Effects:
Accesses records in the degrees_of_freedom table in the database.
---------------
db_get_dof_name(dof_id,dof_name)
##########
Description:
Get the degree of freedom name from its degree of freedom id.
Input:
INTEGER dof_id The degree of freedom id.
Output:
INTEGER dof_name The degree of freedom name.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000140 The DOF ID was not found in the database
External Dependencies and Side Effects:
Accesses records in the degrees_of_freedom table in the database.
---------------
db_get_mpc_type_id(mpc_type_name,mpc_type_id)
##########
Description:
Get the MPC type id from its MPC type name.
Input:
STRING mpc_type_name[] The MPC type name.
Output:
INTEGER mpc_type_id The MPC type id.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000152 The MPC type ID was not found in the database.
External Dependencies and Side Effects:
Accesses records in the mpc_type table in the database.
---------------
db_get_mpc_type_name(mpc_type_id,mpc_type_name)
##########
Description:
Get the MPC type name from its MPC type id.
Input:
INTEGER mpc_type_id The MPC type id.
Output:
STRING mpc_type_name[] The MPC type id.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000152 The MPC type ID was not found in the database.
External Dependencies and Side Effects:
Accesses records in the mpc_type table in the database.
---------------
db_get_valid_mpc_ids_in_group(gid,nmpc,numval,mpcid)
##########
Description:
Returns a list of ids for all valid MPCs in a group. A MPC is valid if it’s type and associated degrees of freedom are valid for the current analysis code and analysis type preferences.
Input:
INTEGER gid The group id.
INTEGER nmpc The number of valid MPCs to be returned.
Output:
INTEGER numval The actual number of valid MPCs.
INTEGER mpcid()The MPC ids.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000008 Group not found.
13000156 There are more than NMPC valid MPCs in the database.
External Dependencies and Side Effects:
Accesses records in the mpc,valid_mpc_type,control_info and analysis_code tables in the database.
---------------
fem_get_mpc_assoc_groups(nmpc,idmpcs,ngroups,assoc_group_ids)
##########
Description:
Get a list of all the groups associated with the MPCs in the FEM_LIST.
Input:
INTEGER nmpc Number of MPCs.
INTEGER idmpcs List of MPCs.
Output:
INTEGER ngroups()Number of unique groups associated with MPCs.
INTEGER assoc_group_ids Pointer to VIRTUAL integer array containing list of associated group IDs.
INTEGER <Return Value> 0 Function was successful.-1 Abort.-2 No MPCs in list.-3 No associated groups.
---------------
db_get_next_elem_id(id)
##########
Description:
This function will return the next available element ID to the caller.
Input:
None.
Output:
INTEGER id The next available element ID.
INTEGER <Return Value> Returns the success or failure of the routine.
---------------
db_get_min_elem_id(id)
##########
Description:
This function will search the entire element list to find the minimum element ID currently in use.
Input:
None.
Output:
INTEGER id The minimum element ID currently in use.
INTEGER <Return Value> Returns the success or failure of the routine.
---------------
db_get_max_elem_id(id)
##########
Description:
This function will search the entire element list to find the maximum element ID currently in use.
Input:
None.
Output:
INTEGER id The maximum element ID currently in use.
INTEGER <Return Value> Returns the success or failure of the routine.
---------------
fem_get_elem_assoc_groups(nelem,idelems,ngroups,ids)
##########
Description:
Get a list of all the groups associated with the elements in the FEM_LIST
Input:
INTEGER nelem Number of elements.
INTEGER idelems()List of elements.
Output:
INTEGER ngroups Number of unique groups associated with elements.
INTEGER ids()symbol Pointer to VIRTUAL integer array containing list of associated group IDs.
INTEGER <Return Value> 0 Function was successful.-1 Abort-2 No elements in list-3 No associated groups
Error Conditions:
2001070 Unable to acquire %I% words of virtual memory.
4 Interrupted system call.
---------------
fem_get_elem_ids(entity_list,nelem,idelem,notfound,idnoexist)
##########
Description:
Extract the array of existing element IDs from ELEM_LST.
Input:
STRING entity_list[] List of selected elements.
Output:
INTEGER nelem Number of existing element IDs.
INTEGER idelem()symbol Pointer to sorted Element IDs.
INTEGER notfound Number of elements that were not found.
INTEGER idnoexist()symbol Pointer to sorted list of nonexistent IDs.
INTEGER <Return Value> 0 Function was successful.-1 Abort.-2 No existing elements in list.
---------------
fem_u_get_free_edges(el_ids,max_nodes,max_per_edge,max_edges,nels,el_con,el_shape,el_nodes,edge_el_ids,edge_ids,free_edges)
##########
Description:
Create a list of all free edges in a list of finite elements.
Input:
INTEGER el_ids()List of elements.
INTEGER max_nodes Maximum number of nodes per element in EL_IDS.
INTEGER max_per_edge Maximum number of nodes per edge in EL_IDS.
INTEGER max_edges Maximum number of edges per element in EL_IDS.
INTEGER nels Number of elements.
INTEGER el_con()Element node list (Connectivity).
INTEGER el_shape()Element shape array.
INTEGER el_nodes()Element node count array.
Output:
INTEGER edge_el_ids()Associated element id.
INTEGER edge_ids()Free edge ID.
INTEGER free_edges Number of free edges.
INTEGER <Return Value> 0,no error.1,Unsupported element type (shape/nodes).2,Memory allocation error.
---------------
fem_u_get_free_faces(el_ids,max_nodes,max_per_face,max_faces,num_els,el_con,el_shape,el_nodes,face_el_ids,face_ids,free_faces)
##########
Description:
This function will create a list of all free element faces in a list of solid finite elements.
Input:
INTEGER el_ids(num_els)This value specifies a list of solid element identifiers.
INTEGER max_nodes This value specifies the maximum number of nodes used by the elements specified by the input value el_ids.
INTEGER max_per_face This value specifies the maximum number of nodes used by the elements specified by the input value el_ids.
INTEGER max_faces This value specifies the maximum number of faces used by the elements specified by the input value el_ids.
INTEGER num_els This value specifies the number of offsets defined for the input value el_ids.
INTEGER el_con(num_els * max_nodes)This value specifies the solid element connectivity node list.
INTEGER el_shape(num_els)This value specifies the shapes of the solid elements.
INTEGER el_nodes(num_els)This value specifies the solid element node counts.
Output:
INTEGER face_el_ids(max_faces * num_els)This value returns the associated element identifiers.
INTEGER face_ids(max_faces * num_els)This value returns the free face identifiers.
INTEGER free_faces This value returns the number of free faces.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
1 An unsupported element shape or node type has been specified.
2 A memory allocation error has occurred.
---------------
db_update_elem_ids(numelem,old_id,new_id)
##########
Description:
This function changes the ID of a list of elements.
Input:
INTEGER numelem The number of elements to be changed.
INTEGER old_id()The list of old element IDs.
INTEGER new_id()The list of new element IDs.
Output:
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
0 Successful Completion.
13000095 User Aborted Transaction In Progress.
13000118 The renumber specified could not complete.
---------------
db_count_elems_for_geo(geo_type,geo_id,nbr_of_elements)
##########
Description:
Count the number of elements that have the given geometry type and ID.
Input:
INTEGER geo_type The geometry type to search for.
INTEGER geo_id The geometry ID to search for.
Output:
INTEGER nbr_of_elements The number of elements found.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
SUCCESS This function completed successfully.
13000041 Element not found .
---------------
db_update_elem_types(nelem,mxnode,eid,etop,econ)
##########
Description:
This function will update the given elements with the new element topology and create a set of new nodes for that element.
Input:
INTEGER nelem The number of elements to be created.
INTEGER mxnode The number of nodes on each element.
INTEGER eid()The array of element IDs to be used.
INTEGER etop()The array of element topologies to be used.
INTEGER econ()The array of node IDs for each element.
Output:
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
SUCCESS This function completed successfully.
---------------
db_count_elem_topology_codes(ntop)
##########
Description:
This function will count the total number of element topologies currently defined in the system.
Input:
None.
Output:
INTEGER ntop The number of element topologies in the database.
INTEGER <Return Value> Returns the success or failure of the routine.
---------------
db_count_elem_w_topology(ntop,top,nelem)
##########
Description:
This function will count the number of elements that have the specified topologies. The maximum number of topologies that can be returned is passed in by the caller and the caller passes in the address of the output array.
Input:
INTEGER ntop The number of topologies to be looked up.
INTEGER top()An array of the topologies to look up.
Output:
INTEGER nelem()An array of the number of elements of each type.
INTEGER <Return Value> Returns the success or failure of the routine.
---------------
db_count_nodes_for_geometry(geoType,geoId,parentType,parentId,nodeCount)
##########
Description:
This function will count all of the nodes associated with the specified piece of geometry. If the parent geometry parameters are specified,then the given child geometry is assumed to be a constituent part of the parent. The parent geometry and ID must define the entity that contains the elements that the requested nodes belong to. For example,if the caller wants all of the nodes on an edge of a solid,the “geoType” and “geoId” should refer to the specific edge and the “parentType” and “parentId” should refer to the solid (assuming that the desired nodes are part of a solid mesh.)
Input:
INTEGER geoType The type of the geometry in question (point,curve,etc.)
INTEGER geoId The ID of the geometry in question.
INTEGER parentType The type of the highest order geometry that the “geoType” is part of.
INTEGER parentId The ID of the highest order geometry that the “geoType” is part of.
Output:
INTEGER nodeCount The number of nodes associated with that piece of geometry.
INTEGER <Return Value> Returns the success or failure of the routine.
##########
Description:
This function will retrieve all of the information about a group of elements from the memory database given the IDs of the elements. The user must pass in the addresses of the output arrays.
Input:
INTEGER nelem The number of elements being requested.
INTEGER mxnode The maximum number of nodes allowed for each element.
INTEGER eid (nelem)An array to element IDs to be looked up.
Output:
INTEGER etop (nelem)An array of element topologies.
INTEGER gtype (nelem)An array of associated geometry types.
INTEGER gid (nelem)An array of associated geometry IDs.
INTEGER econ (nelem,mxnode)An array of node IDs that belong to each element.
INTEGER <Return Value> Returns the success or failure of the routine.
---------------
db_get_elems_by_lbc(lbc_id,max_elem,numelem,eid)
##########
Description:
Gets all elements associated with a specified LBC.
Input:
INTEGER lbc_id Id of the LBC to which the requested elements are associated.
INTEGER max_elem Maximum number of element IDs for which storage has been allocated by the calling routine.
Output:
INTEGER nelem Number of elements found associated to the specified LBC.
INTEGER eid()Ids of the elements associated to the specified lbc.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000002 Unrecoverable database error.
External Dependencies and Side Effects:
None.
---------------
db_get_elem_config_ntl(atid,acid,geopcd,copcd,fopcd,lopcd,etopid,dofsetid,matlcode,matdcode,config)
##########
Description:
Gets an ntl 25 configuration code from the database.
Input:
INTEGER atid The id of the analysis type associated to the selected element type.
INTEGER acid The id of the analysis code associated to the selected element type.
INTEGER geopcd The id of the geometric option code associated with the selected element type.
INTEGER copcd The id of the condense option code associated with the selected element type.
INTEGER fopcd The id of the formulation option code associated with the selected element type.
INTEGER lopcd The id of the laminate option code associated with the selected element type.
INTEGER etopid The id of the element topology associated with the selected element type.
INTEGER dofsetid The id of the degree of freedom associated with the selected element type.
INTEGER matlcode The id of the material code associated with the selected element type.
INTEGER matdcode The id of the material definition code associated with the selected element type.
Output:
INTEGER config The id of the associated configuration.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
External Dependencies and Side Effects:
Gets a record in the “selected_element_type” table.
---------------
db_get_elem_dimens(top_id,dimen)
##########
Description:
This function will retrieve the element dimensionality for the specified element topology ID value.
Input:
INTEGER top_id The element topology ID value.
Output:
INTEGER dimen The element dimensionality for the specified ID.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000041 Element not found.
External Dependencies and Side Effects:
None.
---------------
db_get_elem_for_geo_type_and_id(geo_type,geo_id,nbr_of_elements,element)
##########
Description:
This function will retrieve all of the element IDs that have a given geometry type and geometry ID.
Input:
INTEGER geo_type The desired geometry type to look for.
INTEGER geo_id The desired geometry ID to look for.
INTEGER nbr_of_elements The maximum number of elements we can return.
Output:
INTEGER element (nbr_of_elements)The array of element IDs with the specified type and ID.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000041 Element not found.
13000093 Too Many Values Returned for Space Allocated.
---------------
db_get_elem_shape_for_id(nelem,eid,shape)
##########
Description:
This function gets the shape codes for the array of elements specified.
Input:
INTEGER nelem The number of elements to be looked up.
INTEGER eid()The array of input element IDs.
Output:
INTEGER shape()The array of shape codes.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000041 Element not found.
SUCCESS This function completed successfully.
---------------
db_get_elem_topology_codes(ntop,top)
##########
Description:
The number of element topologies defined in the database.
Input:
INTEGER ntop The maximum number of topology IDs that can be returned.
Output:
INTEGER top()The array of the element topology IDs.
INTEGER <Return Value> Integer indicating the success or failure of the routine.
---------------
db_get_elem_topos_for_geom(geo_id,geo_type,n_tops,top_ids)
##########
Description:
This function will retrieve all of the distinct topology IDs currently in use that match the specified geometry type and geometry ID.
Input:
INTEGER geo_id The desired geometry ID to look for.
INTEGER geo_type The desired geometry type to look for.
Output:
INTEGER n_tops The number of topologies that were found.
INTEGER top_ids()The array of topology IDs that were found.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
---------------
db_get_elem_top_name(id,name)
##########
Description:
This function will retrieve the element topology name for the specified element topology ID value. Note: The output string that will hold the name of the degenerate element topology MUST be at least GrNameLength bytes long. Anything less can cause memory to be overwritten!
Input:
INTEGER id The element topology ID value.
Output:
STRING name[] The element topology name string.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000091 Analysis type input was not found.
SUCCESS This function completed successfully.
---------------
db_get_elem_verification_parms(analysis_code_name,test_id,threshold)
##########
Description:
Gets the element verification parameters.
Input:
STRING analysis_code_name[31] The current analysis code name.
INTEGER test_id The specific test id.
Output:
REAL threshold The threshold value.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000090 Analysis code input was not found.
13000086 No Records Found.
External Dependencies and Side Effects:
This routine accesses records in the analysis_code and element_verification_parms tables in the database.
---------------
db_get_etop_for_a_code(acid,atid,count,etop)
##########
Description:
Retrieves a set of element_topology_ids based of analysis code and type id.
Input:
INTEGER acid The analysis code id.
INTEGER atid The analysis type id.
INTEGER count Maximum number of topologies to be returned.
Output:
INTEGER etids()The element type ids retrieved.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
External Dependencies and Side Effects:
Retrieves analysis_elements relationships.
---------------
db_get_indep_nodes_in_sub_mpc(mpc_id,sub_mpc_id,mxnode,nnode,nid)
##########
Description:
This function returns a list of independent nodes which refer to the specified sub-MPC.
Input:
INTEGER mpc_id This value specifies the mass property constraint or MPC id for which the information is being requested.
INTEGER sub_mpc_id This value specifies the sub-mass property constraint or MPC id for which the information is being requested.
INTEGER mxnode This value specifies the maximum number of nodes which may be returned for the sub-MPC. This value should be less than or equal to the number of offsets defined for the return value nid.
Output:
INTEGER nnode This value returns the number of nodes using the sub-mass property constraint or MPC.
INTEGER nid()This value returns the id values of the nodes for each sub-mass property constraint or MPC. The number of offsets allocated for this array should be less than or equal to the input value mxnode.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000142 The MPC was not found in the database.
13000143 The sub-MPC was not found in the database.
13000150 The list of nodes for one or more of the MPCs is longer than MAXNODE.
External Dependencies and Side Effects:
Accesses records in the mpc_term_node table in the database.
---------------
analysis_get.pset_for_job(analysis_code,anal_job_name,anal_job_id)
##########
Description:
This function will get the analysis job id for a specific job and analysis code.
Input:
STRING analysis_code[31] This value specifies the name of the analysis code.
STRING anal_job_name[] This value specifies the name of the job.
Output:
INTEGER anal_job_id This value returns the identifier associated with the specified analysis code and job name.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
analysis_import(<analysis_code>,<jobname>,<object>,<filename>,<wait>)
##########
Description:
This function controls the submittal of either a "Result File" importation or an "Input File " importation. It generates the geometry and FEM data from a input file like ".bdf" or from a result file like ".op2" file. The function does the following steps: 	1.	 If running from a session file,it gives the user the option of waiting for the analysis to finish.
---------------
analysis_main.job_name_lbox(<num_items>,<job_name>)
##########
Description:
This function is a callback to the “Available Jobs” listbox in the “Analysis” form.
Input:
INTEGER num_items Number of items
STRING ARRAY job_name[](num_items)Array of job names.
Output:
None
Error Conditions:
None
---------------
analysis_main.user_function(<classname>,<function_name>,<exist_flag>)
##########
Description:
This function executes a given function under a classname. It first checks the status of the function and checks whether it exists and whether it is currently loaded in memory. If the function does not exist then the value of the output return is 0. If the function gets executed then the value of exist_flag returned is 1. It invokes a class function. Problems could occur if the function has input arguments. This function can best be utilized for "init" or "display" functions. This function works only if the Analysis Form is open in Patran.
Input:
STRING classname[ ] The classname of the function
STRING function_name[ ] Function name
LOGICAL exist_flag Status of execution of the function. Returns 1 on execution and 0 for failure.
Output:
INTEGER <Return Value> 1 for success and 0 for failure.
Error Conditions:
None.
---------------
analysis_submit(<analysis_code>,<jobname>,<wait_for_analysis>)
##########
Description:
The function submits the jobname for analysis with a wait for analysis flag option. If running in batch mode the wait flag can be set to TRUE to assure that the process will wait for completion of the analysis prior to continuing. The analysis_submit()call must follow a job preparation sequence that is dependent upon the analysis solver preference selected. For the MSC.Nastran preference,a typical job submission involves the following sequence. A job file is created by a series of calls: jobfile.open,msc_delete_old_files,jobfile.write_spl,jobfile.writec,jobfile.writei,jobfile.close. Next,mscnastran_job.associate_subcases,and then finally analysis_submit is called. An exact sequence is best found from Patransession files. The function does the following steps: 	1.	 Displays fatal message if the database is not ready for submission to analysis.
---------------
analysis_submit_2(<analysis_code>,<jobname>)
##########
Description:
This is a new function designed to replace the call to analysis_submit in the session files. The ‘wait-flag’ in the analysis_submit()is set to TRUE to wait for completion before continuing and FALSE to execute command asynchronously. This function anslysis_submit_2()asks the user for input to the wait flag and then calls the analysis_submit function with the appropriate wait flag. The function does the following steps: 	1.	 If running from a session file,it gives the user the option of waiting for the analysis to finish.
---------------
db_set_pref(pref_id,data_type,int_pref,log_pref,real_pref,char_pref)
##########
Description:
This function will set the geometric preferences in the database.
Input:
INTEGER pref_id This value specifies the internal identifier of the preference to be set in the database.
INTEGER data_type This value specifies the data type of the preference to be set in the database.
INTEGER int_pref This value specifies the integer preference to be set in the database.
LOGICAL log_pref This value specifies the logical preference to be set in the database.
REAL real_pref This value specifies the real preference to be set in the database.
STRING char_pref[31] This value specifies the character preference to be set in the database.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000088 Preference not found
13000002 Unrecoverable database error
---------------
db_get_job_info(analysis_code_id,jobname_id,jobname,description,param_set_id,status)
##########
Description:
Retrieves the jobname,description,parameter set id,and status given the analysis code id and jobname id.
Input:
INTEGER analysis_code_id The ID of the analysis codes to which the jobnames are associated in the database.
INTEGER jobname_id The ID of the jobname associated with analysis_code input.
Output:
STRING jobname[80] The jobname associated with analysis code input.
STRING description[256] The job description associated with the analysis code input.
INTEGER param_set_id The ID of the parameter set associated with the analysis code and job ID.
INTEGER status The status of the job being retrieved.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_set_model_file_suffix(name,suffix)
##########
Description:
Updates the control info table in the database.
Input:
STRING name[31] Name of the analysis code whose suffix is to be set.
STRING suffix[6] Name of the suffix for the analysis code named above.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_set_results_file_suffix(name,suffix)
##########
Description:
Updates the control info table in the database.
Input:
STRING name[31] Name of the analysis code whose suffix is to be set.
STRING suffix[6] Name of the suffix for the analysis code named above.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_set_default_anal_code(name)
##########
Description:
Updates the control info table in the database.
Input:
STRING name[31] Name of the new current analysis code.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_get_default_anal_code(name)
##########
Description:
Retrieves the default analysis code associated with the model.
Input:
None.
Output:
STRING name[31] Analysis code name.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_get_anal_code_name(id,name)
##########
Description:
Retrieves the analysis code name associated with the specified analysis code id.
Input:
INTEGER id Integer containing the ID of the analysis code.
Output:
STRING name[31] String where the name of the analysis code is to be placed.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_get_anal_code_id(name,id)
##########
Description:
Retrieves the analysis code id associated with the specified analysis code name.
Input:
STRING name[31] The name of the analysis code.
Output:
INTEGER id Integer containing the ID of the analysis code.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_count_anal_codes(count)
##########
Description:
Retrieves the number of analysis codes stored in the database.
Input:
None.
Output:
INTEGER count The number of analysis codes stored in the database
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_get_all_anal_codes()
##########
Description:
Gets all analysis code names from the database,in get all,get next method.
Input:
None.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000117 The query specified has completed
13000007 An unspecified database error occurred
---------------
db_get_next_anal_code(name)
##########
Description:
Gets all analysis code names from the database,in get all,get next method.
Input:
None.
Output:
STRING name[31] The name of the analysis code retrieved.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000117 The query specified has completed
13000007 An unspecified database error occurred
---------------
db_set_default_anal_type(name)
##########
Description:
Updates the control info table in the database.
Input:
STRING name[31] Name of the new current analysis type.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_get_default_anal_type(name)
##########
Description:
Retrieves the default analysis type associated with the model.
Input:
None.
Output:
STRING name[31] Location for returned value.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_get_anal_type_name(id,name)
##########
Description:
Retrieves the analysis type name associated with the specified analysis type id.
Input:
INTEGER id Integer containing the ID of the analysis type.
Output:
STRING name[31] Pointer to a string where the name of the analysis type is to be placed.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
None.
---------------
db_get_anal_type_id(name,id)
##########
Description:
Retrieves the analysis type id associated with the specified analysis type name.
Input:
STRING name[31] Pointer to a string containing the name of the analysis type.
Output:
INTEGER id Location to receive the resulting value.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
13000002 Unrecoverable database error.
13000014 Viewport not found.
13000007 An unspecified database error occurred.
---------------
db_count_anal_types(name,count)
##########
Description:
Retrieves the number of analysis types stored in the database.
Input:
STRING name[31] The name of the analysis code for which the type are to be returned
Output:
INTEGER count The number of analysis types stored in the database
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
---------------
db_get_all_anal_types(name)
##########
Description:
Gets all analysis type names from the database corresponding to an analysis code name,in get all,get next method.
Input:
STRING name[31] The space to receive the analysis type name and to give the analysis code name.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000117 The query specified has completed
13000007 An unspecified database error occurred.
---------------
db_get_next_anal_type(name)
##########
Description:
Gets all analysis type names from the database corresponding to an analysis code name,in get all,get next method.
Input:
None.
Output:
STRING name[31] The name of the analysis type retrieved and the name of the analysis code.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000117 The query specified has completed
13000007 An unspecified database error occurred.
---------------
db_get_at_for_ac(acname,atname)
##########
Description:
Gets the default analysis type for a given analysis code from the database.
Input:
STRING acname[31] The name of the analysis code.
Output:
STRING atname[31] The name of the default analysis type.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
---------------
db_set_at_for_ac(anal_code,anal_type)
##########
Description:
Updates the default analysis type for an analysis code.
Input:
STRING anal_code[31] Name of the analysis code.
STRING anal_type[31] Name of the new current analysis type.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
13000007 An unspecified database error occurred.
---------------
db_create_job_name_for_a_code(ac_id,jobname,jobdesc,status,jobname_id,param_set_id)
##########
Description:
Creates a new jobname for an analysis code. The next available jobname_id and param_set_id are returned.
Input:
INTEGER ac_id Analysis code ID to which the jobname is associated.
STRING jobname[80] The job name being created for an analysis code.
STRING jobdesc[256] The description of the job being created.
INTEGER status The status of the job being created.
Output:
INTEGER jobname_id The ID of the next available jobname ID is returned from the application.
INTEGER param_set_id The next available param_set_id is returned from the application.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error.
---------------
db_count_job_names_for_a_code(acode_id,num_acodes)
##########
Description:
Retrieves the number of job names associated with an analysis code.
Input:
INTEGER acode_id The analysis code ID
Output:
INTEGER num_acodes The number of distinct job names associated with the analysis code ID
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
None.
---------------
db_get_jobnames_for_a_code(analysis_code_id,count,jobname,jobname_id,description,param_set_id,status)
##########
Description:
Retrieves an array of jobnames,jobname_ids,descriptions,and statuses for all jobs up to count in the analysis code id which the jobnames are associated with.
Input:
INTEGER analysis_code_id The ID of the analysis codes to which the jobnames are associated in the in the database.
INTEGER count On input,the maximum number of jobs that can be returned from the database.
Output:
INTEGER count On output,the actual number that was returned.
STRING jobname[80]()The array of jobnames associated with analysis code input. The 80 char field is padded with blanks,and the array treated as a contiguous data string.
INTEGER jobname_id()The ID of the jobname associated with analysis_code input.
STRING description[256]()The array of job descriptions associated with the analysis code input. The 256 char field padded with blanks,and the array is treated as a continuous string.
INTEGER param_set_id()The ID of the parameter set associated with the analysis code and job ID.
INTEGER status()The status of the job being retrieved.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_update_jobname_for_a_code(analysis_code_id,jobname,description,status,jobname_id,param_set_id)
##########
Description:
If the analysis_code_id and jobname_id match and existing record,and the new jobname input does not already exist,the jobname,description,and status fields are updated.
Input:
INTEGER analysis_code_id
STRING jobname[80] The analysis code ID of the step being updated.
STRING description[256] The analysis step name being updated.
INTEGER status The status of the jobname being updated.
INTEGER jobname_id The ID of the jobname being modified.
Output:
INTEGER param_set_id The param_set_id which is being deleted.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_create_job_name_list(jobname_id,nbr_of_loadcases,loadcase_ids)
##########
Description:
Inserts a list of load case ids into the jobname_list table.
Input:
INTEGER jobname_id The job name ID.
INTEGER nbr_of_loadcases The number of load case ids.
INTEGER loadcase_ids()The load case ids associated with the job name ID.
Output:
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
None.
---------------
db_create_job_name_list_entry(jobname_id,load_case_id,analysis_step_id)
##########
Description:
Creates a new jobname list entry.
Input:
INTEGER jobname_id The ID of the jobname to which the list entries are associated.
INTEGER load_case_id The ID of the load case to which the list entries are associated.
INTEGER analysis_step_id The ID of the analysis step to which the list entries are associated.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_get_jobname_list_entries(jobname_id,count,load_case_id,step_id)
##########
Description:
Retrieves the load case id and step id for each job name id,up to count.
Input:
INTEGER jobname_id The ID of the jobnames codes to which the jobname lists are associated in the in the database.
INTEGER count On input,the maximum number of entries that can be returned from the database.
Output:
INTEGER count On output,the actual number that was returned.
INTEGER load_case_id()The ID of the load case associated with jobname_id input.
INTEGER step_id()The step_id of the job being retrieved.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_count_job_name_list_entry(jobname_id,num_lists)
##########
Description:
Retrieves the number of job_list entries associated with a jobname.
Input:
INTEGER jobname_id The jobname ID.
Output:
INTEGER num_lists The number of distinct jobname_list entries associated with a jobname.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
None.
---------------
db_delete_job_name_list(jobname_id)
##########
Description:
Deletes jobname list entries from the database.
Input:
INTEGER jobname_id Id of the jobname associated with the jobname list entries to be deleted.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_create_job_name(jobname,id)
##########
Description:
Returns the jobname id upon inserting the jobname.
Input:
STRING jobname[] The job name.
Output:
INTEGER id The job ID.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000158 This job name already exists in the database.
---------------
db_assign_last_jobname(jobname)
##########
Description:
Assigns the last jobname to the control info table.
Input:
STRING jobname[80] The last job name to be put in the control info table.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason
Error Conditions:
13000002 Unrecoverable database error
---------------
db_get_last_jobname(jobname)
##########
Description:
Retrieves the last used jobname.
Input:
None.
Output:
STRING jobname[80] The last used jobname from the control info relation.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_get_job_name_given_id(id,name)
##########
Description:
Returns the job name given the id.
Input:
INTEGER id The job name ID.
Output:
STRING name[] The job name.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
None.
---------------
db_count_all_job_name_ids(nbr_of_jobnames)
##########
Description:
Returns the number of all the job name ids.
Input:
None.
Output:
INTEGER nbr_of_jobnames The number of ids being returned
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
None.
---------------
db_get_all_job_name_ids(max_count,nbr_of_jobnames,id)
##########
Description:
Returns an array of all of the job name ids.
Input:
INTEGER max_count The maximum number of IDs for which space has been allocated.
Output:
INTEGER nbr_of_jobnames The number of IDs being returned.
INTEGER id()The job name IDs.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
13000093 Too Many Values Returned for Space Allocated
---------------
db_get_all_job_names()
##########
Description:
Gets a job name from the database.
Input:
None.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000117 The query specified has completed
---------------
db_get_next_job_name(jobname)
##########
Description:
Gets a job name from the database.
Input:
None.
Output:
STRING jobname[] The job name.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000117 The query specified has completed
---------------
db_get_id_given_job_name(jobname,id)
##########
Description:
Returns the jobname id given the jobname.
Input:
STRING jobname[] The job name.
Output:
INTEGER id The job ID.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
None.
---------------
db_get_id_given_job_name_code(acode,jobname,id)
##########
Description:
Returns the jobname id given the jobname.
Input:
INTEGER acode Analysis code ID.
STRING jobname[] The job name.
Output:
INTEGER id The job ID.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000159 The job name id was not found in the database
---------------
db_get_id_given_load_case_name(jobname,load_case_id)
##########
Description:
Returns the jobname id given the load case name.
Input:
STRING jobname[] The load case name.
Output:
INTEGER load_case_id The load case ID.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000052 Load case not found
---------------
db_delete_job_name(id)
##########
Description:
Deletes a jobname and all jobname list entries from the database.
Input:
INTEGER id ID of the jobname to be deleted.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_create_analysis_step(stepname,stepdesc,ac_id,step_id,param_set_id)
##########
Description:
Creates a new analysis step with name and description for the given analysis code.
Input:
STRING stepname[80] The analysis step name being created
STRING stepdesc[256] The description of the step being created.
INTEGER ac_id The analysis code ID of the step being created.
Output:
INTEGER step_id The ID of the next available step ID is returned from the application.
INTEGER param_set_id The next available param_set_id is returned from the application.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_get_analysis_steps(analysis_code_id,count,stepname,step_id,description,param_set_id)
##########
Description:
Returns the array of analysis step names,ids,descriptions,and the parameter set ids that are associated with the given analysis code id.
Input:
INTEGER analysis_code_id The ID of the analysis codes to which the step names are associated in the database.
INTEGER count On input,the maximum number of jobs that can be returned from the database.
Output:
INTEGER analysis_code_id On output,the actual number that was returned.
STRING stepname[80]()The array of step names associated with analysis code input. The 80 char field is padded with blanks,and the array treated as a contiguous data string.
INTEGER step_id()The ID of the stepname associated with analysis_code input.
STRING description[256]()The array of job descriptions associated with the analysis code input. The 256 char field padded with blanks,and the array is treated as a continuous string.
INTEGER param_set_id()The ID of the parameter set associated with the analysis code and job ID.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_get_steps_for_a_job(analysis_code_id,jobname_id,count,stepname,step_id,description,param_set_id)
##########
Description:
This function returns the step names,ids,description and the parameter set id for a given analysis code id and jobname.
Input:
INTEGER analysis_code_id The ID of the analysis code to which the step names are associated in the in the database.
INTEGER jobname_id The ID of the job to which the step names are associated in the in the database.
INTEGER count The maximum number of jobs that can be returned from the database.
Output:
STRING stepname[80]()The array of step names associated with analysis code input. The 80 char field is padded with blanks,and the array treated as a contiguous data string.
INTEGER step_id()The ID of the stepname associated with analysis_code input.
STRING description[256]()The array of job descriptions associated with the analysis code input. The 256 char field padded with blanks,and the array is treated as a continuous string.
INTEGER param_set_id()The ID of the parameter set associated with the analysis code and job ID.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_get_step_info(analysis_code_id,step_id,stepname,description,param_set_id)
##########
Description:
return to the step name,description,and parameter set id given the step id.
Input:
INTEGER analysis_code_id The ID of the analysis codes to which the jobnames are associated in the in the database.
INTEGER step_id The ID of the stepname associated with analysis_code and jobname_id input.
Output:
STRING stepname[80] The step_name associated with analysis code and jobname input.
STRING description[256] The array of job descriptions associated with the analysis code input. The 256 char field padded with blanks,and the array is treated as a continuous string.
INTEGER param_set_id The ID of the parameter set associated with the analysis code and job ID.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_count_analysis_steps(acode_id,num_steps)
##########
Description:
Retrieves the number of analysis steps for an analysis code.
Input:
INTEGER acode_id The analysis code ID.
Output:
INTEGER num_steps The number of analysis steps associated with an analysis code.
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
None.
---------------
db_count_steps_for_a_job(ac_id,job_id,num_steps)
##########
Description:
Retrieves the number of analysis steps for a specified job and analysis code.
Input:
INTEGER ac_id The analysis code ID
INTEGER job_id The specific job to which the steps are associated
Output:
INTEGER num_steps The number of analysis steps associated
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
None.
---------------
db_get_id_given_step_name(acode,stepname,id)
##########
Description:
Returns the stepname id given the stepname.
Input:
INTEGER acode Analysis code ID.
STRING stepname[] The step name.
Output:
INTEGER id The step ID.
INTEGER <Return Value> Returns the success or failure of the routine.
Error Conditions:
13000204 The specified analysis step was not found
---------------
db_update_analysis_step(analysis_code_id,analysis_step_id,analysis_step_name,description,param_set_id)
##########
Description:
Updates analysis stepware and decription for the given analysis step.
Input:
INTEGER analysis_code_id The analysis code ID of the step being updated.
INTEGER analysis_step_id The ID of the step being modified.
STRING analysis_step_name[80] The analysis step name being updated.
STRING description[256] The description of the step being updated.
Output:
INTEGER param_set_id The param_set_id which is being deleted.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_delete_analysis_step_id(ac_id,step_id)
##########
Description:
Deletes analysis step entries from the database
Input:
INTEGER ac_id Id of the analysis code to which the analysis step to be deleted is associated.
INTEGER step_id Id of the analysis step to be deleted.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_create_param_set_entry(param_set_id,param_name,param_type,param_real,param_char ,param_int)
##########
Description:
Create an entry in the param_set relation. This entry can be of a type real,character,or integer. A type of array of reals will soon be added.
Input:
INTEGER param_set_id Parameter set ID to be added to the database.
STRING param_name[80] The parameter name being added parameter set relation.
INTEGER param_type The type of parameter set being added to the database. Only one type of entry will be added for a parameter name,the other types of parameters should be NULL.DbInteger	1DbLogical	2DbReal	3DbCharacter	4DbRealArray	5DbAllTypes	6
REAL param_real The real value of the parameter to be added to the database relation.
STRING param_char[256] The character value of the parameter to be added to the database relation.
INTEGER param_int The integer value of the parameter to be added to the database relation.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_count_param_set_entries(param_id,num_params)
##########
Description:
Retrieves the number of parameters for a given parameter_set_id.
Input:
INTEGER param_id The parameter set ID
Output:
INTEGER num_params The number of parameters associated with a parameter set ID
INTEGER <Return Value> Returns the success or failure of the routine
Error Conditions:
None.
---------------
db_get_param_set_entry(param_set_id,param_name,param_type,param_real,param_char,param_int)
##########
Description:
Get an entry in the param_set relation. This entry may be of the type real,character,or integer.
Input:
INTEGER param_set_id The ID of the parameter sets which will be fetched from the database.
STRING param_name[80] The array of param_names associated with analysis code input.
Output:
INTEGER param_type The type of param being fetched from the database.
REAL param_real Real parameter.
STRING param_char[256] Array containing a char parameter.
INTEGER param_int Integer parameter.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_get_param_set_ent_pcl(param_set_id,count,param_name,param_type,param_real,param_char,param_int)
##########
Description:
Allows strings of param chars to be returned to pcl. Retrieves the parameter names,types,values,and the count given the count expected and the parameter set id.
Input:
INTEGER param_set_id The ID of the parameter sets which tre to be fetched from the database.
INTEGER count The number of params to be returned from the database.
Output:
INTEGER count
STRING param_name[80]()The array of param_names associated with analysis code input.
INTEGER param_type()The type of param being fetched from the database.
REAL param_real()Array containing a real parameter.
STRING param_char[256]()Array containing a char parameter.
INTEGER param_int()Array containing a integer parameter.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_get_param_set_entries(param_set_id,count,param_name,param_type,param_real,param_char,param_int)
##########
Description:
Retrieves the parameter names,types,values and the count given the count expected and the parameter set id.
Input:
INTEGER param_set_id The ID of the parameter sets which are to be fetched from the database.
INTEGER count The number of parameters to be returned from the database.
Output:
INTEGER count The number actually returned from the database.
STRING param_name[80]()The array of param_names associated with analysis code input.
INTEGER param_type()The type of param being fetched from the database.
REAL param_real()Array containing a real parameter.
STRING param_char[256]()Array containing a char parameter.
INTEGER param_int()Array containing an integer parameter.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_delete_param_set_entry(param_set_id,name)
##########
Description:
Deletes the entries listed by the parameter set id from the database.
Input:
INTEGER param_set_id Id of the param_set whose entries are to be deleted.
STRING name[80] Name of the param_set to be deleted.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_delete_param_set_entries(param_set_id)
##########
Description:
Deletes the entries listed by the parameter set id from the database.
Input:
INTEGER param_set_id Id of the param_set whose entries are entries to be deleted.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_create_pset_matrix_entry(param_set_id,param_name,nrows,ncols,matrix)
##########
Description:
Create a matrix type parameter with param_set_id and param_name.
Input:
INTEGER param_set_id Parameter set ID to be added to the database.
STRING param_name[80] The parameter name being added parameter set relation.
INTEGER nrows The number of rows in the matrix parameter.
INTEGER ncols The number of columns in the matrix parameter.
REAL matrix()The array of floats comprising the matrix.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
---------------
db_get_pset_matrix_entry(param_set_id,param_name,matrix)
##########
Description:
Gets a matrix parameter set entry from the database.
Input:
INTEGER param_set_id Internal unique ID of the matrix values to be retrieved from the database.
STRING param_name[80] Name of the param set being retrieved from the database.
REAL matrix()The information previously contained in the blob,but returned to the calling routine in a float array.
Output:
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
db_get_pset_matrix_size(param_set_id,param_name,nrows,ncols)
##########
Description:
Gets a the size of a matrix parameter set entry from the database.
Input:
INTEGER param_set_id Internal unique ID of the matrix values to be retrieved from the database.
STRING param_name[80] Name of the param set being retrieved from the database.
Output:
INTEGER Number of rows in the matrix.
INTEGER Number of columns in the matrix.
INTEGER <Return Value> Integer indicating success or failure of the routine. If the routine failed,this value contains an indication of the reason.
Error Conditions:
13000002 Unrecoverable database error
13000007 An unspecified database error occurred
---------------
jobfile.close()
##########
Description:
This function closes the last jobfile opened by the jobfile.open function. The function 	1.	 Checks the job status of the file before closing.
---------------
jobfile.create_matrix(values,num_values)
##########
Description:
This function writes a real matrix of any size into the jobfile and then as a matrix in the database. The label and size of the matrix is defined by the jobfile.writeSS()function.
Input:
REAL ARRAY values(num_values)The values to be entered in the matrix.
INTEGER num_values The number of values to be entered in the database.
Output:
INTEGER <Return_value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
jobfile.open(<jobname> ,<job_type>)
##########
Description:
This function opens the output file for deck creation. It writes the parameters to be used in the Results/Model data files. A file “jobname.jbr is created when the MSC.Nastran preference is selected. The function returns an integer value '0' if executed properly. The functions that are used subsequent to this function are the msc_delete_old_files,jobfile.writec,jobfile.writef,jobfile.writei. The file must necessarily be closed by the jobfile.close function. The function does the following steps: 	1.	 Checks for the jobname validity.
---------------
jobfile.set_job_status(<job_status>,<message_string>)
##########
Description:
This function sets the job_status with the corresponding description for the jobfile.
Input:
INTEGER job_status The status of the job to be set.
STRING message_string [ ] The message string describing the job type.
Output:
LOGICAL < Return_status> Returns TRUE on successful execution.
Error Conditions:
None.
---------------
jobfile.writec(<label_str> ,<char_val >)
##########
Description:
This function writes character strings in the jobfile opened by the jobfile.open function. The other equivalents to this function are jobfile.writei,jobfile.writer and jobfile.write_spl. Jobfile.writec("str_1","str_2 ")writes the following to the output file : str_1 = str_2. and for jobfile.writec("","str_2),the output is str_2. The function does the following steps: 	1.	 Checks the session file compatibility for MARC,MSC.Nastran.
---------------
jobfile.writei(<label_str> ,<int_val >)
##########
Description:
This function writes integer values in the jobfile opened by the jobfile.open function. The other equivalents to this function are jobfile.writec,jobfile.writer and jobfile.write_spl. Jobfile.writec("str_1",int)writes the following to the output file : str_1 = int. The function does the following steps: 	1.	 Checks the session file compatibility for MARC,MSC.Nastran.
---------------
jobfile.writer(<label_str> ,<r_val >)
##########
Description:
This function writes real values in the jobfile opened by the jobfile.open function. The other equivalents to this function are jobfile.writei,jobfile.writec and jobfile.write_spl. Jobfile.writer("str_1",r_val)writes the following to the output file : str_1 = r_val.
Input:
STRING label_str [] The name of the variable (parameter)to be defined in the output file.
REAL r_val The real value to be assigned to the solution parameter
Input:
None
Error Conditions:
None
---------------
jobfile.write_spl(<label_str> ,<char_str>)
##########
Description:
This function writes character string arrays in the jobfile opened by the jobfile.open function. The other equivalents to this function are jobfile.writei,jobfile.writer and jobfile.writec. This function writes pure string or string arrays as opposed to the function jobfile.writec which inserts two strings with a "=" in between.
Input:
STRING label_str [] The name of the variable (parameter)to be defined in the output file.
STRING ARRAY char_str []()The character string array to be assigned to the solution parameter
Output:
None
Error Conditions:
None
---------------
msc_delete_old_files(<job_name >,<model_suffix>,<results_suffix >)
##########
Description:
This function follows the jobfile.open()function. It searches and deletes all previous versions of the model and results files to avoid interference with the new jobname. The function does the following steps: 	1.	 Creates the file names of all the possible old files with the given extension.
---------------
mscnastran_anlyze_sub_create.available_callback(<num_items>,<subcase_name>)
##########
Description:
This function is callback to “Available Subcases” listbox in “Subcase Create” form. Execution of this function will display the corresponding subcase name in “Subcase Name” databox available in “Subcase Create” form.
Input:
INTEGER num_items Number of items.
STRING subcase_name[] Subcase name.
Output:
None
Error Conditions:
None
---------------
mscnastran_analyze_tp.get_version_number(<version_no>)
##########
Description:
This function will get the version number of the MSC.Nastran preference.
Input:
REAL version_no Version number of MSC.Nastran.
Output:
None
Error Conditions:
None
---------------
mscnastran_job.associate_subcases(<sseq_str>,<job_name>,<num_subcases>,<subcase_names>)
##########
Description:
This function will associate the subcases to a job for the MSC.Nastran preference.
Input:
STRING sseq_str[] Solution sequence number.
STRING job_name[] Name of the job.
INTEGER num_subcases Number of subcases.
STRING subcase_names[]()Array of subcase names.
Output:
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
See the Status Message(Ch 11)for information on any error values returned by this function.
---------------
mscnastran_subcase.create(<sseq_str>,<subcase_names>,<subcase_desc>)
##########
Description:
This function will create subcases for the MSC.Nastran preference.
Input:
STRING sseq_str[] Solution sequence number.
STRING subcase_names[] Name of subcase
STRING subcase_desc[] Subcase description
Output:
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
See the Status Message(Ch 11)for information on any error values returned by this function.
---------------
mscnastran_subcase.create_char_param(<sseq_str>,<char_value>)
##########
Description:
This function will load a character value for a subcase parameter into the database.
Input:
STRING param_name[] Name of the subcase parameter.
STRING char_value[] Value of the parameter.
Output:
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
See the Status Message(Ch 11)for information on any error values returned by this function.
---------------
mscnastran_update.job(<job_name>)
##########
Description:
This function will update an old job to format of current MSC.Nastran preference.
Input:
STRING job_name[] Name of the job.
Output:
INTEGER <Return Value> Returns 0 for success,otherwise returns the error code.
Error Conditions:
See the Status Message(Ch 11)for information on any error values returned by this function.
---------------
uil_app_analysis.change_current_branch(num_branches>,<labels>,<post_them>)
##########
Description:
This function will change the current branch of the option menu tree to the new branch for analysis application
Input:
INTEGER num_branches Number of menus in new branch.
STRING labels[](num_branches)Array of item labels for each menu.
LOGICAL post_them Flag to indicate if the menus are to be posted after they are set.
Output:
Error Conditions:
None
---------------
fields_create(field_name,object_type,extrap_method,field_type,coord_type,coord_frame,geom_entity,definition_type,num_active_var,ind_variable_1,ind_variable_2,ind_variable_3,field_function_1,field_function_2,field_function_3,linear_definition,var1_values,var2_values,var3_values,field_values)
##########
Description:
This function creates a new field in the database.
Input:
STRING field_name[31] This value specifies the new field name.
STRING object_type[31] This value specifies the object type: “Spatial”,“Non-Spatial”,“Material”,or “Time Dependent”.
INTEGER extrap_method This value specifies the extrapolation method: 1 = “Use closest table value,2 = “Linear extrapolation,” and 3 = “Set value to zero”.
STRING field_type[31] This value specifies the type: “Scalar”,“Vector”,or “Complex Scalar”.
STRING coord_type[31] This value specifies the coordinate frame type: “Real” or “Parametric”.
STRING coord_frame[31] This value specifies the coordinate frame. It is not used for spatial parametric fields.
STRING geom_entity[31] This value specifies the geometric entity used for spatial parametric fields.
STRING definition_type[31] This value specifies the definition: “Function” or “Table”.
INTEGER num_active_var This value specifies the number of active independent variables or dimension.
STRING ind_variable_1[31] This value specifies the independent variable 1. For Spatial: “X,” “R,” or “C1”. For Material: “T”. For Non-Spatial: “t”,“f”,“T”,“u”,“v”,“UD”,“fri”,“fmpd”,or “fmpr”. For Time Dependent: “t”. Note that “fri”,“fmpd”,or “fmpr” must be used for complex-valued functions of frequency. “fri” indicates that the complex terms are real-imaginary; “fmpd” indicates magnitude-phase (degrees),and “fmpr”,magnitude-phase (radians).
STRING ind_variable_2[31] This value specifies the independent variable 2. For Spatial: “Y,” “T,” or “C2”. For Material: “e”. For Non-Spatial: “t”,“f”,“T”,“u”,“v”,“UD”,“fri”,“fmpd”,or “fmpr”. For Time Dependent: invalid. Note that “fri”,“fmpd”,or “fmpr” must be used for complex-valued functions of frequency. “fri” indicates that the complex terms are real-imaginary; “fmpd” indicates magnitude-phase (degrees),and “fmpr”,magnitude-phase (radians).
STRING ind_variable_3[31] This value specifies the independent variable 3. For Spatial: “Z,” “P,” or “C3”. For Material: “er”. For Non-Spatial: “t”,“f”,“T”,“u”,“v”,“UD”,“fri”,“fmpd”,or “fmpr”. For Time Dependent: invalid. Note that “fri”,“fmpd”,or “fmpr” must be used for complex-valued functions of frequency. “fri” indicates that the complex terms are real-imaginary; “fmpd” indicates magnitude-phase (degrees),and “fmpr”,magnitude-phase (radians).
STRING field_function_1[] This value specifies the first field function which can manipulate either scalar or vector values.
STRING field_function_2[] This value specifies the second field function which can manipulate vector values.
STRING field_function_3[] This value specifies the third field function which can manipulate vector values.
LOGICAL linear_definition This value specifies,when set to TRUE,that spatial parametric tables be used. If this value is set to FALSE,spatial parametric tabular fields are not used.
REAL var1_values()
This value specifies a one-dimensional array of tabular “X”,“R”,or “C1” for Spatial,“T” for Material,“t”,“f”,“T,“u”,“v”,“UD”,“fri”,“fmpd”,or “fmpd” for Non-Spatial,or “t” for Time Dependent values.
REAL var2_values()
This value specifies a one-dimensional array of tabular “Y”,“T”,or “C2” for Spatial,“e” for Material values,or “t”,“f”,“T”,“u”,“v”,“UD”,“fri”,“fmpd”,or “fmpd” for Non-Spatial values.
REAL var3_values()
This value specifies a one-dimensional array of tabular “Z”,“P”,or “C3” for Spatial,“er” for Material values,or “t”,“f”,“T”,“u”,“v”,“UD”,“fri”,“fmpd”,or “fmpd” for Non-Spatial values.
REAL field_values()
This array contains the field values for all data points. It is only applicable for tabular fields. Use a single zero if not applicable. For real-valued fields its dimensions must be len1 x len2 x len3,where len1,len2,and len3 are the lengths of the arrays var1_values,var2_values,and var3_values,respectively. For complex-valued fields its dimensions must be 2 x len1 x len2 x len3,with all of the first complex component terms preceding all second component terms. That is,all reals precede all imaginaries and all magnitudes precede all phases.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
fields_create_dfem(field_name,entity_type,type,num_entities,entities,value)
##########
Description:
This function creates a new Load/BC field in the database.
Input:
STRING field_name[31] This value specifies the new field name.
STRING entity_type[31] This value specifies the entity type: “Node” or “Element”.
STRING type[31] This value specifies the type: “Scalar” or “Vector”.
INTEGER num_entities This value specifies the number of entities in the field.
STRING entities[](num_entities)
This value specifies the names of the entities to be associated with the field.
STRING values[](num_entities)
This value specifies an array of scalars or vectors,depending on field type. If the <type> is “Vector”,either a vector or a node ID may be specified.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
fields_create_dfem_v2(field_name,object_type,entity_type,type,num_entities,entities,dynamic_var,extrap_method,num_steps,steps,values)
##########
Description:
This function creates a new Load/BC field in the database.
Input:
STRING field_name[31] This value specifies the new field name.
STRING object_type[] This value specifies the object type: “Spatial” or “Non-Spatial”.
STRING entity_type[31] This value specifies the entity type: “Node” or “Element”.
STRING type[31] This value specifies the type: “Scalar” or “Vector”.
INTEGER num_entities This value specifies the number of entities in the field.
STRING entities[](num_entities)
This value specifies the names of the entities to be associated with the field.
STRING dynamic_var[] This value specifies the dynamic variable: “t” for time,“f” for frequency or ““ for non-dynamic.
INTEGER extrap_method This value specifies the extrapolation method: 1 = “Use closest table value,2 = “Linear extrapolation,” and 3 = “Set value to zero”.
INTEGER num_steps This value specifies the number of dynamic steps. For “Non-Spatial” only.
REAL steps(num_steps)This value specifies an array of dynamic step values. For “Non-Spatial” only.
STRING values[](num_entities)
This value specifies an array of scalars or vectors,depending on field type. If the <type> is “Vector”,either a vector or a node ID may be specified.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
fields_create_general(field_name,object_type,field_method,extrap_method,coord_type,coord_frame,geom_entity,num_active_var,ind_variable_1,ind_variable_2,ind_variable_3)
##########
Description:
This function creates a new general field in the database.
Input:
STRING field_name[31] This value specifies the new field name.
INTEGER object_type This value specifies the object type id: 1 = Spatial,2 = Material,and 3 = Non-Spatial.
INTEGER field_method This value specifies the field method type and should always be set to the value 5.
INTEGER extrap_method This value specifies the extrapolation method: 1 = “Use closest table value”,2 = “Linear extrapolation”,and 3 = “Set value to zero”.
STRING coord_type[31] This value specifies the coordinate frame type: “Real” or “Parametric”.
STRING coord_frame[31] This value specifies the coordinate frame.
STRING geom_entity[31] This value specifies the geometric entity used for parametric field.
INTEGER num_active_var This value specifies the number of active independent variables or dimension.
INTEGER ind_variable_1 This value specifies the first independent variable. See the remarks below for more information.
INTEGER ind_variable_2 This value specifies the second independent variable. See the remarks below for more information.
INTEGER ind_variable_3 This value specifies the third independent variable. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
fields_create_general_term(field_name,term_field_id,term_type,term_id,data_length,data)
##########
Description:
This function creates a term for a general field in the database.
Input:
STRING field_name[31] This value specifies an existing general field name.
INTEGER term_field_id This value specifies the term field id.
INTEGER term_type This value specifies the term type.
INTEGER term_id This value specifies the term id.
INTEGER data_length This value specifies the length of the data.
STRING data[] This value specifies the expression data.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
fields_create_fem(field_name,group,type,extrap_method,coord_frame,results_interp)
##########
Description:
This function creates a new FEM field in the database.
Input:
STRING field_name[31] This value specifies the new field name.
STRING group[31] This value specifies the name of the group that the results apply to.
STRING type[31] This value specifies the type: “Scalar” or “Vector”.
INTEGER extrap_method This value specifies the extrapolation method: 1 = “Use closest table value,2 = “Linear extrapolation,” and 3 = “Set value to zero”.
STRING coord_frame[31] This value specifies the name of the coordinate frame to be used. This value defaults to “Coord 0”.
INTEGER results_interp This value specifies the 3D interpolation of 2D results flag: 0=interpolate points “as-is”,1=apply 2D results uniformly in the “1” direction of the new model,2=apply in “2” direction,and 3=apply in “3” direction.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
fields_create_lbc(field_name,entity_type,type,num_entities,entities,value)
##########
Description:
This function creates a new Load/BC field in the database.
Input:
STRING field_name[31] This value specifies the new field name.
STRING entity_type[31] This value specifies the entity type: “Node” or “Element”.
STRING type[31] This value specifies the type: “Scalar” or “Vector”.
INTEGER num_entities This value specifies the number of entities in the field.
STRING entities[](num_entities)
This value specifies the names of the entities to be associated with the field.
STRING values[](num_entities)
This value specifies an array of scalars or vectors,depending on field type.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
fields_delete(num_fields,field_name)
##########
Description:
This function deletes an existing field from the database.
Input:
INTEGER num_fields This value specifies the number of fields to be deleted.
STRING field_name[31](num_fields)
This value specifies the names of the fields to be deleted.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000127 The field entered does not exist.
13000184 The field is in use and cannot be deleted.
---------------
fields_modify(field_name,new_name,object_type,extrap_method,type,coord_type,coord_frame,geom_entity,definition_type,num_active_var,ind_variable_1,ind_variable_2,ind_variable_3,field_function_1,field_function_2,field_function_3,linear_definition,var1_values,var2_values,var3_values,field_values)
##########
Description:
This function modifies an existing field in the database.
Input:
STRING field_name[31] This value specifies the name of the existing field to be modified.
STRING new_name[31] This value specifies the new field name. This value should be set to the same value specified as the input value load_case_name if the field name is not to be changed.
STRING object_type[31] This value specifies the object type: “Spatial”,“Non-Spatial”,“Material”,or “Time Dependent”
INTEGER extrap_method This value specifies the extrapolation method: 1 = use closest table value,2 = linear extrapolation,and 3 = set value to zero.
STRING type[31] This value specifies the type: “Scalar”,“Vector”,or “Complex Scalar”.
STRING coord_type[31] This value specifies the coordinate frame type: “Real” or “Parametric”.
STRING coord_frame[31] This value specifies the coordinate frame.
STRING geom_entity[31] This value specifies the geometric entity used for spatial parametric field.
STRING definition_type[31] This value specifies the definition: “Function” or “Table”.
INTEGER num_active_var This value specifies the number of active independent variables or dimension.
STRING ind_variable_1[31] This value specifies the independent variable 1. For Spatial: “X,” “R,” or “C1”. For Material: “T”. For Non-Spatial: “t”,“f”,“T”,“u”,“v”,“UD”,“fri”,“fmpd”,or “fmpr”. For Time Dependent: “t”. Note that “fri”,“fmpd”,or “fmpr” must be used for complex-valued functions of frequency. “fri” indicates that the complex terms are real-imaginary; “fmpd” indicates magnitude-phase (degrees),and “fmpr”,magnitude-phase (radians).
STRING ind_variable_2[31] This value specifies the independent variable 2. For Spatial: “Y,” “T,” or “C2”. For Material: “e”. For Non-Spatial: “t”,“f”,“T”,“u”,“v”,“UD”,“fri”,“fmpd”,or “fmpr”. For Time Dependent: invalid. Note that “fri”,“fmpd”,or “fmpr” must be used for complex-valued functions of frequency. “fri” indicates that the complex terms are real-imaginary; “fmpd” indicates magnitude-phase (degrees),and “fmpr”,magnitude-phase (radians).
STRING ind_variable_3[31] This value specifies the independent variable 3. For Spatial: “Z,” “P,” or “C3”. For Material: “er”. For Non-Spatial: “t”,“f”,“T”,“u”,“v”,“UD”,“fri”,“fmpd”,or “fmpr”. For Time Dependent: invalid. Note that “fri”,“fmpd”,or “fmpr” must be used for complex-valued functions of frequency. “fri” indicates that the complex terms are real-imaginary; “fmpd” indicates magnitude-phase (degrees),and “fmpr”,magnitude-phase (radians).
STRING field_function_1[] This value specifies the first field function which can manipulate either scalar or vector values.
STRING field_function_2[] This value specifies the second field function which can manipulate vector values.
STRING field_function_3[] This value specifies the third field function which can manipulate vector values.
LOGICAL linear_definition This value specifies,when set to TRUE,that spatial parametric tables be used. If this value is set to FALSE,spatial parametric tabular fields are not used.
REAL var1_values()
This value specifies a one-dimensional array of tabular “X”,“R”,or “C1” for Spatial,“T” for Material,“t”,“f”,“T,“u”,“v”,“UD”,“fri”,“fmpd”,or “fmpd” for Non-Spatial,or “t” for Time Dependent values.
REAL var2_values()
This value specifies a one-dimensional array of tabular “Y”,“T”,or “C2” for Spatial,“e” for Material values,or “t”,“f”,“T”,“u”,“v”,“UD”,“fri”,“fmpd”,or “fmpd” for Non-Spatial values.
REAL var3_values()
This value specifies a one-dimensional array of tabular “Z”,“P”,or “C3” for Spatial,“er” for Material values,or “t”,“f”,“T”,“u”,“v”,“UD”,“fri”,“fmpd”,or “fmpd” for Non-Spatial values.
REAL field_values()
This array contains the field values for all data points. It is only applicable for tabular fields. Use a single zero if not applicable. For real-valued fields its dimensions must be len1 x len2 x len3,where len1,len2,and len3 are the lengths of the arrays var1_values,var2_values,and var3_values,respectively. For complex-valued fields its dimensions must be 2 x len1 x len2 x len3,with all of the first complex component terms preceding all second component terms. That is,all reals precede all imaginaries and all magnitudes precede all phases.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
fields_modify_lbc(field_name,new_name,entity_type,type,num_entities,entities,values)
##########
Description:
This function modifies an existing Load/BC field in the database.
Input:
STRING field_name[31] This value specifies the name of existing field to be modified.
STRING new_name[31] This value specifies the new field name. This value should be set to the same value specified as the input value load_case_name if the field name is not to be changed.
STRING entity_type[31] This value specifies the entity type: “Node” or “Element”.
STRING type[31] This value specifies the type: “Scalar” or “Vector”.
INTEGER num_entities This value specifies the number of entities in the field.
STRING entities[](num_entities)
This value specifies the names of the entities in list processor format.
STRING values[](num_entities)
This value specifies the one or three dimensional array values depending on field type.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
fields_modify_fem(field_name,new_name,group,type,extrap_method,coord_frame,results_interp)
##########
Description:
This function modifies an existing FEM field in the database.
Input:
STRING field_name[31] This value specifies the name of existing field to be modified.
STRING new_name[31] This value specifies the new field name. Same as the input value “old_name” if it is not to be changed.
STRING group[31] This value specifies the name of the group that results apply to.
STRING type[31] This value specifies the type: “Scalar” or “Vector”.
INTEGER extrap_method This value specifies the extrapolation method: 1 = use closest table value,2 = linear extrapolation,and 3 = set value to zero.
STRING coord_frame[31] This value specifies the name of the coordinate frame to be used. This value defaults to “Coord 0”.
INTEGER results_interp This value specifies the 3D interpolation of 2D results flag: 0=interpolate points “as-is”,1=apply 2D results uniformly in the “1” direction of the new model,2=apply in “2” direction,and 3=apply in “3” direction.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
fields_show(field_name,ind_label,ind_min,ind_max,ind_num_points,fixed1_min,fixed1_max,fixed1_num_points,fixed2_min,fixed2_max,fixed2_num_points,existing_pts_flag,post_xy_flag,type_dep_val)
##########
Description:
This function shows an existing field in tabular and XY Plot format.
Input:
STRING field_name[31] This value specifies the field name.
STRING ind_label[31] This value specifies an independent variable.
REAL ind_min This value specifies the minimum value of the independent variable.
REAL ind_max This value specifies the maximum value of the independent variable.
INTEGER ind_num_points This value specifies the number of points of the independent variable.
REAL fixed1_min This value specifies the minimum value of the first fixed variable.
REAL fixed1_max This value specifies the maximum value of the first fixed variable.
INTEGER fixed1_num_points This value specifies the number of points of the first fixed variable.
REAL fixed2_min This value specifies the minimum value of the second fixed variable.
REAL fixed2_max This value specifies the maximum value of the second fixed variable.
INTEGER fixed2_num_points This value specifies the number of points of the second fixed variable.
LOGICAL existing_pts_flag This value uses the existing points flag. The value is set to TRUE if the existing points should be used,and to FALSE if the values are to be calculated from existing points. Always set this value to FALSE for function fields.
LOGICAL post_xy_flag This value specifies the post XY plot flag. The value is set to TRUE if the XY plot window displaying data is desired.
INTEGER type_dep_val The use of this value depends on the field type. For vector fields this value specifies the selected vector component- 1,2,3. For complex scalar fields this value specifies the tabular and XY Plot output type: 1 for real-imaginary,2 for magnitude-phase (degrees),3 for magnitude-phase (radians),and 4 for magnitude (db)-phase (degrees),i.e. Bode plot data.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
fields_show_lbc(field_name)
##########
Description:
This function shows an existing Load/BC field in tabular format in a spreadsheet form.
Input:
STRING field_name[31] This value specifies the field name.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
loadcase_create(load_case_name,load_case_type,load_case_desc,lbc_name,priorities,dynamic_name,dynamic_value,make_current)
##########
Description:
This function creates a new load case.
Input:
STRING load_case_name[80] This value specifies the new load case name.
STRING load_case_type[31] This value specifies the load case type and can be set to either “Static” or “Time Dependent”.
STRING load_case_desc[256] This value specifies the load case description.
STRING lbc_name[31]()This value specifies the load/BC set names to be associated with this load case.
INTEGER priorities()This value specifies the load/BCs set priorities. The default is 0 or add otherwise. The priority value can range from 1 to the number of load/BC sets,where 1 indicates the highest or top priority.
STRING dynamic_name[80] This value specifies the dynamic load case name which was used to generate the static load case at the specified dynamic value.
REAL dynamic_value This value specifies the dynamic value used to evaluate this static load case.
LOGICAL make_current This value is set to TRUE,if this load case should be made the current load case. If this value is set to FALSE,this load case will not be made the current load case.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
loadcase_create_combination(lc_name,lc_desc,lcc_names,lcc_factors,make_current)
##########
Description:
This function creates a new load case.
Input:
STRING lc_name[32] The name of the load case
STRING lc_desc[256] The load case description
STRING lcc_names[32]()Array of names of the load cases used in the new load case
REAL lcc_factors()Array of the scale factors used for the included load cases
LOGICAL make_current TRUE to make the load case current. Note: this should always be set to FALSE.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
loadcase_delete(load_case_name,delete_assoc_lbcs)
##########
Description:
This function deletes a load case and can optionally delete the loads and boundary conditions associated with the load case.
Input:
STRING load_case_name[] This value specifies the name of load case to be deleted.
LOGICAL delete_assoc_lbcs This value specifies,when set to TRUE,that any associated Load/BCs are to be deleted. If this value is set to FALSE,associated Load/BCs will not be deleted.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
loadcase_delete_combination(lc_name,del_lbcs)
##########
Description:
This function is used to delete a combination load case (Nastran SUBCOM).
Input:
STRING lc_name[32] The name of the load case
LOGICAL del_lbcs TRUE to delete the associated LBCs.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
loadcase_modify(load_case_name,new_name,load_case_type,load_case_desc,lbc_name,priorities,dynamic_name,dynamic_value,make_current)
##########
Description:
This function modifies a load case in the database.
Input:
STRING load_case_name[80] This value specifies an existing load case name.
STRING new_name[80] This value specifies the new load case name.
STRING load_case_type[31] This value specifies the load case type and can be set to either “Static” or “Time Dependent”.
STRING load_case_desc[256] This value specifies the load case description.
STRING lbc_name[31]()This value specifies the load/BC set name to be associated with this load case.
INTEGER priorities()This value specifies the load/BCs set priorities. The default is 0 or add otherwise. The priority value can range from 1 to the number of load/BC sets,where 1 indicates the highest or top priority.
STRING dynamic_name[80] This value specifies the dynamic load case name which was used to generate the static load case at the specified dynamic value. Not used in Release 1.
REAL dynamic_value This value specifies the dynamic value used to evaluate this static load case. Not used in Release 1.
LOGICAL make_current This value is set to TRUE,if this load case should be made the current load case. If this value is set to FALSE,this load case will not be made the current load case.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
loadcase_modify_combination(lc_name,lc_new_name,lc_desc,lcc_names,lcc_factors,make_current)
##########
Description:
This function is used to modify a combination load case (Nastran SUBCOM).
Input:
STRING lc_name[32] The name of the load case
STRING lc_new_name[32] The new name of the load case
STRING lc_desc[256] The load case description
STRING lcc_names[32]()Array of names of the load cases used in the new load case
REAL lcc_factors()Array of the scale factors used for the included load cases
LOGICAL make_current TRUE to make the load case current. Note: this should always be set to FALSE.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
loadcase_show(load_case_name)
##########
Description:
This function shows the attributes of the selected load case.
Input:
STRING load_case_name[80] This value specifies the load case name to be shown.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
material.create(analysis_code,analysis_code_id,analysis_type,analysis_type_id,material_name,material_id,material_descrip,material_cat,material_cat_id,directionality,directionality_id,linearity,linearity_id,mat_type_name,mat_type_id,const_model_name,const_model_id,options,option_names,option_ids,active,active_status,action,material_exists,external,external_status,prop_ids_label,prop_names,prop_ids,prop_values_label,prop_values)
##########
Description:
This function will create or modify a material in the database.
Input:
STRING analysis_code[31] This value specifies the analysis code label and should be set to “Analysis code ID”.
INTEGER analysis_code_id This value specifies the analysis code ID.
STRING analysis_type[31] This value specifies the analysis type label and should be set to “Analysis type ID”.
INTEGER analysis_type_id This value specifies the analysis type ID.
STRING material_name[31] This value specifies the name of the material to be created.
INTEGER material_id This value specifies the material ID. This value should be set to 0 if this is a newly defined material.
STRING material_descrip[] This value specifies the material description.
STRING material_cat[31] This value specifies the material category: “Isotropic”,“3d Orthotropic”,“3d Anisotropic”,“2d Orthotropic”,or “2d Anisotropic”.
INTEGER material_cat_id This value specifies the material category ID: 1=Isotropic; 2=3d Orthotropic; 3=3d Anisotropic; 4=2d Anisotropic; and 5=2d Orthotropic.
STRING directionality[31] This value specifies the directionality name and should be set to “Directionality”.
INTEGER directionality_id This value specifies the material directionality ID: 0=N/A; 1=Isotropic; 2=Orthotropic; 3=Anisotropic; 4=2d Orthotropic; and 5=2d Anisotropic.
STRING linearity[31] This value specifies the linearity name and should be set to “Linearity”.
INTEGER linearity_id This value specifies the linearity ID: 0=N/A; 1=Linear Elastic; 2=Nonlinear Elastic; 3=Elastoplastic; 4=Hyperelastic; 5=Viscoelastic; and 6=Creep.
STRING mat_type_name[31] This value specifies the material type name: “homogeneous”,“laminate”,“rule of mixtures”,“Halpin-Tsai”,“short fiber composite”,or an externally defined material.
INTEGER mat_type_id This value specifies the material type ID: 0=homogeneous; 1=laminate; 2=rule of mixtures; 3=Halpin-Tsai; 4=short fiber composite; and 101=externally defined material.
STRING const_model_name[31]
This value specifies the constitutive model name: “Linear Elastic”,“Nonlinear Elastic”,“Elastoplastic”,“Failure”,“Creep”,“Viscoelastic”,“Swelling”,“Thermal”,or “Hyperelastic”.
INTEGER const_model_id This value specifies the constitutive model ID: 1=Linear Elastic; 2=NonLinear Elastic; 3=Elastoplastic; 4=Failure; 5=Creep; 7=Viscoelastic; 8=Swelling; 10=Thermal; and 11=Hyperelastic.
STRING options[] This value specifies the model options label and should be set to “Model Options & IDs”.
STRING option_names[31]()This value specifies the material option names. See the remarks below for more information.
INTEGER option_ids()This value specifies the material options IDs. See the remarks below for more information.
STRING active[31] This value specifies the active label and should be set to “Active Flag”.
INTEGER active_status This value specify the constitutive model status: 0 = if the model has not been activated,and 1 = if the constitutive model has been activated.
STRING action[31] This value specifies,when set to “Create”,that a new material be created. If this value is set to “Modify”,the material named by the input value material_name will be modified.
INTEGER material_exists This value specifies the material exists state and should be set as follows: 10 = if the input value action is set to “Create” and material doesn’t exist,11 = if the input value action is set to “Create” and material exists,30 = if the input value action is set to “Modify” and material doesn’t exist,and 31 = if the input value action is set to “Modify” and material exists.
STRING external[31] This value specifies the external flag label and should be set to “External Flag”.
LOGICAL external_status This value specifies,when set to TRUE,that this material is externally defined. If this value is set to FALSE,this material is internally defined.
STRING prop_ids_label[31] This value uses the string “Property IDs”.
STRING prop_names[31]()This value specifies the property names. See the remarks below for more information.
INTEGER prop_ids()This value specifies the property IDs. See the remarks below for more information.
STRING prop_values_label[31] This value specifies the property values label and should be set to “Property Values”.
STRING prop_values[31]()This value specifies the property values.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
13000004 Duplicate entry exists in table
13000120 The material specified in the query was not found
13000164 The constitutive model was not found in the database.
13000210 The system is out of virtual memory.
1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
mat_create_lam(material_name,material_descrip,stack_sequence,ply_names,thicks,orients,num_names,offset_string,action)
##########
Description:
This function will create or modify a laminated composite material in the database given the stacking sequence.
Input:
STRING material_name[31] This value specifies the name of the laminate to be created.
STRING material_descrip[] This value specifies the material description.
INTEGER stack_sequence This value specifies the stacking sequence convention: 1=Total; 2=Symmetric; 3=Symmetric/Mid-Ply; 4=Anti-Symmetric; and 5=Anti-Symmetric/Mid-Ply.
STRING ply_names[31](num_names)
This value specifies an array of ply material names for a laminate with the number of plies specified by the input value num_names. If the input value stack_sequence is set to 2 or 4,only the first (num_names)/2 ply material names need to be specified. If the input value stack_sequence is set to 3 or 5,then only the (num_names+1)/2 ply material names need to be specified.
REAL thicks(num_names)This value specifies the ply thicknesses for a laminate with the number of plies specified by the input value num_names. If the input value stack_sequence is set to 2 or 4,only the first (num_names)/2 ply material names need to be specified. If the input value stack_sequence is set to 3 or 5,then only the (num_names+1)/2 ply material names need to be specified.
REAL orients(num_names)This value specifies the ply orientations for a laminate with the number of plies specified by the input value num_names. If the input value stack_sequence is set to 2 or 4,only the first (num_names)/2 ply material names need to be specified. If the input value stack_sequence is set to 3 or 5,then only the (num_names+1)/2 ply material names need to be specified.
INTEGER num_names This value specifies the number of offsets defined for the input values ply_names,thicks,and orients.
STRING offset_string[] This value specifies the list processor offset string.
STRING action[] This value specifies,when set to “Create”,that a new laminate be created. If this value is set to “Modify”,the laminate named by the input value material_name will be modified.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
mat_create_lam2(material_name,material_descrip,stack_sequence,ply_names,thicks,orients,num_names,offset_string,action)
##########
Description:
This function will create or modify a laminated composite material in the database given the stacking sequence.
Input:
STRING material_name[32] This value specifies the name of the laminate to be created.
STRING material_descrip[] This value specifies the material description.
INTEGER stack_sequence This value specifies the stacking sequence convention: 1=Total; 2=Symmetric; 3=Symmetric/Mid-Ply; 4=Anti-Symmetric; and 5=Anti-Symmetric/Mid-Ply.
STRING ply_names[32](num_names)
This value specifies an array of ply material names for a laminate with the number of plies specified by the input value num_names. If the input value stack_sequence is set to 2 or 4,only the first (num_names)/2 ply material names need to be specified. If the input value stack_sequence is set to 3 or 5,then only the (num_names+1)/2 ply material names need to be specified.
STRING thicks(num_names)This value specifies the ply thicknesses for a laminate with the number of plies specified by the input value num_names. If the input value stack_sequence is set to 2 or 4,only the first (num_names)/2 ply material names need to be specified. If the input value stack_sequence is set to 3 or 5,then only the (num_names+1)/2 ply material names need to be specified.
STRING orients(num_names)This value specifies the ply orientations for a laminate with the number of plies specified by the input value num_names. If the input value stack_sequence is set to 2 or 4,only the first (num_names)/2 ply material names need to be specified. If the input value stack_sequence is set to 3 or 5,then only the (num_names+1)/2 ply material names need to be specified.
INTEGER num_names This value specifies the number of offsets defined for the input values ply_names,thicks,and orients.
STRING offset_string[] This value specifies the list processor offset string.
STRING action[] This value specifies,when set to “Create,” that a new laminate be created. If this value is set to “Modify,” the laminate named by the input value material_name will be modified.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
mat_create_mix(material_name,material_descrip,phase_materials,volume_fractions,orientation_angles,action)
##########
Description:
This function will create or modify a rule of mixtures material in the database given the definition data,including constituent material names,volume fractions,and orientation angles.
Input:
STRING material_name[31] This value specifies the name of the rule of mixtures material to be created.
STRING material_descrip[] This value specifies the material description.
STRING phase_materials[] This value specifies a list processor string defining all of the materials comprising the different phases of the rule of mixtures material.
STRING volume_fractions[] This value specifies a list processor string defining the volume fractions for the different phases of materials. The number of volume fractions defined must equal the number of phase materials defined or the number of phase materials defined - 1. If the last volume fraction is not defined,it will be calculated internally on the assumptions that the sum of all of the volume fractions must be one.
STRING orientation_angles[] This value specifies a list processor string defining the orientation angles of each material phase. The number of orientation angles defined must be equal to 3 * the number of material phases defined. Each set of three space fixed rotation angles define a coordinate frame transformation from the composite material coordinate frame to the phase material coordinate frame.
STRING action[] This value specifies,when set to “Create”,that a new rule of mixtures material be created. If this value is set to “Modify”,the rule of mixtures material named by the input value material_name will be modified.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
mat_hal_create(material_name,material_descrip,option_number,fiber_volume_fract,matrix_volume_fract,theory,aspect_ratios,override,fudge_factors,fiber_name,matrix_name,action)
##########
Description:
This function will create or modify a Halpin-Tsai material in the database given the definition data,which include the option number,fiber and matrix volume fractions,fiber aspect ratios,and empirical factors.
Input:
STRING material_name[31] This value specifies the name of the halpin-tsai material to be created.
STRING material_descrip[] This value specifies the material description.
INTEGER option_number This value specifies the halpin-tsai option number indicating phase geometry: 1=continuous fiber; 2=discontinuous fiber; 3=continuous ribbon; 4=discontinuous ribbon; and 5=particulate.
REAL fiber_volume_fract This value specifies the fiber or particulate volume fraction.
REAL matrix_volume_fract This value specifies the matrix volume fraction. The input value fiber_volume_fract + the input value matrix_volume_fract must not exceed one.
INTEGER theory This value specifies the theory type: 1=new theory (GTT); and 2=old theory (NUTT). This value is used only when the input value option_number is set to 1.
STRING aspect_ratios[31]()This value specifies the fiber aspect ratios: if the input value option_number=2 then use length/diameter; if the input value option_number=3 then use width/thickness; and if the input value option_number=4 then use length/thickness and width/thickness.
LOGICAL override If this value is set to TRUE,then use the empirical factors in the input value fudge_factors. If this value is set to “FALSE” do not use the input value fudge_factors.
STRING fudge_factors[31]()This value specifies the empirical factors tailored to the material geometry. These depend on the input value option_number and correspond to the empirical factors given on the form for each Halpin-Tsai option.
STRING fiber_name[] This value specifies the name of the fiber or particulate material.
STRING matrix_name[] This value specifies the name of the matrix material.
STRING action[] This value specifies,when set to “Create”,that a new material be created. If this value is set to “Modify”,the material named by the input value material_name will be modified.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
mat_sfc_create(material_name,material_descrip,option_number,mean_angle_theta,mean_angle_phi,stand_dev_theta,stand_dev_phi,correlation_coef,num_iterations,uni_mat_name,action)
##########
Description:
This function will create or modify a short fiber composite material in the database given the definition data,which consist of a unidirectional two-phase material with statistical parameters.
Input:
STRING material_name[31] This value specifies the name of the short fiber composite to be created.
STRING material_descrip[] This value specifies the material description.
INTEGER option_number This value specifies the dimensionality of fiber variation: if the input value option_number=1 then use 1-dimensional variation; and if the input value option_number=2 then use 2-dimensional variation.
REAL mean_angle_theta This value specifies the first mean orientation angle
REAL mean_angle_phi This value specifies the second mean orientation angle
REAL stand_dev_theta This value specifies the standard deviation with respect to
REAL stand_dev_phi This value specifies the standard deviation with respect to
REAL correlation_coef This value specifies the correlation coefficient. This value is not used if the input value option_number is set to 1.
INTEGER num_iterations This value specifies the number of monte carlo iterations.
STRING uni_mat_name[] This value specifies the unidirectional two-phase material name.
STRING action[] This value specifies,when set to “Create”,that a new material be created. If this value is set to “Modify”,the material named by the input value material_name will be modified.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
material.modify_global(mat_names,only_if_exists,cat_id,con_mod_id,prop_words_to_change,value_string,action,msg_level)
##########
Description:
This function will set/modify the value for one or more values for one or more materials.
Input:
STRING[]()mat_names String array containing existing material names whose values are to be modified. If mat_names is input as a single element array with an empty string (ie. "[""]"),ALL materials will be processed.
LOGICAL only_if_exists Logical flag that controls whether a material value will be created if the value does not currently exist in the material. If TRUE,the value will only be set if the value exists.
INTEGER cat_id Material category id: 		Isotropic = 1 		Orthotropic = 2 		Anisotropic = 3 		2D Anisotropic = 4 		2D Orthotropic = 5 		Composite = 6 It is best to use the form to find the id for your specific case,as these are code dependent.
INTEGER con_mod_id Material constitutive model ID. 		Elastic = 1 		Nonlinear Elastic = 2 		Plastic = 3 It is best to use the form to find the id for your specific case,as these are code dependent.
STRING[] prop_words_to_change integer array with material property word ids to change. If this is a laminate offset,the id is 0.
STRING[] action String containing the operation to be performed. Currently supported operations are: "=" = Set Equal To "D" = Delete "+" = Add "-" = Subtract "*" = Multiply "/" = Divide The add,subtract,multiply and divide actions may only be performed if a property value already exists.
STRING[] msg_level String flag to control message display. Currently supported values are: "" or "None" = No messages "Error"			 = Error only "Warn" = Error + Warning "Info"			 = All
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
materials_compress(nFrom,fromNames,nTo,toNames,nSigDigits,deleteComp,nCompress,compressNames)
##########
Description:
Compress the list of material names. compress means to find duplicates and merge them while replacing references.
Input:
INTEGER nFrom Number of names in fromNames.
STRING[ ]()fromNames List of from material names.
INTEGER nTo Number of names in toNames.
STRING[ ]()toNames List of to material names.
INTEGER nSigDigits Number of significant digits to use when comparing real numbers.
LOGICAL deleteComp Flag whether to delete duplicates. TRUE=delete,FALSE=do not delete
Output:
INTEGER nCompress Number of materials compressed.
STRING[ ]()compressToNames List of material names compressed to. This list corresponds to fromNames. If compressToNames(1)is non-blank,it contains the name that fromNames(1)compressed to. Caller must allocate same size array as fromNames.
INTEGER <Return Value> 0=success,other=error
---------------
arbitrary_read_file(filename,npoints,nloops,points,nploop,srp)
##########
Description:
Function to read boundary points and stress recovery points of an arbitrary section in a given file,and load the points into the spreadsheet in the Beam Library form.
Input:
STRING filename The name of a file listing the boundary points of an arbitrary beam section (in X,Y coordinates,one point per line)followed by the stress recovery points (in point indexes.)
Output:
INTEGER npoints Total number of points.
INTEGER nloops Total number of boundary loops.
REAL points (VIRTUAL)X,Y coordinates of all loop points.
INTEGER nploop (VIRTUAL)Number of points on each boundary loop.
INTEGER srp (VIRTUAL)Stress recovery point based on the indexes of the points array.
---------------
arbitrary_section_create(section_name,npoints,nloops,points,nploop,srp)
##########
Description:
Creates a new arbitrary shape beam section with the given section name,boundary loops and stress recovery points.
Input:
STRING section_name[31] Section name.
INTEGER npoints Total number of points.
INTEGER nloops Total number of boundary loops.
REAL points(npoints,2)X,Y coordinates of all loop points.
INTEGER nploop(nloops)Number of points on each boundary loop.
INTEGER srp(4)Stress recovery point based on the indexes of the points array.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 Invalid total number of points.
2 The number of loops is outside the valid range of 1 - 8.
3 Invalid number of points is found in a loop. (Fewer than 3 or greater than 150.)
7 Invalid license.
13000025 Duplicate name.
13000210 The system is out of virtual memory.
13000211 Virtual memory has been exhausted.
29002040 Beam Section %A% already exists. Do you wish to overwrite?
29002042 Beam Section Name is blank. Input a Beam Section Name.
---------------
arbitrary_section_display(section_name,option,npoints,nloops,points,nploop,srp)
##########
Description:
Function to create a display of an arbitrary section in a graphic viewport. It plots the geometry of the section,and depending on the given option,it calculates and displays the properties of the arbitrary section.
Input:
STRING section_name[] The name of an arbitrary section to be displayed.
STRING option[] = "boundary" if only the boundary loops and points to be displayed.= "properties" if section properties to be calculated and displayed with the boundary.
INTEGER npoints Total number of points.
INTEGER nloops Total number of boundary loops.
REAL points(npoints,2)X,Y coordinates of all loop points.
INTEGER nploop(nloops)Number of points on each boundary loop.
INTEGER srp(4)Stress recovery point based on the indexes of the points array.
Output:
None.
---------------
arbitrary_section_modify(old_name,new_name,npoints,nloops,points,nploop,srp)
##########
Description:
Modifies an existing arbitrary shape beam section with the given section name,boundary loops and stress recovery points.
Input:
STRING old_name[31] The name of an existing section to be modified.
STRING new_name[31] The new section name to be used.
INTEGER npoints Total number of points.
INTEGER nloops Total number of boundary loops.
REAL points(npoints,2)X,Y coordinates of all loop points.
INTEGER nploop(nloops)Number of points on each boundary loop.
INTEGER srp(4)Stress recovery point based on the indexes of the points array.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 Invalid total number of points.
2 The number of loops is outside the valid range of 1 - 8.
3 Invalid number of points is found in a loop. (Fewer than 3 or greater than 150.)
7 Invalid license.
13000210 The system is out of virtual memory.
13000211 Virtual memory has been exhausted.
29002042 Beam Section Name is blank. Input a Beam Section Name.
---------------
arbitrary_section_report(section_name,npoints,nloops,points,nploop,srp)
##########
Description:
Write section properties and the information of loops and points for an arbitrary section to the report file.
Input:
STRING section_name[] Section name.
INTEGER npoints Total number of points.
INTEGER nloops Total number of boundary loops.
REAL points(npoints,2)X,Y coordinates of all loop points.
INTEGER nploop(nloops)Number of points on each boundary loop.
INTEGER srp(4)Stress recovery point based on the indexes of the points array.
Output:
None
---------------
arbitrary_select_surface(surface_picklist,curv_factor,transl,npoints,nloops,points,nploop)
##########
Description:
Function to find the sampling points on the boundary of the given surface and load the points into the spreadsheet.
Input:
STRING surface_picklist Picklist of a surface on which the boundary points to be found and loaded to the spreadsheet.
REAL curv_factor Maximum curvature error (.01 <= h/L <= .25)allowed for sampling points on a curved edge.
LOGICAL transl Whether or not to translate the boundary points so that the first point of the first loop coincides with the origin.
Output:
INTEGER npoints Total number of points.
INTEGER nloops Total number of boundary loops.
REAL points(VIRTUAL)X,Y coordinates of all loop points.
INTEGER nploop(VIRTUAL)Number of points on each boundary loop.
Error Conditions:
1 Surface selected is meshed and cannot be processed.
2 Property evaluation fails.
3 The number of points found on a loop exceeds 150.
29001001 Unable to allocate the necessary memory.
29002060 An error occurred while computing Beam Section properties. Check the boundary.
29002056 An error occurred while computing Beam Section properties. Check dimensions.
---------------
beam_section_create(beam_name,beam_shape,beam_data)
##########
Description:
This function creates a new beam section with the given name,shape,and a list of dimensions.
Input:
STRING beam_name[31] This value specifies the name of the beam section to be created.
STRING beam_shape[8] This value specifies the shape name of the beam section. See the remarks below for more information.
STRING beam_data[31]()This value specifies the data defining the dimensions of the beam.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000025 Duplicate name
13000121 The property value requested was not found
13000210 The system is out of virtual memory.
13000211 Virtual memory has been exhausted.
29002040 Beam Section %A% already exists. Do you wish to overwrite?
29002042 Beam Section Name is blank. Input a Beam Section Name.
29002043 Beam Section Type %A% Invalid.
29002044 Wrong number of Beam Section Dimensions Input.
29002046 Invalid Beam Section Dimension %A%.
29003007 Section %A% associated with Element Property data and is not deleted.
30001101 Field %A% does not exist.
---------------
beam_section_delete(beam_name)
##########
Description:
This function deletes a list of beam sections.
Input:
STRING beam_name[31]()This value specifies the names of the beams to be deleted.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000121 The property value requested was not found
13000210 The system is out of virtual memory.
13000213 A database lookup failed to locate the target index key.
29003007 Section %A% associated with Element Property data and is not deleted.
---------------
beam_section_display(beam_shape,beam_name,beam_data,ent_or_loc,ent_loc_data,field_location)
##########
Description:
This function calculates the beam cross section properties,and displays the beam cross section and its properties in a graphic viewport.
Input:
STRING beam_shape[] This value specifies the shape name of the beam section. See the remarks below for more information.
STRING beam_name[] This value specifies the name of the beam section to be written.
STRING beam_data[]()This value specifies a string array of dimensions in order of the labels shown on the beam library form. Strings of real numbers and field names prefixed by “f:” are allowed.
STRING ent_or_loc[] This value specifies,if the input value beam_data contains any fields,that the field data be evaluated as a geometric entity when this value is set to “ENTITY” or that the field data will be evaluated at XYX coordinates when this value is set to “COORD”.
STRING ent_loc_data[] This value specifies the geometric entity or XYZ coordinate information if the input value beam_data contains any fields.
REAL field_location This value specifies the parametric location at which fields are evaluated. This value is used only if the input value beam_data contains any fields and the input value ent_or_loc is set to “ENTITY”. This value must be equal to or greater than 0 and equal to or less than 1.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function can return error values which have no association with an error message.
---------------
beam_section_modify(beam_name,new_name,beam_shape,beam_data)
##########
Description:
This function modifies an existing beam section by replacing its name,shape,and dimensions.
Input:
STRING beam_name[31] This value specifies the name of the beam section to be modified.
STRING new_name[31] This value specifies the new name of the beam section.
STRING beam_shape[31] This value specifies the shape name of the beam section. See the remarks below for more information.
STRING beam_data[31]()This value specifies the data defining the dimensions of the beam.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000025 Duplicate name
13000211 Virtual memory has been exhausted.
13000213 A database lookup failed to locate the target index key.
29002042 Beam Section Name is blank. Input a Beam Section Name.
29002043 Beam Section Type %A% Invalid.
29002044 Wrong number of Beam Section Dimensions Input.
29002046 Invalid Beam Section Dimension %A%.
30001101 Field %A% does not exist.
---------------
beam_section_report(beam_shape,beam_name,beam_data,ent_or_loc,ent_loc_data,field_location)
##########
Description:
This function writes the given information of a beam section and the calculated section properties to the report file.
Input:
STRING beam_shape[] This value specifies the shape name of the beam section. See the remarks below for more information.
STRING beam_name[] This value specifies the name of the beam section to be written.
STRING beam_data[]()This value specifies the data defining the dimensions of the beam.
STRING ent_or_loc[] This value specifies,if the input value beam_data contains any fields,that the field data be evaluated as a geometric entity when this value is set to “ENTITY” or that the field data will be evaluated at XYX coordinates when this value is set to “COORD”.
STRING ent_loc_data[] This value specifies the geometric entity or XYZ coordinate information if the input value beam_data contains any fields.
REAL field_location This value specifies the parametric location at which fields are evaluated. This value is used only if the input value beam_data contains any fields and the input value ent_or_loc is set to “ENTITY”. This value must be equal to or greater than 0 and equal to or less than 1.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
bl_get_arb_beam_section_data(id,points,nploop,srp)
##########
Description:
Function to find the X,Y coordinates of the boundary points,the numbers of points on each loop,and the stress recovery points with the given database section ID.
Input:
INTEGER id The database ID of an existing arbitrary section.
Output:
REAL points(npoints,2)X,Y coordinates of all boundary points in sequence.
INTEGER nploop(nloops)Number of points on each boundary loop.
INTEGER srp(4)Stress recovery points using the indexes in the points array.
Return:
INTEGER status The status from database function calls (OK = 0).
---------------
bl_get_arb_num_points_loops(id,npoints,nloops)
##########
Description:
Function to find the number of points and the number of loops with the given section ID.
Input:
INTEGER id The database ID of an existing arbitrary section.
Output:
INTEGER npoints The total number of boundary points of the arbitrary section.
INTEGER nloops The number of boundary loops of the arbitrary section.
Return:
INTEGER status The status from database function calls (OK = 0).
---------------
blgetcentersarby(entyp,prop,centroid,shear)
##########
Description:
This function finds the coordinates of the shear center of an arbitrary section with the given section properties and centroid coordinates.
Input:
INTEGER entyp Entity type =1 for PBAR,=2 for PBEAM.
REAL prop (30)Section properties calculated in the order of the property fields in the MSC Nastran entries.
REAL centroid (2)X,Y coordinates of the centroid.
Output:
REAL shear (2)X,Y coordinates of the shear center of the arbitrary section.
---------------
blgetperimarby(np,points,perim)
##########
Description:
Function to calculate the exterior perimeter of an arbitrary section.
Input:
INTEGER np The number of points on the outer loop (Loop 1.)
REAL points (np,2)X,Y coordinates of all boundary points in sequence.
Output:
REAL perim The exterior perimeter of the arbitrary section.
---------------
blgetproparbyCheck(entyp,npoints,nloops,points,nploop,srp,prop,nprop,centroid)
##########
Description:
Function to compute the sectional properties for a given arbitrary section boundary defined by a number of loops each containing a series of points. This function requires a license for the beam evaluator. If a license is not available,it will return a value of 7,and display a message.
Input:
INTEGER entyp Entity type =1 for PBAR,=2 for PBEAM.
INTEGER npoints Number of total boundary points.
INTEGER nloops Number of boundary loops.
REAL points(npoints,2)X,Y coordinates of all boundary points in sequence.
INTEGER nploop(nloops)Number of points on each boundary loop.
INTEGER srp(4)Stress recovery points using the indexes in the points array.
Output:
REAL prop (30)Section properties calculated in the order of the property fields in the MSC Nastran entries. (See below)
INTEGER nprop The number of valid properties in the prop array.
REAL centroid (2)XY coordinates of the centroid.
Return:
INTEGER status 0 - OK 1,2,3 - invalid section 5 - invalid entyp 6 - zero area7 - No license
---------------
cline_section_create(section_name,numbranches,bbx,bby,xloc,yloc,Tb,Te,bdx,bdy,edx,edy,slen,srp,ndiv,arctol)
##########
Description:
Create a centerline section with the given section name and branch information.
Input:
STRING section_name Section name
INTEGER numbranches Number of branches "n".
REAL bbx Beginning x point.
REAL bby Beginning y point.
REAL(n)xloc Ending x points for each branch.
REAL(n)yloc Ending y points for each branch.
REAL(n)Tb Beginning thicknesses for each branch.
REAL(n)Te Ending thicknesses for each branch.
REAL(n)bdx Beginning x slopes for each branch.
REAL(n)bdy Beginning y slopes for each branch.
REAL(n)edx Ending x slopes for each branch.
REAL(n)edy Ending y slopes for each branch.
REAL(n)slen Arc lengths for each branch.
INTEGER(4)srp Stress Recovery points.
INTEGER(n)ndiv # Division
REAL arctol Max Chordal deviation for curved sections.
Output:
None.
---------------
medr_create_field(field_name,area_name,variable,skip_lines,switch,file_name)
##########
Description:
Function to read raw experimental data points from a data file and load the points into a Patran field (of type material
Input:
STRING field_name Name of the field to be created.
STRING area_name Name of the field to be created containing area/volume vs independent variable. See remarks below.
STRING variable The independent variable name. “e”=Strain,“t”=Time,“T”=Temperature,“f”=Frequency,“er”=Strain Rate
INTEGER skip_lines Number of header lines to skip in the raw data file (number greater than or equal to zero).
INTEGER switch Switch the independent variable column (default should be 0; or set to 1 to switch columns).
STRING file_name The file name containing the raw data.
Output:
None
---------------
medr_init()
##########
Description:
Initializes the experimental data fitting tool. The functions should be called before each data fitting is done.
Input:
None
Output:
None
---------------
medr_exit()
##########
Description:
This routine deteles the XY Window and associated curves and cleans up the memory and should be called when done with the Experimental Data Fitting tool.
Input:
None
Output:
None
---------------
medr_disconnect()
##########
Description:
This routine diconnects from the Expimental Data Fitting’s dynamically shared library.
Input:
None
Output:
None
---------------
medr_deleteplot()
##########
Description:
This routine deletes the XY Window and curves in the Experimental Data Fitting XY Window.
Input:
None
Output:
None
---------------
medr_setfields(model_type,test_data,field_names,num_terms)
##########
Description:
Function to set the curve fitting model (e.g.,Neohookean),which test data to use in the curve fit,the name of the fields containing the test data,and the number of terms to use for series expression fits (e.g.,Ogden). This data must be set prior to performing the curve fit.
Input:
INTEGER model_type 0=Neohookean,1=Mooney(2),2=Mooney(3),3=Signorini,4=2nd Order Invariant,5=3rd Order Deformation,6=Yeoh,7=Ogden,8=Foam,9=Arruda-Boyce,11=Gent,15=Visco Shear Relax,16=Visco Bulk Relax,17=Visco Energy Relax
INTEGER test_data 0=All,1=Uniaxial,2=Biaxial,3=Planar Shear,4=Simple Shear,5=Volumetric. (Ignored for Viscoelastic.)
STRING(8)field_names An array of 8 field names. Field1=Uniaxial,Field2=Biaxial,Field3=Planar Shear,Field4=Simple Shear,Field5=Volumetric,Field6=Viscoelastic,Field7/Field8=Not used. If area/volume reduction field exist,they are included by separating them by commas,e.g.,“uniaxial_C1,uniaxial_C2” Only those fields necessary for the calculation are required.
INTEGER num_terms The number of terms to calculate. This is only used for Ogden,Foam,and Viscoelastic curve fits. It is ignored for the others.
Output:
None.
---------------
medr_setoptions(uniaxial_type,biaxial_type,shear_type,math_checks,pos_coeff,extrapolate,left_bound,right_bound,error,error_limit,num_iterations,converge_tol,use_fictive,fictive_coeff,idamage)
##########
Description:
Sets the Experimental Data Fitting calculation options as done on the Optional Parameters button. Must be called before a data fit is performed.
Input:
INTEGER uniaxial_type Uniaxial reduction data is either A/Aooo
INTEGER biaxial_type Biaxial reduction data is either t/to (0)or V/Vo
INTEGER shear_type Planar shear reduction data is either t/to (0)or V/Voo
INTEGER math_checks Mathimatical checks are ON (1)or OFF (0). Default is OFF.
INTEGER pos_coeff Force calculation to produce positive coefficients (1). Default is OFF (0).
INTEGER extrapolate Perform extrapolation of the data: OFF (0),ON (1).
REAL left_bound Left bounds for extrapolation (default 0.0).
REAL right_bound Right bounds for extrapolation (default 0.0).
INTEGER error Error type: Relative=0,Absolute=1. Default is Relative.
REAL error_limit Error limit: default=0.001.
INTEGER num_iterations Number of iterations: default=20.
REAL converge_tol Convergence tolerance: default=1.0e-6.
INTEGER use_fictive Use fictive coefficients: OFF (0),ON(1). Default is OFF.
REAL fictive_coeff Fictive coefficient: default=0.0. Used in Foam fit only.
INTEGER idamage Not used.
Output:
None
---------------
medr_plotfit(append,num_vals,c1,c2,c3,def_modes)
##########
Description:
This routine plots the raw Experimental Data Fitting data and its calculated coefficients and all other deformation modes requested. Must be called after exp_data_fitting.get_coeffs()
Input:
INTEGER append Flag to continue to append new plots to existing XY Window. Default=1 (append). Do not append=0.
INTEGER(3)num_vals Array of three values corresponding to the number of valid values in arrays c1,c2,and c2. These values are displayed in the Coefficients spreadsheet in the GUI.
REAL(10)c1 Calculated Mooney-Rivilin coefficients for model_types 0-6. Calculated shear moduli for Ogden and Foam. n k theta & N for Arruda-Boyce. E & I-m for Gent. Linear terms for Viscoelastic.
REAL(10)c2 Calculated exponents for Ogden. Deviatoric exponents for Foam. Relaxation times for Viscoelastic.
REAL(10)c3 Volmetric exponents for Foam,long & short term values for Viscoelastic.
INTEGER def_modes Number to indicate deformation modes to plot. 1=uniaxial,2=biaxial,4=planar shear,8=simple shear,16=volumetric,32=viscoelastic. Combination can be plotted by adding the respective values together.
Output:
None
---------------
medr_postcurves(def_modes)
##########
Description:
This routine modifies a Experimental Data Fitting plot after a medr_plotfit()
Input:
INTEGER def_modes Number to indicate deformation modes to plot. 1=uniaxial,2=biaxial,4=planar shear,8=simple shear,16=volumetric,32=viscoelastic. Combination can be plotted by adding the respective values together.
Output:
None
---------------
medr_get_magic(num_magic,num_props,mat_model,model_type,cm_id,lid,prop_ids,prop_names,magic_ids,magic_names)
##########
Description:
This routine sets the material information for the desired material constitutive model.
Input:
INTEGER num_magic The maximum number of material magics (settings on the Material Input Properties form)for Hyperelastic or Viscoelastic materials. (num_magic=5)
INTEGER num_props The maximum number of property IDs (num_props=20).
Output:
STRING mat_model The material model name.
INTEGER model_type Experimental curve fitting model.
INTEGER cm_id Material constitutive model ID.
INTEGER lid Material linearity ID.
INTEGER(20)prop_ids Array of property IDs.
STRING(20)prop_names Array of property names.
INTEGER(num_magic)magic_ids Array of material magic IDs.
STRING(num_magic)magic_names Array of material magic names.
---------------
exp_data_fitting.calculate()
##########
Description:
Does the actual Experimental Data Fitting calculations to determine the coefficients,bulk modulus and corresponding error.
Input:
None
Output:
None
---------------
exp_data_fitting.get_coeffs(model_type,num_vals,c1,c2,c3,ntrm)
##########
Description:
This function gets the coefficients of an Experimental Data Fitting calculation. Must be called after exp_data_fitting.calculate()medr_plotfit()
Input:
None
Output:
INTEGER model_type 0=Neohookean,1=Mooney(2),2=Mooney(3),3=Signorini,4=2nd Order Invariant,5=3rd Order Deformation,6=Yeoh,7=Ogden,8=Foam,9=Arruda-Boyce,11=Gent,15=Visco Shear Relax,16=Visco Bulk Relax,17=Visco Energy Relax
INTEGER(3)num_vals Array of three values corresponding to the number of valid values in arrays c1,c2,and c2. These values are displayed in the Coefficients spreadsheet in the GUI.
REAL(10)c1 Calculated Mooney-Rivilin coefficients for model_types 0-6. Calculated shear moduli for Ogden and Foam. n k theta & N for Arruda-Boyce. E & I-m for Gent. Linear terms for Viscoelastic.
REAL(10)c2 Calculated exponents for Ogden. Deviatoric exponents for Foam. Relaxation times for Viscoelastic.
REAL(10)c3 Volmetric exponents for Foam,long & short term values for Viscoelastic.
INTEGER ntrm Number of terms for an Ogden or Foam fit.
---------------
exp_data_fitting.set_props(model_type,num_vals,c1,c2,c3,nvprops,props)
##########
Description:
This routine sets the property values obtained from the curve fit for subsequently saving as a constitutive material model.
Input:
INTEGER model_type 0=Neohookean,1=Mooney(2),2=Mooney(3),3=Signorini,4=2nd Order Invariant,5=3rd Order Deformation,6=Yeoh,7=Ogden,8=Foam,9=Arruda-Boyce,11=Gent,15=Visco Shear Relax,16=Visco Bulk Relax,17=Visco Energy Relax
INTEGER(3)num_vals Array of three values corresponding to the number of valid values in arrays c1,c2,and c2. These values are displayed in the Coefficients spreadsheet in the GUI.
REAL(10)c1 Calculated Mooney-Rivilin coefficients for model_types 0-6. Calculated shear moduli for Ogden and Foam. n k theta & N for Arruda-Boyce. E & I-m for Gent. Linear terms for Viscoelastic.
REAL(10)c2 Calculated exponents for Ogden. Deviatoric exponents for Foam. Relaxation times for Viscoelastic.
REAL(10)c3 Volmetric exponents for Foam,long & short term values for Viscoelastic.
INTEGER nvprops Number of valid properties.
STRING(20)props 32 character property names.
Output:
None
---------------
exp_data_fitting.set_extra_props(model_type,nvprops,prop_ids,prop_names,props)
##########
Description:
This routine sets additional property values required for Viscoelastic material models for subsequently saving as a constitutive material model. It is called for all material data fitting modules for consistency.
Input:
INTEGER model_type 0=Neohookean,1=Mooney(2),2=Mooney(3),3=Signorini,4=2nd Order Invariant,5=3rd Order Deformation,6=Yeoh,7=Ogden,8=Foam,9=Arruda-Boyce,11=Gent,15=Visco Shear Relax,16=Visco Bulk Relax,17=Visco Energy Relax
INTEGER nvprops Number of valid properties.
INTEGER(20)prop_ids Array of property IDs.
STRING(20)prop_names Array of property names.
STRING(20)props 32 character property names.
Output:
None
---------------
exp_data_fitting.material_exists(material_name,mat_exisits,mid)
##########
Description:
This function checks for the existence of the given material name and returns the material ID if it exists.
Input:
STRING material_name Name of the material to check for existence.
Output:
INTEGER mat_exisits Material exists if returns zero.
INTEGER mid Returned material ID.
---------------
elementprops_create(prop_name,elem_type_id,geo_opt_id,con_opt_id,for_opt_id,lam_opt_id,dof_opt_id,property_ids,property_types,property_data,app_region)
##########
Description:
This function creates an element property set.
Input:
STRING prop_name[31] This value specifies the name of the property set to be created.
INTEGER elem_type_id This value specifies the element type ID.
INTEGER geo_opt_id This value specifies the geometric option ID.
INTEGER con_opt_id This value specifies the condensation option ID.
INTEGER for_opt_id This value specifies the formulation option ID.
INTEGER lam_opt_id This value specifies the laminate option ID.
INTEGER dof_opt_id This value specifies the degree of freedom option ID.
INTEGER property_ids()This value specifies the property ID list.
INTEGER property_types()This value specifies the property data type list.
STRING property_data[256]()
This value specifies the property data.
STRING app_region[] This value specifies the application region.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
8107002 Last command aborted
13000004 Duplicate entry exists in table
13000020 Node not found
13000021 Element not found
13000022 Geometric entity not found
13000032 Point not found
13000041 Element not found
13000089 No default value found
13000090 Analysis code input was not found
13000091 Analysis type input was not found
13000097 Curve input was not found
13000098 Solid input was not found
13000119 The region specified in the query was not found
13000122 The surface requested was not found
13000125 The property entered does not exist.
13000127 The field entered does not exist.
13000184 The field is in use and cannot be deleted.
14000002 LpEval: Unknown evaluation method
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter
14000014 LpSublistNext: Attempt to proceed past last sublist in current list
14000015 LpSublistNext: End of current list has been reached
14000308 LpEval: Memory exhausted preparing to evaluate pick
29001001 Unable to allocate the necessary memory.
29002007 The data entered for Property %A% cannot be parsed. %A%
29002008 The data entered for Property %A% is invalid. %A%
29002009 Property %A% requires a Spatial Scalar field. %A%
29002010 Property %A% requires a Spatial Vector field. %A%
29002011 A value for Property %A% must be entered. %A%
29002012 The data form for Property %A% is invalid. %A%
29002013 The data form for Property %A% is not recognized by the system. %A%
29002014 The material specified for property %A% is invalid. %A%
29002016 The value of property %A% is not in the valid range. %A%
29002025 The material specified for property %A% has an invalid Constitutive model activated. %A%
29002026 The material specified for property %A% has an invalid Directionality for this element type. %A%
29002037 The material specified for property %A% must be a laminate. %A%
29002038 Beam Section %A% not found.
29003001 Property Set %A% cannot be deleted.
29003002 The property set already exists.
29006003 The Property Set Name %A% is invalid.
---------------
elementprops_compress(nitems,compress_names,n_sig,combineDfem,del_comp,n_compressed,c_names)
##########
Description:
Compress the list of property names. Compress means to find duplicates and merge them while replacing references.
Input:
INTEGER nitems Number properties selected.
STRING[32]()compress_names Array of property names selected (size = nitems)
INTEGER n_sig Number of signicant digits for REAL property comparision purposes.
LOGICAL combineDfem Flag whether to combine discrete fem fields referenced by properties. TRUE=combine,FALSE=do not combine.
LOGICAL deleteComp Flag whether to delete duplicates. TRUE=delete,FALSE=do not delete.
Output:
INTEGER nCompressed Number of actual properties compressed.
STRING[ 32]()n_compressed c_names Names of properties actually compressed
INTEGER <Return Value> 0=success,other=error
---------------
elementprops_delete(prop_name)
##########
Description:
This function deletes a list of element property sets.
Input:
STRING prop_name[31]()This value specifies the names of the element property sets to be deleted.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
elementprops_expand(opt_flags,name_mod,nselected,selected)
##########
Description:
Expand the property name(s). Expand means to create an individual property per element in the application region.
Input:
INTEGER opt_flags 1 = do not delete original property set(s); use default property name: PropName.ElemID 17 = delete original property set(s); use default property name: PropName.ElemID 2 = do not delete original proprety set(2); use Prefix on new property names: Prefix.PropName.ElemID 18 = delete original property set(s); use Prefix on new property names: Prefix.PropName.ElemID 4 = do not delete original proprety set(2); use Suffix on new property names:PropName.ElemID.Suffix 20 = delete original property set(s); use Prefix on new property names: PropName.ElemID.Suffix
STRING name_mod[32] Prefix/Suffix name when choosing to name new property set(s),e.g.: Prefix.PropName.ElemID or PropName.ElemID.Suffix
INTEGER nselected The number of selected property sets to expand
STRING selected[32](nselected)
String array of the names of the selectect property sets to expand
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
elementprops_modify(prop_name,new_name,elem_type_id,geo_opt_id,con_opt_id,for_opt_id,lam_opt_id,dof_opt_id,property_ids,property_types,property_data,app_region)
##########
Description:
This function modifies an existing element property set.
Input:
STRING prop_name[31] This value specifies the name of the property set to be modified.
STRING new_name[31] This value specifies the new name of the property set.
INTEGER elem_type_id This value specifies the element type ID.
INTEGER geo_opt_id This value specifies the geometric option ID.
INTEGER con_opt_id This value specifies the condensation option ID.
INTEGER for_opt_id This value specifies the formulation option ID.
INTEGER lam_opt_id This value specifies the laminate option ID.
INTEGER dof_opt_id This value specifies the degree of freedom option ID.
INTEGER property_ids()This value specifies the property ID list.
INTEGER property_types()This value specifies the property data type list.
STRING property_data[256]()
This value specifies the property data.
STRING app_region[] This value specifies the application region.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
8107002 Last command aborted
13000004 Duplicate entry exists in table
13000020 Node not found
13000021 Element not found
13000022 Geometric entity not found
13000032 Point not found
13000041 Element not found
13000089 No default value found
13000090 Analysis code input was not found
13000091 Analysis type input was not found
13000097 Curve input was not found
13000098 Solid input was not found
13000119 The region specified in the query was not found
13000122 The surface requested was not found
13000125 The property entered does not exist.
13000127 The field entered does not exist.
13000184 The field is in use and cannot be deleted.
14000002 LpEval: Unknown evaluation method
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter
14000014 LpSublistNext: Attempt to proceed past last sublist in current list
14000015 LpSublistNext: End of current list has been reached
14000308 LpEval: Memory exhausted preparing to evaluate pick
29001001 Unable to allocate the necessary memory.
29002006 Property Set %A% Exists. Overwrite?
29002007 The data entered for Property %A% cannot be parsed. %A%
29002008 The data entered for Property %A% is invalid. %A%
29002009 Property %A% requires a Spatial Scalar field. %A%
29002010 Property %A% requires a Spatial Vector field. %A%
29002011 A value for Property %A% must be entered. %A%
29002012 The data form for Property %A% is invalid. %A%
29002013 The data form for Property %A% is not recognized by the system. %A%
29002014 The material specified for property %A% is invalid. %A%
29002016 The value of property %A% is not in the valid range. %A%
29002025 The material specified for property %A% has an invalid Constitutive model activated. %A%
29002026 The material specified for property %A% has an invalid Directionality for this element type. %A%
29002033 An error occurred while processing Property %A%. %A%
29002037 The material specified for property %A% must be a laminate. %A%
29002038 Beam Section %A% not found.
29006001 Property Set %A% does not exist and cannot be modified.
29006003 The Property Set Name %A% is invalid.
---------------
elementprops_modify_global(pset_names,only_if_exists,data_type_selected,prop_words_to_change,in_prop_string,action,msg_level)
##########
Description:
This function will set the value for one or more property words in pset_names to the value defined in prop_string.
Input:
STRING pset_names()String array containing existing property set names. Note that if this is an empty string,ALL property set names will be processed.
LOGICAL only_if_exists Controls whether a property value will be added if the value does not currently exist in the property set. Corresponds to the “Always Update Values” toggle in the GUI: TRUE = “Always Update Values” toggle OFF = property value can only be modified if already exists,otherwise an error message is issued. FALSE = “Always Update Values” toggle ON = property value will be added to property set if it does not already exist.
INTEGER data_type_selected Data type of the property value. Corresponds to the “Value Type” entry in the GUI. See list below.
INTEGER prop_words_to_change()
Property word IDs to change. In the GUI,the IDs are shown in brackets in the “Prop Value(s)to Change” listbox.
STRING in_prop_string String containing value to which property values will be set.
STRING action Operation to be performed. Corresponds to the “Action” dropdown in the GUI. Allowable string values are “=”,“D”,“+”,“-“,“*”,“/”
STRING msg_level Controls message display. “” or “None” = No message display“Error” = Error only“Warn” = Error & warning“Info” = All
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
List of data value types:
1 Real Scalar
2 Vector
3 Integer
4 String
5 Mat Prop Name
6 Real List
7 Element Nodal
8 Node ID
9 CID
10 Not used
11 Dimensions (for beam sections)
12 Properties (for beam sections)
13 Point XYZ List
---------------
elementprops_show(prop_name,display_type,group_names)
##########
Description:
This function displays the element property values.
Input:
STRING prop_name[31] This value specifies the name of the property to be displayed.
STRING display_type[31] This value specifies the form of the display: “Table”,“Marker Plot”,“Vector Plot”,or “Scalar Plot”.
STRING group_names[31]()
This value specifies a list of the group names to display on.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
8107002 Last command aborted
11000050 The group name is invalid.
11000098 A fatal error has occurred in the database. Database is corrupted.
11000105 The specified group was not found in the database.
11000143 The specified vector result table was not found.
13000008 Group not found
---------------
loadsbcs_create(lbc_name,lbc_type,lbc_category,target_element,load_case_type,ap_list,geo_filter,alt_coord_frame,lbc_scale_factor,static_data,dynamic_field_name)
##########
Description:
This function creates a new Load/BC set in the database.
Input:
STRING lbc_name[31] This value specifies the new Load/BC set name.
STRING lbc_type[66] This value specifies the Load/BC definition type. See the remarks below for more information.
STRING lbc_category[31] This value specifies the Load/BC category type: “Nodal”,“Element Uniform”,or “Element Variable”.
STRING target_element[31] This value specifies the target element type: ““,“1D”,“2D”,or “3D”.
STRING load_case_type[31] This value specifies the load case type and can be set to either “Static” or “Time Dependent”.
STRING ap_list[]()This value specifies the application region list by entity types and IDs.
STRING geo_filter[31] This value specifies the geometry filter: “Geometry” or “FEM”.
STRING alt_coord_frame[200] This value specifies the alternate coordinate frame in which Load/BCs are defined in.
REAL lbc_scale_factor This value specifies the Load/BC set scale factor.
STRING static_data[100](20)This value specifies static data values which could be real numbers or field names.
STRING dynamic_field_name[200](20)
This value specifies the dynamic field names.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
3001003 %A% is an invalid Load Case Type. Must be Static or Time Dependent.
13000085 Cursor not open
13000117 The query specified has completed
14000001 LpGetHeapSpace: Allocated heapspace is exhausted
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter
14000014 LpSublistNext: Attempt to proceed past last sublist in current list
14000015 LpSublistNext: End of current list has been reached
14000201 Invalid output string specified for call
26001010 Load/BC Definition %A% does not exist.
26002010 Load/BC Name is blank. Input a Load/BC Name.
26002011 Load/BC Name %A% is too long. Input 31 characters or less.
26002121 %I% is an invalid number of application regions for the specified Load/BC definition.
26002134 The list %A% contains FEM or unknown GEOmetric entities. All the entities in the application region(s)must be GEOmetric.
26002135 The list %A% contains GEOmetric or unknown FEM entities. All the entities in the application region(s)must be FEM.
26002136 %A% is an invalid Geometry Filter. Must be Geometry or FEM.
26002200 There was no data input for this Load/BC Set.
26002201 %I% is an invalid number of input data fields for the specified Load/BC definition.
26006001 Database error encountered: %I%. Call PDA Hotline.
---------------
loadsbcs_create2(lbc_name,lbc_type,lbc_category,target_element,load_case_type,ap_list,geo_filter,alt_coord_frame,str_lbc_scale_factor,static_data,dynamic_field_name)
##########
Description:
Evaluate the string variable str_lbc_scale_factor if it contains an unevaluated expression. Convert the scale factor to a real value. Call the loadsbcs_create function to create a new Load/BC set in the database.
Input:
STRING lbc_name[32] This value specifies the new Load/BC set name.
STRING lbc_type[66] This value specifies the Load/BC definition type. See the remarks below for more information.
STRING lbc_category[32] This value specifies the Load/BC category type: “Nodal”,“Element Uniform”,or “Element Variable”.
STRING target_element[32] This value specifies the target element type: ““,“1D”,“2D”,or “3D”.
STRING load_case_type[32] This value specifies the load case type and can be set to either “Static” or “Time Dependent”.
STRING ap_list[]()This value specifies the application region list by entity types and IDs.
STRING geo_filter[32] This value specifies the geometry filter: “Geometry” or “FEM”.
STRING alt_coord_frame[200] This value specifies the alternate coordinate frame in which Load/BCs are defined in.
STRING str_lbc_scale_factor [LBC_DATA_LEN]
This value specifies the Load/BC set scale factor expression as a string.
STRING static_data[100](20)This value specifies static data values which could be real numbers or field names.
STRING dynamic_field_name[200](20)
This value specifies the dynamic field names.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
3001003 %A% is an invalid Load Case Type. Must be Static or Time Dependent.
13000085 Cursor not open
13000117 The query specified has completed
14000001 LpGetHeapSpace: Allocated heapspace is exhausted
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter
14000014 LpSublistNext: Attempt to proceed past last sublist in current list
14000015 LpSublistNext: End of current list has been reached
14000201 Invalid output string specified for call
26001010 Load/BC Definition %A% does not exist.
26002010 Load/BC Name is blank. Input a Load/BC Name.
26002011 Load/BC Name %A% is too long. Input 31 characters or less.
26002121 %I% is an invalid number of application regions for the specified Load/BC definition.
26002134 The list %A% contains FEM or unknown GEOmetric entities. All the entities in the application region(s)must be GEOmetric.
26002135 The list %A% contains GEOmetric or unknown FEM entities. All the entities in the application region(s)must be FEM.
26002136 %A% is an invalid Geometry Filter. Must be Geometry or FEM.
26002200 There was no data input for this Load/BC Set.
26002201 %I% is an invalid number of input data fields for the specified Load/BC definition.
26006001 Database error encountered: %I%. Call PDA Hotline.
---------------
loadsbcs_create3(lbc_name,lbc_type,lbc_category,target_element,load_case_type,ap_list,geo_filter,alt_coord_frame,str_lbc_scale_factor,static_data,disp_vec,dynamic_field_name)
##########
Description:
Evaluate the string variable str_lbc_scale_factor if it contains an unevaluated expression. Convert the scale factor to a real value. Place the display vector argument,disp_vec,at the end of the static_data array. Call the loadsbcs_create function to create a new Load/BC set in the database.
Input:
STRING lbc_name[32] This value specifies the new Load/BC set name.
STRING lbc_type[66] This value specifies the Load/BC definition type. See the remarks below for more information.
STRING lbc_category[32] This value specifies the Load/BC category type: “Nodal”,“Element Uniform”,or “Element Variable”.
STRING target_element[32] This value specifies the target element type: ““,“1D”,“2D”,or “3D”.
STRING load_case_type[32] This value specifies the load case type and can be set to either “Static” or “Time Dependent”.
STRING ap_list[]()This value specifies the application region list by entity types and IDs.
STRING geo_filter[32] This value specifies the geometry filter: “Geometry” or “FEM”.
STRING alt_coord_frame[200] This value specifies the alternate coordinate frame in which Load/BCs are defined in.
STRING str_lbc_scale_factor [LBC_DATA_LEN]
This value specifies the Load/BC set scale factor as a string.
STRING static_data[100](20)This value specifies static data values which could be real numbers or field names.
STRING disp_vec[200] Computed display vector from the mscnastran lbc_nsth_inpt_dirc_flux class.
STRING dynamic_field_name[200](20)
This value specifies the dynamic field names.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
3001003 %A% is an invalid Load Case Type. Must be Static or Time Dependent.
13000085 Cursor not open
13000117 The query specified has completed
14000001 LpGetHeapSpace: Allocated heapspace is exhausted
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter
14000014 LpSublistNext: Attempt to proceed past last sublist in current list
14000015 LpSublistNext: End of current list has been reached
14000201 Invalid output string specified for call
26001010 Load/BC Definition %A% does not exist.
26002010 Load/BC Name is blank. Input a Load/BC Name.
26002011 Load/BC Name %A% is too long. Input 31 characters or less.
26002121 %I% is an invalid number of application regions for the specified Load/BC definition.
26002134 The list %A% contains FEM or unknown GEOmetric entities. All the entities in the application region(s)must be GEOmetric.
26002135 The list %A% contains GEOmetric or unknown FEM entities. All the entities in the application region(s)must be FEM.
26002136 %A% is an invalid Geometry Filter. Must be Geometry or FEM.
26002200 There was no data input for this Load/BC Set.
26002201 %I% is an invalid number of input data fields for the specified Load/BC definition.
26006001 Database error encountered: %I%. Call PDA Hotline.
---------------
loadsbcs_delete(lbc_name)
##########
Description:
This function deletes Load/BC sets from the database.
Input:
STRING lbc_name[31]()This value specifies the Load/BC set names to be deleted.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
13000103 No LBC was found
26003010 There are no Load/BC sets to delete.
26006001 Database error encountered: %I%. Call PDA Hotline.
26006004 Dynamic memory allocation error encountered.
26003040 Load/BC Set %A% does not exist.
26003050 %I% Load/BC Set(s)do not exist.
---------------
loadsbcs_modify(load_case_name,new_name,lbc_type,lbc_category,target_element,load_case_type,ap_list,geo_filter,alt_coord_frame,lbc_scale_factor,static_data,dynamic_field_name)
##########
Description:
This function modifies an existing Load/BC set in the database.
Input:
STRING load_case_name[31] This value specifies an existing Load/BC set name.
STRING new_name[31] This value specifies the new Load/BC set name.
STRING lbc_type[31] This value specifies the Load/BC definition type. See the remarks below for more information.
STRING lbc_category[31] This value specifies the Load/BC category type: “Nodal”,“Element Uniform”,or “Element Variable”.
STRING target_element[31] This value specifies the target element type: ““,“1D”,“2D”,or “3D”.
STRING load_case_type[31] This value specifies the load case type and can be set to either “Static” or “Time Dependent”.
STRING ap_list[]()This value specifies the application region list by entity types and IDs.
STRING geo_filter[31] This value specifies the geometry filter: “Geometry” or “FEM”.
STRING alt_coord_frame[200] This value specifies the alternate coordinate frame in which Load/BCs are defined in.
REAL lbc_scale_factor This value specifies the Load/BC set scale factor.
STRING static_data[100](10)This value specifies static data values which could be real numbers or field names.
STRING dynamic_field_name[200](10)
This value specifies the dynamic field names.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
3001003 %A% is an invalid Load Case Type. Must be Static or Time Dependent.
13000085 Cursor not open
13000103 No LBC was found
13000117 The query specified has completed
14000001 LpGetHeapSpace: Allocated heapspace is exhausted
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter
14000014 LpSublistNext: Attempt to proceed past last sublist in current list
14000015 LpSublistNext: End of current list has been reached
14000201 Invalid output string specified for call
26001010 Load/BC Definition %A% does not exist.
26002011 Load/BC Name %A% is too long. Input 31 characters or less.
26002030 %A% already exists. Modify not permitted.
26002121 %I% is an invalid number of application regions for the specified Load/BC definition.
26002134 The list %A% contains FEM or unknown GEOmetric entities. All the entities in the application region(s)must be GEOmetric.
26002135 The list %A% contains GEOmetric or unknown FEM entities. All the entities in the application region(s)must be FEM.
26002136 %A% is an invalid Geometry Filter. Must be Geometry or FEM.
26002200 There was no data input for this Load/BC Set.
26002201 %I% is an invalid number of input data fields for the specified Load/BC definition.
26002701 Load/BC set cannot be renamed to blank.
26002703 No existing Load/BC set is selected.
26006001 Database error encountered: %I%. Call PDA Hotline.
26006004 Dynamic memory allocation error encountered.
---------------
loadsbcs_modify2(load_case_name,new_name,lbc_type,lbc_category,target_element,load_case_type,ap_list,geo_filter,alt_coord_frame,str_lbc_scale_factor,static_data,dynamic_field_name)
##########
Description:
Convert the lbc scale factor from a string variable to a real value and call the loadsbcs_modify function which modifies an existing Load/BC set in the database.
Input:
STRING load_case_name[32] This value specifies an existing Load/BC set name.
STRING new_name[32] This value specifies the new Load/BC set name.
STRING lbc_type[32] This value specifies the Load/BC definition type. See the remarks below for more information.
STRING lbc_category[32] This value specifies the Load/BC category type: “Nodal”,“Element Uniform”,or “Element Variable”.
STRING target_element[32] This value specifies the target element type: ““,“1D”,“2D”,or “3D”.
STRING load_case_type[32] This value specifies the load case type and can be set to either “Static” or “Time Dependent”.
STRING ap_list[]()This value specifies the application region list by entity types and IDs.
STRING geo_filter[32] This value specifies the geometry filter: “Geometry” or “FEM”.
STRING alt_coord_frame[200] This value specifies the alternate coordinate frame in which Load/BCs are defined in.
STRING str_lbc_scale_factor[LBC_DATA_LEN]
This value specifies the Load/BC set scale factor as a string.
STRING static_data[100](10)This value specifies static data values which could be real numbers or field names.
STRING dynamic_field_name[200](10)
This value specifies the dynamic field names.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
3001003 %A% is an invalid Load Case Type. Must be Static or Time Dependent.
13000085 Cursor not open
13000103 No LBC was found
13000117 The query specified has completed
14000001 LpGetHeapSpace: Allocated heapspace is exhausted
14000003 LpSublistType: No sublist filter bits are set on invocation
14000004 LpSublistType: I am being invoked with a NULL list
14000005 LpSublistType: In the list being used,the current sublist has a nonatomic CAR
14000006 LpSublistType: In the list being used,the current geometry sublist is unclassifiable
14000007 LpSublistType: In the list being used,the current finite element sublist is unclassifiable
14000008 LpSublistType: In the list being used,the current token sublist is unclassifiable
14000009 LpSublistType: In the list being used,the current sublist is unclassifiable
14000010 LpSublistType: In the list being used,the current sublist does not match the sublist filter
14000014 LpSublistNext: Attempt to proceed past last sublist in current list
14000015 LpSublistNext: End of current list has been reached
14000201 Invalid output string specified for call
26001010 Load/BC Definition %A% does not exist.
26002011 Load/BC Name %A% is too long. Input 31 characters or less.
26002030 %A% already exists. Modify not permitted.
26002121 %I% is an invalid number of application regions for the specified Load/BC definition.
26002134 The list %A% contains FEM or unknown GEOmetric entities. All the entities in the application region(s)must be GEOmetric.
26002135 The list %A% contains GEOmetric or unknown FEM entities. All the entities in the application region(s)must be FEM.
26002136 %A% is an invalid Geometry Filter. Must be Geometry or FEM.
26002200 There was no data input for this Load/BC Set.
26002201 %I% is an invalid number of input data fields for the specified Load/BC definition.
26002701 Load/BC set cannot be renamed to blank.
26002703 No existing Load/BC set is selected.
26006001 Database error encountered: %I%. Call PDA Hotline.
26006004 Dynamic memory allocation error encountered.
---------------
loadsbcs_plot_contours(lbc_type,dynamic_value,data_variable,vector_component,lbc_name,group_names)
##########
Description:
This function displays contours of the selected data variable on the selected group for a Load/BC in the current load case.
Input:
STRING lbc_type[31] This value specifies the Load/BC definition type. See the remarks below for more information.
REAL dynamic_value If this is a dynamic Load/BC set,then this is the dynamic value (e.g. time)at which contours are desired.
STRING data_variable[31]()This value specifies the selected data variable. If the Load/BC definition type is “Displacement” then valid variable names are “Translations <T1 T2 T3>” or “Rotations <R1 R2 R3>”.
STRING vector_component[31]()
This value specifies the vector component: “Resultant”,“Component 1”,“Component 2”,or “Component 3”.
STRING lbc_name[31]()This value specifies the Load/BC set names in the current load case.
STRING group_names[31]()This value specifies the group names.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
loadsbcs_plot_markers(lbc_name,group_names)
##########
Description:
This function plots a graphical display of markers for the selected Load/BC sets in the current load case.
Input:
STRING lbc_name[31]()This value specifies the Load/BC set names in the current load case.
STRING group_names[31]()This value specifies the group names on which markers are to be plotted.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
---------------
loadsbcs_show(lbc_name)
##########
Description:
This function shows a tabular display of data for a selected Load/BC set on a spreadsheet,if the session is interactive.
Input:
STRING lbc_name[31] This value specifies the Load/BC set name in the current load case.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
-1 This is an internal status condition. There is no corresponding status message in the message database.
4510,-17,0X11E0 (The first two examples show positive and negative integer constants. In the third example,the prefix 0X indicates that 11E0 is a hexadecimal constant.)
---------------
xy_curve_delete(curve_name)
##########
Description:
This function deletes a curve.
Input:
STRING curve_name[31] This value specifies the name of the curve to be deleted.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_title_delete(title_name)
##########
Description:
This function deletes a title.
Input:
STRING title_name[256] This value specifies the name of the title to be deleted.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000100 There is no current title defined.
13000068 XY title not found
---------------
xy_window_rename(window_name,new_name)
##########
Description:
This function renames a xy window.
Input:
STRING window_name[31] This value specifies the current name of window.
STRING new_name[] This value specifies the new name to be assigned.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000700 The specified window name is invalid. Enter a window name that is less than 31 characters and that has no embedded blanks.
10000705 There is no current window specified.
13000004 Duplicate entry exists in table
13000063 XY window not found
---------------
xy_axis_assign_method_get(axis_name,method)
##########
Description:
This function gets the labels assignment method.
Input:
STRING axis_name[31] This value specifies the axis name.
Output:
STRING method[20] This value returns the labels assignment method for the specified axis. This value can return “automatic”,“manual”,“semiauto”,and “range”.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000012 Internal XY string lookup failure.
10000302 A current axis has not been defined.
13000064 XY axis not found
---------------
xy_axis_assign_method_set(axis_name,method)
##########
Description:
This function sets the labels assignment method.
Input:
STRING axis_name[31] This value specifies the axis name.
STRING method[20] This value specifies the label assignment method to be used for the specified axis. This value can be set to “automatic”,“manual”,“semiauto”,and “range”.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
10000307 The specified assignment method for the axis is invalid.
13000004 Duplicate entry exists in table
13000064 XY axis not found
13000214 No corresponding message available
---------------
xy_axis_color_get(axis_name,color_index)
##########
Description:
This function gets the axis color index.
Input:
STRING axis_name[31] This value specifies the axis name.
Output:
INTEGER color_index This value returns the color index for the specified axis.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
13000064 XY axis not found
---------------
xy_axis_color_set(axis_name,color_index)
##########
Description:
This function sets the axis color index.
Input:
STRING axis_name[31] This value specifies the axis name.
INTEGER color_index This value specifies the color index for the specified axis. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000010 The color index has returned an invalid value.
10000302 A current axis has not been defined.
13000004 Duplicate entry exists in table
13000064 XY axis not found
13000214 No corresponding message available
---------------
xy_axis_display_labels_get(axis_name,label_flag)
##########
Description:
This function gets the display labels flag.
Input:
STRING axis_name[31] This value specifies the axis name.
Output:
LOGICAL label_flag This value returns the display labels flag.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
13000064 XY axis not found
---------------
xy_axis_display_labels_set(axis_name,label_flag)
##########
Description:
This function sets the display labels flag.
Input:
STRING axis_name[31] This value specifies the axis name.
LOGICAL label_flag This value specifies the display labels flag.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
10000305 The specified axis display flag is invalid.
13000004 Duplicate entry exists in table
13000064 XY axis not found
13000214 No corresponding message available
---------------
xy_axis_display_title_get(axis_name,title_flag)
##########
Description:
This function gets the display title flag.
Input:
STRING axis_name[31] This value specifies the axis name.
Output:
LOGICAL title_flag This value returns the display title flag.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
13000064 XY axis not found
---------------
xy_axis_display_title_set(axis_name,title_flag)
##########
Description:
This function sets the display title flag.
Input:
STRING axis_name[31] This value specifies the axis name.
LOGICAL title_flag This value specifies the display title flag.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
13000004 Duplicate entry exists in table
13000064 XY axis not found
13000214 No corresponding message available
---------------
xy_axis_grid_display_get(axis_name,grid_type)
##########
Description:
This function gets the grid display type.
Input:
STRING axis_name[31] This value specifies the axis name.
Output:
STRING grid_type[31] This value returns the grid display type for the specified axis. The following values can be returned: “Primary”,“Secondary”,“PrimarySecondary”,“Both”,or “None”.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000012 Internal XY string lookup failure.
10000302 A current axis has not been defined.
13000064 XY axis not found
---------------
xy_axis_grid_display_set(axis_name,grid_type)
##########
Description:
This function sets the grid display type.
Input:
STRING axis_name[31] This value specifies the axis name.
STRING grid_type[31] This value specifies the grid display type for the specified axis. This value can be set to “Primary”,“Secondary”,“PrimarySecondary”,“Both”,or “None”.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
10000500 The specified display type for grid lines is invalid.
13000004 Duplicate entry exists in table
13000064 XY axis not found
13000214 No corresponding message available
---------------
xy_axis_grid_get(axis_name,prim_sec,curve_style,thickness,color_index)
##########
Description:
This function gets the grid line attributes.
Input:
STRING axis_name[31] This value specifies the axis name.
STRING prim_sec[31] This value specifies the primary or secondary grid line. This value can be set to “Primary”,“Secondary”,“PrimarySecondary”,or “Both”.
Output:
STRING curve_style[31] This value returns the grid line curve style. This value can return “Solid”,“Dotted”,“DotDash”,“ShortDash”,“LongDash”,or “OddDash”.
INTEGER thickness This value returns the grid line thickness.
INTEGER color_index This value returns the grid line color.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000012 Internal XY string lookup failure.
10000302 A current axis has not been defined.
13000064 XY axis not found
---------------
xy_axis_grid_set(axis_name,prim_sec,curve_style,thickness,color_index)
##########
Description:
This function sets the grid line attributes.
Input:
STRING axis_name[31] This value specifies the axis name.
STRING prim_sec[31] This value specifies the primary or secondary grid line. This value can be set to “Primary”,“Secondary”,“PrimarySecondary”,or “Both”.
STRING curve_style[31] This value specifies the grid line curve style. This value can be set to: “Solid”,“Dotted”,“DotDash”,“ShortDash”,“LongDash”,or “OddDash”.
INTEGER thickness This value specifies the grid line thickness. This value must be greater than 0 and less than 51.
INTEGER color_index This value specifies the grid line color. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000010 The color index has returned an invalid value.
10000013 Invalid option given to XY routine.
10000201 The specified line style is invalid. Please choose another from the option menu.
10000302 A current axis has not been defined.
10000501 The specified thickness for grid lines is invalid.
13000004 Duplicate entry exists in table
13000064 XY axis not found
13000214 No corresponding message available
---------------
xy_axis_label_color_get(axis_name,label_color)
##########
Description:
This function gets the label color index.
Input:
STRING axis_name[31] This value specifies the axis name.
Output:
INTEGER label_color This value returns the label color index for the specified axis.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
13000064 XY axis not found
---------------
xy_axis_label_color_set(axis_name,label_color)
##########
Description:
This function sets the label color index.
Input:
STRING axis_name[31] This value specifies the axis name
INTEGER label_color This value specifies the label color index for the specified axis. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000010 The color index has returned an invalid value.
10000302 A current axis has not been defined.
13000004 Duplicate entry exists in table
13000064 XY axis not found
13000214 No corresponding message available
---------------
xy_axis_label_format_get(axis_name,label_format)
##########
Description:
This function gets the label format value. (float,exponential,integer,power).
Input:
STRING axis_name[31] This value specifies the axis name.
Output:
STRING label_format[31] This value returns the label format for the specified axis. This value can return “Fixed”,“Exponential”,“Integer”,or “Power”.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000012 Internal XY string lookup failure.
10000302 A current axis has not been defined.
13000064 XY axis not found
---------------
xy_axis_label_format_set(axis_name,label_format)
##########
Description:
This function sets the label format (float,exponential,integer).
Input:
STRING axis_name[31] This value specifies the axis name.
STRING label_format[31] This value specifies the label format for the specified axis. This value can be set to: “Fixed”,“Exponential”,“Integer”,or “Power”.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
10000310 The specified label format for the axis is invalid.
13000004 Duplicate entry exists in table
13000064 XY axis not found
13000214 No corresponding message available
---------------
xy_axis_label_type_get(axis_name,label_type)
##########
Description:
This function gets the label type (linear/logarithm).
Input:
STRING axis_name[31] This value specifies the axis name.
Output:
STRING label_type[31] This value returns the label type for the specified axis. This value can return “Linear” or “Logarithmic”.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000012 Internal XY string lookup failure.
10000302 A current axis has not been defined.
13000064 XY axis not found
---------------
xy_axis_label_type_set(axis_name,label_type)
##########
Description:
This function sets the label type (linear/logarithm).
Input:
STRING axis_name[31] This value specifies the axis name.
STRING label_type[31] This value specifies the label type for the specified axis. This value can be set to “Linear”,or “Logarithmic”.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
10000308 The specified label type for the axis is invalid.
13000004 Duplicate entry exists in table
13000064 XY axis not found
13000214 No corresponding message available
---------------
xy_axis_labels_get(axis_name,labels)
##########
Description:
This function gets the labels for the specified axis.
Input:
STRING axis_name[31] This value specifies the axis name.
Output:
REAL labels()This value returns an array of labels for the specified axis. This array must be allocated with enough offsets to contain the entire list. Use the function xy_axis_labels_get_count()to get the number of offsets required.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
13000064 XY axis not found
---------------
xy_axis_labels_get_count(axis_name,nlabels)
##########
Description:
This function gets the number of labels defined for the specified axis.
Input:
STRING axis_name[31] This value specifies the axis name.
Output:
INTEGER nlabels This value returns the number of labels defined for the specified axis.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
13000064 XY axis not found
---------------
xy_axis_labels_set(axis_name,labels)
##########
Description:
This function sets the labels for the specified axis.
Input:
STRING axis_name[31] This value specifies the axis name.
REAL labels()This value specifies an array of labels for the specified axis.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
13000004 Duplicate entry exists in table
13000064 XY axis not found
13000214 No corresponding message available
---------------
xy_axis_linestyle_get(axis_name,line_style)
##########
Description:
This function gets the axis line style.
Input:
STRING axis_name[31] This value specifies the axis name.
Output:
STRING line_style[30] This value returns the curve style for the specified axis. This value can return “Solid”,“Dotted”,“DotDash”,“ShortDash”,“LongDash”,or “OddDash”.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000012 Internal XY string lookup failure.
10000302 A current axis has not been defined.
13000064 XY axis not found
---------------
xy_axis_linestyle_set(axis_name,line_style)
##########
Description:
This function sets the axis line style.
Input:
STRING axis_name[31] This value specifies the axis name.
STRING line_style[30] This value specifies the curve style for the specified axis. This value can be set to: “Solid”,“Dotted”,“DotDash”,“ShortDash”,“LongDash”,or “OddDash”.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000201 The specified line style is invalid. Please choose another from the option menu.
10000302 A current axis has not been defined.
13000004 Duplicate entry exists in table
13000064 XY axis not found
13000214 No corresponding message available
---------------
xy_axis_location_get(axis_name,display_location)
##########
Description:
This function gets the display location.
Input:
STRING axis_name[31] This value specifies the axis name.
Output:
STRING display_location[16] This value returns the location of the axis. This value can return “TopBottom”,“Top”,“Bottom”,“LeftRight”,“Left”,“Right”,or “None”.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000012 Internal XY string lookup failure.
10000302 A current axis has not been defined.
13000064 XY axis not found
---------------
xy_axis_location_set(axis_name,display_location)
##########
Description:
This function sets the display location.
Input:
STRING axis_name[31] This value specifies the axis name.
STRING display_location[16] This value specifies the location of the axis. This value can be set to “TopBottom”,“Top”,“Bottom”,“LeftRight”,“Left”,“Right”,or “None”.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
10000304 The specified axis display location is invalid.
13000004 Duplicate entry exists in table
13000064 XY axis not found
13000214 No corresponding message available
---------------
xy_axis_nvalues_get(axis_name,num_vals)
##########
Description:
This function gets the number of values for the specified axis.
Input:
STRING axis_name[31] This value specifies the axis name.
Output:
INTEGER num_vals This value returns the number of values for the specified axis.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
13000064 XY axis not found
---------------
xy_axis_nvalues_set(axis_name,num_vals)
##########
Description:
This function sets the number of values for the specified axis.
Input:
STRING axis_name[31] This value specifies the axis name.
INTEGER num_vals This value specifies the number of values for the specified axis.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
10000306 The specified number of values for the axis is invalid.
13000004 Duplicate entry exists in table
13000064 XY axis not found
13000214 No corresponding message available
---------------
xy_axis_sig_digits_get(axis_name,sig_digits)
##########
Description:
This function gets the number of significant digits.
Input:
STRING axis_name[31] This value specifies the axis name.
Output:
INTEGER sig_digits This value returns the number of significant digits for the specified axis.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
13000064 XY axis not found
---------------
xy_axis_sig_digits_set(axis_name,sig_digits)
##########
Description:
This function sets the number of significant digits.
Input:
STRING axis_name[31] This value specifies the axis name.
INTEGER sig_digits This value specifies the number of significant digits for the specified axis.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
13000004 Duplicate entry exists in table
13000064 XY axis not found
13000214 No corresponding message available
---------------
xy_axis_thickness_get(axis_name,thickness)
##########
Description:
This function gets the axis thickness.
Input:
STRING axis_name[31] This value specifies the axis name.
Output:
INTEGER thickness This value returns the axis thickness.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
13000064 XY axis not found
---------------
xy_axis_thickness_set(axis_name,thickness)
##########
Description:
This function sets the axis thickness.
Input:
STRING axis_name[31] This value specifies the axis name.
INTEGER thickness This value specifies the axis thickness. This value must be greater than 0 and less than 101.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
10000303 The specified thickness for the axis is invalid.
13000004 Duplicate entry exists in table
13000064 XY axis not found
13000214 No corresponding message available
---------------
xy_axis_tic_display_get(axis_name,ticmark_type)
##########
Description:
This function gets the ticmark display type (none/primary/secondary).
Input:
STRING axis_name[31] This value specifies the axis name.
Output:
STRING ticmark_type[31] This value returns the ticmark display type for the specified axis. The value returned can be “Primary”,“Secondary”,“PrimarySecondary”,or “None”.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000012 Internal XY string lookup failure.
10000302 A current axis has not been defined.
13000064 XY axis not found
---------------
xy_axis_tic_display_set(axis_name,ticmark_type)
##########
Description:
This function sets the ticmark display type.
Input:
STRING axis_name[31] This value specifies the axis name.
STRING ticmark_type[31] This value specifies the ticmark display type for the specified axis. This value can be set to “Primary”,“Secondary”,“PrimarySecondary”,or “None”.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
10000309 The specified display type for the axis is invalid.
13000004 Duplicate entry exists in table
13000064 XY axis not found
13000214 No corresponding message available
---------------
xy_axis_tic_get(axis_name,prim_sec,location,thickness,color_index)
##########
Description:
This function gets the ticmark attributes.
Input:
STRING axis_name[31] This value specifies the axis name.
STRING prim_sec[31] This value specifies the primary or secondary ticmark. This value can be set to “Primary”,“Secondary”,or “Both”.
Output:
STRING location[31] This value returns the location of the ticmark. This value can return “Inside”,or “Outside”.
INTEGER thickness This value returns the ticmark thickness. This value should be greater than 0 and less than 51.
INTEGER color_index This value returns the ticmark color. See the remarks below for more information.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000012 Internal XY string lookup failure.
10000302 A current axis has not been defined.
13000064 XY axis not found
---------------
xy_axis_tic_numsec_get(axis_name,num_sec_tick)
##########
Description:
This function gets the number of secondary ticmarks.
Input:
STRING axis_name[31] This value specifies the axis name.
Output:
INTEGER num_sec_tick This value returns the number of secondary ticmarks found. This value should be greater than 0 and less than 51.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
13000064 XY axis not found
---------------
xy_axis_tic_numsec_set(axis_name,num_sec_tick)
##########
Description:
This function sets the number of secondary ticmarks.
Input:
STRING axis_name[31] This value specifies the axis name.
INTEGER num_sec_tick This value specifies the number of secondary ticmarks. This value should be greater than 0 and less than 51.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000302 A current axis has not been defined.
10000400 The specified number of ticmarks for the axis is invalid.50 > number_of_ticmarks > 1.
13000004 Duplicate entry exists in table
13000064 XY axis not found
13000214 No corresponding message available
---------------
xy_axis_tic_set(axis_name,prim_sec,location,thickness,color_index)
##########
Description:
This function sets the ticmark attributes.
Input:
STRING axis_name[31] This value specifies the axis name.
STRING prim_sec[] This value specifies the primary or secondary ticmark.
STRING location[] This value specifies the location of the ticmark.
INTEGER thickness This value specifies the ticmark thickness.
INTEGER color_index This value specifies the ticmark color. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000010 The color index has returned an invalid value.
10000013 Invalid option given to XY routine.
10000302 A current axis has not been defined.
10000303 The specified thickness for the axis is invalid.
10000304 The specified axis display location is invalid.
13000004 Duplicate entry exists in table
13000064 XY axis not found
13000214 No corresponding message available
---------------
xy_axis_title_get(axis_name,title,font_size,title_color)
##########
Description:
This function gets the title attributes.
Input:
STRING axis_name[31] This value specifies the axis name.
Output:
STRING title[256] This value returns the title text for the specified axis.
INTEGER font_size This value returns the font size of the title text. This value will be set to 8,10,12,14,18,or 24.
INTEGER title_color This value returns the title color for the specified axis.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000013 Invalid option given to XY routine.
13000064 XY axis not found
---------------
xy_axis_title_set(axis_name,title,font_size,title_color)
##########
Description:
This function sets the title attributes.
Input:
STRING axis_name[31] This value specifies the axis name.
STRING title[256] This value specifies the title text for the specified axis.
INTEGER font_size This value specifies the font size of the title text.
INTEGER title_color This value specifies the title color for the specified axis. See the remarks below for more information. This value can be set to 8,10,12,14,18,or 24.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000006 The XY font name typed in is invalid. Please input a valid font name.
10000009 The specified text is invalid. Please input a valid text string.
10000010 The color index has returned an invalid value.
10000013 Invalid option given to XY routine.
13000004 Duplicate entry exists in table
13000064 XY axis not found
13000214 No corresponding message available
---------------
xy_curve_color_get(curve_name,color_index)
##########
Description:
This function gets the curve color index.
Input:
STRING curve_name[31] This value specifies the curve name.
Output:
INTEGER color_index This value returns the color index for the specified curve.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_color_set(curve_name,color_index)
##########
Description:
This function sets the curve color index.
Input:
STRING curve_name[31] This value specifies the curve name.
INTEGER color_index This value specifies the color index for the specified curve. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000010 The color index has returned an invalid value.
10000104 A current curve has not been defined.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_display_symbol_get(curve_name,symbol_flag)
##########
Description:
This function gets the display symbol flag.
Input:
STRING curve_name[31] This value specifies the curve name.
Output:
LOGICAL symbol_flag This value returns the display symbol flag. This value will be set to TRUE if the curve symbols are to be displayed,FALSE if they are not.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_display_symbol_set(curve_name,symbol_flag)
##########
Description:
This function sets display symbol flag.
Input:
STRING curve_name[31] This value specifies the curve name.
LOGICAL symbol_flag This value specifies,when set to TRUE,that the curve symbols should be displayed,FALSE if they are not.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_endpt_get(curve_name,end_point)
##########
Description:
This function gets the last data point to be displayed.
Input:
STRING curve_name[31] This value specifies the curve name.
Output:
INTEGER end_point This value returns the end point for the specified curve.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_endpt_set(curve_name,end_point)
##########
Description:
This function sets the last data point to be displayed.
Input:
STRING curve_name[31] This value specifies the curve name.
INTEGER end_point This value specifies the end point for the specified curve.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
10000107 The specified ending point is invalid. Please input another ending point in the databox.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_freq_get(curve_name,frequency)
##########
Description:
This function gets the display frequency of data points for the curve.
Input:
STRING curve_name[31] This value specifies the curve name.
Output:
INTEGER frequency This value returns the display frequency value for the specified curve.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_freq_set(curve_name,frequency)
##########
Description:
This function sets the display frequency of data points for the curve.
Input:
STRING curve_name[31] This value specifies the curve name.
INTEGER frequency This value specifies the display frequency value for the specified curve.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
10000108 The specified frequency is invalid. Please input another frequency in the databox.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_func_get(curve_name,fit_function)
##########
Description:
This function gets the curve fit function.
Input:
STRING curve_name[31] This value specifies the curve name.
Output:
STRING fit_function[30] This value returns the curve fit function. This value can return “Linear”,“Scatter”,“Spline”,or “LeastSquares”.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000012 Internal XY string lookup failure.
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_func_set(curve_name,fit_function)
##########
Description:
This function sets the curve fit function.
Input:
STRING curve_name[31] This value specifies the curve name.
STRING fit_function[30] This value specifies the curve fit function. This value can be set to “Linear”,“Scatter”,“Spline”,or “LeastSquares”.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
10000200 The specified fit function is invalid. Please choose another.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_linestyle_get(curve_name,curve_style)
##########
Description:
This function gets the curve style.
Input:
STRING curve_name[31] This value specifies the curve name.
Output:
STRING curve_style[31] This value returns the curve style. This value can return “Solid”,“Dotted”,“DotDash”,“ShortDash”,“LongDash”,or “OddDash”.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000012 Internal XY string lookup failure.
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_linestyle_set(curve_name,curve_style)
##########
Description:
This function sets the curve style.
Input:
STRING curve_name[31] This value specifies the curve name.
STRING curve_style[31] This value specifies the curve style. This value can be set to “Solid”,“Dotted”,“DotDash”,“ShortDash”,“LongDash”,or “OddDash”.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
10000201 The specified line style is invalid. Please choose another from the option menu.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_nlppc_get(curve_name,num_line_seg)
##########
Description:
This function gets the number of curves per parametric cubic for least squares fit.
Input:
STRING curve_name[31] This value specifies the curve name.
Output:
INTEGER num_line_seg This value returns the number of line segments generated per parametric cubic curve.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_nlppc_set(curve_name,num_line_seg)
##########
Description:
This function sets the number of curves per parametric cubic for least squares fit.
Input:
STRING curve_name[31] This value specifies the curve name.
INTEGER num_line_seg This value specifies the number of line segments generated per parametric cubic curve.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_num_pc_get(curve_name,num_curves)
##########
Description:
This function gets the number of parametric cubic curves.
Input:
STRING curve_name[31] This value specifies the curve name.
Output:
INTEGER num_curves This value returns the number of parametric cubic curves generated.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_num_pc_set(curve_name,num_curves)
##########
Description:
This function sets the number of parametric cubic curves.
Input:
STRING curve_name[31] This value specifies the curve name.
INTEGER num_curves This value specifies the number of parametric cubic curves to generate.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_rename(curve_name,new_name)
##########
Description:
This function renames a curve.
Input:
STRING curve_name[31] This value specifies the current name of the curve.
STRING new_name[] This value specifies the new name to be assigned.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000102 The specified curve name is invalid.
10000104 A current curve has not been defined.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_startpt_get(curve_name,start_point)
##########
Description:
This function gets the first data point to be displayed.
Input:
STRING curve_name[31] This value specifies the curve name.
Output:
INTEGER start_point This value returns the start point for the specified curve.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_startpt_set(curve_name,start_point)
##########
Description:
This function sets the first data point to be displayed.
Input:
STRING curve_name[31] This value specifies the curve name.
INTEGER start_point This value specifies the start point for the specified curve.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
10000106 The specified starting point is invalid. Please input another starting point in the databox.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_symbol_color_get(curve_name,symbol_color)
##########
Description:
This function gets the symbol color.
Input:
STRING curve_name[31] This value specifies the curve name.
Output:
INTEGER symbol_color This value returns the symbol color for the specified curve.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_symbol_color_set(curve_name,symbol_color)
##########
Description:
This function sets symbol color.
Input:
STRING curve_name[31] This value specifies the curve name
INTEGER symbol_color This value specifies the symbol color for the specified curve. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_symbol_get(curve_name,symbol)
##########
Description:
This function gets the symbol.
Input:
STRING curve_name[31] This value specifies the curve name.
Output:
STRING symbol[30] This value returns the symbol for the specified curve. See the remarks below for more information.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000012 Internal XY string lookup failure.
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_symbol_set(curve_name,symbol)
##########
Description:
This function sets the symbol.
Input:
STRING curve_name[31] This value specifies the curve name.
STRING symbol[30] This value specifies the symbol for the specified curve. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
10000109 The specified symbol is invalid. Please choose another symbol from the option menu.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_symbol_size_get(curve_name,symbol_size)
##########
Description:
This function gets the symbol size.
Input:
STRING curve_name[31] This value specifies the curve name.
Output:
INTEGER symbol_size This value returns the symbol size for the specified curve.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_symbol_size_set(curve_name,symbol_size)
##########
Description:
This function sets symbol size.
Input:
STRING curve_name[31] This value specifies the curve name.
INTEGER symbol_size This value specifies the symbol size for the specified curve.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_text_get(curve_name,text,text_color)
##########
Description:
This function gets the text attributes.
Input:
STRING curve_name[31] This value specifies the curve name.
Output:
STRING text[256] This value returns the text for the specified curve.
INTEGER text_color This value returns the color index of the text.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_text_set(curve_name,text,text_color)
##########
Description:
This function sets the text attributes.
Input:
STRING curve_name[31] This value specifies the curve name.
STRING text[256] This value specifies the text for the specified curve.
INTEGER text_color This value specifies the color index of the text. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000009 The specified text is invalid. Please input a valid text string.
10000010 The color index has returned an invalid value.
10000104 A current curve has not been defined.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_thickness_get(curve_name,thickness)
##########
Description:
This function gets the curve thickness.
Input:
STRING curve_name[31] This value specifies the curve name.
Output:
INTEGER thickness This value returns the curve thickness.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_thickness_set(curve_name,thickness)
##########
Description:
This function sets the curve thickness.
Input:
STRING curve_name[31] This value specifies the curve name.
INTEGER thickness This value specifies the curve thickness. This value must be greater than 0 and less than 51.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
10000202 The specified curve thickness is invalid. Please choose another from the slider.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_xdelta_get(curve_name,x_delta)
##########
Description:
This function gets the value of X increment to use when only Y data has been given.
Input:
STRING curve_name[31] This value specifies the curve name.
Output:
REAL x_delta This value returns the X increment value to use when only Y data is given.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_xdelta_set(curve_name,x_delta)
##########
Description:
This function sets the value of X increment to use when only Y data has been given.
Input:
STRING curve_name[31] This value specifies the curve name.
REAL x_delta This value specifies the X increment value to use when only Y data is given.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_xinit_get(curve_name,x_init)
##########
Description:
This function gets the initial value of X to use as data for curve when only Y data has been given. If X,Y pairs are given,then this value will not be used.
Input:
STRING curve_name[31] This value specifies the curve name.
Output:
REAL x_init This value returns the X initial value to use when only Y data is given.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_xinit_set(curve_name,x_init)
##########
Description:
This function sets the initial value of X to use as data for curve when only Y data has been given. If X,Y pairs are given,then this value will not be used.
Input:
STRING curve_name[31] This value specifies the curve name.
REAL x_init This value specifies the X initial value to use when only Y data is given.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_xscale_get(curve_name,x_factor)
##########
Description:
This function gets the X scale factor.
Input:
STRING curve_name[31] This value specifies the curve name.
Output:
REAL x_factor This value returns the X scale factor for the specified curve.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_xscale_set(curve_name,x_factor)
##########
Description:
This function sets the X scale factor.
Input:
STRING curve_name[31] This value specifies the curve name.
REAL x_factor This value specifies the X scale factor for the specified curve.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_yscale_get(curve_name,y_factor)
##########
Description:
This function gets the Y scale factor.
Input:
STRING curve_name[31] This value specifies the curve name.
Output:
REAL y_factor This value returns the Y scale factor for the specified curve.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_yscale_set(curve_name,y_factor)
##########
Description:
This function sets the Y scale factor.
Input:
STRING curve_name[31] This value specifies the curve name.
REAL y_factor This value specifies the Y scale factor for the specified curve.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_legend_attrib_get(location,width,height,bgcolor)
##########
Description:
This function gets the legend attributes.
Input:
None.
Output:
REAL location(2)This value returns the location of the legend. Offset 1 will specify the X location and offset 2 will specify the Y location. These values can range from 0.0 to 100.0.
REAL width This value returns the width of the legend.
REAL height This value returns the height of the legend.
INTEGER bgcolor This value returns the background color of the legend.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000705 There is no current window specified.
13000063 XY window not found
13000065 XY legend not found
---------------
xy_legend_attrib_set(location,width,height,bgcolor)
##########
Description:
This function sets the legend attributes.
Input:
REAL location(2)This value specifies the location of the legend. Offset 1 will specify the X location and offset 2 will specify the Y location. These values can range from 0.0 to 100.0.
REAL width This value specifies the width of the legend.
REAL height This value specifies the height of the legend.
INTEGER bgcolor This value specifies the background color of the legend. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000007 The X and Y location must both be in %. This is a percentage of the XY window from the top left corner. Please input valid X and Y locations.
10000010 The color index has returned an invalid value.
10000705 There is no current window specified.
13000004 Duplicate entry exists in table
13000063 XY window not found
13000065 XY legend not found
---------------
xy_legend_border_get(style,border_color)
##########
Description:
This function gets the border attributes.
Input:
None.
Output:
STRING style[30 This value returns the curve style of the legend. This value can return “Solid”,“Dotted”,“DotDash”,“ShortDash”,“LongDash”,or “OddDash”.
INTEGER border_color This value returns the border color index of the legend.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000012 Internal XY string lookup failure.
13000063 XY window not found
13000065 XY legend not found
---------------
xy_legend_border_set(style,border_color)
##########
Description:
This function sets the border attributes.
Input:
STRING style[30] This value specifies the curve style of the legend. This value can be set to “Solid”,“Dotted”,“DotDash”,“ShortDash”,“LongDash”,or “OddDash”.
INTEGER border_color This value specifies the border color index of the legend. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000010 The color index has returned an invalid value.
10000201 The specified line style is invalid. Please choose another from the option menu.
13000004 Duplicate entry exists in table
13000063 XY window not found
13000065 XY legend not found
---------------
xy_legend_display_border_get(border_flag)
##########
Description:
This function gets the display border flag.
Input:
None.
Output:
LOGICAL border_flag This value returns the display border status value. When this value is set to TRUE,the display border for the legend will be shown. If this value is set to FALSE,the display border for the legend will not be shown.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000063 XY window not found
13000065 XY legend not found
---------------
xy_legend_display_border_set(border_flag)
##########
Description:
This function sets the display border flag.
Input:
LOGICAL border_flag This value specifies,when set to TRUE that the display border for the legend will be shown. If this value is set to FALSE,the display border for the legend will not be shown.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000004 Duplicate entry exists in table
13000063 XY window not found
13000065 XY legend not found
---------------
xy_legend_display_get(legend_flag)
##########
Description:
This function gets the display legend flag.
Input:
None.
Output:
LOGICAL legend_flag This value returns the display legend status value. When this value is set to TRUE,the display legend will be shown. If this value is set to FALSE,the display legend will not be shown.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000063 XY window not found
13000065 XY legend not found
---------------
xy_legend_display_set(legend_flag)
##########
Description:
This function sets the display legend flag.
Input:
LOGICAL legend_flag This value specifies,when set to TRUE that the display legend will be shown. If this value is set to FALSE,the display legend will not be shown.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000004 Duplicate entry exists in table
13000063 XY window not found
13000065 XY legend not found
---------------
xy_legend_display_title_get(title_flag)
##########
Description:
This function gets the display title flag.
Input:
None.
Output:
LOGICAL title_flag This value returns the display title flag for the legend. When this value is set to TRUE,the display legend title will be shown. If this value is set to FALSE,the display legend title will not be shown.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000063 XY window not found
13000065 XY legend not found
---------------
xy_legend_display_title_set(title_flag)
##########
Description:
This function sets the display title flag.
Input:
LOGICAL title_flag This value specifies,when set to TRUE that the display legend title will be shown. If this value is set to FALSE,the display legend title will not be shown.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000004 Duplicate entry exists in table
13000063 XY window not found
13000065 XY legend not found
---------------
xy_legend_text_get(legend_text,text_color)
##########
Description:
This function gets the text attributes for the legend.
Input:
None.
Output:
STRING legend_text[256] This value returns the text for the legend.
INTEGER text_color This value returns the color index of the text.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000063 XY window not found
13000065 XY legend not found
---------------
xy_legend_text_set(legend_text,text_color)
##########
Description:
This function sets the text attributes for the legend.
Input:
STRING legend_text[256] This value specifies the text for the legend.
INTEGER text_color This value specifies the color index of the text. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000009 The specified text is invalid. Please input a valid text string.
10000010 The color index has returned an invalid value.
13000004 Duplicate entry exists in table
13000063 XY window not found
13000065 XY legend not found
---------------
xy_title_current_set(title_name)
##########
Description:
This function sets the current title.
Input:
STRING title_name[256] This value specifies the current title name.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000005 The specified XY title name is invalid. Please Input a valid title name that is 31 characters or less and contains no embedded blanks.
13000068 XY title not found
---------------
xy_title_font_get(title_name,font_size)
##########
Description:
This function gets the text font size.
Input:
STRING title_name[256] This value specifies the title name.
Output:
INTEGER font_size This value returns the font size of the specified title. This value can return 8,10,12,14,18,or 24.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000101 The specified title does not exist in the database.
13000068 XY title not found
---------------
xy_title_font_set(title_name,font_size)
##########
Description:
This function sets the text font size.
Input:
STRING title_name[256] This value specifies the title name.
INTEGER font_size This value specifies the font size of the specified title. This value can be set to 8,10,12,14,18,or 24.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000006 The XY font name typed in is invalid. Please input a valid font name.
10000101 The specified title does not exist in the database.
13000004 Duplicate entry exists in table
13000068 XY title not found
---------------
xy_title_rename(title_name,new_name)
##########
Description:
This function renames a title.
Input:
STRING title_name[] This value specifies the current name of the title.
STRING new_name[] This value specifies the new name to be assigned.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000005 The specified XY title name is invalid. Please Input a valid title name that is 31 characters or less and contains no embedded blanks.
10000100 There is no current title defined.
13000004 Duplicate entry exists in table
13000068 XY title not found
---------------
xy_title_text_get(title_name,text,location,text_color)
##########
Description:
This function gets the text attributes.
Input:
STRING title_name[256] This value specifies the title name.
Output:
STRING text[256] This value returns the text of the specified title.
REAL location(2)This value returns the location of the text. Offset 1 will specify the X location and offset 2 will specify the Y location. These values can range from 0.0 to 100.0.
INTEGER text_color This value returns the color index of the text.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000101 The specified title does not exist in the database.
13000068 XY title not found
---------------
xy_title_text_set(title_name,text,location,text_color)
##########
Description:
This function sets the text attributes.
Input:
STRING title_name[256] This value specifies the title name.
STRING text[256] This value specifies the text of the specified title.
REAL location(2)This value specifies the location where the text is to be placed. Offset 1 will specify the X location and offset 2 will specify the Y location. These values can range from 1.0 to 100.0.
INTEGER text_color This value specifies the color index of the text. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000007 The X and Y location must both be in %. This is a percentage of the XY window from the top left corner. Please input valid X and Y locations.
10000009 The specified text is invalid. Please input a valid text string.
10000010 The color index has returned an invalid value.
10000101 The specified title does not exist in the database.
13000004 Duplicate entry exists in table
13000068 XY title not found
---------------
xy_window_background_color_get(window_name,bgcolor)
##########
Description:
This function gets the graph background color.
Input:
STRING window_name[31] This value specifies the window name.
Output:
INTEGER bgcolor This value returns the background color for the specified window.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000705 There is no current window specified.
13000063 XY window not found
---------------
xy_window_background_color_set(window_name,bgcolor)
##########
Description:
This function sets the graph background color.
Input:
STRING window_name[31] This value specifies the window name.
INTEGER bgcolor This value specifies the background color for the specified window. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000705 There is no current window specified.
13000004 Duplicate entry exists in table
13000063 XY window not found
---------------
xy_window_border_color_get(window_name,border_color)
##########
Description:
This function gets the display border color.
Input:
STRING window_name[31] This value specifies the window name.
Output:
INTEGER border_color This value returns the display border color for the specified window.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000705 There is no current window specified.
13000063 XY window not found
---------------
xy_window_border_color_set(window_name,border_color)
##########
Description:
This function sets the display border color.
Input:
STRING window_name[31] This value specifies the window name.
INTEGER border_color This value specifies the display border color for the specified window. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000705 There is no current window specified.
13000004 Duplicate entry exists in table
13000063 XY window not found
---------------
xy_window_border_linestyle_get(window_name,curve_style)
##########
Description:
This function gets the border curve style.
Input:
STRING window_name[31] This value specifies the window name.
Output:
STRING curve_style[31] This value returns the border curve style for the specified window. This value can return “Solid”,“Dotted”,“DotDash”,“ShortDash”,“LongDash”,or “OddDash”.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000012 Internal XY string lookup failure.
10000705 There is no current window specified.
13000063 XY window not found
---------------
xy_window_border_linestyle_set(window_name,curve_style)
##########
Description:
This function sets the border curve_style.
Input:
STRING window_name[31] This value specifies the window name.
STRING curve_style[31] This value specifies the border curve style for the specified window. This value can be set to: “Solid”,“Dotted”,“DotDash”,“ShortDash”,“LongDash”,or “OddDash”.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000201 The specified line style is invalid. Please choose another from the option menu.
10000705 There is no current window specified.
13000004 Duplicate entry exists in table
13000063 XY window not found
---------------
xy_window_border_thickness_get(window_name,thickness)
##########
Description:
This function gets the border thickness.
Input:
STRING window_name[31] This value specifies the window name.
Output:
INTEGER thickness This value returns the window border thickness. The value returned will be greater than 0 and less than 101.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000705 There is no current window specified.
13000063 XY window not found
---------------
xy_window_border_thickness_set(window_name,thickness)
##########
Description:
This function sets the border thickness.
Input:
STRING window_name[31] This value specifies the window name.
INTEGER thickness This value specifies the window border thickness. This value must be greater than 0 and less than 101.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000705 There is no current window specified.
13000004 Duplicate entry exists in table
13000063 XY window not found
---------------
xy_window_display_border_get(window_name,border_flag)
##########
Description:
This function gets the display graph border flag.
Input:
STRING window_name[31] This value specifies the window name.
Output:
LOGICAL border_flag This value returns the display graph border flag for the specified window. When this value is TRUE,the display graph border should be displayed. When this value is set to FALSE,the display graph border should not be displayed.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000705 There is no current window specified.
13000063 XY window not found
---------------
xy_window_display_border_set(window_name,border_flag)
##########
Description:
This function sets the display graph border flag.
Input:
STRING window_name[31] This value specifies the window name.
LOGICAL border_flag This value specifies,when set to TRUE,that the display graph border should be shown. When this value is set to FALSE,the display graph border should not be shown.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000705 There is no current window specified.
13000004 Duplicate entry exists in table
13000063 XY window not found
---------------
xy_window_id_get(window_name,window_id)
##########
Description:
This function gets the ID of a window from the name.
Input:
STRING window_name[31] This value specifies the name of the xy window.
Output:
INTEGER window_id This value returns the id of the xy window.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000063 XY window not found
---------------
xy_curve_nposted_get(nposted)
##########
Description:
This function gets the number of posted curves in the database.
Input:
None.
Output:
INTEGER nposted This value returns the number of posted curves found in the database.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000063 XY window not found
---------------
xy_curve_posted_get(posted_list)
##########
Description:
This function gets the list of posted curves.
Input:
None.
Output:
STRING posted_list[31]()This value returns a list of posted curves from the database. This array must be allocated with enough offsets to contain the entire list. Use the function xy_curve_nposted_get()to get the number of offsets required.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000011 No memory available for current XY operation.
13000063 XY window not found
13000067 XY curve not found
---------------
xy_title_nposted_get(nposted)
##########
Description:
This function gets the number of posted titles in the database.
Input:
None.
Output:
INTEGER nposted This value returns the number of posted titles found in the database.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000063 XY window not found
---------------
xy_title_posted_get(posted_list)
##########
Description:
This function gets the list of posted titles.
Input:
None.
Output:
STRING posted_list[256]()This value returns a list of posted titles from the database. This array must be allocated with enough offsets to contain the entire list. Use the function xy_title_nposted_get()to get the number of offsets required.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000011 No memory available for current XY operation.
13000063 XY window not found
13000068 XY title not found
---------------
xy_window_curve_post(window_name,curve_name)
##########
Description:
This function posts a curve to the window.
Input:
STRING window_name[31] This value specifies the name of the window to which the curve will be posted.
STRING curve_name[31] This value specifies the name of the curve that is to be posted to the window,
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000008 The specified new title name already exists. Please check the listbox of current title names and re-input your title name.
10000104 A current curve has not been defined.
10000105 The specified curve name already exists. Please check the listbox of current curves and re-input your curve name.
10000703 The specified window name already exists.
10000705 There is no current window specified.
13000004 Duplicate entry exists in table
13000063 XY window not found
13000067 XY curve not found
---------------
xy_window_curve_unpost(window_name,curve_name)
##########
Description:
This function unposts a curve to the window.
Input:
STRING window_name[31] This value specifies the name of the window to be created.
STRING curve_name[31] This value specifies the name of the curve that is to be unposted from the window,
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
10000705 There is no current window specified.
13000063 XY window not found
13000067 XY curve not found
---------------
xy_window_title_post(window_name,title_name)
##########
Description:
This function posts a title to the window.
Input:
STRING window_name[31] This value specifies the name of the window to which the title will be posted.
STRING title_name[256] This value specifies the name of the title that is to be posted to the window.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000101 The specified title does not exist in the database.
10000705 There is no current window specified.
13000004 Duplicate entry exists in table
13000063 XY window not found
13000068 XY title not found
---------------
xy_window_title_unpost(window_name,title_name)
##########
Description:
This function unposts a title to the window.
Input:
STRING window_name[31] This value specifies the name of the window from which the title will be unposted.
STRING title_name[256] This value specifies the name of the title that is to be unposted from the window.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000101 The specified title does not exist in the database.
10000705 There is no current window specified.
13000063 XY window not found
13000068 XY title not found
---------------
xy_curve_create(curve_name,text,text_color)
##########
Description:
This function creates a curve.
Input:
STRING curve_name[31] This value specifies the name of the curve to create.
STRING text[31] This value specifies the text for this curve.
INTEGER text_color This value specifies what color index to use for the text. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000008 The specified new title name already exists. Please check the listbox of current title names and re-input your title name.
10000009 The specified text is invalid. Please input a valid text string.
10000010 The color index has returned an invalid value.
10000102 The specified curve name is invalid.
10000104 A current curve has not been defined.
10000105 The specified curve name already exists. Please check the listbox of current curves and re-input your curve name.
10000703 The specified window name already exists.
10000705 There is no current window specified.
13000004 Duplicate entry exists in table
13000063 XY window not found
13000067 XY curve not found
---------------
xy_curve_current_get(curve_name)
##########
Description:
This function gets the current curve.
Input:
None.
Output:
STRING curve_name[31] This value returns the curve name.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000063 XY window not found
---------------
xy_curve_current_set(curve_name)
##########
Description:
This function sets the current curve.
Input:
STRING curve_name[31] This value specifies the curve name to make current.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000102 The specified curve name is invalid.
13000067 XY curve not found
---------------
xy_curve_data_file_get(file_name,curve_name,set_number)
##########
Description:
This function reads x and y data value sets representing curve data from a file,starting at a specific data set.
Input:
STRING file_name[] This value specifies the name of the file to read from.
STRING curve_name[31] This value specifies the curve name.
INTEGER set_number This value specifies the data set defining the starting point at which data will be read from the file. The file contains ascii data defining sets of X and Y data values. The first character of each line of text in the file is either the case insensitive character X or Y followed by a real number representing the data. Each X and Y data point together forms a set of data points.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
20002 String specified is too small
8103001 File Already Exists
8103002 File Not Found
8103003 Maximum File Version Exceeded
8103011 File not executable
8105001 No memory to allocate text I/O channel
8105009 Text I/O channel table full
10000011 No memory available for current XY operation.
10000014 The requested dataset is not found in the curve data file
10000102 The specified curve name is invalid.
10000104 A current curve has not been defined.
10000706 The .xyd data file has an invalid header line. The line must look like either XYDATA,curvename or YDATA,curvename.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_data_get(curve_name,yonly,npoints,x_array,y_array)
##########
Description:
This function gets curve data. It should be used in conjunction with xy_curve_num_points_get to determine the allocation size of the x and y point arrays.
Input:
STRING curve_name[31] This value specifies the curve name to get the curve data for.
Output:
LOGICAL yonly This value returns a logical which indicates whether XY,when set to FALSE,or Y data,when set to TRUE,was returned.
INTEGER npoints This value returns the number of points returned.
REAL x_array(VIRTUAL)This value returns an array of x data points. Must be allocated before use.
REAL y_array(VIRTUAL)This value returns an array of y data points. Must be allocated before use.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_num_points_get(curve_name,yonly,npoints)
##########
Description:
This function gets the number of curve data points.
Input:
STRING curve_name[31] This value specifies the curve name to get the curve data for.
Output:
LOGICAL yonly This value returns a logical which indicates whether XY,when set to FALSE,or Y data,when set to TRUE,was returned.
INTEGER npoints This value returns the number of points returned.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000104 A current curve has not been defined.
13000067 XY curve not found
---------------
xy_curve_data_set(curve_name,yonly,npoints,x_array,y_array)
##########
Description:
This function creates curves with data point values.
Input:
STRING curve_name[31] This value specifies the curve name which is to have data point values assigned to it.
LOGICAL yonly This value specifies,when set to TRUE,that only the information in the input value y_array is to be used. If this value is set to FALSE,both the input values x_array and y_array will be used.
INTEGER npoints This value specifies the number of points to set.
REAL x_array(npoints)This value specifies an array of x data points.
REAL y_array(npoints)This value specifies an array of y data points.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000011 No memory available for current XY operation.
10000104 A current curve has not been defined.
13000004 Duplicate entry exists in table
13000067 XY curve not found
---------------
xy_curve_list_get(curve_list)
##########
Description:
This function gets the list of curves.
Input:
None.
Output:
STRING curve_list[31]()This value returns a list of curves from the database. This array must be allocated with enough offsets to contain the entire list. Use the function xy_curve_num_get()to get the number of offsets required.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000011 No memory available for current XY operation.
13000067 XY curve not found
---------------
xy_curve_num_get(ncurves)
##########
Description:
This function gets the number of curves in the database.
Input:
None.
Output:
INTEGER ncurves This value returns the number of curves found in the database.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
xy_title_create(title_name,text,font_size,location,text_color)
##########
Description:
This function creates a title.
Input:
STRING title_name[256] This value specifies the name of title to be created.
STRING text[256] This value specifies the text for this title.
INTEGER font_size This value specifies the font size of the text.
REAL location(2)This value specifies the location where the text is to be placed. Offset 1 will specify the X location and offset 2 will specify the Y location. These values can range from 1.0 to 100.0.
INTEGER text_color This value specifies what color index to use for the text. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000005 The specified XY title name is invalid. Please Input a valid title name that is 31 characters or less and contains no embedded blanks.
10000006 The XY font name typed in is invalid. Please input a valid font name.
10000007 The X and Y location must both be in %. This is a percentage of the XY window from the top left corner. Please input valid X and Y locations.
10000009 The specified text is invalid. Please input a valid text string.
10000010 The color index has returned an invalid value.
10000101 The specified title does not exist in the database.
10000705 There is no current window specified.
13000004 Duplicate entry exists in table
13000063 XY window not found
13000068 XY title not found
---------------
xy_title_list_get(title_list)
##########
Description:
This function gets the list of titles.
Input:
None.
Output:
STRING title_list[256]()This value returns a list of titles from the database. This array must be allocated with enough offsets to contain the entire list. Use the function xy_title_num_get()to get the number of offsets required.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
xy_title_num_get(ntitles)
##########
Description:
This function gets the number of titles in the database.
Input:
None.
Output:
INTEGER ntitles This value returns the number of titles found in the database.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
xy_window_create(window_name,x_location,y_location,width,height)
##########
Description:
This function creates a xy window.
Input:
STRING window_name[31] This value specifies the name of the window to create.
REAL x_location This value specifies the X location for the window. This value must be greater than 0.
REAL y_location This value specifies the Y location for the window. This value must be greater than 0.
REAL width This value specifies the width of the window. This value must be greater than 0.
REAL height This value specifies the height of the window. This value must be greater than 0.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000007 The X and Y location must both be in %. This is a percentage of the XY window from the top left corner. Please input valid X and Y locations.
10000700 The specified window name is invalid. Enter a window name that is less than 31 characters and that has no embedded blanks.
10000702 The specified window height is invalid.
13000004 Duplicate entry exists in table
13000063 XY window not found
13000214 No corresponding message available
---------------
xy_window_current_get(window_name)
##########
Description:
This function gets the current xy window.
Input:
None.
Output:
STRING window_name[31] This value returns the xy window name.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000063 XY window not found
---------------
xy_window_current_set(window_name)
##########
Description:
This function sets the current window.
Input:
STRING window_name[31] This value specifies the window name to make current.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000700 The specified window name is invalid. Enter a window name that is less than 31 characters and that has no embedded blanks.
13000063 XY window not found
---------------
xy_window_list_get(window_list)
##########
Description:
This function gets the list of xy windows.
Input:
None.
Output:
STRING window_list[31]()This value returns a list of xy windows from the database. This array must be allocated with enough offsets to contain the entire list. Use the function xy_window_num_get()to get the number of offsets required.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000011 No memory available for current XY operation.
13000063 XY window not found
---------------
xy_window_nposted_get(nposted)
##########
Description:
This function gets the number of posted xy windows in the database.
Input:
None.
Output:
INTEGER nposted This value returns the number of posted xy windows found in the database.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
xy_window_num_get(nwindows)
##########
Description:
This function gets the number of xy windows in the database.
Input:
None.
Output:
INTEGER nwindows This value returns the number of xy windows found in the database.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
xy_window_post(window_name)
##########
Description:
This function posts a xy window.
Input:
STRING window_name[31] This value specifies the name of the xy window to post.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000011 No memory available for current XY operation.
10000705 There is no current window specified.
13000063 XY window not found
---------------
xy_window_posted_get(posted_list)
##########
Description:
This function gets the list of posted xy windows.
Input:
None.
Output:
STRING posted_list[31]()This value returns a list of posted xy windows from the database. This array must be allocated with enough offsets to contain the entire list. Use the function xy_window_nposted_get()to get the number of offsets required.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000011 No memory available for current XY operation.
13000063 XY window not found
---------------
xy_window_unpost(window_name)
##########
Description:
This function unposts a xy window.
Input:
STRING window_name[31] This value specifies the name of the xy window to unpost.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
10000705 There is no current window specified.
13000063 XY window not found
---------------
xy_write_curve_file.write_curve(curve_name,title,filename)
##########
Description:
This function is used to write XY curve data to a file.
Input:
STRING curve_name[256] The name of the curve whose data is to be written.
STRING title[256] The title of the curve.
STRING filename[256] The name of the file to write.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
utl_dyn_pass_ptr(lib_name,c_name,options)
##########
Description:
Passes the pointer to the script manager (PCL)calling function SmBltCall to the routine indicated in the dynamic library.
Input:
STRING lib_name Dynamic library already opened by utl_dyn_lib_open.
STRING c_name Name of the "C" function to call in the DLL. The function must be properly exported depending on the operating system.
STRING options List of single character options: 'S' = silent mode - suppress message operation.
Output:
None
INTEGER <Return Value> Returns 0 for success,non-zero otherwise.
Error Conditions: The library could not be found or opened.
---------------
PSMDEC(argcnt)
##########
Description:
Declares the SmCArg structures and "int status" since many PCL routines pass back an integer status code. This must be declared first in "C" functions and declared before any of the following macros.
Input:
int argcnt The number of arguments passed to the PCL function.
---------------
DBLT_SET_IN(variable,type,cindex)
##########
Description:
Converts the input C variable of types •	 SmDTyInteger (int)- Integer type.
---------------
DBLT_SET_OUT(variable,type,cindex)
##########
Description:
Converts the output C variable of types •	 SmDTyInteger (int)- Integer type.
---------------
DBLT_SET_IN_STR(variable,cindex,stringLength)
##########
Description:
Converts input C strings or char * (SM type SmDTyString)to the appropriate SmCArg structure.
Input:
variable The C variable.
cindex The "C" (zero-based)index of the argument in the call to PCL.
stringLength The length of the string. For static strings,the static length may be used,but it is sufficient to use the results of the call "strlen".
---------------
DBLT_SET_OUT_STR(variable,cindex,stringLength)
##########
Description:
Converts input C strings or char * (SM type SmDTyString)to the appropriate SmCArg structure.
Input:
variable The C variable.
cindex The "C" (zero-based)index of the argument in the call to PCL.
stringLength The maximum length of the string.
---------------
DBLT_SET_IN_ARR(variable,type,cindex,size)
##########
Description:
Converts the output C variable of types •	 SmDTyInteger (int)- Integer type.
---------------
DBLT_SET_OUT_ARR(variable,type,cindex,size)
##########
Description:
Converts the output C variable of types •	 SmDTyInteger (int)- Integer type.
---------------
DBLT_SET_IN_STR_ARR(variable,cindex,size,stringLength)
##########
Description:
Converts input C array of strings or char ** to the appropriate SmCArg.
Input:
variable The C variable.
cindex The "C" (zero-based)index of the argument in the call to PCL.
size The number of entries in the one-dimensional array of entries in the one-dimensional array.
stringLength The length of the string. For static strings,the static length may be used,but it is sufficient to use the results of the call "strlen".
---------------
DBLT_SET_OUT_STR_ARR(variable,cindex,size,stringLength)
##########
Description:
Converts input C array of strings or char ** to the appropriate SmCArg.
Input:
variable The C variable.
cindex The "C" (zero-based)index of the argument in the call to PCL.
size The number of entries in the one-dimensional array of entries in the one-dimensional array.
stringLength The maximum length of the strings.
---------------
DBLT_SET_IN_WID(variable,cindex)
##########
Description:
Converts input PCL widget or a void * (address)to the appropriate SmCArg structure. This may be rarely used,but can allow for passing much more complex data. But such data must have a PCL wrapper in Patran and the DLL must use the Patran data structures.
Input:
variable The C variable.
cindex The "C" (zero-based)index of the argument in the call to PCL.
---------------
ICALLSCRIPT(function_name,nargs)
##########
Description:
Using the array of SmCArgs and the return SmCArg defined by the previous macro,call the Patran PCL routine (using PSmCallScript)and return the result. The PCL routine must return an integer.
Input:
function_name The name of the PCL function to call.
nargs The number of arguments in the PCL function.
---------------
IVCALLSCRIPT(function_name,nargs)
##########
Description:
Using the array of SmCArgs and the return SmCArg defined by the previous macro,call the Patran PCL routine (using PSmCallScript)and return the result. The PCL routine has no return type (void).
Input:
function_name The name of the PCL function to call.
nargs The number of arguments in the PCL function.
---------------
utl_dyn_lib_open(lib_name,options)
##########
Description:
Opens a dynamic library (DLL)on Windows or shared library (SO)on Linux.
Input:
STRING lib_name Name of the DLL. May include the path name.
STRING options List of single character options: 'S' = silent mode - suppress message operation. 'P' = Use PCL search path to locate file.
Output:
None
INTEGER <Return Value> Returns 0 for success,non-zero otherwise.
Error Conditions:The library could not be found or opened.
---------------
utl_dyn_lib_close(lib_name,options)
##########
Description:
Closes a dynamic library (DLL)on Windows or shared library (SO)on Linux.
Input:
STRING lib_name Name of the DLL. May include the path name.
STRING options List of single character options: 'S' = silent mode - suppress message operation..
Output:
None
INTEGER <Return Value> Returns 0 for success,non-zero otherwise.
Error Conditions: The library could not be found or opened.
---------------
utl_dyn_lib_func(lib_name,c_routine_name,pcl_routine_name,options)
##########
Description:
Assigns a dynamic library routine name to a PCL name that can then be called by PCL.
Input:
STRING lib_name Dynamic library already opened by utl_dyn_lib_open.
STRING c_name Name of a function in the shared library.
STRING pcl_name Name of the function as seen by PCL.
STRING options List of single character options: 'S' = silent mode - suppress message operation..
Output:
None
INTEGER <Return Value> Returns 0 for success,non-zero otherwise.
---------------
AAUI.inputs_refresh(input_id)
##########
Description:
This function will display the required user input widgets in the Inputs Box and prepare the PCL function associated with input_id. This call is made automatically by the platform software when a new <dialog> is obtained.
Input:
STRING input_id[32] This value specifies the index id located in the function definitions file.
Output:
Error Conditions:
None.
---------------
AAUI.inputs_applycb()
##########
Description:
This function will call the function referenced by the inputid index on the functions definitions text file. This call is made as part of the callback to the “Apply Inputs” button.
Input:
Output:
INTEGER This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AAUI.selectdatabox_read_raw(num_select_databox,vstring)
##########
Description:
This function will return the value in the specified select databox that is displayed in the UI form “Inputs” area.
Input:
INTEGER num_select_databox This value specifies which displayed select databox to read data from. 1 for the first select databox displayed,2 for the second select databox displayed,etc.
Output:
STRING vstring[VIRTUAL] This value returns the data in the specified select databox. The memory is allocated with in this function.
INTEGER This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AAUI.selectdatabox_read_ids(num_select_databox,num_ids,ids)
##########
Description:
This function will process data that is displayed in a select databox on the “Inputs” area of the UI form. It will return the ids of the entities selected. It is only supported for specific data types,like Point,Node,Element,Curve,Surface,Solid. Duplicate entries are eliminated.
Input:
INTEGER num_select_databox This value specifies the displayed select databox to read data from. 1 for the first select databox displayed,2 for the second select databox displayed,etc.
Output:
INTEGER num_ids This value returns the number of id values returned.
INTEGER ids(VIRTUAL)This value returns the ids. The memory is allocated within this function.
INTEGER This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AAUI.selectdatabox_read_coords(num_select_databox,num,x_comp,y_comp,z_comp)
##########
Description:
This function will process data that is displayed in a select databox on the “Inputs” area of the UI form. It will return the global coordinate positions for either Nodes or Points that were screen selected and displayed in a select databox.
Input:
INTEGER num_select_databox This value specifies the displayed select databox to read data from.1 for the first select databox displayed,2 for the second select databox displayed,etc.
Output:
INTEGER num This value returns the number of coordinates returned.
REAL x_comp(VIRTUAL)This value returns the X coordinate values. The memory is allocated within this function.
REAL y_comp(VIRTUAL)This value returns the Y coordinate values. The memory is allocated within this function.
REAL z_comp(VIRTUAL)This value returns the Z coordinate values. The memory is allocated within this function.
INTEGER This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None
---------------
AAUI.selectdatabox_assread_raw(num_select_databox,entity,parent,entity_type,assoc_entities)
##########
Description:
This function will return a list of all entities associated with the parent entities that were selected in the select databox.
Input:
INTEGER num_select_databox This value specifies the displayed select databox to read data from.1 for the first select databox displayed,2 for the second select databox displayed,etc.
STRING entity[] This value specifies the desired entity type. The supported values are: “curve”,“elem”,“node”,“point” and “surface”.
STRING parent[] This value specifies the general type of entities contained by the select databox. The supported values are: “geo”,and “elem”.
INTEGER entity_type This value specifies the element shape to filter on when the entity is set to “elem”. Otherwise it is ignored. See the remarks below for more information.
Output:
STRING assoc_entities[VIRTUAL] This value returns a pick list of entities that match the given criteria.
INTEGER This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AAUI.selectdatabox_assread_ids(num_select_databox,entity,parent,entity_type,num_ids,ids)
##########
Description:
This function will return all the entity ids associated with the parent entities in the select databox.
Input:
INTEGER num_select_databox This value specifies the displayed select databox to read data from.1 for the first select databox displayed,2 for the second select databox displayed,etc.
STRING entity[] This value specifies the desired entity type. The supported values are: “curve”,“elem”,“node”,“point” and “surface”.
STRING parent[] This value specifies the general type of entities contained by the select databox. The supported values are: “geo”,and “elem”.
INTEGER entity_type This value specifies the element shape to filter on when the entity is set to “elem”. Otherwise it is ignored. See the remarks below for more information.
Output:
INTEGER num_ids This value returns the number of id values returned.
INTEGER ids(VITRUAL)This value returns the ids. The memory is allocated within this function.
INTEGER This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AAUI.selectdatabox_assread_coords(num_select_databox,entity,parent,num,x_comp,y_comp,z_comp)
##########
Description:
This function will return the global coordinate positions for either nodes or points associated with parent entities in the specified select databox.
Input:
INTEGER num_select_databox This value specifies the displayed select databox to read data from.1 for the first select databox displayed,2 for the second select databox displayed,etc.
STRING entity[] This value specifies the desired entity type. The supported values are: “node” or “point”.
STRING parent[] This value specifies the general type of entities contained by the select databox. The supported values are: “geo”,and “elem”.
Output:
INTEGER num This value returns the number of coordinates returned.
REAL x_comp(VIRTUAL)This value returns the X coordinate values. The memory is allocated within this function.
REAL y_comp(VIRTUAL)This value returns the Y coordinate values. The memory is allocated within this function.
REAL z_comp(VIRTUAL)This value returns the Z coordinate values. The memory is allocated within this function.
INTEGER This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AAUI.dialog_put_text(HTML_text)
##########
Description:
This function will display the HTML data in the UI form dialog box widget.
Input:
STRING HTML_text[] This value specifies the HTML data in the form of “<HTML> ....insert your text here.... </HTML>”.
Output:
Error Conditions:
None.
---------------
AAUI.sthelp_helpcb()
##########
Description:
This function will be called as part of the call back from the Help button. It will call AAI.step_help_doc,130 in order to display a help document in the Browser.
Input: Output:
Error Conditions:
None.
---------------
AAUI.helpdoc_display(doc_URL)
##########
Description:
This function will display any specified HTML document available on the file system,or display any http: URL address.
Input:
STRING doc_URL[] This value specifies the path or URL address for the document to be displayed by the commercial browser that is used for auxiliary display.
Output:
Error Conditions:
None.
---------------
AAUI.quickreview_quickcb()
##########
Description:
This function will post the Quick Review form to the screen. This is called as part of the callback from the “Quick Review” button. The Quick Review form displays user response variables from the State Table as indicated by the <uresponse> tags for each analysis step.
Input:
Output:
Error Conditions:
None.
---------------
AAUI.quit_quitcb()
##########
Description:
This function will close down the MSC Acumen GUI. This is called as part of the callback for the “Quit” button.
Input:
Output:
Error Conditions:
None.
---------------
AAUI.backup_backupcb()
##########
Description:
This function will cause the dialog to back up to the previous dialog. This call is made as part of the callback to the “Dialog Backup” button.
Input:
Output:
INTEGER This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AAUI.backup_status(backup)
##########
Description:
This function will indicate whether or not a backup action is in progress.
Input:
Output:
LOGICAL backup This value returns TRUE if the dialog backup action is in progress,or a FALSE if a dialog backup action is not in progress.
Error Conditions:
None.
---------------
AAUI.notify_backup_done()
##########
Description:
This function will reset the backup status to FALSE,so any subsequent call to AAUI.backup_status()will return FALSE.
Input:
Output:
Error Conditions:
None.
---------------
AAUI.backup_enable(on_off)
##########
Description:
This function provides a mechanism for independent enabling and disabling of the UI form "Dialog Backup" button. Use this function to guard against <dialog> backup actions within a step where the workflow sequence is not designed to support a backup.
Input:
STRING on_off[] If this value is "ON" then the “Dialog Backup” button is enabled so that a user can select it. If this value is "OFF" (actually any value other than "ON")then the button is disabled so that no backup action selection is possible.
Output:
Error Conditions:
None.
---------------
AAUI.mainpanel_include_steps(num_steps,step_ids,completed,step_names)
##########
Description:
This function will display the analysis steps in the main step selection box. It is called by the function AAI.allsteps_display()which reads the drive pages and obtains the information to display.
Input:
INTEGER num_steps This value specifies the number of analysis steps to create switch items for.
STRING step_ids[4](num_steps)This value specifies the step ids or labels for the switch items. Note: multi-byte characters are NOT allowed for step ids.
STRING completed[1](num_steps)This value specifies whether a step is completed or not. The single character values will be a blank,a ‘C’ or an ‘X’ indicating “not tested yet”,“completed”,or “completion test failed” respectively.
STRING step_names[36](num_steps)This value specifies the descriptions assigned to the steps.
Output:
Error Conditions:
None
---------------
AAUI.mainpanel_current_step(step_id)
##########
Description:
This function will provide the step id label for the current step as selected on the UI main panel. If no step is currently selected,the value returned will be the last step that was previously selected.
Input:
Output:
STRING step_id[4] This value returns the current step id.
Error Conditions:
None.
---------------
AAUI.mainpanel_step_complete(step_id,complete)
##########
Description:
This function will change the display of the completeness indicator for an analysis step displayed in the main step selection box.
Input:
STRING step_id[4] This value specifies the step id that will be modified.
STRING complete[1] This value specifies the value the completion indicator will be set to. The values “ “ (blank),“C” or “X” are expected in normal practice.
Output:
Error Conditions:
None.
---------------
AAUI.mainpanel_lock_steps()
##########
Description:
This function will disable the main step selection box widget so that a user cannot make a new step selection. This is useful to force the completion of one step before another can be selected.
Input:
Output:
Error Conditions:
None.
---------------
AAUI.mainpanel_unlock_steps()
##########
Description:
This function will reverse the action of the lock_steps function,enabling the main step selection box switches to be selected. Unlocking also enables any subsequent display change of completion indicators.
Input:
Output:
Error Conditions:
None.
---------------
AAUI.mainpanel_unselect_steps()
##########
Description:
This function will change the state of the main step selection box switch widget to a null state,so that no analysis step is currently selected.
Input:
Output:
Error Conditions:
None.
---------------
AAUI.switch_highlight(step_id)
##########
Description:
This function selects a step on the UI form “main step selection box” in an automated mode. This is a software method of selecting a step as opposed to having the user select the step manually.
Input:
STRING step_id[4] This value specifies the step id that will be highlighted.
Output:
INTEGER This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AAUI.switch_highlight_restorer(step_id)
##########
Description:
This function is automatically called by the platform software upon re-opening an existing database. This function automatically selects the correct step for continuing,and precisely the next dialog for the user to act upon.
Input:
STRING step_id[4] This value specifies the step id that will be highlighted.
Output:
INTEGER This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
db_drop_res_index()
##########
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_sub_case(loadcase_id,sub_case_title,sub_case_id,result_case_id)
##########
Description:
This function creates a sub and result case associated to a load case.
Input:
INTEGER load_case_id This value specifies the load case id value.
INTEGER sub_case_title[31] This value specifies the sub case title.
Output:
INTEGER sub_case_id This value returns the sub case id value.
INTEGER result_case_id This value returns the results case id value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
dbt_create_global_variables(num,rcid,label,numform,csys_type,cid,code,gvid,values)
##########
Description:
Input:
INTEGER num ALWAYS assign num=1.
INTEGER rcid Existing result case ID.
STRING label[] Label for the global variable. This is used to match with other global variables assigned to other result cases.
INTEGER numform Integer code for the numeric form of the data where 1-Real,2=Imaginary,3-Complex Magnitude,4=Complex Phase,6=Complex Real,7=Complex Angle.
INTEGER csys_type(num)An array of coordinate system types where: -1=Unknown,0=Global,1=Nodal,2=Element,3=User,4=Material,5=Ply,6=On Edge,7=On Curve,8=Data Dependent.
INTEGER cid(num)Existing coordinate frame ID (csys_type=3).
STRING code[] A label descriptor for the analysis code name.
REAL values(6)An array of real values (only the first used at this time).
Output:
INTEGER gvid Database ID pointer to the global variable entity.
INTEGER Return Value This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
dbt_assoc_global_variables(<num>,<rcid>,<label>,<numform>,<csys_type>,<cid>,<code>,<gvid>,<values>)
##########
Description:
Input:
INTEGER <num> Number of global variable pairs to associate.
INTEGER <rcid> Result case to which these variables belong.
INTEGER ARRAY <list1> (num)global variable IDs to be associated with list2.
INTEGER ARRAY <list2> (num)global variable IDs to be associated with list1.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
dbt_create_res_types(<num>,<pri_label>,<sec_label>,<datatype>,<numform>,<from_code>,<units>,<rtid>)
##########
Description:
Input:
INTEGER <num> Number of global variable pairs to associate.
CHARACTER STRING <pri_label> Primary label result descriptor.
CHARACTER STRING <sec_label> Secondary label result descriptor.
INTEGER <datatype> Integer code for the result datatype where 0=Unknown,1=Scalar,2=Vector,3=Tensor
INTEGER <numform> Integer code for the numeric form of the data where 1-Real,2=Imaginary,3-Complex Magnitude,4=Complex Phase,6=Complex Real,7=Complex Angle.
CHARACTER STRING <from_code> Analysis code from which results were derived.
INTEGER <units> Assign units=0. NOT USED.
Output:
INTEGER <rtid> Database ID pointer for the result type created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
dbt_assoc_res_types(<num>,<pri_label>,<sec_label>,<datatype>,<numform>,<from_code>,<units>,<rtid>)
##########
Description:
Input:
INTEGER <num> Number of result type pairs to associate.
INTEGER ARRAY <list1> (num)result type IDs to be associated with list2.
INTEGER ARRAY <list2> (num)result type IDs to be associated with list1.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
dbt_create_elem_positions(<num>,<ctype>,<coords>,<epid>)
##########
Description:
Input:
INTEGER <num> Number of result type pairs to associate.
INTEGER <ctype> Flay specifying which coordinate system is used to express the postion within the element. 0 = unknown cordinate system. [0,0,0,0].1 = parametic coordinate system standardly used for line elemnts,quadrilateral surface elements and hexahedral solid elements. [c1,0,0,0],[c1,c2,0,0],or [c1,c2,c3,0].2 = area coordinate system standardly used for triangular surface elements. [c1,c2,c3,0].3 = volume coordinate system standardly used for tetrahedral and pentahedral solid elements. The difinition of this sytem differs depending upon the element type being referenced. For tetrahedral solid elements,the standard volume coordinate system is used. For pentahedral solid elements a hybrid between the area coordinate system and the parametric system is used. The first three values are area coordinates of the postion within the local XY plane of the element. The fourth value is the parametric value of Z. [c1,c2,c3,c4].
REAL ARRAY <coords>(4)The coordinates of the position within the element in the coordinate system specified by <ctype>. Always an array of four values. Use zeroes for any array positions which have no meaning.
Output:
INTEGER <epid> The internal ID assigned to the newly created element position.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
dbt_create_sect_pos(<num>,<label>,<ctype>,<coords>,<secid>)
##########
Description:
Input:
INTEGER <num> ALWAYS assign num=1.
CHARACTER STRING <label> Label for the section position which may be blank if the results are not section based.
INTEGER <ctype> NOT USED,assign ctype=0.
REAL ARRAY <coords> NOT USED.
Output:
INTEGER <secid> Integer Database ID pointer to the section position entity created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
dbt_create_layers(<num>,<comp_id>,<secid>,<layerid>)
##########
Description:
Input:
INTEGER <num> ALWAYS assign num=1.
INTEGER <comp_id> Composite layer ID. May be 0 if there is no layered data.
INTEGER <secid> Database ID of an existing section position entity to which this layer is assigned.
Output:
INTEGER <layerid> Integer Database ID pointer to the layer entity created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_add_s_nod_res_by_type(<num>,<rtid>,<rcid>,<layerids>,<nids>,<results>)
##########
Description:
Input:
INTEGER <num> Number of nodes/results input.
INTEGER <rtid> Existing result type ID.
INTEGER <rcid> Existing result case ID.
INTEGER ARRAY <layerids> (num)sized array of layer ID for the result at each node.
INTEGER ARRAY <nids> (num)sized array of node IDs.
REAL ARRAY <results> (num)sized array of scalar results at each node/layer.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_add_s_nod_res_by_pos(<num>,<rtids>,<rcid>,<layerid>,<nids>,<results>)
##########
Description:
Input:
INTEGER <num> Number of nodes/results input.
INTEGER ARRAY <rtids> (num)sized array of existing result type IDs.
INTEGER <rcid> Existing result case ID.
INTEGER <layerids> Existing layer ID.
INTEGER ARRAY <nids> (num)sized array of node IDs.
REAL ARRAY <results> (num)sized array of scalar results at each node/result type.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_add_v_nod_res_by_type(<num>,<rtid>,<rcid>,<layerids>,<nids>,<csys_type>,<cid>,<results>)
##########
Description:
Input:
INTEGER <num> Number of nodes/results input.
INTEGER <rtid> Existing result type ID.
INTEGER <rcid> Existing result case ID.
INTEGER ARRAY <layerids> (num)sized array of layer ID for the result at each node.
INTEGER ARRAY <nids> (num)sized array of node IDs.
INTEGER ARRAY <csys_type> (num)sized array of coordinate system types where: -1=Unknown,0=Global,1=Nodal,2=Element,3=User,4=Material,5=Ply,6=On Edge,7=On Curve,8=Data Dependent.
INTEGER ARRAY <cid> (num)sized array of CIDs (csys_type=3).
REAL ARRAY <results> (num,3)sized array of vector results at each node/layer.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_add_v_nod_res_by_pos(<num>,<rtids>,<rcid>,<layerid>,<nids>,<csys_type>,<cid>,<results>)
##########
Description:
Input:
INTEGER <num> Number of nodes/results input.
INTEGER ARRAY <rtids> (num)sized array of existing result type IDs.
INTEGER <rcid> Existing result case ID.
INTEGER <layerid> Existing layer ID.
INTEGER ARRAY <nids> (num)sized array of node IDs.
INTEGER ARRAY <csys_type> (num)sized array of coordinate system types where -1=Unknown,0=Global,1=Nodal,2=Element,3=User,4=Material,5=Ply,6=On Edge,7=On Curve,8=Data Dependent.
INTEGER ARRAY <cid> (num)sized array of CIDs (csys_type=3).
REAL ARRAY <results> (num,3)sized array of vector results at each node/result type.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_add_t_nod_res_by_type(<num>,<rtid>,<rcid>,<layerids>,<nids>,<csys_type>,<cid>,<results>)
##########
Description:
Input:
INTEGER <num> Number of nodes/results input.
INTEGER <rtid> Existing result type ID.
INTEGER <rcid> Existing result case ID.
INTEGER ARRAY <layerids> (num)sized array of layer ID for the result at each node.
INTEGER ARRAY <nids> (num)sized array of node IDs.
INTEGER ARRAY <csys_type> (num)sized array of coordinate system types where: -1=Unknown,0=Global,1=Nodal,2=Element,3=User,4=Material,5=Ply,6=On Edge,7=On Curve,8=Data Dependent.
INTEGER ARRAY <cid> (num)sized array of CIDs (csys_type=3).
REAL ARRAY <results> (num,6)sized array of tensor results at each node/layer.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_add_t_nod_res_by_pos(<num>,<rtids>,<rcid>,<layerid>,<nids>,<csys_type>,<cid>,<results>)
##########
Description:
Input:
INTEGER <num> Number of nodes/results input.
INTEGER ARRAY <rtids> (num)sized array of existing result type IDs.
INTEGER <rcid> Existing result case ID.
INTEGER <layerid> Existing layer ID.
INTEGER ARRAY <nids> (num)sized array of node IDs.
INTEGER ARRAY <csys_type> (num)sized array of coordinate system types where -1=Unknown,0=Global,1=Nodal,2=Element,3=User,4=Material,5=Ply,6=On Edge,7=On Curve,8=Data Dependent.
INTEGER ARRAY <cid> (num)sized array of CIDs (csys_type=3).
REAL ARRAY <results> (num,6)sized array of tensor results at each node/result type.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_add_s_elem_res_by_type(<num>,<rtid>,<rcid>,<epids>,<layerids>,<elids>,<results>)
##########
Description:
Input:
INTEGER <num> Number of elements/results input.
INTEGER <rtid> Existing result type ID.
INTEGER <rcid> Existing result case ID.
INTEGER ARRAY <epids> (num)array of element position IDs for each element.
INTEGER ARRAY <layerids> (num)sized array of layer ID for the result at each element position.
INTEGER ARRAY <elids> (num)sized array of element IDs.
REAL ARRAY <results> (num)sized array of scalar results at each element/layer position.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_add_s_elem_res_by_pos(<num>,<rtids>,<rcid>,<epid>,<layerid>,<elid>,<results>)
##########
Description:
Input:
INTEGER <num> Number of results for a given element input.
INTEGER ARRAY <rtids>(num)Sized array of existing result type IDs.
INTEGER <rcid> The result case id to be associated with each of the values.
INTEGER <epid> Existing element position ID.
INTEGER <layerid> Existing layer ID.
INTEGER <elid> Existing element ID.
REAL ARRAY <results>(num)Sized array of scalar results at each element per result type.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_add_v_elem_res_by_type(<num>,<rtid>,<rcid>,<epids>,<layerids>,<elids>,<csys_type>,<cid>,<results>)
##########
Description:
Input:
INTEGER <num> Number of elements/results input.
INTEGER <rtid> Existing result type ID.
INTEGER <rcid> Existing result case ID.
INTEGER ARRAY <epids> (num)array of element position IDs for each element.
INTEGER ARRAY <layerids> (num)sized array of layer ID for the result at each element.
INTEGER ARRAY <elids> (num)sized array of element IDs.
INTEGER ARRAY <csys_type> (num)sized array of coordinate system types where: -1=Unknown,0=Global,1=Nodal,2=Element,3=User,4=Material,5=Ply,6=On Edge,7=On Curve,8=Data Dependent.
INTEGER ARRAY <cid> (num)sized array of cids (csys_type=3).
REAL ARRAY <results> (num,3)sized array of vector results at each element/layer position.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_add_v_elem_res_by_pos(<num>,<rtids>,<rcid>,<epid>,<layerid>,<elids>,<csys_type>,<cid>,<results>)
##########
Description:
Input:
INTEGER <num> Number of elements/results input.
INTEGER ARRAY <rtids> (num)sized array of existing result type IDs.
INTEGER <rcid> Existing result case ID.
INTEGER <epid> Existing element position ID.
INTEGER <layerids> Existing layer ID.
INTEGER ARRAY <elids> (num)sized array of element IDs.
INTEGER ARRAY <csys_type> (num)sized array of coordinate system types where: -1=Unknown,0=Global,1=Nodal,2=Element,3=User,4=Material,5=Ply,6=On Edge,7=On Curve,8=Data Dependent.
INTEGER ARRAY <cid> (num)sized array of CIDs (csys_type=3).
REAL ARRAY <results> (num,3)sized array of vector results at each element/result type.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_add_t_elem_res_by_type(<num>,<rtid>,<rcid>,<epids>,<layerids>,<elids>,<csys_type>,<cid>,<results>)
##########
Description:
Input:
INTEGER <num> Number of elements/results input.
INTEGER <rtid> Existing result type ID.
INTEGER <rcid> Existing result case ID.
INTEGER ARRAY <epids> (num)array of element position IDs for each element.
INTEGER ARRAY <layerids> (num)sized array of layer ID for the result at each element.
INTEGER ARRAY <elids> (num)sized array of element IDs.
INTEGER ARRAY <csys_type> (num)sized array of coordinate system types where: -1=Unknown,0=Global,1=Nodal,2=Element,3=User,4=Material,5=Ply,6=On Edge,7=On Curve,8=Data Dependent.
INTEGER ARRAY <cid> (num)sized array of CIDs (csys_type=3).
REAL ARRAY <results> (num,6)sized array of tensor results at each element/layer position.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_add_t_elem_res_by_pos(<num>,<rtids>,<rcid>,<epid>,<layerid>,<elids>,<csys_type>,<cid>,<results>)
##########
Description:
Input:
INTEGER <num> Number of elements/results input.
INTEGER ARRAY <rtids> (num)sized array of existing result type IDs.
INTEGER <rcid> Existing result case ID.
INTEGER <epid> Existing element position ID.
INTEGER <layerid> Existing layer ID.
INTEGER ARRAY <elids> (num)sized array of element IDs.
INTEGER ARRAY <csys_type> (num)sized array of coordinate system types where: -1=Unknown,0=Global,1=Nodal,2=Element,3=User,4=Material,5=Ply,6=On Edge,7=On Curve,8=Data Dependent.
INTEGER ARRAY <cid> (num)sized array of CIDs (csys_type=3).
REAL ARRAY <results> (num,6)sized array of tensor results at each element/result type.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_post_results_load()
##########
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_count_mpcs(<num_mpcs>)
##########
Description:
Output:
INTEGER <num_mpcs> The number of MPCs defined in the database.
LOGICAL <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_count_mpcs_in_group(<group_id>,<num_mpcs>)
##########
Description:
Input:
INTEGER <group_id> The internal ID of the group of interest. This ID can be determined by either “db_get_group_id” or “db_get_current_group_id” as described in Groups,657.
Output:
INTEGER <num_mpcs> The number of MPCs belonging to the group specified by <group_id>.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_mpc_ids(<num_mpcs>,<mpc_ids>)
##########
Description:
db_get_mpcs_in_group(<num_mpcs>,<group_id>,<mpc_ids>)
##########
Input:
INTEGER <num_mpcs> The number of MPCs defined in the database.
INTEGER <group_id> The internal ID of the group of interest. This ID can be determined by either “db_get_group_id” or “db_get_current_group_id” as described in Groups,657.
Output:
INTEGER ARRAY <mpc_ids> The <num_mpcs> IDs of all the MPCs belonging to the group specified by <group_id>.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_mpc(<mpc_id>,<mpc_type_id>,<geom_flag>,<coord_id>,<constant>,<sequen_flag>,<num_sub_mpcs>,<num_terms>,<max_num_nodes>,<max_num_dofs>)
##########
Description:
Input:
INTEGER <mpc_id> The ID of the MPC entity of interest.
Output:
INTEGER <mpc_type_id> The ID of the MPC type. See db_create_mpc_type_def,611 for details about the meaning of this ID.
LOGICAL <geom_flag> A flag specifying whether this MPC references geometry (TRUE)or finite element nodes (FALSE).
INTEGER <coord_id> The coordinate frame in which the multi-point constraint relations are expressed. Zero if in the relation is expressed in the global system or a frame reference is not appropriate.
REAL <constant> The equation constant of the MPC,if applicable.
LOGICAL <sequen_flag> A flag specifying whether the sequence of data input is of importance (TRUE)or not (FALSE). If sequence is important,the order in which the data is received from the database functions will be the order in which the data was input to Patran.
INTEGER <num_sub_mpcs> The number of sub MPCs (multi-point constraint relations)which belong to this MPC entity.
INTEGER <num_terms> The number of terms which each of the sub MPCs will have.
INTEGER <max_num_nodes> The maximum number of nodes associated with any given MPC term in this MPC entity.
INTEGER <max_num_dofs> The maximum number of degrees-of-freedom associated with any given MPC term in this MPC entity.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_mpc_type_def(<type_id>,<type_name>,<geom_flag>,<coord_flag>,<const_flag>,<const_label>,<sequen_flag>,<depend_coeff_flag>,<depend_dof_flag>,<max_depend_terms>,<min_depend_terms>,<dofs_per_depend>,<nodes_per_depend>,<indep_coeff_flag>,<indep_dof_flag>,<max_indep_terms>,<min_indep_terms>,<dofs_per_indep>,<nodes_per_indep>)
##########
Description:
Input:
INTEGER <type_id> The ID of the MPC type of interest.
Output:
CHARACTER STRING <type_name> The name of this MPC type.
LOGICAL <geom_flag> A flag specifying whether this MPC type references geometry or nodes:TRUE = references geometryFALSE = references nodes
LOGICAL <coord_flag> A flag specifying whether this MPC type references a coordinate frame or not:TRUE = references coordinate frameFALSE = does not reference frame
LOGICAL A flag specifying whether this MPC type has a constant term or not:TRUE = has constant termFALSE = does not have constant term
CHARACTER STRING <const_label> The label to be used for the constant term
LOGICAL <sequen_flag> A flag specifying whether the order of term definition should be maintained or not:TRUE = maintain orderFALSE = ignore order
LOGICAL <depend_coeff_flag>
A flag specifying whether the dependent terms have multiplicative constants assigned to them or not:TRUE = have multiplicative constantsFALSE = do not have constants
LOGICAL <depend_dof_flag>
A flag specifying whether the dependent terms have explicitly or implicitly specified degrees-of-freedom:TRUE = degrees-of-freedom explicitly definedFALSE = implicit degrees-of-freedom
INTEGER <max_depend_terms>
The maximum number of dependent terms allowed. Zero if there is no limit.
INTEGER <min_depend_terms>
The minimum number of dependent terms allowed.
INTEGER <dofs_per_depend>
The maximum number of degrees-of-freedom that can be associated with a dependent term.
INTEGER <nodes_per_depend>
The number of nodes to be associated with each dependent term. Zero if there is no definite number.
LOGICAL <indep_coeff_flag>
A flag specifying whether the independent terms have multiplicative constants assigned to them or not:TRUE = have multiplicative constantsFALSE = do not have constants
LOGICAL <indep_dof_flag>
A flag specifying whether the independent terms have explicitly or implicitly specified degrees-of-freedom:TRUE = degrees-of-freedom explicitly definedFALSE = implicit degrees-of-freedom
INTEGER <max_indep_terms>
The maximum number of independent terms allowed. Zero if there is no limit.
INTEGER <min_indep_terms>
The minimum number of independent terms allowed.
INTEGER <dofs_per_indep>
The maximum number of degrees-of-freedom that can be associated with an independent term.
INTEGER <nodes_per_indep>
The number of nodes to be associated with each independent term. Zero if there is no definite number.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_all_sub_mpc(<mpc_id>)
##########
Description:
Input:
INTEGER <mpc_id> The ID of the MPC entity of interest.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_next_sub_mpc(<mpc_id>,<sub_mpc_id>)
##########
Description:
db_get_all_mpc_term(<mpc_id>,<sub_mpc_id>)
##########
Input:
INTEGER <mpc_id> The ID of the MPC entity of interest.
INTEGER <sub_mpc_id> The ID of the sub MPC (or multi-point constraint relation)of interest.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_next_mpc_term(<mpc_id>,<sub_mpc_id>,<max_num_nodes>,<max_num_dofs>,<mpc_term_id>,<depend_flag>,<term_coeff>,<node_ids>,<dofs>,<num_nodes>,<num_dofs>)
##########
Description:
Input:
INTEGER <mpc_id> The ID of the MPC entity of interest.
INTEGER <sub_mpc_id> The ID of the sub MPC (or multi-point constraint relation)of interest.
INTEGER <max_num_nodes>
The maximum number of nodes that can be associated with this term. This value is obtained from “db_get_mpc”.
INTEGER <max_num_dofs>
The maximum number of degrees-of-freedom that can be associated with this term. This value is gotten from “db_get_mpc”.
Output:
INTEGER <mpc_term_id> The ID of this MPC term.
LOGICAL <depend_flag> A flag specifying whether the term is a dependent term of the MPC equation (TRUE)or an independent term (FALSE).
REAL <term_coeff> The coefficient specified for this MPC term.
INTEGER ARRAY <node_ids> The IDs of all the nodes associated with this MPC term.
INTEGER ARRAY <dofs> The IDs of all the degrees-of-freedom associated with this MPC term. For details about the meanings of these IDs,see db_create_degree_of_freedom. These degrees-of-freedom are applied to each of the nodes specified in <node_ids>. For example,three node IDs in <node_ids> and three degrees-of-freedom in <dofs> would result in nine equation terms.
INTEGER <num_nodes> The actual number of nodes associated with this MPC term.
INTEGER <num_dofs> The actual number of degrees-of-freedom associated with this MPC term.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_mpc_exist(<num_mpcs>,<mpc_ids>,<exist>)
##########
Description:
Input:
INTEGER <num_mpcs> The number of MPC IDs to be checked.
INTEGER ARRAY <mpc_ids> The <num_mpcs> MPC IDs to check.
Output:
INTEGER ARRAY <exist> The <num_mpcs> flags specifying whether each MPC ID is already in use (1)or not (0).
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_max_mpc(<max_mpc_id>)
##########
Description:
Output:
INTEGER <max_mpc_id> The maximum MPC ID currently existing in the database.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_mpc_nodal(<mpc_id>,<mpc_type_id>,<coord_id>,<constant>)
##########
Description:
Input:
INTEGER <mpc_id> The ID of the MPC entity as determined by one of the methods described above. This ID must be unique with respect to all other MPC entity IDs and must be greater than zero.
INTEGER <mpc_type_id> The ID of the MPC type. See db_create_mpc_type_def,611 for details about this ID.
INTEGER <coord_id> The ID of the coordinate frame in which all the multi-point constraint relations of this MPC entity are expressed. Zero if the relations are in the global system or if the equations are interpreted in the nodal system of each node.
REAL <constant> The constant term for all the constraint relations of this MPC entity.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_mpc_term(<mpc_id>,<sub_mpc_id>,<depend_flag>,<num_nodes>,<num_dofs>,<term_coeff>,<node_ids>,<dofs>,<mpc_term_id>)
##########
Description:
Input:
INTEGER <mpc_id> The ID of the MPC entity as determined by one of the methods described above. This ID must be unique with respect to all other MPC entity IDs and must be greater than zero.
INTEGER <sub_mpc_id> The ID of the sub MPC to which the MPC term is to be added.
LOGICAL <depend_flag> A flag specifying whether this MPC term is a dependent term (TRUE)or an independent term (FALSE).
INTEGER <num_nodes> The number of nodes belonging to this MPC term.
INTEGER <num_dofs> The number of degrees-of-freedom belonging to this MPC term.
REAL <term_coeff> The coefficient assigned to this MPC term.
INTEGER ARRAY <node_ids> The <num_nodes> IDs of all the nodes belonging to this MPC term.
INTEGER ARRAY <dofs> The <num_dofs> IDs of all the degrees-of-freedom belonging to this MPC term. See db_create_degree_of_freedom,491 for details about these IDs. These degrees-of-freedom affected each of the nodes listed in <node_ids>. For example,three nodes in <node_ids> and three degrees-of-freedom in <dofs> will result in nine equation terms.
Output:
INTEGER <mpc_term_id> The ID assigned to this MPC term by Patran.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_mpc_term(<mpc_id>,<sub_mpc_id>,<depend_flag>,<num_nodes>,<num_dofs>,<term_coeff>,<node_ids>,<dofs>,<mpc_term_id>)
##########
Description:
Input:
INTEGER <mpc_id> The ID of the MPC entity as determined by one of the methods described above. This ID must be unique with respect to all other MPC entity IDs and must be greater than zero.
INTEGER <sub_mpc_id> The ID of the sub MPC to which the MPC term is to be added.
LOGICAL <depend_flag> A flag specifying whether this MPC term is a dependent term (TRUE)or an independent term (FALSE).
INTEGER <num_nodes> The number of nodes belonging to this MPC term.
INTEGER <num_dofs> The number of degrees-of-freedom belonging to this MPC term.
REAL <term_coeff> The coefficient assigned to this MPC term.
INTEGER ARRAY <node_ids> The <num_nodes> IDs of all the nodes belonging to this MPC term.
INTEGER ARRAY <dofs> The <num_dofs> IDs of all the degrees-of-freedom belonging to this MPC term. See db_create_degree_of_freedom,491 for details about these IDs. These degrees-of-freedom affected each of the nodes listed in <node_ids>. For example,three nodes in <node_ids> and three degrees-of-freedom in <dofs> will result in nine equation terms.
Output:
INTEGER <mpc_term_id> The ID assigned to this MPC term by Patran.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_add_mpc_to_group(<mpc_id>,<group_id>,<visible>)
##########
Description:
Input:
INTEGER <mpc_id> The ID of the MPC to be added to the specified group.
INTEGER <group_id> The internal ID of the group of interest. This ID can be determined by either “db_get_group_id” or “db_get_current_group_id” as described in Groups.
LOGICAL <visible> A flag specifying whether the MPC entity is visible (TRUE)or not (FALSE).
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_lbc(<load_id>,<load_name>,<load_type>,<application_type>,<elem_dimension>,<coord_id>,<dynamic_flag> )
##########
Input:
INTEGER <load_id> The internal ID of the load of interest.
Output:
CHARACTER STRING <load_name> The external name used to reference this load.
INTEGER <load_type> The internal ID of this load type. See db_create_lbc_type_defn,577 for the meaning of this ID.
INTEGER <application_type> A code specifying what type of entities this load is applied to and how the load is applied: 1 = load applied to nodes 2 = load applied to elements and constant over the element. 3 = load applied to elements and varying over the element.
INTEGER <elem_dimension> The dimensionality of the loaded elements: 1 = line element2 = surface elements3 = solid elements
INTEGER <coord_id> The ID of the coordinate frame along which the loads are acting. Zero means acting in the global system or not appropriate for this load.
INTEGER <dynamic_flag> A flag specifying whether this load is constant with respect to time or frequency (0)or varies with respect to time or frequency (1).
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_lbc_id_for_type(lbc_type_count,lbc_type_name,lbc_count,lbc_id)
##########
Description:
This function finds the Load/BC ids for the given Load/BC type names.
Input:
INTEGER lbc_type_count This value specifies the number of Load/BC types.
STRING lbc_type_name[]()This array specifies the Load/BC type names. Example : [“Displacement”,”Pressure”,“Convection”,“Distributed Load”,“Temperature”].
Output:
INTEGER lbc_count This value returns the number of Load/BC.
INTEGER lbc_id()This array returns the Load/BC ids.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
db_get_lbc_var_value(lbc_name,lbc_var_name,lbc_var_component,eval_at_time,eval_at_frequency,which_ar,fem_count,fem_type,fem_id,fem_face_or_edge_id,fem_node_pos,fem_val)
##########
Description:
This function evaluates the finite element entity Load/BC variable values for the given Load/BC name and Load/BC variable name.
Input:
STRING lbc_name[] This value specifies the Load/BC name.
STRING lbc_var_name[] This value specifies the Load/BC variable name. Example : [”Bot Surf Pressure”,“Translations <T1 T2 T3>”,“Temperature”].
INTEGER lbc_var_component This value specifies the component of the data to extract (values can range from 1 to 3)this value is ignored in the case the data is scalar.
REAL eval_at_time This value specifies the time value used for field evaluation.
REAL eval_at_frequency This value specifies the frequency value used for field evaluation.
STRING which_ar[] This value specifies the string containing digits matching the desired potential application regions ids. Ex: If you want to recover possible content of 2 first application region: “12”. To recover content of 1st application region only: “1”. One can speficy more ids than actually exist: “12345”.
Output:
INTEGER fem_count This value returns the number of finite element entities.
INTEGER fem_type(VIRTUAL)This array returns the finite element entity types : 123 (DbTblNode): for a node. 124 (DbTblElem): for a element. 153 (DbTblElemFace): for a element face (values can range from 1 to 6). 154 (DbTblElemEdge): for a element edge (values can range from 1 to 12).
INTEGER fem_id(VIRTUAL)This array returns the node or element id.
INTEGER fem_face_or_edge_id(VIRTUAL)This array returns the element face or edge id.
INTEGER fem_node_pos(VIRTUAL)This array returns the element node position. Will vary between 0 (not applicable)up to the maximum quantity of nodes for this element type. When greater than 0,we have a element variable Load/BC.
REAL fem_val(VIRTUAL)This array returns the finite element entity value. Evaluated for spatial dependant field,time dependant field,frequency dependant field if necessary.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
db_get_lbc_new(<load_id>,<load_name>,<application_type>,<load_type>,<target_elem_dim>,<dyn_flag>,<cid_flag>,<scale_factor>,<geo_fem>,<app_reg_couple>,<app_reg_order>,<equiv_flag>,<acid_mod>)
##########
Input:
INTEGER <load_id> The internal ID of the load of interest.
Output:
CHAR <load_name>[31] The external name used to reference this load.
INTEGER <application_type> A code specifying what type of entities this load is applied to and how the load is applied.1 = load applied to nodes2 = load applied to elements and constant over the element3 = load applied to elements and varying over the element
INTEGER <load_type> The internal ID of this load type. See db_create_lbc_type_defn,577 for the meaning of this ID.
INTEGER <target_elem_dim>(3)
The dimensionality of the loaded elements for application regions 1 and 2:1 = line element2 = surface elements3 = solid elements target_elem_dim(3)is currently unused,but must be allocated.
INTEGER <dyn_flag> A flag specifying whether this load is constant with respect to time or frequency (0)or varies with respect to time or frequency (1).
INTEGER <cid_flag> Used to indicate whether an alternate coordinate system is allowed; 0=global,>0 alt coord,-1=use implied local coord.
REAL <scale_factor> Load/BC set scale factor.
INTEGER <geo_fem>(3)Specifies whether this lbc was originally applied to geometry or fem for each application region. For release 1.4,entity types in multiple application regions are restricted to all geometry or all fem in both regions. 0=geometry,1=fem. geo_fem(3)is currently unused,but must be allocated.
INTEGER <app_reg_couple> Multiple application region coupling action.
INTEGER <app_reg_order> Multiple application region order option.
INTEGER <equiv_flag> Flag used to prevent equivalencing between nodes in multiple application regions. Not yet implemented at release 1.4.0 = equivalencing allowed1 = equivalencing not allowed
INTEGER <acid_mod> Flag used to indicate that this lbc requires the analysis coordinate frame for nodes in its application region to be modified. Not yet implemented at release 1.4.0 = analysis coordinate frame modification required1 = analysis coordinate frame modification not required
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_lbc_type_defn_by_id(<load_type_id>,<load_type_name>,<analy_type_id>,<applic_type>,<glob_flag>,<coord_flag>,<graph_sym>,<scal_vect>,<null_vect>,<num_analy_codes>,<analy_code_ids>,<def_color>,<color_box>,<anchor> )
##########
Input:
INTEGER <load_type_id> The ID of the load type of interest.
Output:
CHARACTER STRING <load_type_name> The name of this load type.
INTEGER <analy_type_id> Flag specifying the analysis type.
INTEGER <applic_type> Flag specifying the effect of this load type:0 = Body Load1 = Boundary Load
INTEGER <glob_flag Flag specifying whether the load has global application or not:0 = Only application region affected1 = Global load: affects everything
INTEGER <coord_flag> Flag specifying whether the load can be oriented in a given local frame or not:0 = No local frame orientation allowed1 = Local frame orientation accepted
INTEGER <graph_sym> Flag specifying what graphic symbol should be used for this load type. Refer to Table 6‑1 for definition of the graphics symbols.
INTEGER <scal_vect> Flag specifying the data form of the load:0 = scalar1 = vector
INTEGER <null_vect> Flag specifying whether blank components of a vector load are to be interpreted as zeroes (as with forces)or nulls (as with displacements):0 = interpret blank components as zeroes1 = interpret blank components as nulls
INTEGER <num_analy_codes> The number of analysis codes in which this load type is applicable
INTEGER ARRAY <analy_code_ids The <num_analy_codes> IDs of all the analysis codes for which this load type is valid. The value of <num_analy_codes> (and,the size of this array)cannot be derived. An array size of 1000 should be sufficient.
INTEGER <def_color> Flag specifying the default color to be used for this load type. Refer to Table 6‑2 for color definitions.
INTEGER <color_box> The number of the color box to be used to modify the load type color. Must range from 601 to 640 and be unique for a given analysis code. Refer to Table 6‑3 for IDs used by Patran.
INTEGER <anchor> Flag which specifies the anchor style for vector load types:1 = anchor at base2 = anchor at tip3 = anchor at middle
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_lbc_defn(<lbc_type_id>,<lbc_type_name>,<lbc_option_name>,<lbc_class>,<lbc_form>,<global_bc_flag>,<cid_flag>,<scalar_vector>,<null_vector_flag>,<default_color>,<colorbox_id>,<num_app_regions>,<no_data_flag>,<input_data_pcl>,<app_region_pcl>,<target_elem_display>,<dyn_data_form>,<acid_mod>,<equiv_flag>)
##########
Input:
INTEGER <lbc_type_id> Lbc type id,e.g. Displacement id = 6
Output:
CHAR <lbc_type_name> [31] LBC type name,e.g. "Displacement". See Table 6‑4 for the load ID’s currently being used by Patran.
CHAR <lbc_option_name>[31] LBC Option name associated with the LBC Type Name,if any,e.g. "Deformable Body" for "Contact".
INTEGER <lbc_class> Flag specifying the analysis type.0 = Structural1 = Thermal2 = Fluid Dynamics
INTEGER <lbc_form> Flag specifying the effect of this load type:0 = Body Load1 = Boundary Load
INTEGER <global_bc_flag> Flag specifying whether the load has global application or not:0 = Only application region affected1 = Global load: affects everything
INTEGER <cid_flag> Flag specifying whether an alternate coordinate system is allowed:0 = No local frame orientation allowed1 = Local frame orientation accepted-1 = Local coord frame implied
INTEGER <scalar_vector> Flag specifying the data form of the load:0 = scalar1 = vector
INTEGER <null_vector_flag> Flag specifying whether blank components of a vector load are to be interpreted as zeroes (as with forces)or nulls (as with displacements):0 = interpret blank components as zeroes1 = interpret blank components as nulls
INTEGER <default_color> Flag specifying the default color to be used for this load type. Refer to Table 6‑2 for color definitions.
INTEGER <colorbox_id> The number of the color box to be used to modify the load type color. Must range from 601 to 640 and be unique for a given analysis code. Refer to Table 6‑3 for IDs used by Patran.
INTEGER <num_app_regions> Flag specifying the number of application regions; 0 thru 2.
INTEGER <no_data_flag> Flag specifying whether any input data is required:0 = input data required1 = no input data required
CHAR <input_data_pcl>[31] PCL classname for customized input data form. If blank,standard form is used.
CHAR <app_region_pcl>[31] PCL classname for customized select application region form. If blank,standard form is used.
INTEGER <target_elem_display> Flag which disables display of Target Element Menu. Note: This can only be used if customized PCL is specified. 0 = do not disable1 = disable
INTEGER <dyn_data_form> Flag specifying whether to use double input data form width for dynamic lbcs: 0 = do not use double width form1 = use double width form
INTEGER <acid_mod> Flag specifying whether this lbc requires the analysis coordinate frame for nodes in its application region to be modified. (Not yet implemented.)0 = analysis coordinate frame modification required1 = analysis coordinate frame modification not required
INTEGER <equiv_flag> Flag used to prevent equivalencing between nodes in multiple application regions. (Not yet implemented.)0 = equivalencing allowed1 = equivalencing not allowed
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_lbc_fem_count(<load_id>,<num_values> )
##########
Input:
INTEGER <load_id> The internal ID of the load of interest.
Output:
INTEGER <num_values> The number of data values associated with the specified load.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
lbc_get_one_app_reg_str(lbc_id,which_ar,add_ass_fem,app_reg_content)
##########
Description:
This function gets the application region for the given Load/BC id.
Input:
INTEGER lbc_id This value specifies the Load/BC id.
STRING which_ar[] This value specifies the string holding digits matching the desired potential application regions ids. Ex: If you want to recover possible content of 2 first application region: “12”. To recover content of 1st application region only: “1”. One can speficy more ids than actually exist: “12345”.
INTEGER add_ass_fem This value specifies 1 (TRUE)if we wish to recover associated FEM entities which may not be specified in the application region. This can be usefull to get the FEM entities associated to the geometric entities specified in the application regions. 0 (FALSE)otherwise.
Output:
STRING app_reg_content[ VIRTUAL] This value returns a list processor string of entities in the selected application region ids and associated FEM entities (if desired).
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
db_get_all_fem_ss_by_id(<load_id> )
##########
Input:
INTEGER <load_id> The internal ID of the load of interest.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_next_fem_ss_by_id(<load_var_id>,<entity_type>,<entity_id>,<sub_entity_id>,<load_value>,<scale_factor>,<node_position>,<region_type> )
##########
Output:
INTEGER <load_var_id> The ID of the load variable as described above.
INTEGER <entity_type> A flag specifying the entity type to which this load is applied:123 = node124 = element153 = element face154 = element edge
INTEGER <entity_id> The ID of the element or node.
INTEGER <sub_entity_id> The ID of the element face or edge. Zero if inappropriate.
REAL <load_value> The value of the load at this point in space.
REAL <scale_factor> The value of the scale factor applied to this load.
INTEGER <node_position> The number of the node at which this load value applies. Appropriate for variable loads only. If there is only one value for an element,<node_position> will be zero.
INTEGER <region_type> The number of the region type. Will be one for all loads which only have one application region like forces and pressures. Will be one or more for multi-application region loads such as sliding friction.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_all_fem_sv_by_id(<load_id> )
##########
Input:
INTEGER <load_id> The internal ID of the load of interest.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_next_fem_sv_by_id(<load_var_id>,<entity_type>,<entity_id>,<sub_entity_id>,<load_value>,<null_vector>,<scale_factor>,<node_position>,<region_type> )
##########
Output:
INTEGER <load_var_id> The ID of the load variable as described above.
INTEGER <entity_type> A flag specifying the entity type to which this load is applied:123 = node124 = element153 = element face154 = element edge
INTEGER <entity_id> The ID of the element or node.
INTEGER <sub_entity_id> The ID of the element face or edge. Zero if inappropriate.
REAL ARRAY <load_value> The values of the three components of the vector load at this point in space.
INTEGER ARRAY <null_vector> An array of null flags for the three components of the vector. -1 means the component field was left blank; 0 means that data was entered into the component field.
REAL <scale_factor> The value of the scale factor applied to this load.
INTEGER <node_position> The number of the node at which this load value applies. Appropriate for variable loads only. If there is only one value for an element,<node_position> will be zero.
INTEGER <region_type> The number of the region type. Will be one for all loads which only have one application region like forces and pressures. Will be one or more for multi-application region loads such as sliding friction.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_all_fem_ds_by_id(<load_id> )
##########
Input:
INTEGER <load_id> The internal ID of the load of interest.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_next_fem_ds_by_id(<load_var_id>,<entity_type>,<entity_id>,<sub_entity_id>,<load_value>,<dynamic_field>,<scale_factor>,<node_position>,<region_type> )
##########
Output:
INTEGER <load_var_id> The ID of the load variable as described above.
INTEGER <entity_type> A flag specifying the entity type to which this load is applied:123 = node124 = element153 = element face154 = element edge
INTEGER <entity_id> The ID of the element or node.
INTEGER <sub_entity_id> The ID of the element face or edge. Zero if inappropriate.
REAL <load_value> The value of the load at this point in space.
INTEGER <dynamic_field> The ID of the field expressing the time of frequency dependence of the load. Zero implies that the load is constant over time or frequency.
REAL <scale_factor> The value of the scale factor applied to this load.
INTEGER <node_position> The number of the node at which this load value applies. Appropriate for variable loads only. If there is only one value for an element,<node_position> will be zero.
INTEGER <region_type> The number of the region type. Will be one for all loads which only have one application region like forces and pressures. Will be one or more for multi-application region loads such as sliding friction.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_all_fem_dv_by_id(<load_id> )
##########
Input:
INTEGER <load_id> The internal ID of the load of interest.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_next_fem_dv_by_id(<load_var_id>,<entity_type>,<entity_id>,<sub_entity_id>,<load_value>,<dynamic_field>,<null_vector>,<scale_factor>,<node_position>,<region_type> )
##########
Output:
INTEGER <load_var_id> The ID of the load variable as described above.
INTEGER <entity_type> A flag specifying the entity type to which this load is applied:123 = node124 = element153 = element face154 = element edge
INTEGER <entity_id> The ID of the element or node.
INTEGER <sub_entity_id> The ID of the element face or edge. Zero if inappropriate.
REAL ARRAY <load_value> The values of the three components of the vector load at this point in space.
INTEGER ARRAY <dynamic_field> The three IDs of the fields referenced to express the time or frequency dependence of each of the vector components. Zero implies that the value for that component is constant over time or frequency.
INTEGER ARRAY <null_vector> An array of null flags for the three components of the vector. -1 means the component field was left blank; 0 means that data was entered into the component field.
REAL <scale_factor> The value of the scale factor applied to this load.
INTEGER <node_position> The number of the node at which this load value applies. Appropriate for variable loads only. If there is only one value for an element,<node_position> will be zero.
INTEGER <region_type> The number of the region type. Will be one for all loads which only have one application region like forces and pressures. Will be one or more for multi-application region loads such as sliding friction.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_lbc_fem_data(<lbc_id>,<num_entities>,<entity_type>,<entity_id>,<entity_subid>,<node_position>,<app_region_id>,<nvar>,<variable_ids>,<data_type>,<scalar_vector>,<dynamic_flag>,<integer_value>,<real_value>,<field_id>,<node_ids>,<dyn_field_ids> )
##########
Output:
INTEGER <lbc_id> The internal ID of the load of interest.
INTEGER <num_entities> Number of entities times the number of node positions.
INTEGER <entity_type>[] Entity types: 123 = node124 = element153 = element face154 = element edge
INTEGER <entity_id>[] The ID of the element or node.
INTEGER <entity_subid>[] The ID of the element face or edge. Zero if inappropriate.
INTEGER <node_position> Entity node positions. The number of the node at which this load value applies. Appropriate for variable loads only. If there is only one value for an element,the node position will be zero.
INTEGER <app_region_id>[] Input data variable ids for each variable.
INTEGER <nvar>[] The number of input variables for each entity.
INTEGER <variable_ids>[][nvar]
Input data variable ids for each variable.
INTEGER <data_type>[][nvar]
Data types for each variable. Valid types are: 0 = real/field1 = integer3 = real value7 = field id5 = node id
INTEGER <scalar_vector>[][nvar]
Scalar or vector flag for each variable:0 = scalar1 = vector
INTEGER <dynamic_flag>[][nvar]
Indicates if there are dynamic fields for each variable:0 = no dynamic fields1 = dynamic fields
INTEGER <integer_value>[][nvar]
Integer values for each variable.
REAL <real_value>[][invar][3]
Real values for each variable.
INTEGER <field_id>[][nvar][3]
Fields ids for each variable.
INTEGER <node_ids>[][nvar]
Node ids for each variable.
INTEGER <dyn_field_ids>[][nvar][3]
Dynamic field ids for each variable.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_lbc_new(<lbc_name>,<lbc_category>,<lbc_type_id>,<target_elem_dim>,<dyn_flag>,<cid_flag>,<scale_factor>,<geo_fem>,<app_region_couple>,<app_region_order>,<equiv_flag>,<acid_mod>,<lbc_id>)
##########
Input:
CHAR <lbc_name>[31] The external name used to reference this load.
INTEGER <lbc_category> A code specifying what type of entities this load is applied to and how the load is applied.1 = load applied to nodes2 = load applied to elements and constant over the element3 = load applied to elements and varying over the element
INTEGER <lbc_type_id> The ID of the load type of this load. See Table 6‑4 for the load ID’s currently being used by Patran.
INTEGER <target_elem_dim>[3]
The dimensionality of the loaded elements for each application region. Set target_elem_dim[2] to zero if only one application region. Set target_elem_dim[3] to zero (not currently being used).1 = line element2 = surface element3 = solid element
INTEGER <dyn_flag> A flag specifying whether this load is constant with respect to time or frequency (0)or varies with respect to time or frequency (1).
INTEGER <cid_flag> Used to indicate whether an alternate coordinate system is allowed; 0=global,>0 alt coord,-1=use implied local coord
REAL <scale_factor> Load set scale factor
INTEGER <geo_fem>[3] A flag specifying whether this lbc was originally applied to geometry or fem for each application region. Set geo_fem[2] to zero if only one application region. Set geo_fem[3] to zero (not currently being used).0 = geometry1 = fem
INTEGER app_region_couple
Multiple application region coupling action. Used for multiple application region LBCs only. Meaning of value is determined by application. Set to zero if only one application region.
INTEGER app_region_order
Multiple application region order option. Used for multiple application region LBCs only. Meaning of value is determined by application. Set to zero if only one application region.
INTEGER <equiv_flag> Used to prevent equivalencing between nodes in multiple application regions:0 = don’t prevent1 = prevent
INTEGER <acid_mod> Flag which says that this lbc requires the analysis coordinate frame for nodes to be modified:0 = don’t modify1 = modify
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_lbc_sv(<load_id>,<num_variables>,<variable_ids>,<real_values>,<spatial_fields>,<null_flags>,<scale_factors> )
##########
Input:
INTEGER <load_id> The internal ID of the load of interest.
INTEGER <num_variables> The number of load variables defined for this load.
INTEGER ARRAY <variable_ids> The IDs of the <num_variables> load variables defined for this load. See db_create_nodal_lbc_var_defn,581 and db_create_elem_lbc_var_defn,580 for details about the load variable IDs.
REAL ARRAY <real_values> The values for the 3 components for each of the <num_variables> load variables. If a corresponding spatial field reference exists,this load value is meaningless.
INTEGER ARRAY <spatial_fields> The spatially varying field references for the 3 components for each of the <num_variables> load variables. Zero signifies that there is no spatial variance in the load and the corresponding <real_values> value should be used. If there is a spatial field reference,the corresponding <real_values> value should be ignored.
INTEGER ARRAY <null_flags> The null component flags for the 3 components for each of the <num_variables> load variables. -1 means that no data was filled in for that vector component,whereas 0 means that data was input for the corresponding vector component.
REAL ARRAY <scale_factors> The <num_variables> scale factors to be applied to each of the load variables.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_lbc_input_data(<lbc_id>,<variable_id>,<data_type>,<scalar_or_vector>,<dynamic_flag>,<eval_flag>,<integer_value>,<char_value>,<real_value>,<field_id>,<dyn_field_id>,app_region_ids>,<node_id> )
##########
Input:
INTEGER <lbc_id> The internal ID of the load.
INTEGER variable_id Input data variable id assigned when db is stuffed for this lbc_type_id. See lbc_defn_create.lbc_var_defn,587.
INTEGER data_type Specifies datatype for this databox:0 = real/field1 = integer3 = real value7 = field id5 = node id
INTEGER scalar_vector If this is a real number/field then this flag indicates whether it is scalar or vector:0 = scalar1 = vector
INTEGER dynamic_flag Specifies static or dynamic load:0 = static1 = dynamic
INTEGER eval_flag Used to determine if the data requires evaluation (the data type is a field). If the data for this variable is constant then no evaluation is needed.0 = evaluation not required1 = evaluation required
INTEGER integer_value The value of the integer variable if data_type is integer.
CHAR char_value[31] The character string if data_type is character.
REAL real_value[3] The real values (1 if scalar,3 if vector)if data_type is real/field. If scalar,set real[2] and [3] to zero.
INTEGER field_id[3] The field ids (1 if scalar,3 if vector)if data_type is real/field. If scalar,set field_id[2] and [3] to zero.
INTEGER dyn_field_id[3] The dynamic field ids (1 if scalar,3 if vector)if data_type is real/field. If scalar,set dyn_field_id[2] and [3] to zero.
INTEGER app_region_ids[3] The application region ids to which the load is to be applied. Set app_region_ids[3] to zero (not currently being used). The load need not be applied to both application regions. Always set app_region_ids[1] to the first loaded application region. Always set app_region_ids[2] to the second loaded application region,or zero if only one application region is loaded.
INTEGER node_id The node id if data_type is node.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_lbc_app_region(<load_id>,<region_type>,<entity_type>,<entity_id>,<sub_entity_id> )
##########
Input:
INTEGER <load_id> The internal ID of the load.
INTEGER <region_type> A code specifying the region type:1 = the standard application region
INTEGER <entity_type> A code specifying the type of entity the load was originally applied to:1 = point2 = curve3 = surface4 = solid123 = node124 = element153 = face of element154 = edge of element
INTEGER <entity_id> The ID of the main entity,i.e.,a point,curve,surface,solid,node or element ID.
INTEGER <sub_entity_id> The ID of the sub entity ID,i.e.,a element face or element edge ID.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_bulk_lbc_app_region_n(<lbc_id>,<app_region_id>,<count>,<entity_type>,<entity_id>,<entity_subid>,<app_region_set> )
##########
Input:
INTEGER <lbc_id>
INTEGER <app_region_id>
INTEGER <count>
INTEGER <entity_type>[count]
A code specifying the type of entity the load was originally applied to:1 = point2 = curve3 = surface4 = solid123 = node124 = element153 = face of element154 = edge of element
INTEGER <entity_id>[count} The ID of the main entity,i.e.,a point,curve,surface,solid,node or element ID.
INTEGER <entity_subid>[count]
The ID of the sub entity ID,i.e.,a element face or element edge ID.
INTEGER <app_region_set>[count]
Used for two application regions only. If there is more than one set of entities in the application region then this denotes which set they belong to. Input 0 if only one application region
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_fem_ss(<load_id>,<num_points>,<variable_ids>,<entity_types>,<entity_ids>,<sub_entity_ids>,<real_values>,<scale_factors>,<nodal_positions>,<region_types> )
##########
Input:
INTEGER <load_id> The internal ID of this load.
INTEGER <num_points> The number of data points defined for this load.
INTEGER ARRAY <variable_ids> The <num_points> load variable IDs for all the data points.
INTEGER ARRAY <entity_types> The entity type codes for each of the data points:123 = node124 = element153 = element face154 = element edge
INTEGER ARRAY <entity_ids> The IDs of the main loaded entity (node or element ID)for all the data points.
INTEGER ARRAY <sub_entity_ids> The IDs of the loaded sub entities (element edge or face numbers)for all the data points. Zero if not applicable.
REAL ARRAY <real_values> The real values of the load for all the data points. The scale factors should incorporated into this value.
REAL ARRAY <scale_factors> The original scale factors applied to all the data points. These factors should already be incorporated into the <real_values> array,so these values are somewhat redundant.
INTEGER ARRAY <nodal_positions> The type of region being loaded. Always 1,for now.
INTEGER ARRAY <region_types> The type of region being loaded. Always 1,for now.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_fem_sv(<load_id>,<num_points>,<variable_ids>,<entity_types>,<entity_ids>,<sub_entity_ids>,<real_values>,<null_flags>,<scale_factors>,<nodal_positions>,<region_types> )
##########
Input:
INTEGER <load_id> The internal ID of this load.
INTEGER <num_points> The number of data points defined for this load.
INTEGER ARRAY <variable_ids> The <num_points> load variable IDs for all the data points.
INTEGER ARRAY <entity_types> The entity type codes for each of the data points:123 = node124 = element153 = element face154 = element edge
INTEGER ARRAY <entity_ids> The IDs of the main loaded entity (node or element ID)for all the data points.
INTEGER ARRAY <sub_entity_ids> The IDs of the loaded sub entities (element edge or face numbers)for all the data points. Zero if not applicable.
REAL ARRAY <real_values> The real values of the 3 components of the load for all the data points. The scale factors should incorporated into this value.
INTEGER ARRAY <null_flags> A flag for each of the 3 components of load for all the data points specifying whether data was input for that component (0)or the component was left blank (-1).
REAL ARRAY <scale_factors> The original scale factors applied to all the data points. These factors should already be incorporated into the <real_values> array,so these values are somewhat redundant.
INTEGER ARRAY <nodal_positions> The node numbering expressing where the particular values are being applied. Zero if the load is constant over the element or the load is being applied directly to nodes.
INTEGER ARRAY <region_types> The type of region being loaded. Always 1,for now.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_fem_ds(<load_id>,<num_points>,<variable_ids>,<entity_types>,<entity_ids>,<sub_entity_ids>,<real_values>,<dynamic_fields>,<scale_factors>,<nodal_positions>,<region_types> )
##########
Input:
INTEGER <load_id> The internal ID of the load.
INTEGER <num_points> The number of data points defined for this load.
INTEGER ARRAY <variable_ids> The <num_points> load variable IDs for all the data points.
INTEGER ARRAY <entity_types> The entity type codes for each of the data points:123 = node124 = element153 = element face154 = element edge
INTEGER ARRAY <entity_ids> The IDs of the main loaded entity (node or element ID)for all the data points.
INTEGER ARRAY <sub_entity_ids> The IDs of the loaded sub entities (element edge or face numbers)for all the data points. Zero if not applicable.
REAL ARRAY <real_values> The real values of the load for all the data points. The scale factors should incorporated into this value.
INTEGER ARRAY <dynamic_fields> The dynamic field references for all the data points. Zero implies that the load is constant over time or frequency.
REAL ARRAY <scale_factors> The original scale factors applied to all the data points. These factors should already be incorporated into the <real_values> array,so these values are somewhat redundant.
INTEGER ARRAY <nodal_positions> The node numbering expressing where the particular values are being applied. Zero if the load is constant over the element or the load is being applied directly to nodes.
INTEGER ARRAY <region_types> The type of region being loaded. Always 1,for now.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_fem_dv(<load_id>,<num_points>,<variable_ids>,<entity_types>,<entity_ids>,<sub_entity_ids>,<real_values>,<dynamic_fields>,<null_flags>,<scale_factors>,<nodal_positions>,<region_types> )
##########
Input:
INTEGER <load_id> The internal ID of the load.
INTEGER <num_points> The number of data points defined for this load.
INTEGER ARRAY <variable_ids> The <num_points> load variable IDs for all the data points.
INTEGER ARRAY <entity_types> The entity type codes for each of the data points:123 = node124 = element153 = element face154 = element edge
INTEGER ARRAY <entity_ids> The IDs of the main loaded entity (node or element ID)for all the data points.
INTEGER ARRAY <sub_entity_ids> The IDs of the loaded sub entities (element edge or face numbers)for all the data points. Zero if not applicable.
REAL ARRAY <real_values> The real values of the 3 components of the load for all the data points. The scale factors should incorporated into this value.
INTEGER ARRAY <dynamic_fields> The dynamic field references for the 3 components of the load for all the data points. Zero implies that the component of the data point load is constant with respect to time or frequency.
INTEGER ARRAY <null_flags> A flag for each of the 3 components of load for all the data points specifying whether data was input for that component (0)or the component was left blank (-1).
INTEGER ARRAY <region_types> The type of region being loaded. Always 1,for now.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_lbc_fem_data(<lbc_id>,<num_ent>,<entity_type>,<entity_id>,<entity_subid>,<node_position>,<app_region_id>,<nvar>,<variable_id>,<data_type>,<scalar_vector>,<dynamic_flag>,<integer_value>,<real_value>,<dyn_field_id> )
##########
Input:
INTEGER <lbc_id> The internal ID of this load.
INTEGER <num_ent> Number of entities times the number of node positions in each app region.
INTEGER <entity_type>[ The entity type codes for each of the data points:123 = node124 = element153 = element face154 = element edge
INTEGER <entity_id>[ ] The IDs of the main loaded entity (node or element ID)for all the data points.
INTEGER <entity_subid>[ ] The IDs of the loaded sub entities (element edge or face numbers)for all the data points. Zero if not applicable.
INTEGER <node_position>[ ] The node numbering expressing where the particular values are being applied. Zero if the load is constant over the element or the load is being applied directly to nodes.
INTEGER <app_region_id> The application Region id for each entity.
INTEGER <nvar> The number of input variables for each application region entity.
INTEGER <variable_id>[][nvar]
Input data variable IDs.
INTEGER <data_type>[ ][nvar]
Data type for each variable. Valid types are:0 = real/field1 = integer3 = real value7 = field id5 = node id
INTEGER <scalar_vector>[ ][nvar]
Scalar or vector flag.0 = scalar1 = vector
INTEGER <dynamic_flag>[ ][nvar]
Indicates if there are dynamic fields.0 = no dynamic fields1 = dynamic fields
INTEGER <integer_value>[ ][nvar]
Integer values.
REAL <real_value>[ ][nvar][3]
Real values. 3 values are required. For scalar,put scalar in 1st position and zeros in 2 and 3.
INTEGER <dyn_field_id>[ ][nvar][3]
Dynamic field ids. 3 values are required. For scalar,put scalar in 1st position and zeros in 2 and 3.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_lbc_fem_data_2reg(<lbc_id>,<num_ent>,<entity_type>,<entity_id>,<entity_subid>,<node_position>,<app_region_id>,<app_reg_set_order>,<app_region_set>,<fem_set_id>,<nvar>,<variable_id>,<data_type>,<scalar_vector>,<dynamic_flag>,<integer_value>,<real_value>,<dyn_field_id> )
##########
Input:
INTEGER <lbc_id> The internal ID of this load.
INTEGER <num_ent> Number of entities times the number of node positions in each app region.
INTEGER <entity_type> The entity type codes for each of the data points:123 = node124 = element153 = element face154 = element edge
INTEGER <entity_id>[] The IDs of the main loaded entity (node or element ID)for all the data points.
INTEGER <entity_subid>[] The IDs of the loaded sub entities (element edge or face numbers)for all the data points. Zero if not applicable.
INTEGER <node_position>[] The node numbering expressing where the particular values are being applied. Zero if the load is constant over the element or the load is being applied directly to nodes.
INTEGER <app_region_id>[] The application Region id for each entity.
INTEGER <app_reg_set_order>[]
The application Region set order for each entity.
INTEGER <app_region_set>[] The application Region set number for each entity.
INTEGER <fem_set_id>[] The fem set id for each entity.
INTEGER <nvar> The number of input variables for each application region entity.
INTEGER <variable_id>[ ][nvar] Input data variable IDs.
INTEGER <data_type>[ ][nvar] Data type for each variable. Valid types are:0 = real/field1 = integer3 = real value7 = field id5 = node id
INTEGER <scalar_vector>[ ][nvar]
Scalar or vector flag.0 = scalar1 = vector
INTEGER <dynamic_flag>[ ][nvar]
Indicates if there are dynamic fields.0 = no dynamic fields1 = dynamic fields
INTEGER <integer_value>[ ][nvar]
Integer values.
REAL <real_value>[ ][nvar][3]
Real values. 3 values are required. For scalar,put scalar in 1st position and zeros in 2 and 3.
INTEGER <dyn_field_id>[ ][nvar][3]
Dynamic field ids. 3 values are required. For scalar,put scalar in 1st position and zeros in 2 and 3.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_add_lbc_to_load_case(<load_case_id>,<load_id>,<priority_code>)
##########
Input:
INTEGER <load_case_id> The internal ID of the load case to which the specified load is to be added. See Load Cases,751 for more about the load case ID.
INTEGER <load_id> The internal ID of the load of interest.
INTEGER <priority_code> A flag specifying the priority of this load within this load case. Zero specifies that all loads are additive. Otherwise,when more than one load of a given type is applied to a given entity,(e.g.,node or element),the load with the highest <priority_code> value overwrites all other same-type loads for that entity.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error 
---------------
db_modify_lbc_name(old_name,new_name)
##########
Description:
This function renames an LBC.
Input:
STRING[32] old_name LBC name to be modified.
STRING[32] new_name New LBC name.
Output:
INTEGER <Return Value> 0=success,otherwise failure.
---------------
db_get_all_load_case_names()
##########
Output:
CHARACTER STRING <load_case_name> The name of the currently active load case.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_next_load_case_name(<load_case_name> )
##########
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_next_load_case_name(<load_case_name>)
##########
Output:
STRING <load_case_name> The name of a load case stored in the database. The maximum length of a load case name is 80 characters.
INTEGER <Return Value> If zero,the function is returning a valid load case name. If non-zero,there are no more load case names to return. This function should be called until a non_zero status is returned.
---------------
db_count_lbc_by_load_case(<load_case_name>,<num_loads> )
##########
Input:
CHARACTER STRING <load_case_name> The name of the load case of interest.
Output:
INTEGER <num_loads> The number of loads associated with this load case.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_load_case(<load_case_name>,<load_case_id>,<load_case_type>,<load_case_description>,<num_loads>,<load_ids>,<dynamic_case_name>,<evaluation_point>,<load_priorities> )
##########
Input:
CHARACTER STRING <load_case_name> The name of the load case of interest.
Output:
INTEGER <load_case_id> The internal ID of the specified load case.
INTEGER <load_case_type> A flag specifying the type of load case: 1 = static load case 2 = time dependent load case 3 = frequency dependent load case
CHARACTER STRING <load_case_description> A character string containing a description of the specified load case.
INTEGER <num_loads> The number of loads associated with this load case.
INTEGER ARRAY <load_ids> The <num_loads> IDS of all the loads associated with this load case.
CHARACTER STRING <dynamic_case_name> The name o fthe dynamic load case from which this static load case was derived. A blank string if not applicable.
REAL <evaluation_point> The time or frequency value at which the dynamic load case was evaluated in order to create this static load case. Zero if not applicable.
INTEGER ARRAY <load_priorities> <num_loads> flags associated with all the loads in this load case specifying the priority of the load over other loads: 0 = no priority. The corresponding load will be overwritten by any load with priority whenever there is a conflict (multiple loads on the same node,for example). If all loads have “no priority” then the values from all the loads are simply combined. 1 = highest priority. This load will overwrite all other loads whenever a conflict occurs. Only one load should have priority 1 in a given load case. 2 = second highest priority. When a conflict occurs,this load will overwrite all other loads except for the load with priority 1. Only one load should have priority 2 in a given load case.. etc.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
INTEGER <load_case_type> A flag specifying the type of load case: 1 = static load case 2 = time dependent load case 3 = frequency dependent load case
---------------
db_get_load_case2(<load_case_name>,<load_case_id>,<load_case_scale_factor>,<load_case_type>,<load_case_description>,<num_loads>,<load_ids>,<load_scale_factors>,<load_priorities>,<dynamic_case_name>,<evaluation_point> )
##########
Input:
CHARACTER STRING <load_case_name> The name of the load case of interest.
Output:
INTEGER <load_case_id> The internal ID of the specified load case.
REAL <load_case_scale_factor>
The factor by which all loads in this load case will be scaled.
INTEGER <load_case_type> A flag specifying the type of load case: 1 = static load case 2 = time dependent load case 3 = frequency dependent load case
CHARACTER STRING <load_case_description>
A character string containing a description of the specified load case.
INTEGER <num_loads> The number of loads associated with this load case.
INTEGER ARRAY <load_ids> The <num_loads> IDS of all the loads associated with this load case.
REAL ARRAY <load_scale_factors> An array of <num_loads> scale factors corresponding to the <load_ids> by which each load is to be scaled.
INTEGER ARRAY <load_priorities> <num_loads> flags associated with all the loads in this load case specifying the priority of the load over other loads: 0 = no priority. The corresponding load will be overwritten by any load with priority whenever there is a conflict (multiple loads on the same node,for example). If all loads have “no priority” then the values from all the loads are simply combined. 1 = highest priority. This load will overwrite all other loads whenever a conflict occurs. Only one load should have priority 1 in a given load case. 2 = second highest priority. When a conflict occurs,this load will overwrite all other loads except for the load with priority 1. Only one load should have priority 2 in a given load case.etc.
CHARACTER STRING <dynamic_case_name>
The name o fthe dynamic load case from which this static load case was derived. A blank string if not applicable.
REAL <evaluation_point> The time or frequency value at which the dynamic load case was evaluated in order to create this static load case. Zero if not applicable.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_load_case(<load_case_name>,<load_case_type>,<load_case_description>,<num_loads>,<load_ids>,<dynamic_case_name>,<evaluation_point>,<load_priorities>,<load_case_id> )
##########
Input:
CHARACTER STRING <load_case_name> The external name of this load case.
INTEGER <load_case_type> A flag specifying the type of load case:1 = static load case2 = time dependent load case3 = frequency dependent load case
CHARACTER STRING <load_case_description>
A character string containing a description of this load case.
INTEGER <num_loads> The number of loads associated with this load case.
INTEGER ARRAY <load_ids> The <num_loads> IDs of all the loads associated with this load case.
CHARACTER STRING <dynamic_case_name>
The name of the dynamic load case from which this static load case was derived. A blank string if not applicable.
REAL <evaluation_point> The time or frequency value at which the dynamic load case was evaluated in order to create this static load case. Zero if not applicable.
INTEGER ARRAY <load_priorities> <num_loads> flags associated with all the loads in this load case specifying the priority of the load over other loads: 0 = no priority. The corresponding load will be overwritten by any load with priority whenever there is a conflict (multiple loads on the same node,for example). If all loads have “no priority” then the values from all the loads are simply combined. 1 = highest priority. This load will overwrite all other loads whenever a conflict occurs. Only one load should have priority 1 in a given load case. 2 = second highest priority. When a conflict occurs,this load will overwrite all other loads except for the load with priority 1. Only one load should have priority 2 in a given load case. 3 = third highest priority,etc.
Output:
INTEGER <load_case_id> The internal ID assigned to this load case by Patran.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_material(<material_id>,<material_name>,<category_id>,<linearity_code>,<directionality_code>,<mat_description>,<material_type>,<data_exists> )
##########
Input:
INTEGER <material_id> The internal ID of the material record of interest.
Output:
CHARACTER STRING <material_name> The external name used to reference this material record.
INTEGER <category_id> The ID of the material category of this material record. See db_create_matl_category,551.
INTEGER <linearity_code> A code specifying the linearity of this material. See db_create_matl_lin,494.
INTEGER <directionality_code>
A code specifying the directionality of this material. See db_create_matl_dir,495.
CHARACTER STRING <mat_description> A character string describing this material record.
INTEGER <material_type> A code specifying the type of material:0 = homogeneous material1 = standard laminate lay-up2 = rule of mixtures material3 = Halpin-Tsai material4 = short fiber composite101 = externally defined material
INTEGER <data_exists> A flag specifying whether any material property words are associated with this material record (1)or not (0). If no words are associated with this record,then this is probably an externally defined material.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_matl_const_model_count(<material_id>,<num_models> )
##########
Input:
INTEGER <material_id> The internal ID of the material record.
Output:
INTEGER <num_models> The number of constitutive models associated with this material record.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_matl_const_model(<material_id>,<model_ids> )
##########
Input:
INTEGER <material_id> The internal ID of the material record.
Output:
INTEGER <model_ids> The <num_models> IDs of all the constitutive models associated with this material record.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_active_flag(<material_id>,<modelled>,<option_ids>,<active_flag> )
##########
Input:
INTEGER <material_id> The internal ID of the material record.
INTEGER <model_id> The ID of the material constitutive model of interest.
Output:
INTEGER ARRAY <option_ids> A five element array containing the actual material options chosen in each material option category. This array is zero filled and in the order the data was originally input. For example,if the data input consisted of two material option categories (yield function and hardening rule),one possible array would be [11,15,0,0,0].
INTEGER <active_flag> A user specified flag determining whether the material constitutive model specified by <model_id> is active for the material record specified by <material_id> (<active_flag> = 1)or not (<active_flag> = 0). Again,data associated with an inactive constitutive model should not be translated.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_matl_prop_value_count(<material_id>,<num_words> )
##########
Input:
INTEGER <material_id> The internal ID of the material record.
Output:
INTEGER <num_words> The number of material property words associated with this material record. If zero,this material record is probably externally defined.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_matl_prop_value(material_id,word_ids,field_ids,word_values )
##########
Input:
INTEGER material_id The internal ID of the material record.
Output:
INTEGER word_ids(5)This value returns the material options chosen in each material option category. This value is filled in the order in which the data was originally input. For example,if the data input consisted of two material option categories,such as yield function and hardening rule,one possible set of values would be [11,15,0,0,0].
INTEGER field_ids()This value returns the IDs of the data field references for all the material words. If this value is non-zero for a given material word,then the material word references a data field. The value of the word can be obtained by data field evaluation or exportation and the value contained in the output value,word_values,should be ignored. If field_ids is zero for a given material word,the word is constant (has no data field reference)and its value is in the output value,word_values.
REAL word_values()This value returns the value of material property words that have no data field references.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_matl_prop_value2(mat_id,mat_prop_id,eval_at_temperature,eval_at_strain,eval_at_strain_rate,eval_at_time,eval_at_frequency,mat_prop_found,mat_prop_val)
##########
Description:
This function evaluates the material property value for the given material id.
Input:
INTEGER mat_id This value specifies the material id.
INTEGER mat_prop_id This value specifies the material property word id. See the remarks below for a list of values that can be used with this argument.
REAL eval_at_temperature This value specifies the temperature value used for field evaluation.
REAL eval_at_strain This value specifies the strain (OR: total strain,plastic strain,stress)value used for field evaluation.
REAL eval_at_strain_rate This value specifies the strain rate value used for field evaluation.
REAL eval_at_time This value specifies the time value used for field evaluation.
REAL eval_at_frequency This value specifies the frequency value used for field evaluation.
Output:
INTEGER mat_prop_found This value returns TRUE or 1 if the material property was found for the specified material id. FALSE or 0 is returned if the material property is not found.
REAL mat_prop_val This value returns the material property word value. Dependent fields are evaluated if necessary.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
db_create_material(<material_name>,<mat_description>,<category_id>,<linearity_code>,<directionality_code>,<material_type>,<material_id> )
##########
Input:
CHARACTER STRING <material_name> The external name of the material record.
CHARACTER STRING <mat_description> A character string describing the material record.
INTEGER <category_id> The ID of the material category of this record. See db_create_matl_category,551.
INTEGER <linearity_code> A code representing the linearity of this material. See db_create_matl_lin,494.
INTEGER <directionality_code> A code representing the directionality of this material. See db_create_matl_dir,495.
INTEGER <material_type> A code specifying the type of material:0 = homogeneous material1 = standard laminate lay-up2 = rule of mixtures material3 = Halpin-Tsai material4 = short fiber composite101 = externally defined material
Output:
INTEGER <material_id> The internal ID assigned to this new material record by Patran.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_matl_prop_value(<material_id>,<word_ids>,<field_ids>,<word_values>,<num_words> )
##########
Input:
INTEGER <material_id> The internal ID of the material record to which the material words are to be associated.
INTEGER ARRAY <word_ids> The <num_words> IDs of all the material words to be associated with this record.
INTEGER ARRAY <field_ids>
REAL ARRAY <word_values> The <num_words> constant values for all the material words. If the word references a data field,this value in <word_values> is not applicable. Zero should be used in this case.
INTEGER <num_words> The number of words to be associated with this material record.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_matl_const_model(<material_id>,<model_ids>,<num_models>)
##########
Input:
INTEGER <material_id> The internal ID of the material record.
INTEGER ARRAY <model_ids> An array of the IDs of all the material constitutive models to be assigned to this material. See Material Models,554 for more about material model IDs.
INTEGER <num_models> The number of constitutive model IDs.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_cr_const_models_specified(<material_id>,<model_id>,<option_ids>,<active_flag> )
##########
Input:
INTEGER <material_id> The internal ID of the material record.
INTEGER <model_id> The ID of the material constitutive model of interest. SeeMaterial Models,554 for more about material model IDs.
INTEGER ARRAY <option_ids> A five element array containing the up-to-five material options chosen for this constitutive model. This array is zero filled and in the order the data would be presented. For example,a possible array for a constitutive model with two material option categories (yield function and hardening rule)would be [11,15,0,0,0]. See Material Models (p. 554)
INTEGER <active_flag> A flag specifying whether this constitutive model is active for this material (1)or not (0).
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_comp_lam_ids_by_id(material_id,num_plies,material_name,output_count,ply_ids,thicknesses,orientations,symmetry,offset_value,offset_flag)
##########
Input:
INTEGER material_id The internal ID of the material record.
INTEGER num_plies The number of plies in this laminate material. This value is stored as a basic material property word (with an ID of 40)which can be retrieved from the function db_get_matl_prop_value (). The number of plies for the laminate material is the nearest whole integer to the real value of the basic material property word with an id of 40.
Output:
STRING material_name The external name used to reference this material record.
INTEGER output_count The number of plies associated to this material record.
INTEGER ply_ids (num_plies)This value returns the IDs of the material records making up the plies of the laminate.
REAL thicknesses (num_plies)This value returns the ply thickness values for the laminate material.
REAL orientations (num_plies)This value returns the orientation angles in degrees measured from the element’s principal material orientation for the laminate material.
INTEGER symmetry This value returns the describing characteristics about the lay-up:1 = no order in stack2 = symmetric stack3 = stack symmetric about midply4 = anti-symmetric stack5 = stack anti-symmetric about midplyThe total stack will always be stored. The decision to write out the entire stack or only the input portion of the stack depends on the functionality of the analysis code.
REAL offset_value This value returns the laminate offset. This is the distance from the reference plane of the element to the bottom of the stack. If the value is negative,one half of the total thickness of the stack lies at the middle of the element.
LOGICAL offset_flag This value specifies when set to FALSE or 0 that the laminate offset value was entered manually. This value will be set to TRUE or 1 when the laminate offset value was calculated by Patran.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_set_comp_lam_by_id(<material_id>,<num_plies>,<ply_ids>,<thicknesses>,<orientations>,<symmetry>,<offset_value>,<offset_flag> )
##########
Input:
INTEGER <material_id> The internal ID of the material to which composite data is to be added.
INTEGER <num_plies> The total number of plies in the stack. This value should also be stored as generic property word 40. See db_get_comp_lam_ids_by_id,747 and db_create_matl_prop_value,743 for further understanding.
INTEGER ARRAY <ply_ids> A vector of <num_plies> material IDs specifying the material make-up of each ply.
REAL ARRAY <thicknesses> The <num_plies> ply thickness values for the laminate material.
REAL ARRAY <orientations> The <num_plies> orientation angles (in degrees measured from the element’s principle material orientation)for the laminate material.
INTEGER <symmetry> A flag describing characteristics about the lay-up:1 = no order in stack2 = symmetric stack3 = stack symmetric about midply4 = anti-symmetric stack5 = stack anti-symmetric about midplyThe total stack must be stored in the database even if the symmetry flag is greater than one.
REAL <offset_value> The real value of the laminate offset. This is the distance from the reference plane of the element to the bottom of the stack. The default value is negative one half the total thickness of the stack which is to say the middle of the stack lies at the reference plane of the element. A valid value should always be input here even if it is the default value.
LOGICAL <offset_flag> A flag specifying whether the laminate offset value is the default (<offset_flag> = TRUE)which is to say the middle of the stack coincides with the reference plane of the element or a non-default value of the laminate offset is being used (<offset_flag> = FALSE).
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_modify_material_name(old_name,new_name )
##########
Description:
This function renames a material.
Input:
STRING[32] old_name Material name to be modified.
STRING[32] new_name New material name.
Output:
INTEGER <Return Value> 0=success,otherwise failure.
---------------
get_field_values_25(<field_id>,<num_evals>,<eval_dim>,<field_dim>,<eval_points>,<entity_type>,<entity_ids>,<face_ids>,<edge_ids>,<node_positions>,<field_values>)
##########
Input:
INTEGER <field_id> The internal ID of the data field to be evaluated.
INTEGER <num_evals> The number of points at which the data field is to be evaluated. To evaluate a temperature dependent field at temperatures of 300 and 350,then <num_evals> would be two. To evaluate a spatially varying field at the centroid and the four nodes of a quadrilateral surface element then <num_evals> would be 5.
INTEGER <eval_dim> The dimensionality of the points at which the field is to be evaluated. For example,<eval_dim> would be one for temperature but 3 for a point in space (x,y,z).
INTEGER <field_dim> The dimensionality of the data stored in the field. One for a scalar,three for a vector,and six for a tensor. Note that tabular data fields can only have scalar dependent values and PCL equation data fields are restricted to scalar and vector dependent values.
REAL ARRAY <eval_points> An array of size <eval_dim>x<num_evals> containing all the points at which the field is to be evaluated. this array is not used when evaluating entity data fields and should be filled with zeros in this case.
INTEGER <entity_type> Flag specifying which entity type this result data field or entity data field refers to. 123 for nodes,124 for elements,0 if not applicable. This array is only used when evaluating entity data fields.
INTEGER ARRAY <entity_ids> A vector of <num_evals> IDs specifying the entities to which the corresponding <eval_points> belong. A vector of <num_evals> zeroes if not applicable. This array is only used when evaluating entity data fields.
INTEGER ARRAY <face_ids> A vector of <num_evals> IDs specifying the face to which the corresponding <eval_points> belong. See Patran’s Element Library (p. 408)in the Reference Manual - Part III for details about face numbering. A vector of <num_evals> zeroes if not applicable. This array is only used when evaluating entity data fields.
INTEGER ARRAY <edge_ids> A vector of <num_evals> IDs specifying the edge to which the corresponding <eval_points> belong. See Patran’s Element Library (p. 408)in the Reference Manual - Part III for details about edge numbering. A vector of <num_evals> zeroes if not applicable. This array is only used when evaluating entity data fields.
INTEGER ARRAY <node_positions> A vector of <num_evals> IDs specifying the node position in the element face or element edge to which the corresponding <eval_points> belong. These positions are with respect to the edge or face,not the entire element. For example,the first node on edge 2 of an element would have a <node_positions> of 1. See Patran’s Element Library (p. 408)in the Reference Manual - Part III for details about node positions. A vector of <num_evals> zeroes if not applicable. This array is only used when evaluating entity data fields.
Output:
REAL ARRAY <field_values> An array of size <field_dim>x<num_evals> containing the value of the field at the evaluation points.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_field_name(<field_id>,<field_name>,<field_var> )
##########
Input:
INTEGER <field_id> The internal ID of the data field of interest.
Output:
CHARACTER STRING <field_name> The name of the data field specified by <field_id>.
INTEGER <field_var> A flag specifying the type of variance of the data field:0 = spatially varying field1 = time/frequency dependent field2 = material data field which could depend on many variables including temperature,stress,total strain,plastic strain,etc.,and certain combinations thereof.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_field(<field_id>,<field_name>,<field_var>,<field_dim>,<geom_type>,<geom_id>,<extrap_opt>,<data_type>,<coord_id>,<field_type>,<num_vars>,<var_type_1>,<var_type_2>,<var_type_3>,<func_1_size>,<func_2_size>,<func_3_size>,<lin_def>,<num_var_1>,<num_var_2>,<num_var_3> )
##########
Input:
INTEGER <field_id> The internal ID of the data field of interest.
Output:
CHARACTER STRING <field_name> The internal ID of the data field of interest.
INTEGER <field_var> The type of variance of the data field:0 = Spatially varying field1 = Material data field which could depend on many variables including temperature,stress,total strain,plastic strain,etc.,and certain combinations thereof.2 = Non-Spatial field,for defining fields dependent on time,frequency,temperature,displacement,velocity,or user-defined independent variables.3 = Frequency dependent (Obsolete - Pre-Release 1.2 argument.)
INTEGER <field_dim> Possible values are zero for a scalar field,one for a vector field,three for a tensor field,and ten for a complex scalar field. Note that tabular fields cannot be vector or tensor fields and that PCL equation data fields cannot be tensor fields.
INTEGER <geom_type> The type of geometry entity associated with this data field. Two for a line,three for a surface and four for a solid. This is only applicable for data fields with parametric (C1,C2,C3)independent variables.
INTEGER <geom_id> The ID of the geometry entity associated with this data field. This is only applicable for data fields with parametric (C1,C2,C3)independent variables.
INTEGER <extrap_opt> The type of data extrapolation method used (applicable only for data fields stored as tables):1 = use closest tabular value2 = use linear extrapolation3 = use zero for all points out of table range
INTEGER <data_type> The data type of the independent variable for spatially varying fields: 0 = real values,1 = parametric values.
INTEGER <coord_id> The coordinate frame in which the independent variable should be interpreted for spatially varying fields with <data_type> = 0.
INTEGER <field_type> The type of data field:0 = PCL equation data field1 = tabular data field2 = results data field3 = entity data field
INTEGER <num_vars> The number of variables this field depends on. For example,<num_vars> = 3 for a 3D spatially varying field and <num_vars> = 1 for a time dependent field.
INTEGER <var_type_1> The type of independent variable # 1:1 = x2 = y3 = z4 = r5 = theta6 = phi7 = C18 = C29 = C310 = temperature11 = stress,total strain,or plastic strain12 = strain rate13 = time14= frequency15= radiosity16= displacement17= velocity18 = user-defined19 = frequency for real-imaginary complex field20 = frequency for magnitude-phase (degrees)complex field21 = frequency for magnitude-phase (radians)complex field Note that the use of variable type IDs 19,20,or 21 informs Patran that the field is complex-valued. Depending on which of these values is selected,the complex field values may be stored as real and imaginary values (19),as magnitudes and phases in degrees (20),or as magnitudes and phases in radians (21).
INTEGER <var_type_2> The type of independent variable # 2:The possible values are the same as those for var_type_1.
INTEGER <var_type_3> The type of independent variable # 3:The possible values are the same as those for var_type_1.
INTEGER <func_1_size> The length of the character string containing the PCL function defining the first component of the field data. Only applicable for non-tabular fields.
INTEGER <func_2_size> The length of the character string containing the PCL function defining the second component of the field data. Only applicable for non-tabular vector fields.
INTEGER <func_3_size> The length of the character string containing the PCL function defining the third component of the field data. Only applicable for non-tabular vector fields.
LOGICAL <lin_def> A flag specifying whether a data field with parametric independent variables is linear across the target geometry (TRUE)or not (FALSE).
INTEGER <num_var_1> The number of stored values for independent variable # 1. Only applicable for tabular fields.
INTEGER <num_var_2> The number of stored values for independent variable # 2. Only applicable for tabular fields.
INTEGER <num_var_3> The number of stored values for independent variable # 3. Only applicable for tabular fields.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_field_table(<field_id>,<num_vars>,<num_var_1>,<num_var_2>,<num_var_3>,<var_1_values>,<var_2_values>,<var_3_values>,<field_values> )
##########
Input:
INTEGER <field_id> The internal ID of the data field of interest.
INTEGER <num_vars> The number of independent variables upon which this data field is dependent.
INTEGER <num_var_1> The number of data points for independent variable # 1.
INTEGER <num_var_2> The number of data points for independent variable # 2. One,if <num_vars> is less than two.
INTEGER <num_var_3> The number of data points for independent variable # 3. One,if <num_vars> is less than three.
Output:
REAL ARRAY <var_1_values> An array containing the <num_var_1> data points for independent variable # 1.
REAL ARRAY <var_2_values> An array containing the <num_var_2> data points for independent variable # 2. A single zero,if <num_vars> is less than two.
REAL ARRAY <var_3_values> An array containing the <num_var_3> data points for independent variable # 3. A single zero,if <num_vars> is less than three.
REAL ARRAY <field_values> This array contains the values of the data field at all prescribed data points. For real-valued fields,its length is <num_var_1>x<num_var_2>x<num_var_3>. For complex-valued fields,its length is twice that,with all of the first complex component terms preceding all second component terms. That is,all reals precede all imaginaries and all magnitudes precede all phases.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_field_function(<field_id>,<func_1_size>,<func_2_size>,<func_3_size>,<func_1>,<func_2>,<func_3> )
##########
Input:
INTEGER <field_id> The internal ID of the data field of interest.
INTEGER <func_1_size> The number of characters in the string containing the PCL function for the first component of the data field.
INTEGER <func_2_size> The number of characters in the string containing the PCL function for the second component of the data field. One if this is a scalar field.
INTEGER <func_3_size> The number of characters in the string containing the PCL function for the third component of the data field. One if this is a scalar field.
INTEGER
Output:
CHARACTER STRING <func_1> A character string containing the PCL function for the first component of the data field.
CHARACTER STRING <func_2> A character string containing the PCL function for the second component of the data field. A blank string if this is a scalar field.
CHARACTER STRING <func_3> A character string containing the PCL function for the third component of the data field. A blank string if this is a scalar field.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_all_field_names(object )
##########
Description:
Prepares the database to return the field names for a given object. Used to conjunction with db_get_next_field_name.
Input:
INTEGER object Object type ID: 0 for Spatial,1 for Material,2 for Non Spatial
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_next_field_name(field_id,field_name )
##########
Description:
Used in a loop,after calling db_get_all_field_names,to retrieve the field ids and names of a given object.
Output:
INTEGER field_id Field ID.
STRING field_name[31] Field name.
INTEGER <Return Value> = 0,while there are more fields.
---------------
db_get_field_id(field_name,field_id )
##########
Description:
Return the field ID given the name.
Input:
STRING field_name[31] Name of the field.
Output:
INTEGER field_id Internal field ID.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error. 
---------------
db_create_field(<field_id>,<field_name>,<field_var>,<field_type>,<geom_type>,<geom_id>,<extrap_opt>,<data_type>,<coord_id>,<field_type>,<num_vars>,<var_type_1>,<var_type_2>,<var_type_3>,<func_1_size>,<func_2_size>,<func_3_size>,<func_1>,<func_2>,<func_3>,<lin_def>,<num_var_1>,<num_var_2>,<num_var_3>,<var_1_values>,<var_2_values>,<var_3_values>,<field_values> )
##########
Input:
CHARACTER STRING <field_name> The external name used to reference the data field.
INTEGER <field_var> The type of variance of the data field:0 = spatially varying field1 = material data field which could depend on many variables including temperature,stress,total strain,plastic strain,etc.,and certain combinations thereof.2 = non-spatial data field which could depend on many variables including time,frequency,temperature,displacement,velocity,user-defined variables,and certain combinations thereof.
INTEGER <field_type> 0 = real scalar field; 1 = real vector field; 10 = complex scalar field.Note that tabular fields cannot be vector fields.
INTEGER <geom_type> The type of geometry entity associated with this data field. Two for a line,three for a surface and four for a solid. This is only applicable for data fields with parametric (<data_type> = 1: C1,C2,C3)independent variables.
INTEGER <geom_id> The ID of the geometry entity associated with this data field. This is only applicable for data fields with parametric (<data_type> = 1: C1,C2,C3)independent variables.
INTEGER <extrap_opt> The type of data extrapolation method used (applicable only for data fields stored as tables):1 = use closest tabular value2 = use linear extrapolation3 = use zero for all points out of table range
INTEGER <data_type> The data type of the independent variable for spatially varying fields: 0 = real values,1 = parametric values.
INTEGER <coord_id> The coordinate frame in which the independent variable should be interpreted for spatially varying fields with <data_type> = 0.
INTEGER <field_type> The type of data field being created: 0 = as PCL equation,1 = tabular data field.
INTEGER <num_vars> The number of variables this field depends on. For example,<num_vars> = 3 for a 3D spatially varying field and <num_vars> = 1 for a time dependent field.
INTEGER <var_type_1> The type of independent variable # 1 (zero if not applicable):1 	= x2 	= y3 	= z4 	= r5 	= theta6 	= phi7 	= C18 	= C29 	= C310 	= temperature11 	= stress,total strain,or plastic strain12 	= strain rate13 = time14= frequency15= radiosity16= displacement17= velocity18 = user-defined19 = frequency for real-imaginary complex field20 = frequency for magnitude-phase (degrees)complex field21 = frequency for magnitude-phase (radians)complex field Note that the use of variable type IDs 19,20,or 21 informs Patran that the field is complex-valued. Depending on which of these values is selected,the complex field values may be stored as real and imaginary values (19),as magnitudes and phases in degrees (20),or as magnitudes and phases in radians (21).
INTEGER <var_type_2> The type of independent variable # 2 (zero if not applicable):The possible values are the same as those for var_type_1.
INTEGER <var_type_3> The type of independent variable # 3 (zero if not applicable):The possible values are the same as those for var_type_1.
INTEGER <func_1_size> The length of the character string containing the PCL function defining the first component of the field data. Only applicable for non-tabular fields. Use the value of one if not applicable.
INTEGER <func_2_size> The length of the character string containing the PCL function defining the second component of the field data. Only applicable for non-tabular vector fields. Use the value of one if not applicable.
INTEGER <func_3_size> The length of the character string containing the PCL function defining the third component of the field data. Only applicable for non-tabular vector fields. Use the value of one if not applicable.
CHARACTER STRING <func_1> The character string containing the PCL function representing the first component of the field data. Only applicable for non-tabular fields. Use a blank string if not applicable.
CHARACTER STRING <func_2> The character string containing the PCL function representing the second component of the field data. Only applicable for non-tabular vector fields. Use a blank string if not applicable.
CHARACTER STRING <func_3> The character string containing the PCL function representing the third component of the field data. Only applicable for non-tabular vector fields. Use a blank string if not applicable.
LOGICAL <lin_def> A flag specifying whether a data field with parametric independent variables is linear across the target geometry (TRUE)or not (FALSE).
INTEGER <num_var_1 The number of stored values for independent variable # 1. Only applicable for tabular fields. Use the value one if not applicable.
INTEGER <num_var_2> The number of stored values for independent variable # 2. Only applicable for tabular fields and <num_vars> > 1. Use the value one if not applicable.
INTEGER <num_var_3> The number of stored values for independent variable # 3. Only applicable for tabular fields and <num_vars> > 2. Use the value one if not applicable.
REAL ARRAY <var_1_values> A <num_var_1> array containing all the data points for the first variable. Only applicable for tabular fields. Use a single zero if not applicable.
REAL ARRAY <var_2_values> A <num_var_2> array containing all the data points for the second variable. Only applicable for tabular fields and <num_vars> > 1. Use a single zero if not applicable.
REAL ARRAY <var_3_values> A <num_var_3> array containing all the data points for the first variable. Only applicable for tabular fields and <num_vars> > 2. Use a single zero if not applicable.
REAL ARRAY <field_values> This array contains the field values for all data points. It is only applicable for tabular fields. Use a single zero if not applicable. For real-valued fields its length is <num_var_1>x<num_var_2>x<num_var_3>. For complex-valued fields,its length is twice that,with all of the first complex component terms preceding all second component terms. That is,all reals precede all imaginaries and all magnitudes precede all phases.
Output:
INTEGER field_id The internal ID assigned to the data field by Patran.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_field_dfem(<field_id>,<field_name>,<field_var>,<field_dim>,<entity_type>,<num_points>,<methods>,<entity_ids>,<face_ids>,<edge_ids>,<node_positions>,<ref_nodes>,<field_values> )
##########
Input:
INTEGER <field_id> The unique internal ID to assign to this newly created data field. Use zero to allow the database to assign the next ID.
STRING <field_name> The name of the field to be created. Maximum length of this name is 31 characters.
INTEGER <field_var> Type of variance. Always zero (spatially varying)since entity fields are restricted to spatial variance.
INTEGER <field_dim> The dimensionality of data stored in this field. Zero for scalar values,one for vectors and two for tensors.
INTEGER <entity_type> The type of entity that these field values are associated with. 123 if the field values are associated with nodes and 124 if the field values are associated with elements.
INTEGER <num_points> The number of data points to be stored.
INTEGER ARRAY <methods> A <num_points> vector of IDs specifying whether a vector is defined directly or by a reference node ID. Applies only to vectors. Use 1’s for vectors specified directly in the <field_values> array. Use 2’s for vectors specified by a reference node ID in the <ref_nodes> array.
INTEGER ARRAY <entity_ids> A <num_points> vector of entity IDs specifying the nodes or elements to which the field values belong.
INTEGER ARRAY <face_ids> A <num_points> vector of face IDs specifying the faces to which the field values belong. A vector of <num_points> zeroes if not applicable. See Patran’s Element Library (p. 408)in the Reference Manual - Part III for more on face IDs. If <node_positions> are to be specified,and the field is to be evaluated at element nodes,use zero for all <face_ids>. If <node_positions> are to be specified,and the field is to be evaluated at 3D element face nodes,use the appropriate face id. Use zeros for <face_ids> of 1D and 2D elements.
INTEGER ARRAY <edge_ids> A <num_points> vector of edge IDs specifying the edges to which the field values belong. A vector of <num_points> zeroes if not applicable. See Patran’s Element Library (p. 408)in the Reference Manual - Part III
INTEGER ARRAY <node_positions> A <num_points> vector of node positions specifying the node positions on the element to which the field values belong. These are not the edge or face node positions. They are the node positions of the full element topology. See Patran’s Element Library (p. 408)in the Reference Manual - Part III
INTEGER ARRAY <ref_nodes> A <num_points> vector of reference node IDs specifying FEM model nodes to be used to determine a vector. The vector will be computed to the node from a position on the element. See the <methods> input for more information. <ref_nodes> can only be used with element field data.
REAL ARRAY <field_values> A <num_points>x<n> array (where n is 1 for scalar fields,3 for vector fields and 6 for tensor fields)containing the field values to be stored.
Output:
INTEGER <field_id> The internal ID assigned to this newly created data field.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_field_dfem_v2(<field_id>,<field_name>,<field_var>,<field_dim>,<entity_type>,<num_points>,<methods>,<entity_ids>,<face_ids>,<edge_ids>,<node_positions>,<ref_nodes>,<dyn_var_id>,<extrap_opt>,<num_steps>,<steps>,<field_values> )
##########
Input:
INTEGER <field_id> The unique internal ID to assign to this newly created data field. Use zero to allow the database to assign the next ID.
STRING <field_name> The name of the field to be created. Maximum length of this name is 31 characters.
INTEGER <field_var> Type of variance. Zero indicates spatial variance. 2 indicates a frequency or time variance.
INTEGER <field_dim> The dimensionality of data stored in this field. Zero for scalar values,one for vectors and two for tensors.
INTEGER <entity_type> The type of entity that these field values are associated with. 123 if the field values are associated with nodes and 124 if the field values are associated with elements.
INTEGER <num_points> The number of data points to be stored.
INTEGER ARRAY <methods> A <num_points> vector of IDs specifying whether a vector is defined directly or by a reference node ID. Applies only to vectors. Use 1’s for vectors specified directly in the <field_values> array. Use 2’s for vectors specified by a reference node ID in the <ref_nodes> array.
INTEGER ARRAY <entity_ids> A <num_points> vector of entity IDs specifying the nodes or elements to which the field values belong.
INTEGER ARRAY <face_ids> A <num_points> vector of face IDs specifying the faces to which the field values belong. A vector of <num_points> zeroes if not applicable. See Patran’s Element Library (p. 408)in the Reference Manual - Part III for more on face IDs. If <node_positions> are to be specified,and the field is to be evaluated at element nodes,use zero for all <face_ids>. If <node_positions> are to be specified,and the field is to be evaluated at 3D element face nodes,use the appropriate face id. Use zeros for <face_ids> of 1D and 2D elements.
INTEGER ARRAY <edge_ids> A <num_points> vector of edge IDs specifying the edges to which the field values belong. A vector of <num_points> zeroes if not applicable. See Patran’s Element Library (p. 408)in the Reference Manual - Part III
INTEGER ARRAY <node_positions> A <num_points> vector of node positions specifying the node positions on the element to which the field values belong. These are not the edge or face node positions. They are the node positions of the full element topology. See Patran’s Element Library (p. 408)in the Reference Manual - Part III
INTEGER ARRAY <ref_nodes> A <num_points> vector of reference node IDs specifying FEM model nodes to be used to determine a vector. The vector will be computed to the node from a position on the element. See the <methods> input for more information. <ref_nodes> can only be used with element field data.
INTEGER <dyn_var_id> The dynamic variable ID. 0 indicates non-dynamic. 13 indicates time. 14 indicates frequency.
INTEGER <extrap_opt> The type of data extrapolation method used when the time or frequency to be evaluated is outside the range defined in the <steps> array (applicable only for dynamic):1 = use closest time/frequency value2 = use linear extrapolation3 = use zero for all points out of the time/frequency range.
INTEGER <num_steps> The number of dynamic steps. Use 1 for non-dynamic.
REAL ARRAY <steps> A <num_steps> containing the dynamic step values to be stored. Use 0 for non-dynamic.
REAL ARRAY <field_values> A <num_points*num_steps>x<n> array (where n is 1 for scalar fields,3 for vector fields and 6 for tensor fields)containing the field values to be stored. If <num_steps> is greater than 1,supply <num_steps> sets of values grouped by entity.
Output:
INTEGER <field_id> The internal ID assigned to this newly created data field.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_field_lbc(<field_id>,<field_name>,<field_var>,<field_dim>,<entity_type>,<num_points>,<entity_ids>,<face_ids>,<edge_ids>,<node_positions>,<field_values> )
##########
Input:
INTEGER <field_id> The unique internal ID to assign to this newly created data field. Use zero to allow the database to assign the next ID.
STRING <field_name> The name of the field to be created. Maximum length of this name is 31 characters.
INTEGER <field_var> Type of variance. Always zero (spatially varying)since entity fields are restricted to spatial variance.
INTEGER <field_dim> The dimensionality of data stored in this field. Zero for scalar values,one for vectors and two for tensors.
INTEGER <entity_type> The type of entity that these field values are associated with. 123 if the field values are associated with nodes and 124 if the field values are associated with elements.
INTEGER <num_points> The number of data points to be stored.
INTEGER ARRAY <entity_ids> A <num_points> vector of entity IDs specifying the nodes or elements to which the field values belong.
INTEGER ARRAY <face_ids> A <num_points> vector of face IDs specifying the faces to which the field values belong. A vector of <num_points> zeroes if not applicable. See Patran’s Element Library (p. 408)in the Reference Manual - Part III for more on face IDs. If <node_positions> are to be specified,and the field is to be evaluated at element nodes,use zero for all <face_ids>. If <node_positions> are to be specified,and the field is to be evaluated at 3D element face nodes,use the appropriate face id. Use zeros for <face_ids> of 1D and 2D elements.
INTEGER ARRAY <edge_ids> A <num_points> vector of edge IDs specifying the edges to which the field values belong. A vector of <num_points> zeroes if not applicable. See Patran’s Element Library (p. 408)in the Reference Manual - Part III
INTEGER ARRAY <node_positions> A <num_points> vector of node positions specifying the node positions on the element to which the field values belong. These are not the edge or face node positions. They are the node positions of the full element topology. See Patran’s Element Library (p. 408)in the Reference Manual - Part III
REAL ARRAY <field_values> A <num_points>x<n> array (where n is 1 for scalar fields,3 for vector fields and 6 for tensor fields)containing the field values to be stored.
Output:
INTEGER <field_id> The internal ID assigned to this newly created data field.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_modify_field_dfem(<field_id>,<field_name>,<field_var>,<field_dim>,<entity_type>,<num_points>,<methods>,<entity_ids>,<face_ids>,<edge_ids>,<node_positions>,<ref_nodes>,<field_values> )
##########
Input:
INTEGER <field_id> The unique internal ID of the field to be modified.
STRING <field_name> The modified name of the field. Maximum length of this name is 31 characters.
INTEGER <field_var> Type of variance. Always zero (spatially varying)since entity fields are restricted to spatial variance.
INTEGER <field_dim> The dimensionality of data stored in this field. Zero for scalar values,one for vectors and two for tensors.
INTEGER <entity_type> The type of entity that these field values are associated with. 123 if the field values are associated with nodes and 124 if the field values are associated with elements.
INTEGER <num_points> The number of data points to be stored.
INTEGER ARRAY <methods> A <num_points> vector of IDs specifying whether a vector is defined directly or by a reference node ID. Applies only to vectors. Use 1’s for vectors specified directly in the <field_values> array. Use 2’s for vectors specified by a reference node ID in the <ref_nodes> array.
INTEGER ARRAY <entity_ids> A <num_points> vector of entity IDs specifying the nodes or elements to which the field values belong.
INTEGER ARRAY <face_ids> A <num_points> vector of face IDs specifying the faces to which the field values belong. A vector of <num_points> zeroes if not applicable. See Patran’s Element Library (p. 408)in the Reference Manual - Part III for more on face IDs. If <node_positions> are to be specified,and the field is to be evaluated at element nodes,use zero for all <face_ids>. If <node_positions> are to be specified,and the field is to be evaluated at 3D element face nodes,use the appropriate face id. Use zeros for <face_ids> of 1D and 2D elements.
INTEGER ARRAY <edge_ids> A <num_points> vector of edge IDs specifying the edges to which the field values belong. A vector of <num_points> zeroes if not applicable. See Patran’s Element Library (p. 408)in the Reference Manual - Part III
INTEGER ARRAY <node_positions> A <num_points> vector of node positions specifying the node positions on the element to which the field values belong. These are not the edge or face node positions. They are the node positions of the full element topology. See Patran’s Element Library (p. 408)in the Reference Manual - Part III
INTEGER ARRAY <ref_nodes> A <num_points> vector of reference node IDs specifying FEM model nodes to be used to determine a vector. The vector will be computed to the node from a position on the element. See the <methods> input for more information. <ref_nodes> can only be used with element field data.
REAL ARRAY <field_values> A <num_points>x<n> array (where n is 1 for scalar fields,3 for vector fields and 6 for tensor fields)containing the field values to be stored.
Output:
INTEGER <field_id> The internal ID assigned to this newly created data field.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_modify_field_dfem_v2(<field_id>,<field_name>,<field_var>,<field_dim>,<entity_type>,<num_points>,<methods>,<entity_ids>,<face_ids>,<edge_ids>,<node_positions>,<ref_nodes>,<dyn_var_id>,<extrap_opt>,<num_steps>,<steps>,<field_values> )
##########
Input:
INTEGER <field_id> The unique internal ID of the field to be modified.
STRING <field_name> The modified name of the field. Maximum length of this name is 31 characters.
INTEGER <field_var> Type of variance. Zero indicates spatial variance. 2 indicates a frequency or time variance.
INTEGER <field_dim> The dimensionality of data stored in this field. Zero for scalar values,one for vectors and two for tensors.
INTEGER <entity_type> The type of entity that these field values are associated with. 123 if the field values are associated with nodes and 124 if the field values are associated with elements.
INTEGER <num_points> The number of data points to be stored.
INTEGER ARRAY <methods> A <num_points> vector of IDs specifying whether a vector is defined directly or by a reference node ID. Applies only to vectors. Use 1’s for vectors specified directly in the <field_values> array. Use 2’s for vectors specified by a reference node ID in the <ref_nodes> array.
INTEGER ARRAY <entity_ids> A <num_points> vector of entity IDs specifying the nodes or elements to which the field values belong.
INTEGER ARRAY <face_ids> A <num_points> vector of face IDs specifying the faces to which the field values belong. A vector of <num_points> zeroes if not applicable. See Patran’s Element Library (p. 408)in the Reference Manual - Part III for more on face IDs. If <node_positions> are to be specified,and the field is to be evaluated at element nodes,use zero for all <face_ids>. If <node_positions> are to be specified,and the field is to be evaluated at 3D element face nodes,use the appropriate face id. Use zeros for <face_ids> of 1D and 2D elements.
INTEGER ARRA <edge_ids> A <num_points> vector of edge IDs specifying the edges to which the field values belong. A vector of <num_points> zeroes if not applicable. See Patran’s Element Library (p. 408)in the Reference Manual - Part III
INTEGER ARRAY <node_positions> A <num_points> vector of node positions specifying the node positions on the element to which the field values belong. These are not the edge or face node positions. They are the node positions of the full element topology. See Patran’s Element Library (p. 408)in the Reference Manual - Part III
INTEGER ARRAY <ref_nodes> A <num_points> vector of reference node IDs specifying FEM model nodes to be used to determine a vector. The vector will be computed to the node from a position on the element. See the <methods> input for more information. <ref_nodes> can only be used with element field data.
INTEGER <dyn_var_id> The dynamic variable ID. 0 indicates non-dynamic. 13 indicates time. 14 indicates frequency.
INTEGER <extrap_opt> The type of data extrapolation method used when the time or frequency to be evaluated is outside the range defined in the <steps> array (applicable only for dynamic):1 = use closest time/frequency value2 = use linear extrapolation3 = use zero for all points out of the time/frequency range.
INTEGER <num_steps> The number of dynamic steps. Use 1 for non-dynamic.
REAL ARRAY <steps> A <num_steps> containing the dynamic step values to be stored. Use 0 for non-dynamic.
REAL ARRAY <field_values> A <num_points*num_steps>x<n> array (where n is 1 for scalar fields,3 for vector fields and 6 for tensor fields)containing the field values to be stored. If <num_steps> is greater than 1,supply <num_steps> sets of values grouped by entity.
Output:
INTEGER <field_id> The internal ID assigned to this newly created data field.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_modify_field_lbc(<field_id>,<field_name>,<field_var>,<field_dim>,<entity_type>,<num_points>,<entity_ids>,<face_ids>,<edge_ids>,<node_positions>,<field_values> )
##########
Input:
INTEGER <field_id> The unique internal ID of the field to be modified.
STRING <field_name> The modified name of the field. Maximum length of this name is 31 characters.
INTEGER <field_var> Type of variance. Always zero (spatially varying)since entity fields are restricted to spatial variance.
INTEGER <field_dim> The dimensionality of data stored in this field. Zero for scalar values,one for vectors and two for tensors.
INTEGER <entity_type> The type of entity that these field values are associated with. 123 if the field values are associated with nodes and 124 if the field values are associated with elements.
INTEGER <num_points> The number of data points to be stored.
INTEGER ARRAY <entity_ids> A <num_points> vector of entity IDs specifying the nodes or elements to which the field values belong.
INTEGER ARRAY <face_ids> A <num_points> vector of face IDs specifying the faces to which the field values belong. A vector of <num_points> zeroes if not applicable. See Patran’s Element Library (p. 408)in the Reference Manual - Part III for more on face IDs. If <node_positions> are to be specified,and the field is to be evaluated at element nodes,use zero for all <face_ids>. If <node_positions> are to be specified,and the field is to be evaluated at 3D element face nodes,use the appropriate face id. Use zeros for <face_ids> of 1D and 2D elements.
INTEGER ARRAY <edge_ids> A <num_points> vector of edge IDs specifying the edges to which the field values belong. A vector of <num_points> zeroes if not applicable. See Patran’s Element Library (p. 408)in the Reference Manual - Part III
INTEGER ARRAY <node_positions> A <num_points> vector of node positions specifying the node positions on the element to which the field values belong. These are not the edge or face node positions. They are the node positions of the full element topology. See Patran’s Element Library (p. 408)in the Reference Manual - Part III
REAL ARRAY <field_values> A <num_points>x<n> array (where n is 1 for scalar fields,3 for vector fields and 6 for tensor fields)containing the field values to be stored.
Output:
INTEGER <field_id> The internal ID assigned to this newly created data field.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_modify_field_name(old_name,new_name )
##########
Description:
This function renames a field.
Input:
STRING[32] old_name Field name to be modified.
STRING[32] new_name New field name.
Output:
INTEGER <Return Value> 0=success,otherwise failure.
---------------
db_get_region_for_elements(<num_elems>,<element_ids>,<region_ids> )
##########
Input:
INTEGER <num_elems> The number of elements input to this function.
INTEGER ARRAY <element_ids> The <num_elems> IDs of all the input elements.
Output:
INTEGER ARRAY <region_ids> The <num_elems> IDs of all the element property regions associated with each input element.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------	
db_count_elements_in_region(<region_id>,<num_elems> )
##########
Input:
INTEGER <region_id> The internal ID of the element property region of interest.
Output:
INTEGER <num_elems> The number of elements associated with the element property region specified by <region_id>.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_elements_in_region(<num_elems>,<region_id>,<element_ids> )
##########
Input:
INTEGER <num_elems> Input only if the input value is not zero. The number of elements associated with the element property region specified by <region_id>.
INTEGER <region_id> The internal ID of the element property region of interest.
Output:
INTEGER <num_elems> Only output if the input value is zero. The number of elements associated with the element property region specified by <region_id>.
INTEGER ARRAY <element_ids> The <num_elems> IDs of all the elements associated with the element property region specified by <region_id>.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_associate_element_to_region(element_id,region_id )
##########
Input:
INTEGER num_elems The ID of the element to be associated to the specified element property region.
INTEGER element_ids The ID of the element property region to which the element is to be associated.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_count_region_ids(<num_regions> )
##########
Output:
INTEGER <num_regions> The number of element property regions defined in the database.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_all_region_ids(<num_regions>,<region_ids> )
##########
Input:
INTEGER <num_regions> The number of regions defined in the database.
Output:
INTEGER ARRAY <region_ids> The <num_regions> IDs of all the element property regions defined in the database.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_region_definition(<region_id>,<set_name>,<gener_elem_type>,<dof_set_flag>,<condense_flag>,<geom_flag>,<form_flag>,<lam_flag>,<layer_count>,<material_id>,<material_lin>,material_dir> )
##########
Input:
INTEGER <region_id> The ID of the element property region of interest.
Output:
CHARACTER ARRAY <set_name> The name of the property set assigned to this property region.
INTEGER <gener_elem_type>
The ID of the generic element type of the elements belonging to this property region. See Generic Element Types,503.
INTEGER <dof_set_flag> The ID of the degree-of-freedom set option chosen for this region.
INTEGER <condense_flag> The ID of the condensation option chosen for this region.
INTEGER <geom_flag> The ID of the geometric option chosen for this region.
INTEGER <form_flag> The ID of the formulation option chosen for this region.
INTEGER <lam_flag> The ID of the lamination option chosen for this region.
INTEGER <layer_count> Obsolete variable: should be ignored.
INTEGER <material_id> The internal ID of the first material reference in the property set. Zero if no material reference.
INTEGER <material_lin> The linearity code of the first material reference in the property set. Zero if no material reference.
INTEGER <material_dir> The directionality code of the first material reference in the property set. Zero if no material reference.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_count_props(<region_id>,<num_words> )
##########
Input:
INTEGER <region_id> The ID of the element property region of interest.
Output:
INTEGER <num_words> The number of property words associated with this property region.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_props_by_region(<num_words>,<region_id>,<word_ids> )
##########
Input:
INTEGER <num_words> The number of property words associated with the property region specified by <region_id>.
INTEGER <region_id> The internal ID of the element property region of interest.
Output:
INTEGER ARRAY <word_ids> The number of property words associated with this property region.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_prop_value(<region_id>,<word_id>,<material_id>,<data_type>,<integer_val>,<real_values>,<character_val>,<coord_id>,<node_id>,<field_id> )
##########
Input:
INTEGER <region_id> The internal ID of the element property region of interest.
INTEGER <word_id> The internal ID of the element property word of interest.
Output:
INTEGER <material_id> The ID of the referenced material,if this word is a material reference.
INTEGER <data_type> A flag whose absolute value specifies the type of data assigned to this property word:1 = real scalar applied at element centroid2 = real vector3 = integer4 = character string5 = material reference6 = list of real values7 = real scalar applied at element nodes8 = node reference9 = coordinate frame reference11 = beam section. Translator is to use the section.12 = beam section props. Translator is to use the section’s properties. If <data_type> is negative,the data was input through a field reference instead of through a constant value.
INTEGER <integer_val> The integer value assigned to the property word,if the word is an integer. The ID of the referenced beam section,if this word is a beam section or beam section props.
REAL ARRAY <real_values> A array of three values. If the word is a real scalar,the first component of the array will contain the value assigned to the property word and the other two components will be zero. If the word is a real vector,the array will contain the three components of the vector. If the data was input through a field instead as a constant value (i.e.,<field_id> > 0),then the value of this property word should be determined through field evaluation,and the value stored in <real_values> should be ignored.
CHARACTER STRING <character_val>[31] The character string assigned to this property word,if the word type is character string (<data_type> = 4).
INTEGER <coord_id> The ID of the referenced coordinate frame,if the word type is coordinate frame reference.
INTEGER <node_id> The ID of the referenced node,if the word type is node reference.
INTEGER <field_id> The ID of the field through which the property data is input. If zero,there is no field reference and the value of the word should be read from the appropriate output argument listed above (e.g.,<real_values>). If a valid field reference (<field_id> > 0),then the value of the word should be determinedthrough field evaluation and the values supplied in the above output arguments (e.g.,<real_values>)should be ignored.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
ep_get_app_reg_str(region_count,region_id,app_reg_content)
##########
Description:
This function retrieves the content of element property application regions.
Input:
INTEGER region_count This value specifies the number of element property region ids.
INTEGER region_id(region_count)This array specifies the element property region ids.
Output:
STRING return_list[VIRTUAL] This value returns a list processor string of entities.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
ep_word_val_at_el_cen(word_id,word_component,search_element_count,search_element_id,found_element_count,found_element_id,found_element_value)
##########
Description:
This function evaluates an element property word value at element centroids for all element property region..
Input:
INTEGER word_id This value specifies the element property word id. Element properties without this word_id will be ignored. See function db_create_phys_prop_defn()for word_id value table.
INTEGER word_component This value specifies the component of the data to extract (values can range from 1 to 3)this value is ignored in the case the data is scalar.
INTEGER search_element_count This value specifies the number of elements for which we seek an element property word value. In order to obtain values for all elements associated to the region_id,pass a value of -1. The purpose of having a list of elements for which we seek a value,is to limit the quantity of field evaluations for the elements associated to an element property because each evaluation will require to calculate the centroid of the elements when non entity data fields are involved.
INTEGER search_element_id()This array specifies the element ids for which we seek an element property word value. If search_elem_qtt=-1,this array is not used. Array must be sorted in an increasing order and duplicated must be removed. This is not done within the function for performance reasons,as this function may be used in a loop,using the same input array. Sort/duplicates is verified within the function.
Output:
INTEGER found_element_count This value returns the number of element associated to the region_id,which could be found in search_element_id.
INTEGER found_element_id (VIRTUAL)This array returns the element ids associated to the region_id,which could be found in search_element_id.
REAL found_element_value (VIRTUAL)This array returns the element property word component values at the centroid of the elements ids in found_element_id.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
ep_word_val_at_el_cen_by_reg(region_id,word_id,word_component,search_element_count,search_element_id,found_element_count,found_element_id,found_element_value)
##########
Description:
This function evaluates an element property word value at element centroids for one element property region.
Input:
INTEGER region_id This value specifies the element property region id.
INTEGER word_id This value specifies the element property word id. If the word_id is not found to be associated with the region_id,this function will exit normally (Return Value =0)without allocating memory for the output variable. See function db_create_phys_prop_defn()for word_id value table.
INTEGER word_component This value specifies the component of the data to extract (values can range from 1 to 3)this value is ignored in the case the data is scalar.
INTEGER search_element_count This value specifies the number of elements for which we seek an element property word value. In order to obtain values for all elements associated to the region_id,pass a value of -1. The purpose of having a list of elements for which we seek a value,is to limit the quantity of field evaluations for the elements associated to an element property because each evaluation will require to calculate the centroid of the elements (when non entity data fields are involved).
INTEGER search_element_id()This array specifies the element ids for which we seek an element property word value. If search_elem_qtt=-1,this array is not used. Array must be sorted in an increasing order and duplicated must be removed. This is not done within the function for performance reasons,as this function may be used in a loop,using the same input array. Sort/duplicates is verified within the function.
Output:
INTEGER found_element_count This value returns the number of element associated to the region_id,which could be found in search_element_id.
INTEGER found_element_id (VIRTUAL)This array returns the element ids associated to the region_id,which could be found in search_element_id.
REAL found_element_value (VIRTUAL)This array returns the element property word component values at the centroid of the elements ids in found_element_id.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
db_create_phys_prop_region(<region_id>,<region_name>,<gener_elem_type>,<geom_id>,<condense_id>,<form_id>,<lam_id>,<dof_set_id>)
##########
Input:
INTEGER <region_id> The internal ID assigned to the new element property region by Patran.
CHARACTER STRING <region_name> The external name used to reference the element property region.
INTEGER <gener_elem_type>
The ID of the generic element type of the elements belonging to this property region. See Generic Element Types,503.
INTEGER <geom_id> The ID of the geometry option of this property region.
INTEGER <condense_id> The ID of the condensation option of this property region.
INTEGER <form_id> The ID of the formulation option of this property region.
INTEGER <lam_id> The ID of the lamination option of this property region.
INTEGER <dof_set_id> The degree-of-freedom set ID of this property region.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_max_physical_property(<max_region_id> )
##########
Output:
INTEGER <max_region_id> The highest physical property region ID defined in the database.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_phys_prop_value(<region_id>,<word_id>,<material_id>,<data_type>,<integer_val>,<real_val>,<character_val>,<node_id>,<coord_id>,<field_id> )
##########
Input:
INTEGER <region_id> The internal ID of the element property region to which the specified element property word is to be added.
INTEGER <word_id> The ID of the property word to be added.
INTEGER <material_id> The ID of the referenced material. Only applicable when <data_type> is 5.
INTEGER <data_type> A flag whose absolute value specifies the type of data assigned to this property word. If the value of <data_type> is positive,the word references a constant value such as a real number or a node reference. If the value of <data_type> is negative,the word references a data field. The meaning of the absolute value of <data_type> is as follows:1 = real scalar applied at element centroid2 = real vector3 = integer4 = character string5 = material reference6 = list of real values7 = real scalar applied at element nodes8 = node reference9 = coordinate reference
INTEGER <integer_val> The integer value of the property word if <data_type> = 3.
REAL ARRAY <real_val> The array containing the three possible components of the real value. If <data_type> is 1 or 7,then only the first component has meaning and the other two components are zero. Values should only be input here if there is no field reference for this property word (<field_id> = 0 and/or <data_type> > 0).
CHARACTER STRING <character_val> The character string value of the property word if <data_type> = 4. A blank string if not applicable. Maximum length of this string is 31 characters.
INTEGER <node_id> The ID of the referenced node if <data_type> = 8.
INTEGER <coord_id> The ID of the referenced coordinate frame if <data_type> = 9.
INTEGER <field_id> The ID of the referenced data field. Should be zero if there is no referenced data field.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_modify_phys_prop_region_name(old_name,new_name )
##########
Description:
This function renames a property set.
Input:
STRING[32] old_name Property name to be modified.
STRING[32] new_name New property name.
Output:
INTEGER <Return Value> 0=success,otherwise failure. 
---------------
db_count_elems(<num_elems> )
##########
Description:
This function renames a property set.
Input:
STRING[32] old_name Property name to be modified.
STRING[32] new_name New property name.
Output:
INTEGER <Return Value> 0=success,otherwise failure.
---------------
db_count_elems(<num_elems>)
##########
Output:
INTEGER <num_elems> The number of elements in the database.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_count_elems_in_group(<group_id>,<num_elems> )
##########
Input:
INTEGER <group_id> The internal ID of the group of interest. This ID can be determined by either “db_get_group_id” or “db_get_current_group_id” as described in Groups,657.
Output:
INTEGER <num_elems> The number of elements belonging to the group specified by <group_id>.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_elem_ids(<num_elems>,<elem_ids> )
##########
Input:
INTEGER <num_elems> The total number of elements in the database.
Output:
INTEGER ARRAY <elem_ids> The IDs of all the <num_elems> elements in the database.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_elem_ids_in_group(<num_elems>,<group_id>,<elem_ids> )
##########
Input:
INTEGER <num_elems> The number of elements belonging to the group of interest.
INTEGER <group_id> The internal ID of the group of interest. This ID can be determined by either “db_get_group_id” or “db_get_current_group_id” as described in Groups,657.
Output:
INTEGER ARRAY <elem_ids> The <num_elems> IDs of all the elements belonging to the group specified by <group_id>.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_elem_etop(num_elems,elem_ids,topo_codes )
##########
Description:
This function will determine the topology codes of a list of elements.
Input:
INTEGER num_elems This value specifies the number of offsets in the input value elem_ids.
INTEGER elem_ids(num_elems)This value specifies the element identifier’s title to put in the packet 25 title field.
Output:
INTEGER topo_codes This value returns the topological codes for the list of elements. See the remarks below for more information.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This function may return a nonzero value if an error occurs.
---------------
db_get_elem_top_def(etop,etype,dimens,mxorder,nnodes,ncorner,nmidedge,nmidface,nmidbody,nedges,nfaces,nfedges,nfnodes,nacoords,nrcoords,shape,degen,edges,sense,faces,epacoords,eprcoords)
##########
Description:
Gets the definition of an element topology in the database.
Input:
INTEGER etop The topology code of the definition created by this routine.
Output:
STRING etype[31] The name of the element topology.
INTEGER dimens Element Dimensionality.
INTEGER mxorder A code indicating the maximum order of any of the element edges,defined as follows:
---------------
db_get_elem_use_all_node(node_count,node_id,element_count,element_id)
##########
Description:
This function finds the elements which nodes are all within the supplied list of node ids.
Input:
INTEGER node_count This value specifies the number of nodes.
INTEGER node_id (node_account)This array specifies the node ids.
Output:
INTEGER element_count This value returns the number of elements and the number of offsets in the element_id output value.
INTEGER element_id(VIRTUAL)This array returns the element ids.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
db_get_nodes_for_elems(<num_elems>,<max_connect>,<elem_ids>,<connectivity>)
##########
Input:
INTEGER <num_elems> The number of elements input to this function.
INTEGER <max_connect> The maximum number of nodes associated with any one of the input elements.
INTEGER ARRAY <elem_ids> The IDs of the <num_elems> elements input to this function.
Output:
INTEGER ARRAY <connectivity> A <max_connect>x<num_elems> array containing the IDs of all the nodes associated with each of the input element. The nodes are listed in standard Patran element connectivity ordering and each row is blank filled. For example,if there were two elements (a two noded bar and a four noded plate)then the connectivity array would be: [BarNodeI,BarNodeJ,0,0,PlateNodeI,PlateNodeJ,PlateNodeK,PlateNodeL].
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_elems(<num_elems>,<max_connect>,<topo_codes>,<geom_type>,<geom_id>,<connectivity>,<group_id>,<elem_ids>,<exist_elem>)
##########
Input:
INTEGER <num_elems> The number of elements to be added to the database.
INTEGER <max_connect> The maximum number of nodes associated with any one of the input elements.
INTEGER ARRAY <topo_codes> A <num_elems> array containing the topology codes associated with all of the input elements. These codes can be determined using the functions described in Patran Element Topology Codes (p. 670)
INTEGER ARRAY <geom_type> A <num_elems> array containing the geometry type each input element is to be associated with:0 = no geometry association2 = associated with a curve3 = associated with a surface4 = associated with a solid
INTEGER ARRAY <geom_id> A <num_elems> array containing the IDs of the geometry to which each element is associated. Zero if no geometry association exists.
INTEGER ARRAY <connectivity> The <max_connect>x<num_elems> array containing the IDs of all the nodes associated with each of the input element. The nodes are listed in standard Patran element connectivity ordering and each row is blank filled. For example,if there were two elements (a two noded bar and a four noded plate)then the connectivity array would be: [BarNodeI,BarNodeJ,0,0,PlateNodeI,PlateNodeJ,PlateNodeK,PlateNodeL].
INTEGER <group_id> The internal ID of the group to which these elements are to be added. The ID of a group can be determined by either “db_get_group_id” or “db_get_current_group_id” as described in Groups,657.
INTEGER ARRAY <elem_ids> A <num_elems> array containing the IDs of all the elements to be added to the database.
Output:
INTEGER <exist_elem> The ID of the first duplicate element found. Zero if no duplicates were found.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
--------------
fem_get_patran25_etop(<shape_code>,<num_of_nodes>,<topo_code>)
##########
Input:
INTEGER <shape_code> The PATRAN 2.5 shape code for this type of element:1 = Point Element2 = Bar Element3 = Triangular Element4 = Quadrilateral Element5 = Tetrahedral Element7 = Pentahedral Element8 = Hexahedral Element
INTEGER <num_of_nodes>
Output:
INTEGER <topo_code> The Patran element topology code to be used in referencing an element of this type.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
--------------
db_get_elem_topology_data(<num_codes>,<topo_codes>,<shape_codes>,<nodes_per_elem>)
##########
Input:
INTEGER <num_codes> The number of Patran topology codes input to this function.
INTEGER ARRAY <topo_codes> The <num_codes> topology codes being input to this function.
Output:
INTEGER ARRAY <shape_codes> The <num_codes> shape codes corresponding to the input topology codes. Their meaning is as follows: 1 = Point Element2 = Bar Element3 = Triangular Element4 = Quadrilateral Element5 = Tetrahedral Element7 = Pentahedral Element8 = Hexahedral Element
INTEGER ARRAY <nodes_per_elem> The Patran element topology code to be used in referencing an element of this type.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_coord(<coord_id>,<dummy_id>,<coord_type>,<coord_origin>,<coord_trans_mat>)
##########
Description:
Input:
INTEGER <coord_id> The ID of the coordinate frame of interest.
Output:
INTEGER <dummy_id> A dummy internal ID which is no longer used.
INTEGER <coord_type> A flag specifying the type of coordinate frame:1 = Rectangular Frame2 = Cylindrical Frame3 = Spherical Frame
REAL ARRAY <coord_origin> The global rectangular position vector describing the origin of the frame
REAL ARRAY <coord_trans_mat> The 3x3 local to global transformation matrix of the frame.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_coord(<coord_id>,<coord_type>,<coord_origin>,<coord_trans_mat>,<dummy_id>)
##########
Description:
Input:
INTEGER <coord_id> (only input if input value of <coord_id> > 0)the ID of the frame to be added to the database. If zero,Patran will assign a unique ID to this frame and return the value in <coord_id>.
INTEGER <coord_type> A flag specifying the type of coordinate frame:1 = Rectangular Frame2 = Cylindrical Frame3 = Spherical Frame
REAL ARRAY <coord_origin> The global rectangular position vector describing the origin of the frame.
REAL ARRAY <coord_trans_mat> The 3x3 local to global transformation matrix of the frame.
INTEGER <dummy_id> The internal ID of the coordinate frame. No longer used. Zero can be input here.
Output:
INTEGER <coord_id> (only output if input value of <coord_id> = 0)the unique ID assigned to this new frame by Patran.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_coord_ref_coord(coord_id,refcid,xmat_lcl)
##########
Description:
Get the reference frame for a specified coordinate frame definition
Input:
INTEGER coord_id The coordinate frame ID
Output:
INTEGER refcid The ID of the reference frame (zero if no reference found)
REAL xmat_lcl(4,4)The 4x4 transformation matrix of the coordinate frame relative to the reference frame (includes translation and rotation)
Error Conditions:
---------------
db_get_coord_ref_nodes(coord_id,node_ids)
##########
Description:
Get the reference nodes for a specified coordinate frame
Input:
INTEGER coord_id The coordinate frame ID
Output:
INTEGER node_ids(3)The IDs of the three node references (zeros if no references found)
INTEGER <Return Value> This function returns a value of zero if successful.
Error Conditions:
---------------
db_set_coord_ref_coord(coord_id,refcid,xmat_lcl)
##########
Description:
Set the reference frame in a coordinate frame definition
Input:
INTEGER coord_id The coordinate frame ID
INTEGER refcid The ID of the reference frame (0 to remove an existing reference)
REAL xmat_lcl(4,4)The 4x4 transformation matrix of the coordinate frame relative to the reference frame (includes translation and rotation)
Output:
INTEGER <Return Value> This function returns a value of zero if successful.
Error Conditions:
---------------
db_set_coord_ref_nodes(coord_id,node_ids)
##########
Description:
Set the reference nodes in a coordinate frame definition
Input:
INTEGER coord_id The coordinate frame ID
INTEGER node_ids(3)The IDs of the three node references (zeros to remove existing references)
Output:
INTEGER <Return Value> This function returns a value of zero if successful.
Error Conditions:
##########
Input:
INTEGER <coord_id> The ID of the coordinate frame to be posted to graphics.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_count_nodes(<num_nodes>)
##########
Description:
Output:
INTEGER <num_nodes> The internal ID of the currently active group.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_count_nodes_in_group(<group_id>,<num_nodes>)
##########
Description:
Input:
INTEGER <group_id> The internal ID of the group of which the nodes are to be members. This ID can be determined by either “db_get_group_id” or “db_get_current_group_id” as described in Groups,657.
Output:
INTEGER <num_nodes> The number of nodes belonging to the specified group.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_node_ids(<num_nodes>,<node_ids>)
##########
Description:
Input:
INTEGER <num_nodes> The number of nodes in the database.
Output:
INTEGER ARRAY <node_ids> The number of nodes belonging to the specified group.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_all_node_ids_in_group(<num_nodes>,<group_id>,<node_ids>)
##########
Description:
Input:
INTEGER <num_nodes> The number of nodes belonging to the specified group.
INTEGER <group_id> The internal ID of the group of which the nodes are to be members. This ID can be determined by either “db_get_group_id” or “db_get_current_group_id” as described in Groups,657
Output:
INTEGER ARRAY <node_ids> An array containing the <num_nodes> IDs of all the nodes belonging to the specified group.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_nodes(num_nodes,nodes_ids,ref_coords,analy_coords,glob_xyzs)
##########
Description:
Input:
INTEGER num_nodes The number of nodes belonging to the specified group.
INTEGER node_ids(num_nodes)The IDs of the nodes of interest.
Output:
INTEGER ref_coords(num_nodes)The IDs of the reference coordinate frames for the nodes of interest. Zero if no reference.
INTEGER ARRAY analy_coords An array containing the analysis coordinate frame ID for each specified node.
REAL glob_xyzs(num_nodes,3)An array containing the global rectangular position vector for each node.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_node_ass_elem(element_count,element_id,node_count,node_id)
##########
Description:
This function finds the nodes associated to the given elements.
Input:
INTEGER element_count This value specifies the number of elements.
INTEGER element_id (elem_count)This array specifies the element ids.
Output:
INTEGER node_count This value returns the number of nodes and the number of offsets in the node_id output value.
INTEGER node_id(VIRTUAL)This array returns the node ids.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
db_get_node_ass_geo(lp_geo,node_count,node_id)
##########
Description:
This function finds the nodes associated to the given geometry.
Input:
STRING lp_geo [ ] This value contains the list processor string of geometric entities. Ex: “Surface 3.1 5.1”. This string can be empty or not allocated and the function will exit normally (Return Value=0).
Output:
INTEGER node_count This value returns the number of nodes and the number of offsets in the node_id output value.
INTEGER node_id(VIRTUAL)This array returns the node ids.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate an error.
Error Conditions:
-1 This is an internal error status condition. There is no corresponding status message in the message database.
---------------
db_get_node_ass_mpc(mpc_count,mpc_id,node_count,node_id)
##########
Description:
Output:
INTEGER <group_id> The internal ID of the currently active group.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_create_nodes(<num_nodes>,<ref_coords>,<analy_coords>,<glob_xyzs>,<group_id>,<node_ids>,<node_exist>)
##########
Description:
Output:
INTEGER <group_id> The internal ID of the currently active group.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_current_group_id(<group_id>)
##########
Description:
Output:
INTEGER <group_id> The internal ID of the currently active group.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_group_id(<group_name>,<group_id>)
##########
Description:
Input:
CHARACTER STRING <group_name> The name of the group of interest.
Output:
INTEGER <group_id> The internal ID of the specified group.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_get_group_name(ID,name)
##########
Description:
Input:
INTEGER ID The group id.
Output:
STRING name[31] The name of the specified group.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_open_database(<database_name>)
##########
Description:
Input:
CHARACTER STRING <database_name> The name of the database to be opened.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_close_database()
##########
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_commit()
##########
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_undo()
##########
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_commit_raw()
##########
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_start_transaction_raw()
##########
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
db_is_open()
##########
Output:
LOGICAL <Return Value> Flag which specifies whether a database is open (TRUE)or not (FALSE).
---------------
db_name_get(<database_name>)
##########
Description:
Output:
STRING <database_name>
The name of the currently opened database.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
DbNameGet(<maximum_length>,<database_name>)
##########
Input:
INTEGER <maximum_length>
The maximum length of the output database name.
Output:
STRING <database_name>
The name of the currently opened database.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
AASTATE.record_dialog(file_name,step_id,dialog_id)
##########
Description:
This function will record dialog id as encountered. This is used to establish a work flow history.
Input:
STRING file_name[4096] This value specifies file name to the XML drive page. If the <file_name> starts with a “/” then it is assumed to be a full path,otherwise,the value for the environment variable AdvisorLIB is prepended to the file name.
STRING step_id[4] This value specifies the step id as listed on the page.
STRING dialog_id[4096] This value specifies the dialog id as listed on the page.
Output:
Error Conditions:
None.
---------------
AASTATE.record_lrule(file_name,step_id,rule_id)
##########
Description:
This function will record link rule id as encountered and processed. This is used to establish a work flow history.
Input:
STRING file_name[4096] This value specifies file name to the XML drive page. If the <file_name> starts with a “/” then it is assumed to be a full path,otherwise,the value for the environment variable AdvisorLIB is prepended to the file name.
STRING step_id[4] This value specifies the step id as listed on the page.
STRING rule_id[4096] This value specifies the rule id as listed on the page.
Output:
Error Conditions:
None.
---------------
AASTATE.previous_dialog(file_name,step_id,dialog_id,null_flag)
##########
Description:
This function will return the address of the previous dialog as recorded in the dialog history of the State Table
Input:
Output:
STRING file_name[4096] This value returns file name to the XML drive page.
STRING step_id[4] This value returns the step id as listed on the page.
STRING dialog_id[4096] This value returns the dialog id as listed on the page.
Error Conditions:
None.
---------------
AASTATE.dumphistory()
##########
Description:
This function will print the history of link rule IDs and dialog IDs encountered plus the recorded user responses to a file or the history window for debug purposes.
Input:
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AASTATE.store_objectives()
##########
Description:
This function will write the State Table in present form to the database.
Input:
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
---------------
AASTATE.restore_oldstate()
##########
Description:
This function reads a previously recorded State Table from an exiting database back into memory. The application author should call this function after re-opening an existing database.
Input:
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
---------------
AASTATE.overwrite_ur_real(step_id,variable_name,value)
##########
Description:
This function will overwrite a REAL State Table variable called <variable_name> associated with the given step. It differs from the record_ur_real function in that the associated analysis step ID is given explicitly as a call argument. Thus,user responses can be recorded or overwritten for steps that are not the current assigned step.
Input:
STRING step_id[4] This value specifies the step id.
STRING variable_name[4096] This value specifies the name of the user response variable.
REAL value This value specifies the value to record for the <variable_name>.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None
---------------
AASTATE.overwrite_ur_realarray(step_id,variable_name,num,values)
##########
Description:
This function will overwrite an array of State Table variables of REALs called <variable_name> associated with the given step. It differs from the record_ur_integer function in that the associated analysis step ID is given explicitly as a call argument. Thus,user responses can be recorded or overwritten for steps that are not the current assigned step.
Input:
STRING step_id[4] This value specifies the step id.
STRING variable_name[4096] This value specifies the name of the user response variable.
INTEGER num This value specifies the number of values to store.
REAL values(num)This value specifies the value to record for the <variable_name>.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AASTATE.overwrite_ur_integer(step_id,variable_name,value)
##########
Description:
This function will overwrite an INTEGER State Table variable called <variable_name> associated with the given step. It differs from the record_ur_integer function in that the associated analysis step ID is given explicitly as a call argument. Thus,user responses can be recorded or overwritten for steps that are not the current assigned step.
Input:
STRING step_id[4] This value specifies the step id.
STRING variable_name[4096] This value specifies the name of the user response variable.
INTEGER value This value specifies the values to record for the <variable_name>.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AASTATE.overwrite_ur_integerarray(step_id,variable_name,num,values)
##########
Description:
This function will overwrite an array of State Table variable of INTEGERs called <variable_name> associated with the given step. It differs from the record_ur_integer function in that the associated analysis step ID is given explicitly as a call argument. Thus,user responses can be recorded or overwritten for steps that are not the current assigned step.
Input:
STRING step_id[4] This value specifies the step id.
STRING variable_name[4096] This value specifies the name of the user response variable.
INTEGER num This value specifies the number of values to store.
INTEGER values(num)This value specifies the values to record for the <variable_name>.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AASTATE.overwrite_ur_string(step_id,variable_name,value)
##########
Description:
This function will overwrite a virtual length STRING called <variable_name> associated with the given step. It differs from the record_ur_string function in that the associated analysis step ID is given explicitly as a call argument. Thus,user responses can be recorded or overwritten for steps that are not the current assigned step.
Input:
STRING step_id[4] This value specifies the step id.
STRING variable_name[4096] This value specifies the name of the user response variable.
STRING value[virtual] This value specifies the value to record for the <variable_name>.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
AASTATE.overwrite_ur_stringarray(step_id,variable_name,num,values)
##########
Description:
This function will overwrite an array of strings called <variable_name> associated with the given step. It differs from the record_ur_integer function in that the associated analysis step ID is given explicitly as a call argument. Thus,user responses can be recorded or overwritten for steps that are not the current assigned step.
Input:
STRING step_id[4] This value specifies the step id.
STRING variable_name[4096] This value specifies the name of the user response variable.
INTEGER num This value specifies the number of values to store.
STRING values[virtual](virtual)This value specifies the values to record for the <variable_name>.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None
---------------
AASTATE.overwrite_uresponse(step_id,variable_name,real_val,i_val,str_val,data_type)
##########
Description:
This function will overwrite either a real,integer,or string value associated with a specified analysis step. Place holder arguments are given for all three data types. Only one of the value arguments is used based upon the <data_type> argument. This call differs from the record_uresponse call in that the associated analysis step ID is given explicitly as a call argument. Thus,user responses can be recorded or overwritten for steps that are not the current assigned step.
Input:
STRING step_id[4] This value specifies the step id.
STRING variable_name[4096] This value specifies the name of the user response variable.
Output:
REAL real_val This value returns the real value if <data_type> = 1.
INTEGER i_val This value returns the integer value if <data_type> = 2.
STRING str_val[virtual] This value returns the string value if the <data_type> = 3.
INTEGER data_type Flag for type of data to record for the <variable_name>. The other two values will not be accessed.
Error Conditions:
None.
---------------
AASTATE.get_ur_real(step_id,variable_name,value,null_flag)
##########
Description:
This function will retrieve a real State Table variable called <variable_name> associated with the given step.
Input:
STRING step_id[4] This value specifies the step id.
STRING variable_name[4096] This value specifies the name of the user response variable.
Output:
REAL value This value specifies the value retrieved for the <variable_name>.
INTEGER null_flag This value specifies whether data was returned for this variable. If null_flag = 0,then a value was returned. If null_flag = 1 then no value was returned.
Error Conditions:
None.
---------------
AASTATE.get_ur_realarray(step_id,variable_name,num,values)
##########
Description:
This function will retrieve an array of real values State Table called <variable_name> associated with the given step. The size of the array will be allocated by this function.
Input:
STRING step_id[4] This value specifies the step id.
STRING variable_name[4096] This value specifies the name of the user response variable.
Output:
INTEGER num This value specifies the number of values returned.
REAL values(VIRTUAL)This value specifies the values retrieved for the <variable_name>. The size of this array will be allocated by this function.
Error Conditions:
None.
---------------
AASTATE.get_ur_integer(step_id,variable_name,value,null_flag)
##########
Description:
This function will retrieve an integer State Table variable called <variable_name> associated with the given step.
Input:
STRING step_id[4] This value specifies the step id.
STRING variable_name[4096] This value specifies the name of the user response variable.
Output:
INTEGER value This value specifies the value to record for the <variable_name>.
INTEGER null_flag This value specifies whether data was returned for this variable. If null_flag = 0,then a value was returned. If null_flag = 1 then no value was returned.
Error Conditions:
None
---------------
AASTATE.get_ur_integerarray(step_id,variable_name,num,values)
##########
Description:
This function will retrieve an array of integer State Table values called <variable_name> associated with the given step. The size of the array will be allocated by this function.
Input:
STRING step_id[4] This value specifies the step id.
STRING variable_name[4096] This value specifies the name of the user response variable.
Output:
INTEGER num This value specifies the number of values returned.
INTEGER values(VIRTUAL)This value specifies the values retrieved for the <variable_name>. The size of this array will be allocated by this function.
Error Conditions:
None.
---------------
AASTATE.get_ur_string(step_id,variable_name,value,null_flag)
##########
Description:
This function will retrieve a virtual length string called <variable_name> associated with the given step.
Input:
STRING step_id[4] This value specifies the step id.
STRING variable_name[4096] This value specifies the name of the user response variable.
Output:
STRING value[virtual] This value specifies the value to record for the <variable_name>.
INTEGER null_flag This value specifies whether data was returned for this variable. If null_flag = 0,then a value was returned. If null_flag = 1 then no value was returned.
Error Conditions:
None
---------------
AASTATE.get_ur_stringarray(step_id,variable_name,num,values)
##########
Description:
This function will retrieve an array of strings called <variable_name> associated with the given step. The size of the array will be allocated by this function.
Input:
STRING step_id[4] This value specifies the step id.
STRING variable_name[4096] This value specifies the name of the user response variable.
Output:
INTEGER num This value specifies the number of values returned.
STRING values[virtual](VIRTUAL)This value specifies the values retrieved for the <variable_name>. The size of this array will be allocated by this function.
Error Conditions:
None.
---------------
AASTATE.get_uresponse(step_id,variable_name,real_val,i_val,str_val,data_type,null_flag)
##########
Description:
This function will retrieve either a real,integer,or string value associated with a specified analysis step. Place holder arguments are given for all three data types. Output is written to only one of the place holder arguments depending upon the data_type value that is returned.
Input:
STRING step_id[4] This value specifies the step id.
STRING variable_name[4096] This value specifies the name of the user response variable.
Output:
REAL real_val This value returns the real value if <data_type> = 1.
INTEGER i_val This value returns the integer value if <data_type> = 2.
STRING str_val[virtual] This value returns the string value if the <data_type> = 3.
INTEGER data_type Flag for type of data retrieved for <variable_name>. The other two values will not be accessed.
INTEGER null_flag This value returns whether data was returned for this variable. If null_flag = 0,then a value was returned. If null_flag = 1 then no value was returned.
Error Conditions:
None.
---------------
AASTATE.record_ur_real(variable_name,value)
##########
Description:
This function will record a real State Table variable called <variable_name> associated with the current step.
Input:
STRING variable_name[4096] This value specifies the name of the user response variable.
REAL value This value specifies the value to record for the <variable_name>.
Output:
Error Conditions:
None
---------------
AASTATE.record_ur_realarray(variable_name,num,values)
##########
Description:
This function will record a real array of State Table variables called <variable_name> associated with the current step.
Input:
STRING variable_name[4096] This value specifies the name of the user response variable.
INTEGER num This value specifies the number of values to store.
REAL values(num)This value specifies the values to record for the <variable_name>.
Output:
Error Conditions:
None
---------------
AASTATE.record_ur_integer(variable_name,value)
##########
Description:
This function will record an integer State Table variable called <variable_name> associated with the current step.
Input:
STRING variable_name[4096] This value specifies the name of the user response variable.
INTEGER value This value specifies the value to record for the <variable_name>.
Output:
Error Conditions:
None
---------------
AASTATE.record_ur_integerarray(variable_name,num,values)
##########
Description:
This function will record an integer array State Table called <variable_name> associated with the current step.
Input:
STRING variable_name[4096] This value specifies the name of the user response variable.
INTEGER num This value specifies the number of values to store.
INTEGER values(num)This value specifies the values to record for the <variable_name>.
Output:
Error Conditions:
None
---------------
AASTATE.record_ur_string(variable_name,value)
##########
Description:
This function will record a virtual string State Table variable called <variable_name> associated with the current step.
Input:
STRING variable_name[4096] This value specifies the name of the user response variable.
STRING value[virtual] This value specifies the value to record for the <variable_name>.
Output:
Error Conditions:
None
---------------
AASTATE.record_ur_stringarray(variable_name,num,values)
##########
Description:
This function will record an array of virtual virtual strings called <variable_name> associated with the current step.
Input:
STRING variable_name[4096] This value specifies the name of the user response variable.
INTEGER num This value specifies the number of values to store.
STRING values[virtual](virtual)This value specifies the values to record for the <variable_name>.
Output:
Error Conditions:
None
---------------
AASTATE.record_uresponse(variable_name,real_val,i_val,str_val,data_type)
##########
Description:
This function will record either a real,integer,or a string value associated with the current selected analysis step. Place holder arguments are given for all 3 data types. Only one of the values arguments is used based upon the <data_type> argument.
Input:
STRING variable_name[4096] This value specifies the name of the user response variable.
REAL real_val This value specifies the real value to record for the <variable_name>,if the data_type = 1.
INTEGER i_val This value specifies the value to record for the <variable_name>,if the data_type = 2.
STRING str_val[virtual] This value specifies the value to record for the <variable_name>,if the data_type = 3.
INTEGER data_type Flag for type of data to record for the <variable_name>. The other two values will not be accessed.
Output:
Error Conditions:
None
---------------
sys_move_raw()
##########
Description:
Move raw data from one PCL variable to another. This function is not generally used but can occasionally be useful if data in one format needs to be accessed in another format.
Input:
ANY source The source variable to move information from.
Output:
ANY destination The destination variable to which to copy the source variable.
Error Conditions:
None.
---------------
sys_product()
##########
Description:
Return a string representing the name of the product/application being executed.
Input:
None.
Output:
STRING <Return Value> Product name,such as “Patran”.
Error Conditions:
None.
---------------
sys_release()
##########
Description:
Return a string representing the release/version of the product/application being executed.
Input:
None.
Output:
STRING <Return Value> Release/Version string.
Error Conditions:
None.
---------------
sys_date()
##########
Description:
Return a string with the current date in dd-mm-yy format.
Input:
None.
Output:
STRING <Return Value> String representing date such as “25-Feb-92.”
Error Conditions:
None.
---------------
sys_time()
##########
Description:
Return a string with the current time in hh:mm:ss format.
Input:
None.
Output:
STRING <Return Value> String representing time such as “12:52:22.”
Error Conditions:
None.
---------------
sys_clock()
##########
Description:
Return the current time in seconds since midnight.
Input:
None.
Output:
REAL <Return Value> Current time in seconds since midnight expressed as a REAL.
Error Conditions:
None.
---------------
sys_cputime()
##########
Description:
Return a cpu time value in seconds on a machine dependent base. It is recommended to use this value by taking the difference between two calls to the function in the same session. This routine returns the sum of the user and system time.
Input:
None.
Output:
REAL <Return Value> CPU time in seconds from unknown base.
Error Conditions:
None.
---------------
sys_allocate_array(array,lb1,hb1 [,lb2,hb2 [,lb3,hb3 [,lb4,hb4 ]]])
##########
Description:
Allocate memory for a PCL virtual array variable. This function is more completely described in the virtual arrays section of the PCL manual
Input:
INTEGER lb1 Lower bound for first dimension.
INTEGER hb1 Higher bound for first dimension.
INTEGER lb2 Optional lower bound for a second dimension.
INTEGER hb2 Optional upper bound for a second dimension.
INTEGER lb3 Optional lower bound for a third dimension.
INTEGER hb3 Optional upper bound for a third dimension.
INTEGER lb4 Optional lower bound for a fourth dimension.
INTEGER hb4 Optional upper bound for a fourth dimension.
Output:
ANY(VIRTUAL)array Virtual array with storage allocated if available.
INTEGER <Return Value> Zero for success,else error code.
Error Conditions:
None.
---------------
sys_reallocate_array(array,lb1,hb1 [,lb2,hb2 [,lb3,hb3 [,lb4,hb4 ]]])
##########
Description:
Re-allocate memory for a PCL virtual array variable. This function is more completely described in Virtual Arrays,15.
Input:
ANY(VIRTUAL)array Original virtual array.
INTEGER lb1 Lower bound for first dimension.
INTEGER hb1 Higher bound for first dimension.
INTEGER lb2 Optional lower bound for a second dimension.
INTEGER hb2 Optional upper bound for a second dimension.
INTEGER lb3 Optional lower bound for a third dimension.
INTEGER hb3 Optional upper bound for a third dimension.
INTEGER lb4 Optional lower bound for a fourth dimension.
INTEGER hb4 Optional upper bound for a fourth dimension.
Output:
ANY(VIRTUAL)array Virtual array with storage reallocated if available.
INTEGER <Return Value> Zero for success,else error code.
Error Conditions:
None.
---------------
sys_free_array(array)
##########
Description:
Free memory for a PCL virtual array variable. This function is more completely described in Virtual Arrays,15.
Input:
ANY(VIRTUAL)array Virtual array.
Output:
ANY(VIRTUAL)array Virtual array now deallocated
INTEGER <Return Value> Zero for success,else error code.
Error Conditions:
None.
---------------
sys_allocate_string(string,size)
##########
Description:
Allocate memory for a PCL virtual string variable. This function is more completely described in Virtual Arrays,15.
Input:
INTEGER size New maximum size for the virtual string variable.
Output:
STRING string Virtual string with storage allocated if available.
INTEGER <Return Value> Zero for success,else error code.
Error Conditions:
None.
---------------
sys_reallocate_string(string,size)
##########
Description:
Re-allocate memory for a PCL virtual string variable. This function is more completely described in Virtual Arrays,15.
Input:
STRING string Original virtual string.
INTEGER size New maximum size for the virtual string variable.
Output:
STRING string Virtual string with storage allocated if available.
INTEGER <Return Value> Zero for success,else error code.
Error Conditions:
None.
---------------
sys_free_string(string)
##########
Description:
Free memory for a PCL virtual array variable. This function is more completely described in Virtual Arrays,15.
Input:
STRING string Virtual string.
Output:
STRING string Virtual string now deallocated.
INTEGER <Return Value> Zero for success,else error code.
Error Conditions:
None.
---------------
sys_array_hbound(array,dim)
##########
Description:
Return the upper bound for a dimension of an array.
Input:
ANY()array Array to return upper bound for.
INTEGER dim Dimension number to return bound for,one for first dimension.
Output:
INTEGER <Return Value> Upper bound of specified dimension of specified array.
Error Conditions:
None.
---------------
sys_array_lbound(array,dim)
##########
Description:
Return the lower bound for a dimension of an array.
Input:
ANY()array Array to return lower bound for.
INTEGER dim Dimension number to return bound for,one for first dimension.
Output:
INTEGER <Return Value> Lower bound of specified dimension of specified array.
Error Conditions:
None.
---------------
sys_array_nbound(array)
##########
Description:
Return the number of bounds/dimensions for an array.
Input:
ANY()array Array to return number of dimensions for.
Output:
INTEGER <Return Value> Number of dimensions of specified array or zero if not an array.
Error Conditions:
None.
---------------
sys_class_get(classname,varname)
##########
Description:
This function will return the value of a classwide variable from a class of PCL functions.
Input:
STRING class_name[32] This value specifies the name of the PCL function class from which the variable value will be retrieved.
STRING variable_name[32] This value specifies the name of the variable which will have its value retrieved.
Output:
DYNAMIC_ILRSW <Return Value> This function returns the value from the specified variable which is a member of the specified class.
Error Conditions:
None.
---------------
sys_class_set(classname,varname,newvalue)
##########
Description:
Set the contents of a class variable.
Input:
STRING classname Class name specified as a string.
STRING varname Variable name specified as a string.
UNKNOWN newvalue New value for the class variable. The value must be of the correct type.
Output:
None.
Error Conditions:
None.
Side Effects:
Unknown. Be cautious with this routine. Most class functions do not expect their variables to change from accesses outside of the class definition.
---------------
sys_hash_stat(tablename)
##########
Description:
Output internal hash table statistics for various parts of the Patran system. This routine is primarily for performance tuning and is not expected to be used by the typical user.
Input:
STRING tablename Name of a system hash table.
Output:
STRING tablename Name of a system hash table.
LOGICAL <Return Value> True if hash table found,FALSE otherwise.
Error Conditions:
None.
---------------
sys_eval(pcl_expression)
##########
Description:
This function will execute a PCL expression contained in a string.
Input:
STRING pcl_expression This value provides the PCL expression that will be evaluated. This expression is evaluated in a global context where it will be assumed that any variables in the PCL expression will have a global scope. This global context prevents the use of any local variables in the PCL expression.
Output:
DYNAMIC_ILRS <Return Value> This function will return the results of the evaluated PCL expression. The type of the data returned will be defined by the evaluated PCL expression.
Error Conditions:
None.
---------------
sys_func_where(func [,options])
##########
Description:
Search for type and existence of a PCL function.
Input:
STRING func Name of PCL function to search for.
INTEGER options Optional argument which if set to one causes a faster search to take place which might miss changes made to library lists.
Output:
INTEGER <Return Value> Result of check. If function does not exists,the value is zero. If the function is an intrinsic function,the value is one. If the function exists and is currently loaded into memory,the value is two. If the function exists,but is currently not in memory,the value is three.
Error Conditions:
None.
---------------
sys_sf_callopt(options)
##########
Description:
Set options for session file “>” processing lines. This routine is not normally expected to be used by users.
Input:
INTEGER options One to suppress all session,two to suppress next,zero to enable.
Output:
INTEGER <Return Value> Previous value of the options.
Error Conditions:
None.
---------------
sys_sf_argopt(argnum,options)
##########
Description:
Set options for session file “>” processing lines. This routine is not normally expected to be used by users.
Input:
INTEGER argnum Argument number to affect.
INTEGER options Sum of 1 for use variable instead of value,2 for output declaration,and 4 for output class declaration.
Output:
INTEGER <Return Value> Previous value of the options.
Error Conditions:
None.
---------------
sys_sf_write(string)
##########
Description:
Write string to session file under control of SYS_SF_CALLOPT. This routine is not normally expected to be used by users.
Input:
STRING string String to write to the session file.
Output:
None.
Error Conditions:
None.
---------------
sys_sf_vwclear()
##########
Description:
Clear variable written list. This routine is not normally expected to be used by users.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
sys_sf_commit()
##########
Description:
Commit variable written list. This routine is not normally expected to be used by users.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
sys_sf_undo()
##########
Description:
Undo variable written list up to last commit. This routine is not normally expected to be used by users.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
sys_poll_option(option)
##########
Description:
Set polling options for PCL compiler/interpreter for checking aborts,events,and graphics updates. This routine is not normally expected to be used by users but can speed up operations by minimizing graphics updates if used correctly.
Input:
INTEGER option Zero for full check,one for quick check,two for no check.
Output:
INTEGER <Return Value> Previous value of the options.
Error Conditions:
None.
---------------
sys_trace(options)
##########
Description:
Allow setting of tracing options during runtime execution. See !!TRACE(p. 9)
Input:
STRING options String with any of blank separated keywords of “CALLS”,“LINES”,“EXITS”,“STDOUT”,“NOCALLS”,“NOLINES”,“NOEXITS”,“NOSTDOUT”,“NONE”.
Output:
STRING <Return Value> Previous value of the options.
Error Conditions:
None.
---------------
sys_traceback()
##########
Description:;
Output a PCL error call traceback.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
sys_input(filename [,noerror ])
##########
Description:
Allow setting of an input file during execution. See !!INPUT(p. 9)
Input:
STRING FILENAME Name of operating system file to input.
LOGICAL NOERROR Optional flag which if set TRUE will suppress any error if the specified file does not exist.
Output:
LOGICAL <Return Value> True if input queued successfully.
Error Conditions:
None.
---------------
sys_stop_input()
##########
Description:
Attempt to stop !!INPUT file during runtime execution.
Input:
None.
Output:
None.
Error Conditions:
None.
---------------
sys_library(operation,args)
##########
Description:
Allow setting of library options during runtime execution. See !!LIBRARY(p. 9)
Input:
STRING operation String with operation keyword of either “”,“ADD”,“CREATE”,“DELETE”,“KEEPOPEN”,“LIST”,“MERGE”,“NONE”,“REHASH”,“REMOVE”,or “SORT”.
STRING args Filename(s)or function name(s)depending on operation specified.
Output:
None.
Error Conditions:
None.
---------------
sys_path(operation,paths)
##########
Description:
Allow setting of path options during runtime execution. See !!PATH(p. 9)
Input:
STRING operation String with operation keyword of either “ADD ”,“NONE”,or “REMOVE”.
STRING paths Pathname(s)for operations.
Output:
None.
Error Conditions:
None.
---------------
sys_get_env(ename,result)
##########
Description:
Look up a system environment variablt name.
Input:
STRING ename Name of environment variable to look up. Note that this name is case sensitive on Linux systems.
Output:
STRING result String result of environment definition if environment variable is defined.
INTEGER <Return Value> Zero for success,else error code if environment variable is not defined.
Error Conditions:
None.
---------------
sys_get_errno_msg(enoval,result)
##########
Description:
Translate a system “errno” value to a string.
Input:
INTEGER enoval System “errno” value.
Output:
STRING result String with message for specified errno.
Error Conditions:
None.
---------------
sys_get_info(infotype,result)
##########
Description:
Get various kind of “system” information.
Input:
INTEGER infotype Type of information desired,currently only 1=Machine Name.
Output:
STRING result Returned information as a string. For infotype=1,the possible returns are: SUNS,SGI5,RS6K,HP700,HPIPF,WINNT and LX86 with possible others in the future.
INTEGER <Return Value> Zero for success,else error.
Error Conditions:
None.
---------------
sys_get_user(uname)
##########
Description:
Get operating system user name for currently logged in user.
Input:
None.
Output:
STRING uname Login name of user logged in.
Error Conditions:
None.
---------------
utl_get_cust_info(custnumber,custname)
##########
Description:
Get customer information.
Input:
STRING custnumber Customer number string.
STRING custname Customer name string.
Output:
INTEGER <Return Value> Status,0=success.
Error Conditions:
None.
---------------
utl_get_host_name(host)
##########
Description:
Retrieve name of operating system network host.
Input:
None.
Output:
STRING host Network host name.
Error Conditions:
None.
---------------
utl_get_product(product)
##########
Description:
Return Patran product name (same as sys_product).
Input:
None.
Output:
STRING product Product name string.
Error Conditions:
None.
---------------
utl_get_user_name(user)
##########
Description:
Retrieve name of operating system user.
Input:
None.
Output:
STRING user User name.
LOGICAL <Return Value> True for successful retrieval.
Error Conditions:
None.
---------------
utl_get_version(version)
##########
Description:
Return Patran version number (same as sys_release).
Input:
None.
Output:
STRING version Version number string.
Error Conditions:
None.
---------------
utl_process_spawn(command,wait)
##########
Description:
The program will execute a “fork” system call (or “vfork”,depending on the specific machine implementation)followed by an “execvp” system call with the “command” specified by the caller as its argument. The spawned command becomes a “process group leader.” This allows all processes created by this spawned process to be killed via the abort button or UTL_PROCESS_KILL. Redirection cannot be used in subprocess commands entered via utl_process_spawn. If redirection is required for the subprocess it is recommended that a bourne shell script be created which accepts the redirected input and output files as arguments and then issues the actual command of interest,including the redirection. This bourne shell script is what should be input to the utl_process_spawn function in this case.
Input:
STRING command Command string to execute.
LOGICAL wait True to wait for completion before continuing. False to execute command asynchronously.
Output:
INTEGER <Return Value> If WAIT is TRUE,then a return code is returned which needs to be checked by utl_process_error. If WAIT is FALSE,then the process group ID of the subprocess is returned. On Windows if WAIT is FALSE,then zero is returned.
Error Conditions:
None.
---------------
utl_process_wait(pid)
##########
Description:
Wait for an asynchronous command to finish completion.
Input:
INTEGER pid Process ID returned from a previous call to utl_process_spawn with WAIT as FALSE.
Output:
INTEGER <Return Value> Status code that can be checked with utl_process_error.
Error Conditions:
None.
---------------
utl_display_process_error(errcode,severity)
##########
Description:
Display an error message based on a status code from one of the utl_process commands.
Input:
INTEGER errcode Status from utl_process_spawn or utl_process_wait.
INTEGER severity Type of form to use for display. 1=Info,2=Warning,3=Acknowlege,4=Fatal.
Output:
None.
Error Conditions:
None.
---------------
utl_process_error(errcode)
##########
Description:
Check status of utl_process_spawn or utl_process_wait.
Input:
INTEGER errcode Status from utl_process_spawn or utl_process_wait.
Output:
LOGICAL <Return Value> TRUE if error occurred,FALSE otherwise.
Error Conditions:
None.
---------------
utl_process_kill(pid)
##########
Description:
To kill a spawned subprocess and all child processes created on its behalf.
Input:
INTEGER pid PID returned from UTL_PROCESS_SPAWN
Output:
None.
Error Conditions:
None.
---------------
res_plot_set_create_over(plot_set_id,overwrite_plot_set,name,desc)
##########
Description:
This function creates a new Plot Set and persists it in the Patran database. An overwrite specifier is included to allow the command to overwrite an existing Plot Set if it uses the same name as the new name provided with this command.
Input:
LOGICAL overwrite_plot_set TRUE forces overwriting. FALSE causes the copy to fail if an existing Plot Set already uses the input new_name.
STRING name[max 79] New Plot Set name.
STRING desc[VIRTUAL] Plot Set description.
Output:
INTEGER plot_set_id Internal database ID of the newly created Plot Set.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
MSG_RES_PLOT_SET_DOES_NOT_EXISTDbErrorNotFound DbOtherFailure
---------------
res_plot_set_copy_over(new_id,overwrite_plot_set,new_name,new_desc,old_id,old_name)
##########
Description:
This function copies an existing Plot Set and persists it in the Patran database. An overwrite specifier is included to allow the command to overwrite an existing Plot Set if it uses the same name as the new name provided with this command.
Input:
LOGICAL overwrite_plot_set TRUE forces overwriting. FALSE causes the copy to fail if an existing Plot Set already uses the input new_name.
STRING new_name[max 79] New Plot Set name.
STRING new_desc[VIRTUAL] Plot Set description.
INTEGER old_id Internal database id of the Plot Set to be copied.
STRING old_name[max 79] Plot Set name to be copied.
Output:
INTEGER new_id Internal database ID of the newly created Plot Set.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
MSG_RES_PLOT_SET_DOES_NOT_EXISTMSG_RES_PLOT_SET_LONG_NAMEMSG_RES_PLOT_SET_NULL_NAMEMSG_RES_PLOT_SET_EMPTY_NAMEMSG_RES_PLOT_SET_BLANK_NAMEMSG_RES_PLOT_INVALID_NAMEDbErrorNotFound DbOtherFailure DbNotADatabase DbOutOfMemory
---------------
res_create_plot_set_row(row_id,plot_set_name,row_index,row_type_name,num_cols,a_col_vals,stride)
##########
Description:
This function creates a plots set’s row definition.
Input:
STRING plot_set_name[max 79] Plot Set name the row is associated to.
INTEGER row_index Position of row within the Plot Set definition.
STRING row_type_name[ ] Specification of the rows purpose. The options are: “Fringe Plot”,“Deformed Plot”,“Vector Plot”,“Tensor Plot”,“Image Data”,“Default Values”,“Column Order”,“Combined Plot”,and “Saved Plot”.
INTEGER num_cols Number of data column sets that are required to support the row type.
STRING a_col_vals Data required to support the row type. Each data column must have the following data within the column: column_type_name,num_values,value1,value2,...,valueN.
INTEGER stride The stride specifies how column data must be indexed. If the stride value is less than or equal to 0 then data indexing is assumed to be num_values + 2 strings. If stride is greater than 0 then the stride value represents the index jump size. This allows the data to be given in a two dimensional array. In this case stride is the size of the first dimension. It should be at least the largest of the num_values +2. The second dimension should be at least the number of columns in the row.
Output:
INTEGER row_id Internal database ID of the newly created Plot Set row.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
MSG_RES_PLOT_SET_DOES_NOT_EXISTMSG_RES_PLOT_SET_LONG_NAMEMSG_RES_PLOT_INVALID_NAMEMSG_RES_PLOT_SET_NULL_NAMEMSG_RES_PLOT_SET_EMPTY_NAMEMSG_RES_PLOT_SET_BLANK_NAMEDbInstanceNotFound DbOutOfMemory DbNotADatabase DbOtherFailure
---------------
update_plotset_combined_data(set_name,row_name,iterator_type,num_rows,total_rows)
##########
Description:
Update a plot set Combined Plot row.
Input:
STRING set_name[] Plot Set name.
STRING row_name[] Row name.
STRING iterator_type[] Type of iterator,"Tuple" or "Product"
INTEGER num_rows Number of "active" rows defining Combo Plot
INTEGER total_rows Number of all rows defining Combo Plot
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
See Error conditions: for more information.
---------------
update_plotset_results_data(set_name,row_name,row_type,result_type,result_cases,results,derived_quantities,show_as,layers,rescase_combinations,layer_combinations)
##########
Description:
Update a plot set row with results data.
Input:
STRING set_name[] Plot Set name.
STRING row_name[] Row name.
STRING row_type[] Type of row,eg,"Fringe Plot"
STRING result_type[] Type of result,eg "Nodal Vector"
STRING result_cases[]()Result cases
STRING results[]()Results
STRING derived_quantities[]()Derived Quantities
STRING show_as[]()Show as selections
STRING layers[]()Layers
STRING rescase_combinations[]()Result case combination methods
STRING layer_combinations[]()Layer combination methods
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
See Error conditions: for more information.
---------------
update_plotset_attributes_data(set_name,row_name,templates,viewports,views,spectrums,ranges,tool_name,print_fname)
##########
Description:
Update a plot set row with Attributes data.
Input:
STRING set_name[] Plot set name
STRING row_name[] Row name
STRING templates[]()Result templates
STRING viewports[]()Viewports
STRING views[]()Views
STRING spectrums[]()Spectrums name
STRING ranges[]()Ranges
STRING tool_name[] Tool name
STRING print_fname[] Print filename
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
See Error conditions: for more information.
---------------
update_plotset_targets_data(set_name,row_name,targets)
##########
Description:
Update a plot set row with Targets data.
Input:
STRING set_name[] Plot set name
STRING row_name[] Row name
STRING targets[]()Target sets
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
See Error conditions: for more information.
---------------
update_plotset_image_data(set_name,row_name)
##########
Description:
Update a plot set row with image_data data.
Input:
STRING set_name[] Plot set name
STRING row_name[] Row name
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
---------------
rename_plotset(set_name,new_set_name,plotset_desc)
##########
Description:
Rename a plotset and/or change the description.
Input:
STRING set_name[] Plot set name
STRING new_set_name[] New Plot Set Name
STRING row_name[] Plot Set description
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
See Error conditions: for more information.
---------------
add_plotset_row(set_name,new_row_name,row_type)
##########
Description:
Add a plotset row to the end of a plotset.
Input:
STRING set_name[] Plot set name
STRING new_row_name[] New Row Name
STRING row_type[] Row Type
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
See Error conditions: for more information.
---------------
insert_plotset_row(t_name,new_row_name,row_type,position,target_row)
##########
Description:
Insert a plotset row in a plotset.
Input:
STRING set_name[] Plot Set Name
STRING new_row_name[] New Row Name
STRING row_type[] Row Type
STRING position[] Position,"Before","After","Beginning","End" or ""
STRING target_row[] Row Name to target Ignored if position is not "Before" or "After" Need more comments on optional args,etc.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
See Error conditions:,244 for more information.
---------------
rename_plotset_row(set_name,source_row,new_row_name,row_type)
##########
Description:
Insert a plotset row in a plotset.
Input:
STRING set_name[] Plot Set Name
STRING source_row[] Row name to Rename
STRING new_row_name[] 	 New Row Name Stays the same if blank
STRING row_type[] Row Type Stays the same if blank
STRING target_row[] Row Name to target Ignored if position is not "Before" or "After" Need more comments on optional args,etc.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
See Error conditions: for more information.
---------------
move_plotset_row(set_name,source_row,position,target_row)
##########
Description:
Move a plot set row within a plot set.
Input:
STRING set_name[] Plot Set Name
STRING source_row[] Row name to Move
STRING position[] Position,"Before","After","Beginning","End","" "Up","Down"
STRING target_row[] Row Name to target Ignored if position is not "Before" or "After"
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
See Error conditions: for more information.
---------------
move_plotset_rows(set_name,source_rows,position,target_row)
##########
Description:
Move a plot set row within a plot set.
Input:
STRING set_name[] Plot Set Name
STRING source_rows[] Row name to Move
STRING position[] Position,"Before","After","Beginning","End","" "Up","Down"
STRING target_row[] Row Name to target Ignored if position is not "Before" or "After"
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
See Error conditions: for more information.
---------------
copy_plotset_row(set_name,source_row,new_row_name,position,target_row)
##########
Description:
Copy a plotset row within a plotset.
Input:
STRING set_name[] Plot Set Name
STRING source_row[] Row name to copy
STRING new_row_name[] New row name
STRING position[] Position,"Before","After","Beginning","End","" "Up","Down"
STRING target_row[] Row Name to target Ignored if position is not "Before" or "After"
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
See Error conditions: for more information.
---------------
delete_plotset_row(set_name,source_row)
##########
Description:
Delete a plotset row from a plotset.
Input:
STRING set_name[] Plot Set Name
STRING source_row[] Row name to delete
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
See Error conditions: for more information.
---------------
delete_plotset_rows(set_name,source_rows)
##########
Description:
Delete plotset rows from a plotset.
Input:
STRING set_name[] Plot Set Name
STRING source_rows[] Row name to delete
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
See Error conditions: for more information.
---------------
res_tmpl_create_over(tmpl_id,overwrite_tmpl,name,tool_type,desc,num_attributes,va_attributes ,num_options,va_options,num_misc,va_misc,pclexp,title)
##########
Description:
This function creates a result template and states it in the database.
Input:
LOGICAL overwrite_tmpl If TRUE,causes existing template with the same name and tool type to be overwritten.
STRING name[max 31] Template name.
STRING tool_type[] Template tool type.
STRING desc[VIRTUAL] Template description.
INTEGER num_attributes Number of strings in va_attributes.
STRING va_attributes[113] (num_attributes)Template attribute values. Each string consists of up to 32 characters of a key value,followed by : and then the value of up to 80 characters associated with that key.
INTEGER num_options Number of strings in va_options.
STRING va_options[113] (num_options)Template option values. Each string consists of up to 32 characters of a key value,followed by : and then the value of up to 80 characters associated with that key.
INTEGER num_misc Number of strings in va_misc.
STRING va_misc[113](num_misc)Template miscellaneous values. Each string consists of up to 32 characters of a key value,followed by : and then the value of up to 80 characters associated with that key.
STRING pclexp[VIRTUAL] Template Pcl expression. Although a virtual string here,other parts of the code may limit it to no more than 200 characters.
STRING title[VIRTUAL] Template title. Although a virtual string here,other parts of the code may limit it to no more than 159 characters.
Output:
INTEGER tmpl_id Internal database id of the newly created template.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
MSG_RES_RDM_TMPL_INVALID_TYPE MSG_RES_RDM_INVALID_TOOL_TYPEMSG_RES_RDM_TOOL_DOES_NOT_EXISTMSG_RES_RDM_TMPL_NO_NAMEMSG_RES_RDM_TOOL_ALREADY_EXISTS
DbInvalidMemoryDbPageOffset DbInvalidMemoryDbPageId Other db errors DbVirtualMemoryExhausted Other db exceptions
---------------
res_tmpl_modify(tmpl_id ,name ,tool_type ,desc ,num_attributes ,va_attributes ,num_options ,va_options ,num_misc ,va_misc ,pclexp ,title)
##########
Description:
This function modifies an existing results template in the database and replaces its stored values with the input data values.
Input:
INTEGER tmpl_id Internal database id of the result template record to modify.
STRING name[max 31] Modified name.
STRING tool_type[] Modified tool type.
STRING desc[VIRTUAL] Modified description.
INTEGER num_attributes Number of strings in va_attributes.
STRING va_attributes[113](num_attributes)
Modified attribute values. Each string consists of up to 32 characters of a key value,followed by : and then the value of up to 80 characters associated with that key.
INTEGER num_options Number of strings in va_options.
STRING va_options[113](num_options)
Modified option values. Each string consists of up to 32 characters of a key value,followed by : and then the value of up to 80 characters associated with that key.
INTEGER num_misc Number of strings in va_misc.
STRING va_misc[113](num_misc)
Modified miscellaneous values. Each string consists of up to 32 characters of a key value,followed by : and then the value of up to 80 characters associated with that key.
STRING pclexp[VIRTUAL] Modified Pcl expression. Although a virtual string here,other parts of the code may limit it to no more than 200 characters.
STRING title[VIRTUAL] Modified title. Although a virtual string here,other parts of the code may limit it to no more than 159 characters.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
MSG_RES_RDM_TMPL_INVALID_TYPEMSG_RES_RDM_INVALID_TOOL_TYPEMSG_RES_RDM_TOOL_DOES_NOT_EXISTMSG_RES_RDM_TMPL_NO_NAMEDbInvalidMemoryDbPageOffsetDbInvalidMemoryDbPageId Other db errors DbVirtualMemoryExhausted Other db exceptions
---------------
res_tmpl_delete(name ,tool_type)
##########
Description:
This function deletes the specified results template and its data from the database.
Input:
STRING name[max 31] Name of existing template to be deleted.
STRING tool_type[] The template type.
Output:
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
MSG_RES_RDM_TMPL_INVALID_TYPEMSG_RES_RDM_INVALID_TOOL_TYPEMSG_RES_RDM_TOOL_DOES_NOT_EXIST
---------------
res_tmpl_copy(new_id ,new_name ,existing_name ,tool_type)
##########
Description:
This function creates a new results template in the database and copies the data from an existing results template in the database to the new one.
Input:
STRING name[max 31] Name for the new template.
STRING existing_name[max 31] Name of existing template to be copied.
STRING tool_type[] The template type.
Output:
INTEGER new_id Internal database id of the newly created template.
INTEGER <Return Value> Zero for success,else error message code.
Error Conditions:
MSG_RES_RDM_TMPL_INVALID_TYPEMSG_RES_RDM_INVALID_TOOL_TYPEMSG_RES_RDM_TOOL_DOES_NOT_EXIST MSG_RES_RDM_TMPL_NO_NAME MSG_RES_RDM_TOOL_ALREADY_EXISTS DbInvalidMemoryDbPageOffset DbInvalidMemoryDbPageId Other db errors DbVirtualMemoryExhausted Other db exceptions
---------------
res_tmpl_set_force_overwrite(val)
##########
Description:
This function sets or clears a logical value that controls whether existing results templates in the database are overwritten when importing a template via the res_tmpl_create_over command.
Input:
LOGICAL val TRUE forces overwriting. FALSE has no effect.
Output:
None
Error Conditions:
None
---------------
res_display_get_ntools(plot_type)
##########
Description:
This function returns the number of tools of the specified type.
Input:
STRING plot_type[] This value specifies the tool type. If this value is set to an empty string or ““ the count of all tools is returned. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns the number of tools of the specified type.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_get_nposted_tools(plot_type,view_id)
##########
Description:
This function returns the number of posted tools of the specified type.
Input:
STRING plot_type[] This value specifies the tool type. If this value is set to an empty string or ““ the count of all tools is returned. See the remarks below for more information.
INTEGER view_id This value specifies the viewport identifier. If this value is set to 0,the number of posted tools for all viewports will be returned.
Output:
INTEGER <Return Value> This function returns the number of posted tools of the specified type.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_get_posted_tools(plot_type,tools,types,view_id)
##########
Description:
This function outputs the names and types of the posted tools.
Input:
STRING plot_type[] This value specifies the tool type. If this value is set to an empty string or ““,the name and types of all tools is returned. See the remarks below for more information.
INTEGER view_id This value specifies the viewport identifier. Optional=0.
Output:
STRING tools[](VIRTUAL)This value returns the plot tool names that are posted to the specified viewport.
STRING types[](VIRTUAL)This value returns the plot types.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_get_color_id(color_str,color_id)
##########
Description:
This function outputs the color identifier of the input color string as it is used with the tool attribute definitions.
Input:
STRING color_str[] This value specifies the input color. See the remarks below for more information.
Output:
INTEGER color_id This value returns the color identifier of the specified color.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_get_color_str(color_id,color_str)
##########
Description:
This function outputs the color string of the input color identifier as it is used with the tool attribute definitions.
Input:
INTEGER color_id This value specifies the color identifier. This value must be 0 or greater and less than 16.
Output:
STRING color_str[] This value returns the color associated with the given identifier.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_get_tool_size(plot_type,plot_name,ntargets,target_length,nattribs)
##########
Description:
This function outputs the size of the targets and attributes of the specified plot tool.
Input:
STRING plot_type[] This value specifies the tool type. If this value is set to an empty string or ““,the target size and attributes of all tools is returned. See the remarks below for more information.
STRING plot_name[] This value specifies the name of the plot tool.
Output:
INTEGER ntargets This value returns the number of targets defined.
INTEGER target_length This value returns the maximum length of a target string.
INTEGER nattribs This value returns the number of attributes defined.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_get_tool(plot_type,plot_name,ent_type,ntargets,targets,nattribs,attributes,deformed_flag)
##########
Description:
This function outputs the specified plot tool definition.
Input:
STRING plot_type[] This value specifies the tool type. If this value is set to an empty string or ““,the definition of all tools is returned. See the remarks below for more information.
STRING plot_name[] This value specifies the name of the plot tool.
Output:
STRING ent_type[] This value returns the entity type specification.
INTEGER ntargets This value returns the number of target entities.
STRING targets[](ntargets)This value returns the target entities.
INTEGER nattribs This value returns the number of attributes associated with this plot tool
STRING attributes[](nattribs)This value returns the attributes of this plot tool.
LOGICAL deformed_flag This value returns the state of the deformed flag.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_get_graph(plot_name,graph_type,entity_type,ntargets,targets,nattribs,attributes)
##########
Description:
This function outputs the specified graph plot tool definitions.
Input:
STRING plot_name[] This value specifies the name of the graph plot tool.
Output:
STRING graph_type[] This value returns the graph type.
STRING entity_type[] This value returns the entity type.
INTEGER ntargets This value returns the number of targets.
STRING targets[](ntargets)This value returns the target values.
INTEGER nattribs This value returns the number of attributes associated with this plot.
STRING attributes[](nattribs)This value returns the attributes of this plot tool.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_count_tools(plot_type,status)
##########
Description:
This function retrieves the number of plot tools of the specified type.
Input:
INTEGER plot_type This value specifies the tool type. If this value is set to an empty string or ““,the number of plot tools of all types is returned. See the remarks below for more information.
INTEGER status This value specifies the status of the plot tool. Valid values are: 0 = unposted tools,1 = posted tools,and 2 = all tools.
Output:
INTEGER <Return Value> This function returns a value specifying the number of tools of the given type.
Error Conditions:
None.
---------------
res_display_get_tool_data(plot_type,plot_name,location,type)
##########
Description:
This function retrieves the location and type of data associated with a plot tool.
Input:
STRING plot_type[] This value specifies the tool type. If this value is set to an empty string or ““,the location and data type for all of the plot tools is set. See the remarks below for more information.
STRING plot_name[] This value specifies the name of the plot tool.
Output:
STRING location[] This value returns the data location.
STRING type[] This value returns the data type.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_set_tool_data(plot_type,plot_name,register_id)
##########
Description:
This function sets the data handling descriptions to the registers for a plot tool which has previously been posted.
Input:
STRING plot_type[] This value specifies the tool type. If this value is set to an empty string or ““,the data associated to all of the plot tools is set. See the remarks below for more information.
STRING plot_name[] This value specifies the name of the plot tool.
INTEGER register_id This value specifies the register identifier.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_set_graph_data(plot_name,x_register_id,y_register_id)
##########
Description:
This function sets the data handling descriptions to the registers for a graph tool which has previously been posted.
Input:
STRING plot_name[] This value specifies the graph plot tool name.
INTEGER x_register_id This value specifies the register identifier containing the X axis data.
INTEGER y_register_id This value specifies the register identifier containing the Y axis data.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_anim_qk_setup(number_frames,graphics_method,string)
##########
Description:
This function specifies the number of frames and graphics method to be used for creating an image animation.
Input:
INTEGER number_frames This value specifies the number of animation frames to create.
STRING graphics_method[] This value specifies the graphics method for animation. Valid values are: "2D","3D","Preview",and "MPEG".
STRING string[] For future use. Set value to an empty string.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_anim_qk_fringe_data(location,result_type,primary_result,secondary_result,layer,derivation,coordinate,averaging_method,averaging_domain,extrapolation)
##########
Description:
This function specifies a result to be extracted and manipulated into a format for subsequent display.
Input:
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING result_type[] This value specifies the results data type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
STRING primary_result[] This value specifies the identifier of the primary result.
STRING secondary_result[] This value specifies the identifier of the secondary result.
STRING layer[] This value specifies the layer position identifier.
STRING derivation[10] This value specifies the derivation specifier if the results are to be derived. A null will leave the result as is. See the remarks in res_data_load_dbresults()for more information.
STRING coordinate[] This value specifies the coordinate for transformations. Valid values are: ““ = as is,“Coord i” = Db coordinate system,"M" = material system,"IJK" = element ijk system,"N" = nodal system,and "G" = global.
STRING averaging_method[] This value specifies the averaging method: “derive-avg” to perform derivations and transformations,then average the results,“avg-derive” (transform to global,average,then derive/transform),“difference” (calculate the difference versus average,derivations performed first),and “sum” (sum all of the element nodal components at the nodes).
STRING averaging_domain[] This value specifies the averaging domain: “All”,“Matl”,“Prop”,“Target” (only consider entities in the target definition),and “Element”.
STRING extrapolation[] This value specifies the extrapolation method: “ShapeFunc”,“Average” (constant in element computed as the average),and “Centroid” (constant in element as computed centroidal value).
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_anim_qk_layers(derivation,count,layers)
##########
Description:
This function specifies the element layer information.
Input:
STRING derivation[] This value specifies the results data be scanned for the maximum,minimum,summation,or averaged values. Valid values are: "MAXIMUM","MINIMUM","SUM",and "AVERAGE".
INTEGER count This value specifies the number of layers selected.
STRING layers[](count)This value specifies the layer position labels.
Output:
None
Error Conditions:
None
---------------
res_display_anim_qk_fringe_ttle(title)
##########
Description:
This function specifies a title string to be associated with the fringe plot. If this title is not specified,a default title based on the source of the data will be used.
Input:
STRING title[] This value specifies the fringe title.
Output:
None
Error Conditions:
None
---------------
res_display_anim_qk_fringe_attr(nattribs,attributes,deformed_flag,spectrum_flag,range_flag)
##########
Description:
This function creates a fringe plot tool definition.
Input:
INTEGER nattribs This value specifies the number of offsets in the input value attributes.
STRING attributes[](nattribs)This value specifies the attributes. See remarks in res_display_fringe_create()for more information.
LOGICAL deformed_flag This value is set to TRUE to enable displaying in the deformed shape if deformation tools are posted
LOGICAL spectrum_flag This value is set to TRUE to display the spectrum bar with this plot.
LOGICAL range_flag This value is set to TRUE to flag this tool to control the range info in the viewport.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_anim_qk_deform_data(register,location,result_type,primary_result,secondary_result,layer,derivation,coordinate,averaging_method,averaging_domain,extrapolation)
##########
Description:
This function specifies a result to be extracted from the database and manipulated into a format for subsequent display. This description will be stored in the specified register.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING result_type[] This value specifies the results data type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
STRING primary_result[] This value specifies the identifier of the primary result.
STRING secondary_result[] This value specifies the identifier of the secondary result.
STRING layer[] This value specifies the layer position identifier.
STRING derivation[10] This value specifies the derivation specifier if the results are to be derived. A null will leave the result as is. See the remarks in res_data_load_dbresults()for more information.
STRING coordinate[] This value specifies the coordinate for transformations. Valid values are: ““ = as is,“Coord i” = Db coordinate system,"M" = material system,"IJK" = element ijk system,"N" = nodal system,and "G" = global.
STRING averaging_method[] This value specifies the averaging method: “derive-avg” to perform derivations and transformations,then average the results,“avg-derive” (transform to global,average,then derive/transform),“difference” (calculate the difference versus average,derivations performed first),and “sum” (sum all of the element nodal components at the nodes).
STRING averaging_domain[] This value specifies the averaging domain: “All”,“Matl”,“Prop”,“Target” (only consider entities in the target definition),and “Element”.
STRING extrapolation[] This value specifies the extrapolation method: “ShapeFunc”,“Average” (constant in element computed as the average),and “Centroid” (constant in element as computed centroidal value).
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_anim_qk_deform_ttle(register,location,register_type,count,titles)
##########
Description:
This function specifies a title string to be associated with the deformed plot. If this title is not specified,a default title based on the source of the data will be used.
Input:
STRING titles[] This value specifies the fringe title.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
##########
Description:
This function defines the deformation attributes for the plot tool definition.
Input:
INTEGER nattribs This value specifies the number of offsets in the input value attributes.
STRING attributes[](nattribs)This value specifies the attributes. See the remarks below for more information.
LOGICAL deformed_flag This value is set to TRUE to enable displaying in the deformed shape if deformation tools are posted
LOGICAL spectrum_flag This value is set to TRUE to display the spectrum bar with this plot.
LOGICAL range_flag This value is set to TRUE to flag this tool to control the range info in the viewport.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_anim_qk_res_list(fringe_flag,deform_flag,graphics_method,fringe_range,const_range_flag,num_cases,load_case,subcase)
##########
Description:
This function specifies a series of database result specifiers to be associated with a specific register.
Input:
LOGICAL fringe_flag This value is set to TRUE to enable displaying in the fringe.
LOGICAL deformed_flag This value is set to TRUE to enable displaying in the deformed.
STRING graphics_method[] This value specifies the graphics method for animation. Valid values are: "2D","3D","Preview",and "MPEG".
STRING fringe_range This value specifies the fringe spectrum for display.
LOGICAL const_range_flag This value is set to TRUE to enable use a constant range values the spectrum bar.
INTEGER num_cases This value specifies the number of result cases.
STRING load_case[](num_cases)This value specifies the load case identifiers.
STRING subcase[](num_cases)This value specifies the subcase identifiers.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_tool_animate_scale(method,plot_type,plot_name,init_angle)
##########
Description:
This function specifies a sinusoid or linear ramp variation to be used in a subsequent animation sequence for a tool posted in the current viewport.
Input:
STRING method[] This value specifies the method of animation: either “modal”,or “ramp”.
STRING plot_type[] This value specifies the type of plot tool. See the remarks below for more information.
STRING plot_name[] This value specifies the name of the plot tool: either ““ or an existing posted tool name.
REAL init_angle This value specifies the angle in radians to start the animation. This value is used mostly for modal animations where you might want to start animation,say 90 degrees out of phase.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_tool_animate_index(plot_type,plot_name,start_index,end_index)
##########
Description:
This function specifies a register list index is to be used in a subsequent animation sequence for a plot tool posted in the current viewport.
Input:
STRING plot_type[] This value specifies the type of plot tool. See the remarks below for more information.
STRING plot_name[] This value specifies the name of the plot tool: either ““ or an existing posted tool name.
INTEGER start_index This value specifies any number between 1 and N-1,where N is the number of data sets specified in the register list as explained below.
INTEGER end_index This value specifies any number between start_index+1 and N.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_tool_animate_gv(plot_type,plot_name,global_name,init_value,end_value)
##########
Description:
This function specifies a subsequent animation to be created using the specified global variable.
Input:
STRING plot_type[] This value specifies the type of plot tool. See the remarks below for more information.
STRING plot_name[] This value specifies the name of the plot tool: either ““ or an existing posted tool name.
STRING global_name[] This value specifies the global variable name.
REAL init_value This value specifies the starting global variable value.
REAL end_value This value specifies the ending global variable value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_tool_animate_off(plot_type,plot_name)
##########
Description:
This function turns off the animation of a particular plot tool.
Input:
STRING plot_type[] This value specifies the type of plot tool. See the remarks below for more information.
STRING plot_name[] This value specifies the name of the plot tool: either ““ or an existing posted tool name.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_tool_animate_get(plot_type,plot_name,method,start_index,end_index,global_name,init_value,end_value)
##########
Description:
This function retrieves animation definitions for a particular plot tool.
Input:
STRING plot_type[] This value specifies the type of plot tool. See the remarks below for more information.
STRING plot_name[] This value specifies the name of the plot tool: either ““or an existing posted tool name.
Output:
STRING method[] This value returns the animation method for the current animation.
INTEGER start_index This value returns the starting index for the current animation.
INTEGER end_index This value returns the ending index for the current animation.
STRING global_name[] This value returns the global variable associated with the current animation.
REAL init_value This value returns the initial value of the global variable for this animation.
REAL end_value This value returns the ending value of the global variable associated with this animation.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_anim_setup_2d(number_frames,interp_method,file_name)
##########
Description:
This function specifies the number of frames and interpolation method to be used for creating a 2D image animation.
Input:
INTEGER number_frames This value specifies the number of animation frames to create.
STRING interp_method[] This value specifies the method of interpolation for transient animation to create frames when actual existing data does not exist for that frame. Valid values are: “Linear”,“Spline”,“Closest”,and “None”.
STRING file_name[] This value specifies the root file name for animation files to be created in conjunction with the animation process. The animation files will not be created if this value is set to an empty string or ““.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_anim_setup_3d(number_frames,interp_method)
##########
Description:
This function specifies the number of frames and interpolation method to be used for creating a 3D display list animation.
Input:
INTEGER number_frames This value specifies the number of animation frames to create.
STRING interp_method[] This value specifies the method of interpolation for transient animation to create frames when actual existing data does not exist for that frame. Valid values are: “Linear”,“Spline”,“Closest”,and “None”.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_anim_image_create(file_name)
##########
Description:
This function creates an image file of the current viewport.
Input:
STRING file_name[] This value specifies the file name to which the image will be dumped.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_anim_setup_image(number_frames,file_name)
##########
Description:
This function specifies the files containing images to be read in and used as animation frames.
Input:
INTEGER n_frames This value specifies the number of animation frames to create.
STRING file_name[](n_frames)This value specifies the names of the files containing image information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_anim_bounds(current_frame,start_frame,end_frame)
##########
Description:
This function modifies the bounds of the frames used by a running animation.
Input:
INTEGER current_frame This value specifies the frame to display upon execution.
INTEGER start_frame This value specifies the lower bound of the frames to display.
INTEGER end_frame This value specifies the upper bound of the frames to display.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_anim_method(method)
##########
Description:
This function modifies the method of paging from frame to frame during an animation.
Input:
STRING method[] This value specifies the animation method. Valid values are: “Cycle” (1->n,1->n)and “Bounce” (1<->n).
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_anim_run(delay)
##########
Description:
This function starts the running of an animation at a specific frame rate and can also be used to modify the frame rate of a running animation process.
Input:
INTEGER delay This value specifies the delay in milliseconds between frame display calls. Setting this value to 0 will produce the maximum frame refresh rate.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_anim_step()
##########
Description:
This function stops any running animation and displays the next frame in the queue.
Input:
None.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_anim_frame(frame_number)
##########
Description:
This function displays an animation frame and stops any running animation.
Input:
INTEGER frame_number This value specifies the frame number of the animation to display.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_anim_clear()
##########
Description:
This function stops any running animation and clears any stored animation frames from memory.
Input:
None.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_anim_active()
##########
Description:
This function queries whether an animation is active or not.
Input:
None.
Output:
LOGICAL <Return Value> This function returns TRUE if an animation is active,and FALSE otherwise.
Error Conditions:
None.
---------------
res_display_anim_save(file_type,plot_type,frames,interpolation)
##########
Description:
Saves the result animation to file.
Input:
STRING file_type “VRML” or “MPEG”
STRING plot_type Plot type being animated: “quick”,“Deformation”,“Fringe”,“Vector”,“Lines”
INTEGER frames Number of frames in the animation
STRING interpolation Interpolation option: “Linear”,“Closest”,“None”
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
res_display_anim_status(current_frame,start_frame,end_frame,number_frame,delay disp_method,anim_status)
##########
Description:
This function returns the status of an animation in the current viewport.
Input:
None.
Output:
INTEGER current_frame This value returns the current frame displayed in the current animation.
INTEGER start_frame This value returns the starting frame number of the current animation.
INTEGER end_frame This value returns the ending frame number of the current animation.
INTEGER number_frame This value returns the number of frames in the current animation.
INTEGER delay This value returns the delay (in milliseconds)of the current animation.
INTEGER disp_method This value returns the display method of the current animation.
INTEGER anim_status This value returns the status of the current animation.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_cleanup()
##########
Description:
This function cleans up the graphical display and returns the graphics to a wireframe state.
Input:
None.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_fringe_post(plot_name,register_id,register_location,range_flag,spectrum_flag)
##########
Description:
This function posts a fringe plot tool definition to the current viewport.
Input:
STRING plot_name[] This value specifies the name of the existing plot: either ““ or an existing name.
INTEGER register_id This value specifies the scalar register id (of location specified)containing data definition.
STRING register_location[] This value specifies the location of the data: either "C" = centroid,"N" = nodal,or "EN" = element nodal.
LOGICAL range_flag This value is set to TRUE to flag this tool to control the range info in the viewport.
LOGICAL spectrum_flag This value is set to TRUE to display the spectrum bar with this plot. Optional=TRUE.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_vector_post(plot_name,register_id,register_location,range_flag,spectrum_flag)
##########
Description:
This function posts a vector plot tool definition to the current viewport.
Input:
STRING plot_name[] This value specifies the name of the existing plot: either ““ or an existing name.
INTEGER register_id This value specifies the vector register id (of location specified)containing data definition.
STRING register_location[] This value specifies the location of the data: either "C" = centroid,or "N" = nodal.
LOGICAL range_flag This value is set to TRUE to flag this tool to control the range info in the viewport.
LOGICAL spectrum_flag This value is set to TRUE to display the spectrum bar with this plot. Optional=TRUE.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_tensor_post(plot_name,register_id,register_location,range_flag,spectrum_flag)
##########
Description:
This function posts a tensor plot tool definition to the current viewport.
Input:
STRING plot_name[] This value specifies the name of the existing plot: either ““ or an existing name.
INTEGER register_id This value specifies the tensor register id of the location specified containing the data definition.
STRING register_location[] This value specifies the location of the data: either "C" = centroid,or "N" = nodal.
LOGICAL range_flag This value is set to TRUE to flag this tool to control the range info in the viewport.
LOGICAL spectrum_flag This value is set to TRUE to display the spectrum bar with this plot. Optional=TRUE.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_deformation_post(plot_name,register_id)
##########
Description:
This function posts a deformation plot tool definition to the current viewport.
Input:
STRING plot_name[] This value specifies the name of the existing plot: either ““ or an existing name.
INTEGER register_id This value specifies the vector register id of the location specified containing the data definition.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_report_write(report_name,register_id,register_type,register_location,output_method,file_name)
##########
Description:
This function writes a report tool definition to the specified file.
Input:
STRING report_name[] This value specifies the name of the report: either ““ or an existing name.
INTEGER register_id This value specifies the nodal vector register id of the location specified containing the data definition.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
STRING register_location[] This value specifies the location of the data: either "C" = centroid,"N" = nodal,"EN" = element nodal,or "EL" = element.
STRING output_method[] This value specifies the output method: either “STDOUT”,“NewFile”,“Overwrite”,or “Append”.
STRING file_name[] This value specifies the name of the file to which the report definition will be written.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_graph_post(plot_name,register_location,y_register_id,x_register_id,plot_title,append_flag)
##########
Description:
This function posts a fringe plot tool definition to the current viewport.
Input:
STRING plot_name[] This value specifies the name of the plot: either ““ or an existing name.
STRING register_location[] This value specifies the data location: either "C" = centroid,"N" = nodal,"EN" = element nodal,or "EL" = element.
INTEGER y_register_id This value specifies the nodal vector register id of the location specified containing the data definition.
INTEGER x_register_id This value specifies the nodal vector register id of the location specified containing the data definition.
STRING plot_title[] This value specifies the plot title.
LOGICAL append_flag This value specifies,when set to TRUE,that curves are to be appended end to end. When this value is set to FALSE,curves will not be appended end to end.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_tool_unpost(plot_type,plot_name)
##########
Description:
This function unposts a plot tool from the current viewport.
Input:
STRING plot_type[] This value specifies the type of plot. See the remarks below for more information.
STRING plot_name[] This value specifies the name of the plot to unpost.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_tool_exist(plot_type,plot_name)
##########
Description:
This function posts a fringe plot tool definition to the current viewport.
Input:
STRING plot_type[] This value specifies the type of plot. See the remarks below for more information.
STRING plot_name[] This value specifies the name of the plot to unpost.
Output:
LOGICAL <Return Value> This function returns TRUE if the plot tools exists,and FALSE otherwise.
Error Conditions:
None.
---------------
res_display_tool_delete(plot_type,plot_name)
##########
Description:
This function deletes a plot tool definition from the database.
Input:
STRING plot_type[] This value specifies the type of plot. See the remarks below for more information.
STRING plot_name[] This value specifies the name of the plot to unpost.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_fringe_create(plot_name,entity_type,ntargets,targets,nattribs,attributes,deformed_flag)
##########
Description:
This function creates a fringe plot tool definition.
Input:
STRING plot_name[] This value specifies the name of the plot: either ““ or a unique name.
STRING entity_type[] This value specifies the entity type. Valid values are: “FreeFaces”,“AllFaces”,”FreeEdges”,and ”AllEdges”.
INTEGER ntargets This value specifies the number of strings in the input value targets. If this value is set to 0,all the entities specified by the input value entity_type will be used.
STRING targets[](ntargets)This value specifies the target specifications. See the remarks below for more information.
INTEGER nattribs This value specifies the number of offsets in the input value attributes.
STRING attributes[](nattribs)This value specifies the attributes. See the remarks below for more information.
LOGICAL deformed_flag This value is set to TRUE to enable displaying in the deformed shape if deformation tools are posted
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_fringe_modify(plot_name,new_name,entity_type,ntargets,targets,nattribs,attributes,deformed_flag)
##########
Description:
This function modifies a fringe plot tool definition.
Input:
STRING plot_name[] This value specifies the name of the plot: either ““ or a unique name.
STRING new_name[] This value specifies a new name to give the plot.
STRING entity_type[] This value specifies the entity type. Valid values are: “FreeFaces”,“AllFaces”,”FreeEdges”,and ”AllEdges”.
INTEGER ntargets This value specifies the number of strings in the input value targets. If this value is set to 0,all the entities specified by the input value entity_type will be used.
STRING targets[](ntargets)This value specifies the target specifications. See the res_display_fringe_create()function for more information.
INTEGER nattribs This value specifies the number of offsets in the input value attributes.
STRING attributes[](nattribs)This value specifies the attributes. See the remarks below for more information.
LOGICAL deformed_flag This value is set to TRUE to enable displaying in the deformed shape if deformation tools are posted
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_display_vector_create(plot_name,entity_type,ntargets,targets,nattribs,attributes,deformed_flag)
##########
Description:
This function creates a vector plot tool definition.
Input:
STRING plot_name[] This value specifies the name of the plot: either ““ or a unique name.
STRING entity_type[] This value specifies the entity type. Valid values are: “Nodes”,“Elements”,“Corners”,“FreeFace”,and “FreeEdge”.
INTEGER ntargets This value specifies the number of strings in the input value targets. If this value is set to 0,all the entities specified by the input value entity_type will be used.
STRING targets[](ntargets)This value specifies the target specifications.
INTEGER nattribs This value specifies the number of offsets in the input value attributes. This value should be set to 16.
STRING attributes[](nattribs)This value specifies the attributes for the vector tool. See the remarks below for more information.
LOGICAL deformed_flag This value is set to TRUE to enable displaying in the deformed shape if deformation tools are posted
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_vector_modify(plot_name,new_name,entity_type,ntargets,targets,nattribs,attributes,deformed_flag)
##########
Description:
This function modifies a vector plot tool definition.
Input:
STRING plot_name[] This value specifies the name of the plot: either ““ or a unique name.
STRING new_name[] This value specifies a new name to give the plot.
STRING entity_type[] This value specifies the entity type. Valid values are: “Nodes”,“Elements”,“Corners”,“FreeFace”,and “FreeEdge”.
INTEGER ntargets This value specifies the number of strings in the input value targets. If this value is set to 0,all the entities specified by the input value entity_type will be used.
STRING targets[](ntargets)This value specifies the target specifications. See the res_display_vector_create()function for more information.
INTEGER nattribs This value specifies the number of offsets in the input value attributes.
STRING attributes[](nattribs)This value specifies the attributes. See the res_display_vector_create()function for more information.
LOGICAL deformed_flag This value is set to TRUE to enable displaying in the deformed shape if deformation tools are posted
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_display_tensor_create(plot_name,entity_type,ntargets,targets,nattribs,attributes,deformed_flag)
##########
Description:
This function creates a tensor plot tool definition.
Input:
STRING plot_name[] This value specifies the name of the plot: either ““ or a unique name.
STRING entity_type[] This value specifies the entity type. Valid values are: “Nodes”,“Elements”,“Corners”,“FreeFace”,and “FreeEdge”.
INTEGER ntargets This value specifies the number of strings in the input value targets. If this value is set to 0,all the entities specified by the input value entity_type will be used.
STRING targets[](ntargets)This value specifies the target specifications. See the remarks below for more information.
INTEGER nattribs This value specifies the number of offsets in the input value attributes. This value should be set to 17.
STRING attributes[](nattribs)This value specifies the attributes. See the remarks below for more information.
LOGICAL deformed_flag This value is set to TRUE to enable displaying in the deformed shape if deformation tools are posted
Output:
INTEGER <Return Value> his function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_tensor_modify(plot_name,new_name,entity_type,ntargets,targets,nattribs,attributes,deformed_flag)
##########
Description:
This function modifies a tensor plot tool definition.
Input:
STRING plot_name[] This value specifies the name of the plot: either ““ or a unique name.
STRING new_name[] This value specifies a new name to give the plot.
STRING entity_type[] This value specifies the entity type. Valid values are: “Nodes”,“Elements”,“Corners”,“FreeFace”,and “FreeEdge”.
INTEGER ntargets This value specifies the number of strings in the input value targets. If this value is set to 0,all the entities specified by the input value entity_type will be used.
STRING targets[](ntargets)This value specifies the target specifications. See the res_display_tensor_create()function for more information.
INTEGER nattribs This value specifies the number of offsets in the input value attributes.
STRING attributes[](nattribs)This value specifies the attributes. See the res_display_tensor_create()function for more information.
LOGICAL deformed_flag This value is set to TRUE to enable displaying in the deformed shape if deformation tools are posted
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_report_create(report_name,entity_type,ntargets,targets,nattribs,attributes)
##########
Description:
This function creates a report tool definition.
Input:
STRING report_name[] This value specifies the name of the report: either ““ or a unique name.
STRING entity_type[] This value specifies the entity type. Valid values are: “Nodes”,and “Elements”.
INTEGER ntargets This value specifies the number of strings in the input value targets. If this value is set to 0,all the entities specified by the input value entity_type will be used.
STRING targets[](ntargets)This value specifies the target specifications. See the remarks below for more information.
INTEGER nattribs This value specifies the number of offsets in the input value attributes.
STRING attributes[](nattribs)This value specifies the attributes. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_report_modify(report_name,new_name,entity_type,ntargets,targets,nattribs,attributes)
##########
Description:
This function modifies a report tool definition.
Input:
STRING report_name[] This value specifies the name of the report: either ““ or a unique name.
STRING new_name[] This value specifies a new name to give the report.
STRING entity_type[] This value specifies the entity type. Valid values are: “Nodes”,or “Elements”.
INTEGER ntargets This value specifies the number of strings in the input value targets. If this value is set to 0,all the entities specified by the input value entity_type will be used.
STRING targets[](ntargets)This value specifies the target specifications. See the res_display_report_create()function description for more information.
INTEGER nattribs This value specifies the number of offsets in the input value attributes.
STRING attributes[](nattribs)This value specifies the attributes. See the res_display_report_create()function description for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_graph_create(plot_name,graph_type,entity_type,ntargets,targets,nattribs,attributes)
##########
Description:
This function creates a graph plot tool definition.
Input:
STRING plot_name[] This value specifies the name of the plot: either ““ or a unique name.
STRING graph_type[] This value specifies the X vs Y graph type: “GVGV” = global variable vs. global variable,“DataGV” = result vs. global variable,“DataData” = results vs. result,“DataLocation” = result vs. coordinate location,and “DataDistance” = result vs. curve or beam distance.
STRING entity_type[] This value specifies the entity type. Valid values are: “Nodes”,“Elements”,and “Path”.
INTEGER ntargets This value specifies the number of strings in the input value targets. If this value is set to 0,all the entities specified by the input value entity_type will be used.
STRING targets[](ntargets)This value specifies the target specifications. See the remarks below for more information.
INTEGER nattribs This value specifies the number of offsets in the input value attributes.
STRING attributes[](nattribs)This value specifies the attributes. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_graph_modify(plot_name,new_name,graph_type,entity_type,ntargets,targets,nattribs,attributes)
##########
Description:
This function modifies a graph plot tool definition.
Input:
STRING plot_name[] This value specifies the name of the plot: either ““ or a unique name.
STRING new_name[] This value specifies a new name to give the plot.
STRING graph_type[] This value specifies the X vs Y graph type: “GVGV” = global variable vs. global variable,“DataGV” = result vs. global variable,“DataData” = results vs. result,“DataLocation” = result vs. coordinate location,and “DataDistance” = result vs. curve or beam distance.
STRING entity_type[] This value specifies the entity type. Valid values are: “Nodes”,“Elements”,and “Path”.
INTEGER ntargets This value specifies the number of strings in the input value targets. If this value is set to 0,all the entities specified by the input value entity_type will be used.
STRING targets[](ntargets)This value specifies the target specifications. See the res_display_graph_create()function description for more information.
INTEGER nattribs This value specifies the number of offsets in the input value attributes.
STRING attributes[](nattribs)This value specifies the attributes. See the res_display_graph_create()function description for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_deformation_create(plot_name,entity_type,ntargets,targets,nattribs,attributes)
##########
Description:
This function creates a deformation plot tool definition.
Input:
STRING plot_name[] This value specifies the name of the plot: either ““ or a unique name.
STRING entity_type[] This value specifies the entity type. Valid values are: “Nodes”,and “Elements”.
INTEGER ntargets This value specifies the number of strings in the input value targets. If this value is set to 0,all the entities specified by the input value entity_type will be used.
STRING targets[](ntargets)This value specifies the target specifications. Valid values are: “NO” = list is for a node list,“EL” = list is for an element list,“GR” = name is for a group name,“PR” = name for a specific property set,“MA” = name for a material,and “ET” = type for element type (point,beam,tri,...).
INTEGER nattribs This value specifies the number of offsets in the input value attributes.
STRING attributes[](nattribs)This value specifies the attributes. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_display_deformation_modify(plot_name,new_name,entity_type,ntargets,targets,nattribs,attributes)
##########
Description:
This function specifies a fringe plot tool definition.
Input:
STRING plot_name[] This value specifies the name of the plot: either ““ or a unique name.
STRING new_name[] This value specifies a new name to give the plot.
STRING entity_type[] This value specifies the entity type. Valid values are: “Nodes”,or “Elements”.
INTEGER ntargets This value specifies the number of strings in the input value targets. If this value is set to 0,all the entities specified by the input value entity_type will be used.
STRING targets[](ntargets)This value specifies the target specifications. See the res_display_deformation_create()function for more information.
INTEGER nattribs This value specifies the number of offsets in the input value attributes.
STRING attributes[](nattribs)This value specifies the attributes. See the res_display_deformation_create()function for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_dra_get_res_file_by_name(szFilename,iSourceFileId,iFileType,iParamSetId)
##########
Description:
This function returns information about an attached file.
Input:
STRING szFileName [max 256] The attached source file name.
Output:
INTEGER iSourceFileId Internal database ID of the attached file.
INTEGER iFileType Internal handle not intended for usage for the PCL programmer.
INTEGER iParamSetId Internal handle not intended for usage for the PCL programmer.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
MSG_RES_CANNOTOPENFILE – File does not exist. MSG_RES_DRA_SRC_FILE_UNKNOWN – Filename not saved in the Patran database.
---------------
res_dra_detach_file(src_file_id,result_type,paramrset_id)
##########
Description:
This function returns information about an attached file.
Input:
INTEGER src_file_id The source File handle for the file one would like to detach.
INTEGER result_type Un-used parameter. You may pass any dummy parameter you like as its value will be ignored.
INTEGER Paramset_id Parameter set ID handle as obtained by the call to “res_dra_get_res_file_by_name()”.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
res_data_function(register,location,register_type,function)
##########
Description:
This function specifies a format function used to determine the data values of a register.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
STRING function[] This value specifies a PCL function such as “ ($1 + $2 / $4)* $5”. The $n specifiers are register identifiers.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
res_data_delete(register,location,register_type)
##########
Description:
This function deletes the current definition of the specified register.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_data_save(register,location,register_type,load_case,subcase,layer,primary_result,secondary_result,num_entities,entity_list)
##########
Description:
This function saves all of the possible data available for the specified register in the database as a result.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
STRING load_case[] This value specifies the load case identifier.
STRING subcase[] This value specifies the subcase identifier.
STRING layer[] This value specifies the layer position identifier.
STRING primary_result[] This value specifies the primary result identifier.
STRING secondary_result[] This value specifies the secondary result identifier.
INTEGER num_entities The number of entities in entity list. Default is 0. If value is 0 then PATRAN automatically generates a list of entities to associate with the results.
STRING entity_list The picklist of entities to associate to the results. If this argument is not existent,PATRAN automatically associates the results with appropriate entities [no default value].
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_data_next(location,register_type)
##########
Description:
This function returns the next available unused register identifier of the specified location and type.
Input:
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
Output:
INTEGER <Return Value> The return value is the next available unused register identifier.
Error Conditions:
None.
---------------
res_data_defined(register,location,register_type)
##########
Description:
This function returns 0 or 1 depending on whether or not the register has been defined.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
Output:
LOGICAL <Return Value> This value returns TRUE when the input register identifier has an existing definition stored in the database,or FALSE otherwise.
Error Conditions:
None.
---------------
res_data_dump(register,location,register_type,file_name,file_options)
##########
Description:
This function dumps the data of the specified register to a file.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
STRING file_name[] This value specifies the file name to dump a register’s data into.
STRING file_options[] This value specifies the file options controlling the types of read and write operations that may be done to the file. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_data_csys_dump(file_name,file_options)
##########
Description:
This function dumps the coordinate system information to a file from all defined registers.
Input:
STRING file_name[] This value specifies the file name to dump a register’s coordinate data into.
STRING file_options[] This value specifies the file options controlling the types of read and write operations that may be done to the file. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_data_pattern_dump(file_name,file_options)
##########
Description:
This function dumps the register data pattern information to a file from all defined registers.
Input:
STRING file_name[] This value specifies the file name to dump a register’s pattern data into.
STRING file_options[] This value specifies the file options controlling the types of read and write operations that may be done to the file. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_data_get_source_type(register,location,register_type,source_type)
##########
Description:
This function outputs the register’s data source type.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
Output:
STRING source_type[] This value returns the source type. Valid values are: “Db”,“LBC”,“FEMAttrib”,“EProp”,“User”,and “Derived”.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_data_get_dbresult(register,location,register_type,load_case,subcase,primary_result,secondary_result,layer,derivation,coordinate,average_method,average_domain,extrapolation,list_flag,layer_flag,data_form,complex_angle)
##########
Description:
This function outputs the stored information regarding a register containing a database result.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
Output:
STRING load_case[] This value returns the load case identifier.
STRING subcase[] This value returns the subcase identifier.
STRING primary_result[] This value returns the primary result identifier.
STRING secondary_result[] This value returns the secondary result identifier.
STRING layer[] This value returns the layer position identifier.
STRING derivation[10] This value returns the derivation specifier.
STRING coordinate[] This value returns the coordinate system for transformations.
STRING average_method[] This value returns the defined averaging method.
STRING average_domain[] This value returns the defined averaging domain.
STRING extrapolation[] This value returns the defined extrapolation method.
LOGICAL list_flag This value returns a value of TRUE if the register has an associated list.
LOGICAL layer_flag This value returns TRUE if the register has an associated layer.
STRING data_form[] This value returns the data form (real,imaginary,etc.). Optional = NULL.
REAL complex_angle This value returns the complex angle. Optional = NULL.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_data_get_subcase_name(load_case,subcase,subcase_name)
##########
Description:
This function returns a subcase name given the load case and subcase identifiers. It returns the name of a subcase including any extension added to distinguish it from other subcases with the same name. ("_nn")
Input:
INTEGER load_case This value specifies the load case identifier.
INTEGER subcase This value specifies the subcase identifier.
Output:
STRING subcase_name[] This value returns the subcase name.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_data_get_subcase_id(load_case,subcase,subcase_id)
##########
Description:
This function returns the subcase identifier given the load case and subcase names.
Input:
STRING load_case[] This value specifies the load case name.
STRING subcase[] This value specifies the subcase name.
Output:
INTEGER subcase_id This value returns the subcase identifier.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_data_get_result_names(primary_result,secondary_result,primary_name,secondary_name)
##########
Description:
The function returns the primary and secondary result names given their identifiers.
Input:
INTEGER primary_result This value specifies the primary result identifier.
INTEGER secondary_result This value specifies the secondary result identifier.
Output:
STRING primary_name[] This value returns the primary result name.
STRING secondary_name[] This value returns the secondary result name.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_data_get_result_ids(primary_name,secondary_name,primary_result,secondary_result)
##########
Description:
This function returns the primary and secondary results identifiers given their names.
Input:
STRING primary_name[] This value specifies the primary result name.
STRING secondary_name[] This value specifies the secondary result name.
Output:
INTEGER primary_result This value returns the primary result identifier.
INTEGER secondary_result This value returns the secondary result identifier.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_data_get_layerpos_name(layer_id,layer_name)
##########
Description:
This function returns the layer position name given layer identifier.
Input:
INTEGER layer_id This value specifies the layer position identifier.
Output:
STRING layer_name[] This value returns the layer position name.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (p. 1863)in the PCL Reference Manual for information on any error values returned by this function.
---------------
res_data_get_layerpos_id(layer_name,layer_id)
##########
Description:
This function returns the layer position identifier given its name.
Input:
STRING layer_name[] This value specifies the layer position name.
Output:
INTEGER layer_id This value returns the layer position identifier.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_data_bulk_get_loadcases(count,load_case_ids,subcase_ids,coordinates,load_case)
##########
Description:
This function retrieves the number of load cases and all their load case,subcase,and coordinate identifiers that exist in the database and the names associated to them.
Input:
Output:
INTEGER count This value returns the number of load cases.
INTEGER load_case_ids(count)This value returns the load case identifiers.
INTEGER subcase_ids(count)This value returns the subcase identifiers.
INTEGER coordinates(count)This value returns the coordinate identifiers associated with the load cases.
STRING load_case[](count)This value returns the load case names.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_data_get_restype_ids(restype_id,primary_result,secondary_result)
##########
Description:
This function returns the primary and secondary result identifiers given the results type identifier.
Input:
INTEGER restype_id This value specifies the results type identifier.
Output:
INTEGER primary_result This value returns the primary result identifier.
INTEGER secondary_result This value returns the secondary result identifier.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_data_load_dbresult(register,location,result_type,load_case,subcase,primary_result,secondary_result,layer,derivation,coordinate,averaging_method,averaging_domain,extrapolation,complex_form,complex_angle)
##########
Description:
This function specifies a result to be extracted from the database and manipulated into a format for subsequent display. This description will be stored in the specified register.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING result_type[] This value specifies the results data type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
STRING load_case[] This value specifies the load case identifier.
STRING subcase[] This value specifies the subcase identifier.
STRING primary_result[] This value specifies the identifier of the primary result.
STRING secondary_result[] This value specifies the identifier of the secondary result.
STRING layer[] This value specifies the layer position identifier.
STRING derivation[10] This value specifies the derivation specifier if the results are to be derived. A null will leave the result as is. See the remarks below for more information.
STRING coordinate[] This value specifies the coordinate for transformations. Valid values are: ““ = as is,“Coord i” = Db coordinate system,"M" = material system,"IJK" = element ijk system,"N" = nodal system,and "G" = global.
STRING averaging_method[] This value specifies the averaging method: “derive-avg” to perform derivations and transformations,then average the results,“avg-derive” (transform to global,average,then derive/transform),“difference” (calculate the difference versus average,derivations performed first),and “sum” (sum all of the element nodal components at the nodes).
STRING averaging_domain[] This value specifies the averaging domain: “All”,“Matl”,“Prop”,“Target” (only consider entities in the target definition),and “Element”.
STRING extrapolation[] This value specifies the extrapolation method: “ShapeFunc”,“Average” (constant in element computed as the average),and “Centroid” (constant in element as computed centroidal value).
STRING complex_form[] This value specifies the complex form: “Real”,“Imaginary”,“Magnitude”,“Phase”,and “Angle”. Optional = NULL.
STRING complex_angle[] This value specifies the angle in radians to be used with the “Angle” form. Optional = 0.0.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_data_load_elem_scalar(reg,scalar_id)
##########
Description:
Create an enodal scalar register to hold the specified element scalar data
Input:
INTEGER reg This value specifies the register identifier.
INTEGER scalar_id The scalar_id is a unique identifier that you supply to this call. It internally establishes a scalar container that you can load with data and then post process.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_data_title(register,location,register_type,count,titles)
##########
Description:
This function specifies a title string to be associated with the register. If this title is not specified,a default title based on the source of the data will be used.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
INTEGER count This value specifies the number of title lines.
STRING titles[](count)This value specifies the title lines to be associated with the data in the register.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_data_get_ntitles(register,location,register_type,count)
##########
Description:
This function gets the number of title lines stored in a register.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
Output:
INTEGER count This value returns the number of title lines associated to this register.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_data_get_titles(register,location,register_type,count,titles)
##########
Description:
This function returns the number of titles and the titles themselves stored in a register.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
Output:
INTEGER count This value returns the number of title lines associated with this register.
STRING titles[](count)This value returns the title lines associated with this register.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_data_dbres_list(register,location,register_type,count,load_cases,subcases,primary_result,secondary_result,layers)
##########
Description:
This function specifies a series of database result specifiers to be associated with a specific register.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
INTEGER count This value specifies a count of the number of results.
STRING load_cases[](count)This value specifies an value of load case identifiers.
STRING subcases[](count)This value specifies an value of subcase identifiers.
STRING primary_result[](count)This value specifies an value of primary results identifiers.
STRING secondary_result[](count)This value specifies an value of secondary results identifiers.
STRING layers[](count)This value specifies an value of layer position identifiers.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_data_register_list(register,location,register_type,count,register_list)
##########
Description:
This function specifies a series of registers to be associated with a specific register.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
INTEGER count This value specifies the number of registers.
INTEGER register_list(count)This value specifies an value of register identifiers.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_data_list_sum(register,location,register_type,count,weights)
##########
Description:
This function specifies that the data specified by a register list should be summed.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
INTEGER count This values specifies the first count result cases.
REAL weights(count)This value specifies the optional weighting values for the summation. Optional=NULL.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_data_list_max(register,location,register_type,method,derivation)
##########
Description:
This function specifies that the data specified by a register list should be scanned for the maximum values.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
STRING method[] This value specifies the averaging method: “derive-avg” (perform derivations/transformations,then average),“avg-derive” (transform to global,average,then derive/transform),“difference” (calculate the difference versus average,derivations performed first),and “sum” (sum all of the element nodal components at the nodes).
STRING derivation[10] This value specifies the derivation specifier if the results are to be derived. A null will leave the result as is. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_data_list_min(register,location,register_type,method,derivation)
##########
Description:
This function specifies that the data specified by a register list should be scanned for the minimum values.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
STRING method[] This value specifies the averaging method: “derive-avg” (perform derivations/transformations,then average),“avg-derive” (transform to global,average,then derive/transform),“difference” (calculate the difference versus average,derivations performed first),and “sum” (sum all of the element nodal components at the nodes).
STRING derivation[10] This value specifies the derivation specifier if the results are to be derived. A null will leave the result as is. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_data_list_interp_gv(register,location,register_type,global_name,value,interpolation,extrapolation)
##########
Description:
This function specifies the method for interpolating/extrapolating data values between values in the specified register list.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
STRING global_name[] This value specifies the name of the global variable.
REAL value This value specifies the value of the global variable.
STRING interpolation[] This value specifies the interpolation method: “Linear” to perform linear interpolation between the two closest data sets,”Cubic” to perform a cubic spline fit across the closest four data sets,”Closest” to use the data set with the global variable closest to the specified value,”Ceiling” to use the data set with the next higher global variable value,and ”Floor” to use the data set with the next lower global variable value.
STRING extrapolation[] This value specifies the extrapolation method: “Error” to do nothing,“Constant” to use the closest data set,and “Linear” to extrapolate out at the ending slope.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_data_list_interp_factor(register,location,register_type,factor,interpolation,extrapolation)
##########
Description:
This function specifies the method for interpolating data values between values in the specified register list.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
REAL factor A factor from 0.0 to 1.0.
STRING interpolation[] This value specifies the interpolation method: “Linear” to perform linear interpolation between the two closest data sets,”Cubic” to perform a cubic spline fit across the closest four data sets,”Closest” to use the data set with the global variable closest to the specified value,”Ceiling” to use the data set with the next higher global variable value,and ”Floor” to use the data set with the next lower global variable value.
STRING extrapolation[] This value specifies the extrapolation method: “Error” to do nothing,“Constant” to use the closest data set,and “Linear” to extrapolate out at the ending slope.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_data_list_merge(register,location,register_type)
##########
Description:
This function sums the data specified by a register list.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_data_function(register,location,register_type,function)
##########
Description:
This function specifies a format function used to determine the data values of a register.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
STRING function[] This value specifies a PCL function such as “ ($1 + $2 / $4)* $5”. The $n specifiers are register identifiers.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages for information on any error values returned by this function.
---------------
res_data_scalar_to_vector(vector_register,location,coordinate,scalar_regsisters)
##########
Description:
This function specifies three scalar registers whose data are to make up the components of a vector data set.
Input:
INTEGER vector_register This value specifies the register identifier that will hold the vector data.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING coordinate[] This value specifies the coordinate system for the orientation definition of the vector. Valid values are: ““ = global,“Coord i” = Db coordinate system,"M" = material system,"IJK" = element ijk system,"N" = nodal system,and "G" = global.
INTEGER scalar_regsisters(3)This value specifies the identifiers for the three registers holding the scalar data for each component of the vector data.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_data_scalar_to_tensor(tensor_register,location,coordinate,scalar_regsisters)
##########
Description:
This function specifies six scalar registers whose data are to make up the components of a tensor data set.
Input:
INTEGER tensor_register This value specifies the register identifier that will hold the tensor data.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING coordinate[] This value specifies the coordinate system for the orientation definition of the tensor. Valid values are: ““ = global,“Coord i” = Db coordinate system,"M" = material system,"IJK" = element ijk system,"N" = nodal system,and "G" = global.
INTEGER scalar_regsisters(6)This value specifies the identifiers for the six registers holding the scalar data for each component of the tensor data.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
res_data_complex_form(register,location,register_type,form,angle)
##########
Description:
This function specifies the method for determining the output format of complex data.
Input:
INTEGER register This value specifies the register identifier.
STRING location[] This value specifies the model entity with which the results data is associated. Valid values are: "C" = centroid,"N" = nodal,"EN" = element nodal,and "EL" = element.
STRING register_type[] This value specifies the register type. Valid values are: "S" = scalar,"V" = vector,and "T" = tensor.
STRING form[] This value specifies the complex form to use. Valid values are: “Real”,“Imaginary”,“Magnitude”,“Phase”,and “Angle”.
REAL angle This value specifies the angle in radians to be used with the “Angle” form. Optional=0.0.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
db_get_load_case_title(id,title)
##########
Description:
This function retrieves the title for a specified loadcase identifier.
Input:
INTEGER id This value specifies the loadcase identifier.
Output:
STRING title[80] This value returns the loadcase title.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000052 Load case not found.
---------------
db_get_load_case_id(title,id)
##########
Description:
This function retrieves the id for a specified loadcase title.
Input:
STRING title[80] This value specifies the loadcase title.
Output:
INTEGER id This value returns the loadcase identifier.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000052 Load case not found.
---------------
db_get_sub_case_title(lcid,subid,title)
##########
Description:
This function retrieves the title for a specified loadcase and subcase identifier. It returns the title of a subcase excluding any extension added to the name to distinguish it,in the GUI,from other subcases with the same name.If you want to keep the name extensions that Patran adds to the loadcase and subcase identifier,use the function res_data_get_subcase_name,122.
Input:
INTEGER lcid This value specifies the loadcase identifier.
INTEGER subid This value specifies the subcase identifier.
Output:
STRING title[31] This value returns the subcase title.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000053 Sub case not found.
---------------
db_get_sub_case_id(lcid,title,subid)
##########
Description:
This function retrieves the subcase identifier for a specified loadcase identifier,subcase title.
Input:
INTEGER lcid This value specifies the loadcase identifier.
STRING title[31] This value specifies the subcase title.
Output:
INTEGER subid This value returns the subcase identifier.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000053 Sub case not found.
---------------
db_get_primary_res_label(primary_id,label)
##########
Description:
This function retrieves the label for a specified primary result identifier.
Input:
INTEGER primary_id This value specifies the primary result identifier.
Output:
STRING label[80] This value returns the primary result label.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000054 Result case not found.
---------------
db_get_primary_res_id(label,primary_id)
##########
Description:
This function retrieves the identifier for a specified primary result label.
Input:
STRING label[80] This value specifies the primary result label.
Output:
INTEGER primary_id This value returns the primary result identifier.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
13000054 Result case not found.
---------------
db_get_secondary_res_label(primary_id,secondary_id,label)
##########
Description:
This function retrieves the label for a specified secondary result identifier.
Input:
INTEGER primary_id This value specifies the primary results identifier.
INTEGER secondary_id This value specifies the secondary result identifier.
Output:
STRING label[80] This value returns the secondary result label.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
db_get_secondary_res_id(primary_id,label,secondary_id)
##########
Description:
This function retrieves the identifier for a specified secondary result label.
Input:
INTEGER primary_id This value specifies the primary result identifier.
STRING label[80] This value specifies the secondary result label.
Output:
INTEGER secondary_id This value returns the secondary result identifier.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
See the Status Messages (Ch. 11)
---------------
db_update_mesh_params(smooth_factor,maximum_cycles,acceleration_factor,termination_factor,triangular_surf_mesh,triangle_rectangle)
##########
Description:
This function will update isometric mesh parameters in the database.
Input:
REAL smooth_factor This value specifies the weighting factor for smoothing a mesh. This value can range from 0.0 to 1.0.
INTEGER maximum_cycles This value specifies the maximum number of smoothing cycles.
REAL acceleration_factor This value specifies the smoothing acceleration factor which ranges from 0.0 to 1.0.
REAL termination_factor This value specifies the smoothing termination factor which ranges from 0.0 to 0.2.
INTEGER triangular_surf_mesh This value specifies the mesh pattern for surfaces with a triangular shape and can have a value of either 1 or 2.
INTEGER triangle_rectangle This value specifies the triangular element pattern for rectangular surfaces and can have a value that ranges from 1 to 4.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
This is only a partial list of the error values that can be returned by this function.
13000004 Duplicate entry exists in table
13000007 An unspecified database error occurred
13000047 Mesh not found
---------------
res_utl_extract_elem_pos_ids(result_ids,elem_list,count,ids,npos,posids)
##########
Description:
This function will extract the internal element position identifiers for the results data associated with a list of elements.
Input:
INTEGER result_ids(5)This value specifies the load case identifier,subcase identifier,primary result identifier,secondary result identifier,and layer identifier.
STRING elem_list[] This value specifies a list of elements for which results are extracted.
Output:
INTEGER count This value returns the number of returned element identifiers.
INTEGER ids(VIRTUAL)This value returns the list of element identifiers.
INTEGER npos(VIRTUAL)This value returns the number of element positions per element.
INTEGER posids(VIRTUAL)This value returns all of the element position identifiers for the specified elements.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
4500005 No Elements are found for the specified result matching the input list.
4500006 The Loadcase/Subcase/Primary Result/ Secondary Result Id combination specified cannot be found.
4500007 The specified Layer Id is not associated with the specified result.
4500009 No results are found in the database matching the specified Ids.
4500014 An error has occurred interpreting the input List string.
4500017 The specified operation is not valid.
13000054 Result case not found.
13000071 Result case type not found.
13000085 Cursor not open.
13000086 No Records Found.
13000117 The query specified has completed.
13000210 The system is out of virtual memory.
14000281 LpExpandPclVariables: Virtual memory is full.
14000298 LpPicklistDecoder: Parse error.
14000299 LpPicklistDecoder: Memory is exhausted.
14000302 LpPicklistDecoderWithLookup: Memory is exhausted.
---------------
res_utl_get_elem_pos_loc(elem_id,param_flag,epos_id,location)
##########
Description:
This function will extract the internal element position location for the results data associated with an element identifier.
Input:
INTEGER elem_id This value specifies the element identifier.
INTEGER param_flag This value specifies the setting of the parameter flag: 0=XYZ global coordinates and 1=element parametric coordinates.
INTEGER epos_id This value specifies the element position identifier.
Output:
REAL location(4)This value returns the XYZ or element parametric coordinates.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
4500008 The input Location string is invalid.
13000021 Element not found.
---------------
res_utl_get_result_info(result_ids,title,nres,data_type,assoc,resloc,cidflag,minloc,maxloc)
##########
Description:
This function extracts information about the specified results data.
Input:
INTEGER result_ids(5)This value specifies the load case identifier,subcase identifier,primary result identifier,secondary result identifier,and layer identifier.
Output:
STRING title[80](3)This value returns the title of the current result.
INTEGER nres This value returns the total number of results.
INTEGER data_type This value returns the data type. Valid values are: 1=scalar,2=vector,and 3=tensor.
INTEGER assoc This value returns the association type. Valid values are: 1=nodal and 2=element.
INTEGER resloc This value returns the results location. Valid values are: 1=centroidal,2=nodal,and 3=gauss point.
LOGICAL cidflag This value returns TRUE if the results are defined in a non-global system.
INTEGER minloc(2,6)This value returns the identifier and location for each minimum result component. The location is used only for multiple element results.
INTEGER maxloc(2,6)This value returns the identifier and location for each maximum result component. The location is used only for multiple element results.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
4500005 No Elements are found for the specified result matching the input list.
4500006 The Loadcase/Subcase/Primary Result/ Secondary Result Id combination specified cannot be found.
4500007 The specified Layer Id is not associated with the specified result.
4500009 No results are found in the database matching the specified Ids.
13000054 Result case not found.
13000071 Result case type not found.
13000086 No Records Found.
13000210 The system is out of virtual memory.
---------------
res_utl_clear_result()
##########
Description:
This function clears any previously used results data from memory.
Input:
None.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully.
Error Conditions:
None.
---------------
res_utl_get_result_entities(result_ids,id_list)
##########
Description:
This function returns a list of the identifiers for which the specified results exist.
Input:
INTEGER result_ids(5)This value specifies the load case identifier,subcase identifier,primary result identifier,secondary result identifier,and layer identifier.
Output:
STRING id_list[VIRTUAL] This value returns a list of the identifiers for which the specified results exist.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
4500005 No Elements are found for the specified result matching the input list.
4500006 The Loadcase/Subcase/Primary Result/ Secondary Result Id combination specified cannot be found.
4500007 The specified Layer Id is not associated with the specified result.
4500009 No results are found in the database matching the specified Ids.
13000054 Result case not found.
13000071 Result case type not found.
13000086 No Records Found.
13000210 The system is out of virtual memory.
14000001 LpGetHeapSpace: Allocated heapspace is exhausted.
14000201 Invalid output string specified for call.
---------------
res_utl_get_result_type(result_ids,result_type)
##########
Description:
This function returns the result type for the specified results.
Input:
INTEGER result_ids(5)This value specifies the load case identifier,subcase identifier,primary result identifier,secondary result identifier,and layer identifier.
Output:
INTEGER result_type This value returns the result type. Valid values are: 1=Scalar,2=Vector,and 3=Tensor.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
4500005 No Elements are found for the specified result matching the input list.
4500006 The Loadcase/Subcase/Primary Result/ Secondary Result Id combination specified cannot be found.
4500007 The specified Layer Id is not associated with the specified result.
4500009 No results are found in the database matching the specified Ids.
13000054 Result case not found.
13000071 Result case type not found.
13000210 The system is out of virtual memory.
---------------
res_utl_get_results_cids(result_ids,result_type,nids,ids,cids)
##########
Description:
This function returns the coordinate frame identifiers used for the result defined at the specified node or element locations. This function is deprecated. Please use the updated function.res_utl_get_results_cids_2,29.
Input:
INTEGER result_ids(5)This value specifies the load case identifier,subcase identifier,primary result identifier,secondary result identifier,and layer identifier.
INTEGER result_type This value specifies the type: 1=node,and 2=element.
INTEGER nids This value specifies the number of identifiers.
INTEGER ids(nids)This value specifies node or element identifiers.
Output:
INTEGER cids()This value returns a list of coordinate frame identifiers in which the results specified are oriented. Other valid cid values are: -1=element local and 0=global.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()
4500004 No Nodes found in the database matching the input list.
4500005 No Elements found in the database matching the input list.
4500006 The Loadcase/Subcase/Primary Result/ Secondary Result Id combination specified cannot be found.
4500007 The specified Layer Id is not associated with the specified result.
4500009 No results are found in the database matching the specified Ids.
4500016 The input list type is not valid.
13000054 Result case not found.
13000071 Result case type not found.
13000086 No Records Found.
13000210 The system is out of virtual memory.
---------------
res_utl_get_results_cids_2(result_ids,result_type,nids,ids,cids)
##########
Description:
This function returns the coordinate frame identifiers used for the result defined at the specified node or element locations. This function replaces res_utl_get_results_cids,27.
Input:
INTEGER result_ids(5)This value specifies the load case identifier,subcase identifier,primary result identifier,secondary result identifier,and layer identifier.
INTEGER result_type This value specifies the type: 1=node,and 2=element.
INTEGER nids This value specifies the number of identifiers.
INTEGER ids(nids)This value specifies node or element identifiers.
Output:
INTEGER cids()This value returns a list of coordinate frame identifiers in which the results specified are oriented. See remarks for other valid cid values.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()
4500004 No Nodes found in the database matching the input list.
4500005 No Elements found in the database matching the input list.
4500006 The Loadcase/Subcase/Primary Result/ Secondary Result Id combination specified cannot be found.
4500007 The specified Layer Id is not associated with the specified result.
4500009 No results are found in the database matching the specified Ids.
4500016 The input list type is not valid.
13000054 Result case not found.
13000071 Result case type not found.
13000086 No Records Found.
13000210 The system is out of virtual memory.
---------------
res_utl_extract_nodal_results(result_ids,node_list,derivation,cid,data_type,nres,ids,results,minloc,maxloc)
##########
Description:
This function extracts the specified results data from the database.
Input:
INTEGER result_ids(5)This value specifies the load case identifier,subcase identifier,primary result identifier,secondary result identifier,and layer identifier.
STRING node_list[] This value specifies a list of nodes for which to extract results.
STRING derivation[10] This value specifies the derivation specifier if the results are to be derived. A value of null will leave the result as is. See the remarks below for more information.
STRING cid[] This value specifies the coordinate system for vector/tensor transformations. A null string is used to leave the coordinate frame identifier as is.
Output:
INTEGER data_type This value returns the data type. Valid values are: 1=scalar,2=vector,and 3=tensor.
INTEGER nres This value returns the number of returned node identifiers.
INTEGER ids(VIRTUAL)This value returns a list of node identifiers.
REAL results(VIRTUAL)This value returns all of the results at the specified nodes.
INTEGER minloc(6)This value returns the array offsets for each minimum result component in the output value results.
INTEGER maxloc(6)This value returns the array offsets for each maximum result component in the output value results.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
4500002 An error has occurred calculating a nodal averaged result.
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
4500004 No Nodes found in the database matching the input list.
4500005 No Elements found in the database matching the input list.
4500006 The Loadcase/Subcase/Primary Result/ Secondary Result Id combination specified cannot be found.
4500007 The specified Layer Id is not associated with the specified result.
4500009 No results are found in the database matching the specified Ids.
4500010 The derivation specified in invalid.
4500011 A error has occurred extrapolating this result to the element nodes.
4500014 An error has occurred interpreting the input List string.
4500015 The specified Coordinate Frame does not exist.
4500018 The Coordinate Frame List is not valid.
13000054 Result case not found.
13000056 Coordinate frame not found.
13000071 Result case type not found.
13000085 Cursor not open.
13000086 No Records Found.
13000117 The query specified has completed.
13000210 The system is out of virtual memory.
14000281 LpExpandPclVariables: Virtual memory is full.
14000298 LpPicklistDecoder: Parse error.
14000299 LpPicklistDecoder: Memory is exhausted.
14000302 LpPicklistDecoderWithLookup: Memory is exhausted.
---------------
res_utl_extract_nodal_results2(result_ids,node_list,derivation,cid_list,avg_method,avg_domain,extrap_method,complex_form,complex_angle,data_type,nres,ids,results,minloc,maxloc)
##########
Description:
This function extracts the specified results data from the database.
Input:
INTEGER result_ids(5)This value specifies the load case identifier,subcase identifier,primary result identifier,secondary result identifier,and layer identifier.
STRING node_list[] This value specifies a list of nodes for which to extract results.
STRING derivation[10] This value specifies the derivation specifier if the results are to be derived. A value of null will leave the result as is. See the remarks below for more information.
STRING cid[] This value specifies the coordinate system for vector/tensor transformations. A null string is used to leave the coordinate frame identifier as is.
STRING avg_method[] This value specifies the averaging method to be used.
STRING avg_domain[] This value specifies the averaging domain to be used.
STRING extrap_method[] This value specifies the extrapolation method to be used.
STRING complex_form[] This value specifies the form to be used for complex numbers.
REAL complex_angle This value is used with the complex results when the complex_form is “Angle”.
Output:
INTEGER data_type This value returns the data type. Valid values are: 1=scalar,2=vector,and 3=tensor.
INTEGER nres This value returns the number of returned node identifiers.
INTEGER ids(VIRTUAL)This value returns a list of node identifiers.
REAL results(VIRTUAL)This value returns all of the results at the specified nodes.
INTEGER minloc(6)This value returns the array offsets for each minimum result component in the output value results.
INTEGER maxloc(6)This value returns the array offsets for each maximum result component in the output value results.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
4500002 An error has occurred calculating a nodal averaged result.
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
4500004 No Nodes found in the database matching the input list.
4500005 No Elements found in the database matching the input list.
4500006 The Loadcase/Subcase/Primary Result/ Secondary Result Id combination specified cannot be found.
4500007 The specified Layer Id is not associated with the specified result.
4500009 No results are found in the database matching the specified Ids.
4500010 The derivation specified in invalid.
4500011 A error has occurred extrapolating this result to the element nodes.
4500014 An error has occurred interpreting the input List string.
4500015 The specified Coordinate Frame does not exist.
4500018 The Coordinate Frame List is not valid.
13000054 Result case not found.
13000056 Coordinate frame not found.
13000071 Result case type not found.
13000085 Cursor not open.
13000086 No Records Found.
13000117 The query specified has completed.
13000210 The system is out of virtual memory.
14000281 LpExpandPclVariables: Virtual memory is full.
14000298 LpPicklistDecoder: Parse error.
14000299 LpPicklistDecoder: Memory is exhausted.
14000302 LpPicklistDecoderWithLookup: Memory is exhausted.
---------------
res_utl_extract_nodal_history(nlcs,lcids,subids,result_ids,node_list,derivation,cid,data_type,nres,ids,results,minloc,maxloc)
##########
Description:
This function extracts the specified results data from the database.
Input:
INTEGER nlcs This value specifies the number of result cases to be extracted.
INTEGER lcids(nlcs)This value specifies the loadcase identifiers.
INTEGER subids(nlcs)This value specifies the subcase identifiers.
INTEGER result_ids(3)This value specifies the primary result identifier,secondary result identifier,and layer identifier.
STRING node_list[] This value specifies a list of nodes at which to extract results.
STRING derivation[10] This value specifies the derivation specifier if the results are to be derived. A value of null will leave the result as is. See the remarks below for more information.
STRING cid[] This value specifies the coordinate system for vector/tensor transformations. A null string is used to leave the coordinate frame identifier as is.
Output:
INTEGER data_type This value returns the data type. Valid values are: 1=scalar,2=vector,and 3=tensor.
INTEGER nres This value returns the number of node identifiers.
INTEGER ids(VIRTUAL)This value returns a list of node identifiers.
REAL results(VIRTUAL)This value returns all of the results at the specified nodes for each result case.
INTEGER minloc(VIRTUAL)This value returns the load case or subcase identifier array offsets for each node minimum in the output value results.
INTEGER maxloc(VIRTUAL)This value returns the load case or subcase identifier array offsets for each maximum node in the output value results.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
4500002 An error has occurred calculating a nodal averaged result.
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
4500004 No Nodes found in the database matching the input list.
4500005 No Elements found in the database matching the input list.
4500006 The Loadcase/Subcase/Primary Result/ Secondary Result Id combination specified cannot be found.
4500007 The specified Layer Id is not associated with the specified result.
4500009 No results are found in the database matching the specified Ids.
4500010 The derivation specified in invalid.
4500011 A error has occurred extrapolating this result to the element nodes.
4500014 An error has occurred interpreting the input List string.
4500015 The specified Coordinate Frame does not exist.
4500018 The Coordinate Frame List is not valid.
13000054 Result case not found.
13000056 Coordinate frame not found.
13000071 Result case type not found.
13000085 Cursor not open.
13000086 No Records Found.
13000117 The query specified has completed.
13000210 The system is out of virtual memory.
14000281 LpExpandPclVariables: Virtual memory is full.
14000298 LpPicklistDecoder: Parse error.
14000299 LpPicklistDecoder: Memory is exhausted.
14000302 LpPicklistDecoderWithLookup: Memory is exhausted.
---------------
res_utl_extract_nodal_history2(nlcs,lcids,subids,result_ids,node_list,derivation,cid,avg_method,avg_domain,extrap_method,complex_form,complex_angle,data_type,nres,ids,results,minloc,maxloc)
##########
Description:
This function extracts the specified results data from the database.
Input:
INTEGER nlcs This value specifies the number of result cases to be extracted.
INTEGER lcids(nlcs)This value specifies the loadcase identifiers.
INTEGER subids(nlcs)This value specifies the subcase identifiers.
INTEGER result_ids(3)This value specifies the primary result identifier,secondary result identifier,and layer identifier.
STRING node_list[] This value specifies a list of nodes at which to extract results.
STRING derivation[10] This value specifies the derivation specifier if the results are to be derived. A value of null will leave the result as is. See the remarks below for more information.
STRING cid[] This value specifies the coordinate system for vector/tensor transformations. A null string is used to leave the coordinate frame identifier as is.
STRING avg_method[] This value specifies the averaging method to be used.
STRING avg_domain[] This value specifies the averaging domain to be used.
STRING extrap_method[] This value specifies the extrapolation method to be used.
STRING complex_form[] This value specifies the form to be used for complex numbers.
REAL complex_angle This value is used with complex results when the complex_form is “Angle”.
Output:
INTEGER data_type This value returns the data type. Valid values are: 1=scalar,2=vector,and 3=tensor.
INTEGER nres This value returns the number of node identifiers.
INTEGER ids(VIRTUAL)This value returns a list of node identifiers.
REAL results(VIRTUAL)This value returns all of the results at the specified nodes for each result case.
INTEGER minloc(VIRTUAL)This value returns the load case or subcase identifier array offsets for each node minimum in the output value results.
INTEGER maxloc(VIRTUAL)This value returns the load case or subcase identifier array offsets for each maximum node in the output value results.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
4500002 An error has occurred calculating a nodal averaged result.
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
4500004 No Nodes found in the database matching the input list.
4500005 No Elements found in the database matching the input list.
4500006 The Loadcase/Subcase/Primary Result/ Secondary Result Id combination specified cannot be found.
4500007 The specified Layer Id is not associated with the specified result.
4500009 No results are found in the database matching the specified Ids.
4500010 The derivation specified in invalid.
4500011 A error has occurred extrapolating this result to the element nodes.
4500014 An error has occurred interpreting the input List string.
4500015 The specified Coordinate Frame does not exist.
4500018 The Coordinate Frame List is not valid.
13000054 Result case not found.
13000056 Coordinate frame not found.
13000071 Result case type not found.
13000085 Cursor not open.
13000086 No Records Found.
13000117 The query specified has completed.
13000210 The system is out of virtual memory.
14000281 LpExpandPclVariables: Virtual memory is full.
14000298 LpPicklistDecoder: Parse error.
14000299 LpPicklistDecoder: Memory is exhausted.
14000302 LpPicklistDecoderWithLookup: Memory is exhausted.
---------------
res_utl_create_nodal_result(result_ids,primary_title,secondary_title,nids,ids,cid_list,data_type,results)
##########
Description:
This function adds the specified results data to the database.
Input:
INTEGER result_ids(5)This value specifies the load case identifier,subcase identifier,primary result identifier,secondary result identifier,and layer identifier. The primary and result identifiers are not used as inputs by this function. This value is used as both an input and an output to the function and would be passed by the calling function as a single argument.
STRING primary_title[80] This value specifies the primary result title.
STRING secondary_title[80] This value specifies the secondary result title.
INTEGER nids This value specifies the number of input node identifiers.
INTEGER ids(nids)This value specifies the node identifiers for the results.
STRING cid_list[] This value specifies the alternate coordinate system for the vector or tensor results. A null string is used for the global coordinate system.
INTEGER data_type This value specifies the data type to use: 1=scalar,2=vector,and 3=tensor.
REAL results()This value specifies all of the results at the specified nodes.
Output:
INTEGER result_ids(5)This value returns the load case identifier,subcase identifier,primary result identifier,secondary result identifier,and layer identifier. The load case,subcase,and layer identifiers are not used as output values by this function. The primary and result identifiers are used as outputs by this function. This value is used as both an input and an output to the function and would be passed by the calling function as a single argument.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
4500004 No Nodes found in the database matching the input list.
4500007 The specified Layer Id is not associated with the specified result.
4500015 The specified Coordinate Frame does not exist.
4500018 The Coordinate Frame List is not valid.
13000054 Result case not found.
---------------
res_utl_extract_elem_results(result_ids,elem_list,derivation,location,cid,data_type,resloc,nres,ids,nresults,results,minloc,maxloc)
##########
Description:
This function extracts the specified results data from the database.
Input:
INTEGER result_ids(5)This value specifies the load case identifier,subcase identifier,primary result identifier,secondary result identifier,and layer identifier.
STRING elem_list[] This value specifies a list of elements for which to extract results.
STRING derivation[10] This value specifies the derivation specifier if the results are to be derived. A value of null will leave the result as is. See the remarks below for more information.
STRING location[] This value specifies the location of the coordinate frame identifier: "","A" = axis,"C" = centroid,and "N" = nodal.
STRING cid[] This value specifies the coordinate system for vector and tensor transformations. A null string is used to leave the coordinate frame identifier as is. Valid Coordinate sytem strings types are: "Global","Material","IJK","Nodal","Coord","ResCoord","Bisector","CQUAD8","Unknown","Default","LocalDir","AsIs". Coordinate Systems (p. 295)in the Results Postprocessing
Output:
INTEGER data_type This value returns the data type. Valid values are: 1=scalar,2=vector,and 3=tensor.
INTEGER resloc This value returns the result location. Valid values are: 1=centroid,2=nodal,3=multiple,and 4=mixed.
INTEGER nres This value returns the number of returned element identifiers.
INTEGER ids(VIRTUAL)This value returns a list of element identifiers.
INTEGER nresults(VIRTUAL)This value returns the number of results per element.
REAL results(VIRTUAL)This value returns all of the results at the specified element locations.
INTEGER minloc(12)This value returns the array offsets for each minimum result component in the output value results.
INTEGER maxloc(12)This value returns the array offsets for each maximum result component in the output value results.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
4500005 No Elements are found for the specified result matching the input list.
4500006 The Loadcase/Subcase/Primary Result/ Secondary Result Id combination specified cannot be found.
4500007 The specified Layer Id is not associated with the specified result.
4500008 The input Location string is invalid.
4500009 No results are found in the database matching the specified Ids.
4500010 The derivation specified in invalid.
4500011 A error has occurred extrapolating this result to the element nodes.
4500014 An error has occurred interpreting the input List string.
4500015 The specified Coordinate Frame does not exist.
4500018 The Coordinate Frame List is not valid.
13000054 Result case not found.
13000056 Coordinate frame not found.
13000071 Result case type not found.
13000085 Cursor not open.
13000086 No Records Found.
13000117 The query specified has completed.
13000210 The system is out of virtual memory.
14000281 LpExpandPclVariables: Virtual memory is full.
14000298 LpPicklistDecoder: Parse error.
14000299 LpPicklistDecoder: Memory is exhausted.
14000302 LpPicklistDecoderWithLookup: Memory is exhausted.
---------------
res_utl_extract_elem_results2(result_ids,elem_list,derivation,location,cid,avg_method,avg_domain,extrap_method,complex_form,complex_angle,data_type,resloc,nres,ids,nresults,results,minloc,maxloc)
##########
Description:
This function extracts the specified results data from the database.
Input:
INTEGER result_ids(5)This value specifies the load case identifier,subcase identifier,primary result identifier,secondary result identifier,and layer identifier.
STRING elem_list[] This value specifies a list of elements for which to extract results.
STRING derivation[10] This value specifies the derivation specifier if the results are to be derived. A value of null will leave the result as is. See the remarks below for more information.
STRING location[] This value specifies the location of the coordinate frame identifier: "","A" = axis,"C" = centroid,and "N" = nodal.
STRING cid[] This value specifies the coordinate system for vector and tensor transformations. A null string is used to leave the coordinate frame identifier as is.
STRING avg_method[] This value specifies the averaging method to be used.
STRING avg_domain[] This value specifies the averaging domain to be used.
STRING extrap_method[] This value specifies the method to use in extrapolation.
STRING complex_form[] This value specifies the form to be used for complex numbers.
REAL complex_angle This value is used with complex results when the complex_form is “Angle”.
Output:
INTEGER data_type This value returns the data type. Valid values are: 1=scalar,2=vector,and 3=tensor.
INTEGER resloc This value returns the result location. Valid values are: 1=centroid,2=nodal,3=multiple,and 4=mixed.
INTEGER nres This value returns the number of returned element identifiers.
INTEGER ids(VIRTUAL)This value returns a list of element identifiers.
INTEGER nresults(VIRTUAL)This value returns the number of results per element.
REAL results(VIRTUAL)This value returns all of the results at the specified element locations.
INTEGER minloc(12)This value returns the array offsets for each minimum result component in the output value results.
INTEGER maxloc(12)This value returns the array offsets for each maximum result component in the output value results.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
4500005 No Elements are found for the specified result matching the input list.
4500006 The Loadcase/Subcase/Primary Result/ Secondary Result Id combination specified cannot be found.
4500007 The specified Layer Id is not associated with the specified result.
4500008 The input Location string is invalid.
4500009 No results are found in the database matching the specified Ids.
4500010 The derivation specified in invalid.
4500011 A error has occurred extrapolating this result to the element nodes.
4500014 An error has occurred interpreting the input List string.
4500015 The specified Coordinate Frame does not exist.
4500018 The Coordinate Frame List is not valid.
13000054 Result case not found.
13000056 Coordinate frame not found.
13000071 Result case type not found.
13000085 Cursor not open.
13000086 No Records Found.
13000117 The query specified has completed.
13000210 The system is out of virtual memory.
14000281 LpExpandPclVariables: Virtual memory is full.
14000298 LpPicklistDecoder: Parse error.
14000299 LpPicklistDecoder: Memory is exhausted.
14000302 LpPicklistDecoderWithLookup: Memory is exhausted.
---------------
res_utl_extract_elem_history(nlcs,lcids,subids,result_ids,elem_list,derivation,location,cid,data_type,resloc,nres,ids,nresults,results,minloc,maxloc)
##########
Description:
This function extracts the specified results data from the database.
Input:
INTEGER nlcs This value specifies the number of result cases to be extracted.
INTEGER lcids(nlcs)This value specifies the load case identifiers.
INTEGER subids(nlcs)This value specifies the subcase identifiers.
INTEGER result_ids(3)This value specifies the primary result identifier,secondary result identifier,and layer identifier.
STRING elem_list[] This value specifies a list of elements at which to extract results.
STRING derivation[10] This value specifies the derivation specifier if the results are to be derived. A value of null will leave the result as is. See the remarks below for more information.
STRING location[] This value specifies the coordinate frame identifier location: "","A" = axis,"C" = centroid,and "N" = nodal.
STRING cid[] This value specifies the coordinate system for vector/tensor transformations. A null string is used to leave the coordinate frame identifier as is.
Output:
INTEGER data_type This value returns the data type. Valid values are: 1=scalar,2=vector,and 3=tensor.
INTEGER resloc This value returns the results location. Valid values are: 1=centroid,2=nodal,and 3=multiple.
INTEGER nres This value returns the number of node identifiers.
INTEGER ids(VIRTUAL)This value returns a list of node identifiers.
INTEGER nresults(VIRTUAL)This value returns the number of results per element.
REAL results(VIRTUAL)This value returns all of the results at the specified node for each result case.
INTEGER minloc(VIRTUAL)This value returns the array offsets for each minimum result component in the output value results.
INTEGER maxloc(VIRTUAL)This value returns the array offsets for each maximum result component in the output value results.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
4500005 No Elements are found for the specified result matching the input list.
4500006 The Loadcase/Subcase/Primary Result/ Secondary Result Id combination specified cannot be found.
4500007 The specified Layer Id is not associated with the specified result.
4500008 The input Location string is invalid.
4500009 No results are found in the database matching the specified Ids.
4500010 The derivation specified in invalid.
4500011 A error has occurred extrapolating this result to the element nodes.
4500014 An error has occurred interpreting the input List string.
4500015 The specified Coordinate Frame does not exist.
4500018 The Coordinate Frame List is not valid.
13000054 Result case not found.
13000056 Coordinate frame not found.
13000071 Result case type not found.
13000085 Cursor not open.
13000086 No Records Found.
13000117 The query specified has completed.
13000210 The system is out of virtual memory.
14000281 LpExpandPclVariables: Virtual memory is full.
14000298 LpPicklistDecoder: Parse error.
14000299 LpPicklistDecoder: Memory is exhausted.
14000302 LpPicklistDecoderWithLookup: Memory is exhausted.
---------------
res_utl_extract_elem_history2(nlcs,lcids,subids,result_ids,elem_list,derivation,location,cid,avg_method,avg_domain,extrap_method,complex_form,complex_angle,data_type,resloc,nres,ids,nresults,results,minloc,maxloc)
##########
Description:
This function extracts the specified results data from the database.
Input:
INTEGER nlcs This value specifies the number of result cases to be extracted.
INTEGER lcids(nlcs)This value specifies the load case identifiers.
INTEGER subids(nlcs)This value specifies the subcase identifiers.
INTEGER result_ids(3)This value specifies the primary result identifier,secondary result identifier,and layer identifier.
STRING elem_list[] This value specifies a list of elements at which to extract results.
STRING derivation[10] This value specifies the derivation specifier if the results are to be derived. A value of null will leave the result as is. See the remarks below for more information.
STRING location[] This value specifies the coordinate frame identifier location: "","A" = axis,"C" = centroid,and "N" = nodal.
STRING cid[] This value specifies the coordinate system for vector/tensor transformations. A null string is used to leave the coordinate frame identifier as is.
STRING avg_method[] This value specifies the averaging method to use.
STRING avg_domain[] This value specifies the averaging domain to use.
STRING extrap_method[] This value specifies the extrapolation method to use.
STRING complex_form[] This value specifies the form to be used with complex numbers.
REAL complex_angle This value is used with complex results when the complex_form is “Angle”.
Output:
INTEGER data_type This value returns the data type. Valid values are: 1=scalar,2=vector,and 3=tensor.
INTEGER resloc This value returns the results location. Valid values are: 1=centroid,2=nodal,and 3=multiple.
INTEGER nres This value returns the number of node identifiers.
INTEGER ids(VIRTUAL)This value returns a list of node identifiers.
INTEGER nresults(VIRTUAL)This value returns the number of results per element.
REAL results(VIRTUAL)This value returns all of the results at the specified node for each result case.
INTEGER minloc(VIRTUAL)This value returns the array offsets for each minimum result component in the output value results.
INTEGER maxloc(VIRTUAL)This value returns the array offsets for each maximum result component in the output value results.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
4500005 No Elements are found for the specified result matching the input list.
4500006 The Loadcase/Subcase/Primary Result/ Secondary Result Id combination specified cannot be found.
4500007 The specified Layer Id is not associated with the specified result.
4500008 The input Location string is invalid.
4500009 No results are found in the database matching the specified Ids.
4500010 The derivation specified in invalid.
4500011 A error has occurred extrapolating this result to the element nodes.
4500014 An error has occurred interpreting the input List string.
4500015 The specified Coordinate Frame does not exist.
4500018 The Coordinate Frame List is not valid.
13000054 Result case not found.
13000056 Coordinate frame not found.
13000071 Result case type not found.
13000085 Cursor not open.
13000086 No Records Found.
13000117 The query specified has completed.
13000210 The system is out of virtual memory.
14000281 LpExpandPclVariables: Virtual memory is full.
14000298 LpPicklistDecoder: Parse error.
14000299 LpPicklistDecoder: Memory is exhausted.
14000302 LpPicklistDecoderWithLookup: Memory is exhausted.
---------------
res_utl_create_elem_result(result_ids,primary_title,secondary_title,nids,ids,cid_list,n_comp,data_type,location,nresults,results)
##########
Description:
This function adds the specified results data to the database.
Input:
INTEGER result_ids(5)This value specifies the load case identifier,subcase identifier,primary result identifier,secondary result identifier,and layer identifier. The primary and result identifiers are not used as inputs by this function. This value is used as both an input and an output to the function and would be passed by the calling function as a single argument.
STRING primary_title[80] This value specifies the primary result title.
STRING secondary_title[80] This value specifies the secondary result title.
INTEGER nids This value specifies the number of input element identifiers.
INTEGER ids()This value specifies the element identifiers for the results.
STRING cid_list[] This value specifies the alternate coordinate system for vector or tensor results. A null string is used for the global coordinate system.
INTEGER data_type This value specifies the data type to use: 1=scalar,2=vector,and 3=tensor.
STRING location[] This value specifies the location to use: "C" = centroid,and "N" = nodal.
INTEGER nresults()This value specifies the number of results per element.
REAL results()This value specifies an array of all of the results at the specified nodes.
Output:
INTEGER result_ids(5)This value returns the load case identifier,subcase identifier,primary result identifier,secondary result identifier,and layer identifier. The load case,subcase,and layer identifiers are not used as output values by this function. The primary and result identifiers are used as outputs by this function. This value is used as both an input and an output to the function and would be passed by the calling function as a single argument.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
4500005 No Elements are found for the specified result matching the input list.
4500007 The specified Layer Id is not associated with the specified result.
4500008 The input Location string is invalid.
4500009 No results are found in the database matching the specified Ids.
4500015 The specified Coordinate Frame does not exist.
4500018 The Coordinate Frame List is not valid.
13000054 Result case not found.
---------------
res_utl_extract_path_results(result_ids,npts,pts,derivation,cid,data_type,results,minloc,maxloc,elem_ids)
##########
Description:
This function extracts the specified results data from the database and interpolate as needed to obtain results along a specified set of XYZ coordinates defining the path.
Input:
INTEGER result_ids(5)This value specifies the load case identifier,subcase identifier,primary result identifier,secondary result identifier,and layer identifier.
INTEGER npts This value specifies the number of path points.
REAL pts(npts*3)This value specifies global XYZ point locations.
STRING derivation[10] This value specifies the derivation specifier if the results are to be derived. A value of null will leave the result as is. See the remarks below for more information.
STRING cid[] This value specifies the coordinate system for vector/tensor transformations. A null string is used to leave the coordinate frame identifier as is.
Output:
INTEGER data_type This value returns the data type. Valid values are: 1=scalar,2=vector,and 3=tensor.
REAL results(VIRTUAL)This value returns all of the results at the specified path points.
INTEGER minloc(6)This value returns the point index for each minimum result component.
INTEGER maxloc(6)This value returns the point index for each maximum result component.
INTEGER elem_ids(npts)This value returns identifiers for elements containing each point. No identifiers or 0 will be returned if a point was not interpolated.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
1 This is an internal status condition. There is no corresponding status message in the message database.
4500002 An error has occurred calculating a nodal averaged result.
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
4500004 No Nodes found in the database matching the input list.
4500005 No Elements found in the database matching the input list.
4500006 The Loadcase/Subcase/Primary Result/ Secondary Result Id combination specified cannot be found.
4500007 The specified Layer Id is not associated with the specified result.
4500009 No results are found in the database matching the specified Ids.
4500010 The derivation specified in invalid.
4500011 A error has occurred extrapolating this result to the element nodes.
4500015 The specified Coordinate Frame does not exist.
4500018 The Coordinate Frame List is not valid.
4500020 The input path specified points which did not interpolate to any elements.
13000054 Result case not found.
13000056 Coordinate frame not found.
13000071 Result case type not found.
13000086 No Records Found.
13000210 The system is out of virtual memory.
---------------
res_utl_get_loadcases(ncases,lcids,nsub)
##########
Description:
This function retrieves the existing load cases with associated results from the database.
Input:
None.
Output:
INTEGER ncases This value returns the number of load cases found.
INTEGER lcids(VIRTUAL)This value returns a list of load case identifiers.
INTEGER nsub(VIRTUAL)This value returns the number of subcases for each load case.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
13000052 Load case not found.
---------------
res_utl_get_subcases(lcid,nsub,subids)
##########
Description:
This function retrieves the existing subcases with associated results from the database.
Input:
INTEGER lcid This value specifies the loadcase identifier.
Output:
INTEGER nsub This value returns the number of subcases found.
INTEGER subids(VIRTUAL)This value returns a list of subcase identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
13000052 Load case not found.
13000053 Sub case not found.
---------------
res_utl_get_result_ids(nlcs,lcid,subids,nres,primary_id,secondary_id)
##########
Description:
This function retrieves the existing results identifiers associated with a list of load case and subcase identifiers from the database.
Input:
INTEGER nlcs This value specifies the number of load cases.
INTEGER lcid(nlcs)This value specifies load case identifiers.
INTEGER subids()This value specifies subcase identifiers.
Output:
INTEGER nres This value returns the number of results found.
INTEGER primary_id(VIRTUAL)This value returns a list of primary result identifiers.
INTEGER secondary_id(VIRTUAL)
This value returns a list of secondary result identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
4500009 No results are found in the database matching the specified Ids.
---------------
res_utl_get_result_layers(result_ids,nlayers,ids,labels)
##########
Description:
This function retrieves the layer positions associated with results from the database.
Input:
INTEGER result_ids(4)This value specifies the load case identifier,subcase identifier,primary result identifier,and secondary result identifier.
Output:
INTEGER nlayers This value returns the number of associated layers found.
INTEGER ids(VIRTUAL)This value returns a list of layer position identifiers.
STRING labels[80](VIRTUAL)This value returns the labels for the layers found.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
13000054 Result case not found.
13000071 Result case type not found.
13000093 Too Many Values Returned for Space Allocated.
13000210 The system is out of virtual memory.
---------------
res_utl_get_global_vars(nvar,var_name)
##########
Description:
This function retrieves the existing global variables from the database.
Input:
None.
Output:
INTEGER nvar This value returns the number of global variables found.
STRING var_name[80](VIRTUAL)
This value returns the labels for the variables found.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
##########
Description:
This function retrieves the value of a specific global variable associated with a load case and subcase.
Input:
INTEGER lcid This value specifies the load case identifier.
INTEGER subid This value specifies the subcase identifier.
STRING var_name[] This value specifies the global variable name.
Output:
INTEGER ncomp This value returns the number of components used for the variable value 1,3 or 6.
REAL vals(6)This value returns the value[s] for the global variable.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
4500012 The specified global variable is not found.
13000054 Result case not found.
13000055 Global variable not found.
---------------
res_utl_get_subcases_by_gv(lcid,var_name,compnum,val1,val2,method,nscs,subids)
##########
Description:
This function retrieves all subcase identifiers with the specified global variable value within the specified range.
Input:
INTEGER lcid This value specifies the loadcase identifier.
STRING var_name[] This value specifies the global variable name.
INTEGER compnum This value specifies the component of the values to use. This value is usually set to 1.
REAL val1 This value specifies the lower value of the range.
REAL val2 This value specifies the upper value of the range.
STRING method[] This value specifies the method used to retrieve the subcase identifiers. Valid values are: "U" = under,"B" = between,"A" = above,and "O" = outside.
Output:
INTEGER nscs This value returns the number of subcases found.
INTEGER subids(VIRTUAL)This value returns a list of subcase identifiers.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
4500003 A memory allocation error has occurred. Please check function inputs and call RES_UTL_FREE_RESULTS()before proceeding.
4500009 No results are found in the database matching the specified Ids.
4500013 The filter method specified is not valid.
13000052 Load case not found.
13000053 Sub case not found.
---------------
res_utl_calc_results(res1,operator,res2,res3)
##########
Description:
This function operates mathematically on two result values on a component by component basis.
Input:
REAL res1()This value specifies the first result value or constant.
STRING operator[] This value specifies the operator to use. A “+” will add the input values res1+res2.
REAL res2()This value specifies the second result value or constant.
Output:
REAL res3()This value returns the result value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
4500001 One of the input array arguments is of an insufficient dimension.
4500017 The specified operation is not valid.
---------------
res_utl_dot_results(nres,res1,res2,res3)
##########
Description:
This function calculates the dot product of 2 vector result values.
Input:
INTEGER nres This value specifies the number of result vectors in the values.
REAL res1(nres,3)This value specifies the first vector result value.
REAL res2(nres,3)This value specifies the second vector result value.
Output:
REAL res3(nres)This value returns the scalar results value of dot products.
INTEGER <Return Value> This function returns a value of 0 when executed successfully.
Error Conditions:
None.
---------------
res_utl_cross_results(nres,res1,res2,res3)
##########
Description:
This function calculates the cross product of two vector result values.
Input:
INTEGER nres This value specifies the number of result vectors in values.
REAL res1(nres,3)This value specifies the first vector result value.
REAL res2(nres,3)This value specifies the second vector result value.
Output:
REAL res3(nres,3)This value returns the vector results value of cross products.
INTEGER <Return Value> This function returns a value of 0 when executed successfully.
Error Conditions:
None.
---------------
res_utl_transform_results(nvals,ncomp,in_vals,from_cid,to_cid,out_vals)
##########
Description:
This function transforms the input vector or tensor values from one rectangular coordinate system to another.
Input:
INTEGER nvals This value specifies the number of result vectors in the result values.
INTEGER ncomp This value specifies the number of components as 3 or 6
REAL in_vals(nvals,ncomp)This value specifies the result value.
INTEGER from_cid This value specifies the FROM coordinate frame identifier.
INTEGER to_cid This value specifies the TO coordinate frame identifier.
Output:
REAL out_vals(nvals,ncomp)This value returns the transformed result value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
4500001 One of the input array arguments is of an insufficient dimension.
4500015 The specified Coordinate Frame does not exist.
4500017 The specified operation is not valid.
4500018 The Coordinate Frame List is not valid.
---------------
res_db_create_loadcase_c(name,type,description,loadcase_id)
##########
Description:
Create a loadcase.
Input:
STRING name The name of the load case.
INTEGER type The load case code.
STRING description The load case description.
Output:
INTEGER loadcase_id The loadcase id.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Notes:
The "type" can be set to the following values:
STATIC_ID 1
TIME_DEPENDENT_ID 2
FREQ_DEPENDENT_ID 3
COMBINATION_ID 4
The "description" can be set to the following values:
STATIC "Static"
TIME_DEPENDENT "Time Dependent"
FREQ_DEPENDENT "Freq Dependent"
COMBINATION "Combination"
---------------
res_db_create_restype_c(pri_label,sec_label,data_type,num_form,anl_code,unit_node,result_type)
##########
Description:
Creates a new result type.
Input:
STRING pri_label The primary result label.
STRING sec_label The secondary result label.
INTEGER data_type The data type code: scalar vector tensor
INTEGER num_form The numerical form code. real imaginary complex mag complex phase complex type complex real complex angle
STRING description[ 80 ] The results description.
INTEGER unit_code The unit code. Should be set to 0.
Output:
INTEGER result_type The result type created.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
---------------
pref_fem_get(minimum_angle)
##########
Description:
This function gets the finite element model minimum angle value from the database.
Input:
Output:
REAL mininimum_angle The value returns the mesh/edges snap angle in degrees. This angle controls the automatic snapping of nodes to geometry edge slope discontinuities during seeding,meshing and sweeping operations. These operations will place nodes at all edge slope discontinuities greater than the angle returned by this value.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
pref_fem_set(minimum_angle)
##########
Description:
This function sets the finite element model minimum angle value in the database.
Input:
REAL mininimum_angle The value specifies the mesh/edges snap angle in degrees. This angle controls the automatic snapping of nodes to geometry edge slope discontinuities during seeding,meshing and sweeping operations. These operations will place nodes at all edge slope discontinuities greater than the angle specified by this value.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
pref_geometry_get_v1(hpat_parametrization,nurbs_acceleration,geometry_convention)
##########
Description:
This function gets the geometric preference values in the database.
Input:
None.
Output:
LOGICAL hpat_parametrization This value returns a status setting used to select the parameter convention for hyperpatches. When this value is set to TRUE,hyperpatches will not necessarily use the same parameters as used with Patran 2.5. When this value is set to FALSE it indicates that the Patran convention will be used with solid origin locations.
LOGICAL nurbs_acceleration This value returns a status setting used to select,when set to TRUE,that nurbs curves and surfaces will be evaluated using specially designed evaluators which are optimized for speed. These optimized evaluators should not be used with higher order curves and surfaces as they tend to be unstable under those conditions. When this value is set to FALSE another kind of evaluator is used,one that is stable under all conditions.
LOGICAL geometry_convention This value returns a status setting used to select,when set to TRUE,that geometry will be represented using the Patran 2.5 convention. When this value is set to FALSE,the Patran convention will be used.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
pref_geometry_set_v1(hpat_parametrization,nurbs_acceleration,geometry_convention)
##########
Description:
This function sets the geometric preference values in the database.
Input:
LOGICAL hpat_parametrization This value specifies,when set to TRUE,that hyperpatches will not necessarily use the same parameters as used with Patran 2.5. Setting this value to TRUE will indicate that the Patran convention will be used with solid origin locations. Setting this value to FALSE will ensure compatibility with models created using Patran 2.5.
LOGICAL nurbs_acceleration This value specifies,when set to TRUE,that nurbs curves and surfaces will be evaluated using specially designed evaluators which are optimized for speed. These optimized evaluators should not be used with higher order curves and surfaces as they tend to be unstable under those conditions. When this value is set to FALSE another kind of evaluator is used,one that is stable under all conditions.
LOGICAL geometry_convention This value specifies,when set to TRUE,that geometry will be represented using the Patran 2.5 convention. Setting this value to TRUE will ensure compatibility with models created using Patran 2.5. When this value is set to FALSE,the Patran convention will be used.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
pref_report_get(real_numbers,float_field_width,float_decimal,sci_field_width,sci_decimal,integer_field_width,number_spacing)
##########
Description:
This function gets the parameters used to format tabular textual results reports.
Input:
None.
Output:
INTEGER real_numbers This value returns the real number switch status.
INTEGER float_field_width This value returns the field width used for listing floating point numbers.
INTEGER float_decimal This value returns the number of values shown after the decimal point of a floating point number.
INTEGER sci_field_width This value returns the field width used to list numbers in scientific notation.
INTEGER sci_decimal This value returns the number of values shown after the decimal point of a number in scientific notation.
INTEGER integer_field_width This value returns the field width used to list integers.
INTEGER number_spacing This value specifies the number of spaces placed between numerical fields.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
pref_report_set(real_numbers,float_field_width,float_decimal,sci_field_width,sci_decimal,integer_field_width,number_spacing)
##########
Description:
This function sets the parameters used to format tabular textual results reports.
Input:
INTEGER real_numbers This value specifies the real number switch status. The floating point format will be used if this value is set to 1 and the scientific notation format will be used if this value is set to 2.
INTEGER float_field_width This value specifies the field width used for listing floating point numbers. This value can range from 3 to 12.
INTEGER float_decimal This value specifies the number of values shown after the decimal point of a floating point number. This value can range from 0 to 11.
INTEGER sci_field_width This value specifies the field width used to list numbers in scientific notation. This value can range from 6 to 12.
INTEGER sci_decimal This value specifies the number of values shown after the decimal point of a number in scientific notation. This value can range from 1 to 7.
INTEGER integer_field_width This value returns the field width used to list integers. This value can range from 1 to 12.
INTEGER number_spacing This value specifies the number of spaces placed between numerical fields. This value can range from 1 to 20.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
bar_elem_color(color_value)
##########
Description:
This function is used to set the color value used for the display of bar type finite element model entities and labels.
Input:
INTEGER color_value This value specifies the color used. See the remarks below for more information.
Output:
None.
Error Conditions:
None.
---------------
bar_elem_label(label_status)
##########
Description:
This function sets a status value that indicates if bar type finite element model entity labels will be displayed.
Input:
LOGICAL label_status This value specifies,when set to TRUE,that bar type finite element model entity labels will be displayed,and FALSE otherwise.
Output:
None.
Error Conditions:
None.
---------------
body_color(color_value)
##########
Description:
This function is used to set the color value used for the display of bodies and body labels.
Input:
INTEGER color_value This value specifies the color used. See the remarks below for more information.
Output:
None.
Error Conditions:
None.
---------------
body_label(label_status)
##########
Description:
This function sets a status value that indicates if body labels will be displayed.
Input:
LOGICAL label_status This value specifies,when set to TRUE,that entity labels for bodies will be displayed,and FALSE otherwise.
Output:
None.
Error Conditions:
None.
---------------
curve_color(color_value)
##########
Description:
This function is used to set the color value used for the display of curves and curve labels.
Input:
INTEGER color_value This value specifies the color used. See the remarks below for more information.
Output:
None.
Error Conditions:
None.
---------------
curve_label(label_status)
##########
Description:
This function sets a status value that indicates if curve labels will be displayed.
Input:
LOGICAL label_status This value specifies,when set to TRUE,that entity labels for curves will be displayed,and FALSE otherwise.
Output:
None.
Error Conditions:
None.
---------------
display_deformations(label_status)
##########
Description:
This function sets a status value that indicates if deformation results will be displayed.
Input:
LOGICAL label_status This value specifies,when set to TRUE,that deformation results will be displayed.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
display_fa_vectors(label_status)
##########
Description:
This function sets a status value that indicates if functional assignment field vectors will be displayed.
Input:
LOGICAL label_status This value specifies,when set to TRUE,that functional assignment field vectors will be displayed.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
display_result_vectors(label_status)
##########
Description:
This function sets a status value that indicates if result vectors will be displayed.
Input:
LOGICAL label_status This value specifies,when set to TRUE,that functional assignment field vectors will be displayed.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
hex_elem_color(color_value)
##########
Description:
This function is used to set the color value used for the display of hexagonal finite element model entities and labels.
Input:
INTEGER color_value This value specifies the color used. See the remarks below for more information.
Output:
None.
Error Conditions:
None.
---------------
hex_elem_label(label_status)
##########
Description:
This function sets a status value that indicates if hexagonal finite element model entity labels will be displayed.
Input:
LOGICAL label_status This value specifies,when set to TRUE,that hexagonal finite element model entity labels will be displayed,and FALSE otherwise.
Output:
None.
Error Conditions:
None.
---------------
mpc_color(color_value)
##########
Description:
This function is used to set the color value used for the display of multi-point constraint labels.
Input:
INTEGER color_value This value specifies the color used. See the remarks below for more information.
Output:
None.
Error Conditions:
None.
---------------
mpc_label(label_status)
##########
Description:
This function sets a status value that indicates if multi-point constraint labels will be displayed.
Input:
LOGICAL label_status This value specifies,when set to TRUE,that multiple point constraint labels will be displayed,and FALSE otherwise.
Output:
None.
Error Conditions:
None.
---------------
node_color(color_value)
##########
Description:
This function is used to set the color value used for the display of finite element model nodes and node labels.
Input:
INTEGER color_value This value specifies the color used. See the remarks below for more information.
Output:
None.
Error Conditions:
None.
---------------
node_label(label_status)
##########
Description:
This function sets a status value that indicates if node labels will be displayed.
Input:
LOGICAL label_status This value specifies,when set to TRUE,that node labels will be displayed,and FALSE otherwise.
Output:
None.
Error Conditions:
None.
---------------
point_elem_color(color_value)
##########
Description:
This function is used to set the color value used for the display of point elements and point element labels.
Input:
INTEGER color_value This value specifies the color used. See the remarks below for more information.
Output:
None.
Error Conditions:
None.
---------------
point_color(color_value)
##########
Description:
This function is used to set the color value used for the display of geometric points and geometric point labels.
Input:
INTEGER color_value This value specifies the color used. See the remarks below for more information.
Output:
None.
Error Conditions:
None.
---------------
point_elem_label(label_status)
##########
Description:
This function sets a status value that indicates if point element labels will be displayed.
Input:
LOGICAL label_status This value specifies,when set to TRUE,that point element labels will be displayed,and FALSE otherwise.
Output:
None.
Error Conditions:
None.
---------------
point_label(label_status)
##########
Description:
This function sets a status value that indicates if point labels will be displayed.
Input:
LOGICAL label_status This value specifies,when set to TRUE,that point labels will be displayed,and FALSE otherwise.
Output:
None.
Error Conditions:
None.
---------------
pref_graphics_set(label_control,display_method,primary_color,secondary_color,error_color,extend,fit_view,center,hardware_rendering,anti_alias,three_d_results,result_title,symmetric_light,primary_marker,secondary_marker,marker_color,marker_size,point_marker_size,node_marker_size,results_format,significant_figures)
##########
Description:
This function sets the graphics preference parameters.
Input:
LOGICAL label_control(20)This value specifies which values from the inputs for this function will be set in the database. The offsets in the array correspond to the arguments listed below. Setting the value at an offset in this array to TRUE will cause the corresponding input argument value to be set in the database.
INTEGER display_method This value specifies the display method setting.
INTEGER primary_color This value specifies the primary color.
INTEGER secondary_color This value specifies the secondary color.
INTEGER error_color This value specifies the error color.
LOGICAL extend This value specifies,when set to TRUE,that the autoextend setting is turned on.
LOGICAL fit_view This value specifies,when set to TRUE,that the fit view setting is turned on.
LOGICAL center This value specifies,when set to TRUE,that the autocenter setting is turned on.
LOGICAL hardware_rendering This value specifies,when set to TRUE,the use of hardware for display rendering.
LOGICAL anti_alias This value specifies,when set to TRUE,that the anti alias setting is turned on.
LOGICAL three_d_vector This value specifies,when set to TRUE,that 3-D vectors be displayed.
LOGICAL result_title This value specifies,when set to TRUE,that result titles be displayed.
LOGICAL symmetric_light This value specifies,when set to TRUE,that the symmetric light flag setting is turned on.
INTEGER primary_marker This value specifies the primary marker setting.
INTEGER secondary_marker This value specifies the secondary marker setting.
INTEGER marker_color This value specifies the color used to display markers.
INTEGER marker_size This value specifies the marker size.
INTEGER point_marker_size This value specifies the point marker size.
INTEGER node_marker_size This value specifies the node marker size.
INTEGER results_format This value specifies the format used to display labels.
INTEGER significant_figures This value specifies the number of significant figures used to display results.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
quad_elem_color(color_value)
##########
Description:
This function is used to set the color value used for the display of quadrilateral finite element model entities and entity labels.
Input:
INTEGER color_value This value specifies the color used. See the remarks below for more information.
Output:
None.
Error Conditions:
None.
---------------
quad_elem_label(label_status)
##########
Description:
This function sets a status value that indicates if quadrilateral finite element model entity labels will be displayed.
Input:
LOGICAL label_status This value specifies,when set to TRUE,that quadrilateral element labels will be displayed,and FALSE otherwise.
Output:
None.
Error Conditions:
None.
---------------
renderstyle(render_style)
##########
Description:
This function sets the style used to render the display of entities in a viewport.
Input:
STRING style[31] This value specifies the render style used. If this value is set to nothing or ““,the default “Wireframe” render style will be used. See the remarks below for more information.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
shade_color(color_value)
##########
Description:
This function is used to set the color value used for the display of shadows.
Input:
INTEGER color_value This value specifies the color used. See the remarks below for more information.
Output:
None.
Error Conditions:
None.
---------------
solid_color(color_value)
##########
Description:
This function is used to set the color value used for the display of solid objects.
Input:
INTEGER color_value This value specifies the color used. See the remarks below for more information.
Output:
None.
Error Conditions:
None.
---------------
solid_label(label_status)
##########
Description:
This function sets a status value that indicates if solid labels will be displayed.
Input:
LOGICAL label_status This value specifies,when set to TRUE,that solid labels will be displayed,and FALSE otherwise.
Output:
None.
Error Conditions:
None.
---------------
surface_color(color_value)
##########
Description:
This function is used to set the color value used for the display of surfaces and surface labels.
Input:
INTEGER color_value This value specifies the color used. See the remarks below for more information.
Output:
None.
Error Conditions:
None.
---------------
surface_label(label_status)
##########
Description:
This function sets a status value that indicates if surface labels will be displayed.
Input:
LOGICAL label_status This value specifies,when set to TRUE,that surface labels will be displayed,and FALSE otherwise.
Output:
None.
Error Conditions:
None.
---------------
tet_elem_color(color_value)
##########
Description:
This function is used to set the color value used for the display of tetrahedral finite element model entities and labels.
Input:
INTEGER color_value This value specifies the color used. See the remarks below for more information.
Output:
None.
Error Conditions:
None.
---------------
tet_elem_label(label_status)
##########
Description:
This function sets a status value that indicates if tetrahedral finite element model entity labels will be displayed.
Input:
LOGICAL label_status This value specifies,when set to TRUE,that tetrahedral mesh labels will be displayed,and FALSE otherwise.
Output:
None.
Error Conditions:
None.
---------------
tri_elem_color(color_value)
##########
Description:
This function is used to set the color value used for the display of triangular finite element model entities and labels.
Input:
INTEGER color_value This value specifies the color used. See the remarks below for more information.
Output:
None.
Error Conditions:
None.
---------------
tri_elem_label(label_status)
##########
Description:
This function sets a status value that indicates if triangular finite element model entity labels will be displayed.
Input:
LOGICAL label_status This value specifies,when set to TRUE,that triangular mesh labels will be displayed,and FALSE otherwise.
Output:
None.
Error Conditions:
None.
---------------
trim_surface_color(color_value)
##########
Description:
This function is used to set the color value used for the display of trimmed surfaces and trimmed surface labels.
Input:
INTEGER color_value This value specifies the color used. See the remarks below for more information.
Output:
None.
Error Conditions:
None.
---------------
trim_surface_label(label_status)
##########
Description:
This function sets a status value that indicates if trimmed surface labels will be displayed.
Input:
LOGICAL label_status This value specifies,when set to TRUE,that trimmed surface labels will be displayed,and FALSE otherwise.
Output:
None.
Error Conditions:
None.
---------------
wedge_elem_color(color_value)
##########
Description:
This function is used to set the color value used for the display of wedge shaped finite element model entities and labels.
Input:
INTEGER color_value This value specifies the color used. See the remarks below for more information.
Output:
None.
Error Conditions:
None.
---------------
wedge_elem_label(label_status)
##########
Description:
This function sets a status value that indicates if wedge shaped finite element model entity labels will be displayed.
Input:
LOGICAL label_status This value specifies,when set to TRUE,that wedge element labels will be displayed,and FALSE otherwise.
Output:
None.
Error Conditions:
None.
---------------
pref_geo_get_v1(default_coord_frame,geometric_tolerance,working_plane)
##########
Description:
This function will get geometry preference settings.
Input:
None.
Output:
INTEGER default_coord_frame This value returns the identifier value for the default coordinate frame.
REAL geometric_tolerance This value returns the relative geometric tolerance.
INTEGER working_plane This value returns the value defining the default working plane relative to the default coordinate frame.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
pref_geo_get(default_coord_frame,geometric_tolerance)
##########
Description:
This function will get geometry preference settings.
Input:
None.
Output:
INTEGER default_coord_frame This value returns the identifier value for the default coordinate frame.
REAL geometric_tolerance This value returns the relative geometric tolerance.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
pref_geo_set(default_coord_frame,geometric_tolerance)
##########
Description:
This function will set geometry preference settings.
Input:
INTEGER default_coord_frame This value specifies the identifier value for the default coordinate frame.
REAL geometric_tolerance This value specifies the relative geometric tolerance.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
pref_geo_set_v1(default_coord_frame,geometric_tolerance,working_plane)
##########
Description:
This function will set geometry preference settings.
Input:
INTEGER default_coord_frame This value specifies the identifier value for the default coordinate frame.
REAL geometric_tolerance This value specifies the relative geometric tolerance.
INTEGER working_plane This value specifies the value defining the default working plane relative to the default coordinate frame. Valid values are: 1 = to place the working plane along the X,Y axis,2 = the Y,Z axis,and 3 = the X,Z axis.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
pref_global_get(confirm,warning_message,global_tolerance)
##########
Description:
This function will get global preference settings.
Input:
None.
Output:
LOGICAL confirm This value returns nothing as it is currently not used.
INTEGER warning_message This value returns the status for the warning message option. This value will be set to: 1 = no warnings,2 = ring the bell,and 3 = present a warning in a popup form.
REAL global_tolerance This value returns the global model tolerance.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
pref_global_set(confirm,warning_message,global_tolerance)
##########
Description:
This function will set global preference settings.
Input:
LOGICAL confirm This value specifies nothing as it is currently not used.
INTEGER warning_message This value specifies the status for the warning message option. This value will be set to: 1 = no warnings,2 = ring the bell,and 3 = present a warning in a popup form.
REAL global_tolerance This value specifies the global model tolerance.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
None.
---------------
pref_env_get_integer(preference_name,integer_value)
##########
Description:
This function will get the value of the named integer preference.
Input:
STRING preference_name[] This value specifies the name of the preference from which the output value integer_value will be retrieved This name can be of any length or value.
Output:
INTEGER integer_value This value returns the integer setting for the preference.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
12002001 The environment preference was not found.
12002002 The environment preference is of the wrong datatype.
---------------
pref_env_get_logical(preference_name,logical_value)
##########
Description:
This function will get the value of the named logical preference.
Input:
STRING preference_name[] This value specifies the name of the preference from which the output value logical_value will be retrieved. This name can be of any length.
Output:
LOGICAL logical_value This value returns the logical setting for the preference.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
12002001 The environment preference was not found.
12002002 The environment preference is of the wrong datatype.
---------------
pref_env_get_real(preference_name,real_value)
##########
Description:
This function will get the value of the named real preference.
Input:
STRING preference_name[] This value specifies the name of the preference from which the output value real_value will be retrieved. This name can be of any length.
Output:
REAL real_value This value returns the real setting for the preference.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
12002001 The environment preference was not found.
12002002 The environment preference is of the wrong datatype.
---------------
pref_env_get_string(preference_name,string_value)
##########
Description:
This function will get the value of the named string preference.
Input:
STRING preference_name[] This value specifies the name of the preference from which the output value string_value will be retrieved. This name can be of any length.
Output:
STRING string_value[] This value returns the string setting for the preference. Because this is not a VIRTUAL string and no storage space is allocated for this string by this function,it must be created big enough to contain the entire named string preference value or an error will occur.
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
12002001 The environment preference was not found.
12002002 The environment preference is of the wrong datatype.
12002003 The string buffer is too small for the preference.
---------------
pref_env_set_integer(preference_name,integer_value)
##########
Description:
This function will set the value of the named integer preference.
Input:
STRING preference_name[] This value specifies the name of the preference under which the input value integer_value will be stored. This name can be of any length.
INTEGER integer_value This value specifies the integer setting for the named preference.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
12002002 The environment preference is of the wrong datatype.
12002004 An error occurred creating an environment preference.
---------------
pref_env_set_logical(preference_name,logical_value)
##########
Description:
This function will set the value of the named logical preference.
Input:
STRING preference_name[] This value specifies the name of the preference under which the input value logical_value will be stored. This name can be of any length.
LOGICAL logical_value This value specifies the logical setting for the named preference.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
12002002 The environment preference is of the wrong datatype.
12002004 An error occurred creating an environment preference.
---------------
pref_env_set_real(preference_name,real_value)
##########
Description:
This function will set the value of the named real preference.
Input:
STRING preference_name[] This value specifies the name of the preference under which the input value real_value will be stored. This name can be of any length.
REAL real_value This value specifies the real setting for the named preference.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
12002002 The environment preference is of the wrong datatype.
12002004 An error occurred creating an environment preference.
---------------
pref_env_set_string(preference_name,string_value)
##########
Description:
This function will set the value of the named real preference.
Input:
STRING preference_name[] This value specifies the name of the preference under which the input value string_value will be stored. This name can be of any length.
STRING string_value[] This value specifies the string setting for the named preference and can be of any length.
Output:
INTEGER <Return Value> This function returns a value of 0 when executed successfully and a non zero value to indicate a change in status or an error.
Error Conditions:
12002002 The environment preference is of the wrong datatype.
12002004 An error occurred creating an environment preference.
---------------
uil_pref_analysis.set_analysis_pref(analysis_code,analysis_type,input_file_suffix,output_file_suffix)
##########
Description:
This function changes the analysis preferences of the current database.
Input:
STRING analysis_code[31] This value specifies the analysis code or the name of the solver to be used. See the remarks below for more information.
STRING analysis_type[31] This value specifies the type of analysis provided by the solver. See the remarks below for more information.
STRING input_file_suffix[4] This value specifies the default suffix for the chosen analysis code’s input files. See the remarks below for more information.
STRING output_file_suffix[4] This value specifies the default suffix for output files from the chosen analysis code. See the remarks below for more information.
Output:
None.
Error Conditions:
None.
---------------
